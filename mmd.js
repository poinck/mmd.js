// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  asmConsts: [],
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) return 0; }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;








//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module['AsciiToString'] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module['stringToAscii'] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the a given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module['UTF8ArrayToString'] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8, ptr);
}
Module['UTF8ToString'] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module['stringToUTF8Array'] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module['stringToUTF8'] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module['lengthBytesUTF8'] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF16'] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module['lengthBytesUTF16'] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF32'] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module['lengthBytesUTF32'] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 268435456;


var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}



// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);

HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===

Runtime.asmConsts = [];





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 50400;
  /* global initializers */ __ATINIT__.push();
  

/* memory initializer */ allocate([92,109,111,100,101,60,97,108,108,62,10,0,0,0,0,0,92,109,111,100,101,42,10,0,92,105,116,101,109,60,43,45,62,32,0,0,0,0,0,0,92,98,101,103,105,110,123,102,114,97,109,101,125,0,0,0,91,102,114,97,103,105,108,101,93,0,0,0,0,0,0,0,10,10,92,101,110,100,123,102,114,97,109,101,125,10,10,0,92,109,111,100,101,60,97,114,116,105,99,108,101,62,123,10,0,0,0,0,0,0,0,0,10,10,125,10,10,0,0,0,92,102,114,97,109,101,116,105,116,108,101,123,0,0,0,0,92,112,97,114,116,123,66,105,98,108,105,111,103,114,97,112,104,121,125,10,92,98,101,103,105,110,123,102,114,97,109,101,125,91,97,108,108,111,119,102,114,97,109,101,98,114,101,97,107,115,93,10,92,102,114,97,109,101,116,105,116,108,101,123,66,105,98,108,105,111,103,114,97,112,104,121,125,10,92,100,101,102,92,110,101,119,98,108,111,99,107,123,125,10,92,98,101,103,105,110,123,116,104,101,98,105,98,108,105,111,103,114,97,112,104,121,125,123,48,125,10,0,0,0,0,0,0,0,92,101,110,100,123,116,104,101,98,105,98,108,105,111,103,114,97,112,104,121,125,10,92,101,110,100,123,102,114,97,109,101,125,10,10,0,0,0,0,0,60,105,110,115,62,37,115,60,47,105,110,115,62,0,0,0,60,109,97,114,107,62,37,115,60,47,109,97,114,107,62,0,60,100,101,108,62,37,115,60,47,100,101,108,62,0,0,0,101,114,114,111,114,32,114,101,97,108,108,111,99,97,116,105,110,103,32,109,101,109,111,114,121,10,0,0,0,0,0,0,60,47,104,101,97,100,62,10,60,98,111,100,121,62,10,0,60,97,98,98,114,62,0,0,60,97,98,98,114,32,116,105,116,108,101,61,34,0,0,0,60,47,97,98,98,114,62,0,60,112,62,0,0,0,0,0,32,60,97,32,104,114,101,102,61,34,35,102,110,114,101,102,58,37,100,34,32,116,105,116,108,101,61,34,114,101,116,117,114,110,32,116,111,32,97,114,116,105,99,108,101,34,32,99,108,97,115,115,61,34,114,101,118,101,114,115,101,102,111,111,116,110,111,116,101,34,62,38,35,49,54,48,59,38,35,56,54,49,55,59,60,47,97,62,0,0,0,0,0,0,0,0,60,47,112,62,0,0,0,0,60,104,114,32,47,62,0,0,60,112,114,101,62,60,99,111,100,101,32,99,108,97,115,115,61,34,37,115,34,62,0,0,60,112,114,101,62,60,99,111,100,101,62,0,0,0,0,0,60,47,99,111,100,101,62,60,47,112,114,101,62,0,0,0,60,117,108,62,0,0,0,0,60,47,117,108,62,0,0,0,60,111,108,62,0,0,0,0,60,47,111,108,62,0,0,0,60,108,105,62,0,0,0,0,60,47,108,105,62,0,0,0,60,47,104,101,97,100,62,10,60,98,111,100,121,62,10,10,0,0,0,0,0,0,0,0,9,60,116,105,116,108,101,62,0,0,0,0,0,0,0,0,60,47,116,105,116,108,101,62,10,0,0,0,0,0,0,0,9,60,108,105,110,107,32,116,121,112,101,61,34,116,101,120,116,47,99,115,115,34,32,114,101,108,61,34,115,116,121,108,101,115,104,101,101,116,34,32,104,114,101,102,61,34,0,0,34,47,62,10,0,0,0,0,9,60,109,101,116,97,32,110,97,109,101,61,34,37,115,34,32,99,111,110,116,101,110,116,61,34,0,0,0,0,0,0,60,104,37,49,100,62,0,0,60,104,37,100,32,105,100,61,34,37,115,34,62,0,0,0,60,47,104,37,49,100,62,0,60,98,114,47,62,10,0,0,60,115,112,97,110,32,99,108,97,115,115,61,34,109,97,116,104,34,62,92,91,37,115,92,93,60,47,115,112,97,110,62,0,0,0,0,0,0,0,0,60,115,112,97,110,32,99,108,97,115,115,61,34,109,97,116,104,34,62,92,40,37,115,92,41,60,47,115,112,97,110,62,0,0,0,0,0,0,0,0,60,115,112,97,110,32,99,108,97,115,115,61,34,109,97,116,104,34,62,37,115,92,93,60,47,115,112,97,110,62,0,0,60,115,112,97,110,32,99,108,97,115,115,61,34,109,97,116,104,34,62,37,115,92,41,60,47,115,112,97,110,62,0,0,60,115,116,114,111,110,103,62,0,0,0,0,0,0,0,0,60,47,115,116,114,111,110,103,62,0,0,0,0,0,0,0,60,101,109,62,0,0,0,0,60,47,101,109,62,0,0,0,60,97,0,0,0,0,0,0,32,104,114,101,102,61,34,0,32,116,105,116,108,101,61,34,0,0,0,0,0,0,0,0,60,47,97,62,0,0,0,0,73,110,118,97,108,105,100,32,73,77,65,71,69,66,76,79,67,75,32,111,114,32,73,77,65,71,69,32,45,45,32,40,110,117,108,108,41,32,108,105,110,107,95,100,97,116,97,10,0,0,0,0,0,0,0,0,60,102,105,103,117,114,101,62,10,0,0,0,0,0,0,0,60,105,109,103,0,0,0,0,32,115,114,99,61,34,37,115,34,0,0,0,0,0,0,0,32,97,108,116,61,34,0,0,32,97,108,116,61,34,37,115,34,0,0,0,0,0,0,0,32,105,100,61,34,37,115,34,0,0,0,0,0,0,0,0,32,115,116,121,108,101,61,34,0,0,0,0,0,0,0,0,104,101,105,103,104,116,58,37,115,59,0,0,0,0,0,0,119,105,100,116,104,58,37,115,59,0,0,0,0,0,0,0,32,47,62,0,0,0,0,0,10,60,102,105,103,99,97,112,116,105,111,110,62,0,0,0,60,47,102,105,103,99,97,112,116,105,111,110,62,0,0,0,10,60,47,102,105,103,117,114,101,62,0,0,0,0,0,0,60,97,32,104,114,101,102,61,34,35,102,110,58,37,100,34,32,105,100,61,34,102,110,114,101,102,58,37,100,34,32,116,105,116,108,101,61,34,115,101,101,32,102,111,111,116,110,111,116,101,34,32,99,108,97,115,115,61,34,102,111,111,116,110,111,116,101,32,103,108,111,115,115,97,114,121,34,62,91,37,100,93,60,47,97,62,0,0,60,97,32,104,114,101,102,61,34,35,102,110,58,37,100,34,32,116,105,116,108,101,61,34,115,101,101,32,102,111,111,116,110,111,116,101,34,32,99,108,97,115,115,61,34,102,111,111,116,110,111,116,101,32,103,108,111,115,115,97,114,121,34,62,91,37,100,93,60,47,97,62,0,0,0,0,0,0,0,0,60,97,32,104,114,101,102,61,34,35,102,110,58,37,100,34,32,105,100,61,34,102,110,114,101,102,58,37,100,34,32,116,105,116,108,101,61,34,115,101,101,32,102,111,111,116,110,111,116,101,34,32,99,108,97,115,115,61,34,102,111,111,116,110,111,116,101,34,62,91,37,100,93,60,47,97,62,0,0,0,60,97,32,104,114,101,102,61,34,35,102,110,58,37,100,34,32,116,105,116,108,101,61,34,115,101,101,32,102,111,111,116,110,111,116,101,34,32,99,108,97,115,115,61,34,102,111,111,116,110,111,116,101,34,62,91,37,100,93,60,47,97,62,0,101,120,116,101,114,110,97,108,32,99,105,116,101,10,0,0,60,115,112,97,110,32,99,108,97,115,115,61,34,110,111,116,99,105,116,101,100,34,32,105,100,61,34,37,115,34,47,62,0,0,0,0,0,0,0,0,60,115,112,97,110,32,99,108,97,115,115,61,34,101,120,116,101,114,110,97,108,99,105,116,97,116,105,111,110,34,62,0,60,115,112,97,110,32,99,108,97,115,115,61,34,110,111,116,99,105,116,101,100,34,32,105,100,61,34,37,100,34,62,0,60,97,32,99,108,97,115,115,61,34,99,105,116,97,116,105,111,110,34,32,104,114,101,102,61,34,35,102,110,58,37,100,34,32,116,105,116,108,101,61,34,74,117,109,112,32,116,111,32,99,105,116,97,116,105,111,110,34,62,91,0,0,0,0,60,115,112,97,110,32,99,108,97,115,115,61,34,108,111,99,97,116,111,114,34,62,0,0,60,47,115,112,97,110,62,44,32,37,100,93,0,0,0,0,37,100,93,0,0,0,0,0,60,115,112,97,110,32,99,108,97,115,115,61,34,99,105,116,101,107,101,121,34,32,115,116,121,108,101,61,34,100,105,115,112,108,97,121,58,110,111,110,101,34,62,37,115,60,47,115,112,97,110,62,0,0,0,0,60,115,112,97,110,32,99,108,97,115,115,61,34,101,120,116,101,114,110,97,108,99,105,116,97,116,105,111,110,34,62,91,0,0,0,0,0,0,0,0,35,37,115,93,60,47,115,112,97,110,62,0,0,0,0,0,60,115,112,97,110,32,99,108,97,115,115,61,34,103,108,111,115,115,97,114,121,32,110,97,109,101,34,62,0,0,0,0,60,115,112,97,110,32,99,108,97,115,115,61,34,103,108,111,115,115,97,114,121,32,115,111,114,116,34,32,115,116,121,108,101,61,34,100,105,115,112,108,97,121,58,110,111,110,101,34,62,0,0,0,0,0,0,0,60,99,111,100,101,62,0,0,60,47,99,111,100,101,62,0,60,98,108,111,99,107,113,117,111,116,101,62,10,0,0,0,60,47,98,108,111,99,107,113,117,111,116,101,62,0,0,0,60,100,108,62,10,0,0,0,60,47,100,108,62,0,0,0,60,100,116,62,0,0,0,0,60,47,100,116,62,10,0,0,60,100,100,62,0,0,0,0,60,47,100,100,62,10,0,0,60,116,97,98,108,101,62,10,0,0,0,0,0,0,0,0,60,47,116,97,98,108,101,62,10,0,0,0,0,0,0,0,60,99,97,112,116,105,111,110,32,105,100,61,34,37,115,34,62,0,0,0,0,0,0,0,60,47,99,97,112,116,105,111,110,62,10,0,0,0,0,0,10,60,116,104,101,97,100,62,10,0,0,0,0,0,0,0,60,47,116,104,101,97,100,62,10,0,0,0,0,0,0,0,10,60,116,98,111,100,121,62,10,0,0,0,0,0,0,0,60,47,116,98,111,100,121,62,10,0,0,0,0,0,0,0,60,116,114,62,10,0,0,0,60,47,116,114,62,10,0,0,9,60,116,37,99,32,115,116,121,108,101,61,34,116,101,120,116,45,97,108,105,103,110,58,114,105,103,104,116,59,34,0,9,60,116,37,99,32,115,116,121,108,101,61,34,116,101,120,116,45,97,108,105,103,110,58,99,101,110,116,101,114,59,34,0,0,0,0,0,0,0,0,9,60,116,37,99,32,115,116,121,108,101,61,34,116,101,120,116,45,97,108,105,103,110,58,108,101,102,116,59,34,0,0,32,99,111,108,115,112,97,110,61,34,37,100,34,0,0,0,60,47,116,37,99,62,10,0,60,115,117,112,62,37,115,60,47,115,117,112,62,0,0,0,60,115,117,98,62,37,115,60,47,115,117,98,62,0,0,0,60,100,105,118,32,99,108,97,115,115,61,34,84,79,67,34,62,10,0,0,0,0,0,0,10,60,47,100,105,118,62,0,112,114,105,110,116,95,104,116,109,108,95,110,111,100,101,32,101,110,99,111,117,110,116,101,114,101,100,32,117,110,107,110,111,119,110,32,110,111,100,101,32,107,101,121,32,61,32,37,100,10,0,0,0,0,0,0,60,100,105,118,32,99,108,97,115,115,61,34,102,111,111,116,110,111,116,101,115,34,62,10,60,104,114,32,47,62,10,60,111,108,62,0,0,0,0,0,60,108,105,32,105,100,61,34,102,110,58,37,100,34,32,99,108,97,115,115,61,34,99,105,116,97,116,105,111,110,34,62,60,115,112,97,110,32,99,108,97,115,115,61,34,99,105,116,101,107,101,121,34,32,115,116,121,108,101,61,34,100,105,115,112,108,97,121,58,110,111,110,101,34,62,37,115,60,47,115,112,97,110,62,0,0,0,0,60,108,105,32,105,100,61,34,102,110,58,37,100,34,62,10,0,0,0,0,0,0,0,0,60,47,111,108,62,10,60,47,100,105,118,62,10,0,0,0,38,35,56,50,49,49,59,0,38,35,56,50,49,50,59,0,38,35,56,50,51,48,59,0,38,35,37,100,59,0,0,0,38,35,120,37,120,59,0,0,60,99,111,108,103,114,111,117,112,62,10,0,0,0,0,0,60,99,111,108,32,115,116,121,108,101,61,34,116,101,120,116,45,97,108,105,103,110,58,114,105,103,104,116,59,34,47,62,10,0,0,0,0,0,0,0,60,99,111,108,32,115,116,121,108,101,61,34,116,101,120,116,45,97,108,105,103,110,58,114,105,103,104,116,59,34,32,99,108,97,115,115,61,34,101,120,116,101,110,100,101,100,34,47,62,10,0,0,0,0,0,0,60,99,111,108,32,115,116,121,108,101,61,34,116,101,120,116,45,97,108,105,103,110,58,99,101,110,116,101,114,59,34,47,62,10,0,0,0,0,0,0,60,99,111,108,32,115,116,121,108,101,61,34,116,101,120,116,45,97,108,105,103,110,58,99,101,110,116,101,114,59,34,32,99,108,97,115,115,61,34,101,120,116,101,110,100,101,100,34,47,62,10,0,0,0,0,0,60,99,111,108,32,115,116,121,108,101,61,34,116,101,120,116,45,97,108,105,103,110,58,108,101,102,116,59,34,32,99,108,97,115,115,61,34,101,120,116,101,110,100,101,100,34,47,62,10,0,0,0,0,0,0,0,60,99,111,108,32,115,116,121,108,101,61,34,116,101,120,116,45,97,108,105,103,110,58,108,101,102,116,59,34,47,62,10,0,0,0,0,0,0,0,0,60,47,99,111,108,103,114,111,117,112,62,10,0,0,0,0,92,110,101,119,97,99,114,111,123,37,115,37,115,125,91,0,93,123,0,0,0,0,0,0,92,97,99,123,37,115,37,115,125,0,0,0,0,0,0,0,92,98,101,103,105,110,123,99,101,110,116,101,114,125,92,114,117,108,101,123,51,105,110,125,123,48,46,52,112,116,125,92,101,110,100,123,99,101,110,116,101,114,125,10,0,0,0,0,92,98,101,103,105,110,123,108,115,116,108,105,115,116,105,110,103,125,91,108,97,110,103,117,97,103,101,61,37,115,93,10,37,115,92,101,110,100,123,108,115,116,108,105,115,116,105,110,103,125,0,0,0,0,0,0,92,98,101,103,105,110,123,118,101,114,98,97,116,105,109,125,10,37,115,92,101,110,100,123,118,101,114,98,97,116,105,109,125,0,0,0,0,0,0,0,92,98,101,103,105,110,123,105,116,101,109,105,122,101,125,0,92,101,110,100,123,105,116,101,109,105,122,101,125,0,0,0,92,98,101,103,105,110,123,101,110,117,109,101,114,97,116,101,125,0,0,0,0,0,0,0,92,101,110,100,123,101,110,117,109,101,114,97,116,101,125,0,92,105,116,101,109,32,0,0,108,97,116,101,120,104,101,97,100,101,114,108,101,118,101,108,0,0,0,0,0,0,0,0,92,100,101,102,92,109,121,116,105,116,108,101,123,0,0,0,108,97,116,101,120,116,105,116,108,101,0,0,0,0,0,0,92,100,101,102,92,109,121,116,105,116,108,101,123,37,115,125,10,0,0,0,0,0,0,0,92,100,101,102,92,109,121,97,117,116,104,111,114,123,0,0,108,97,116,101,120,97,117,116,104,111,114,0,0,0,0,0,92,100,101,102,92,109,121,97,117,116,104,111,114,123,37,115,125,10,0,0,0,0,0,0,92,100,101,102,92,109,121,100,97,116,101,123,0,0,0,0,92,100,101,102,92,109,121,99,111,112,121,114,105,103,104,116,123,0,0,0,0,0,0,0,92,105,110,112,117,116,123,37,115,125,10,0,0,0,0,0,92,100,101,102,92,98,105,98,108,105,111,99,111,109,109,97,110,100,123,92,98,105,98,108,105,111,103,114,97,112,104,121,123,37,115,125,125,10,0,0,92,100,101,102,92,0,0,0,123,0,0,0,0,0,0,0,10,92,101,110,100,123,100,111,99,117,109,101,110,116,125,0,92,112,97,114,116,123,0,0,92,99,104,97,112,116,101,114,123,0,0,0,0,0,0,0,92,115,101,99,116,105,111,110,123,0,0,0,0,0,0,0,92,115,117,98,115,101,99,116,105,111,110,123,0,0,0,0,92,115,117,98,115,117,98,115,101,99,116,105,111,110,123,0,92,112,97,114,97,103,114,97,112,104,123,0,0,0,0,0,92,115,117,98,112,97,114,97,103,114,97,112,104,123,0,0,125,10,92,108,97,98,101,108,123,37,115,125,0,0,0,0,92,92,10,0,0,0,0,0,37,115,92,93,0,0,0,0,36,37,115,36,0,0,0,0,92,116,101,120,116,98,102,123,0,0,0,0,0,0,0,0,92,101,109,112,104,123,0,0,92,97,117,116,111,114,101,102,123,37,115,125,0,0,0,0,92,104,114,101,102,123,37,115,125,123,125,0,0,0,0,0,92,104,114,101,102,123,37,115,125,123,37,115,125,0,0,0,92,104,114,101,102,123,37,115,125,123,0,0,0,0,0,0,92,102,111,111,116,110,111,116,101,123,92,104,114,101,102,123,0,0,0,0,0,0,0,0,125,123,0,0,0,0,0,0,92,98,101,103,105,110,123,102,105,103,117,114,101,125,91,104,116,98,112,93,10,92,99,101,110,116,101,114,105,110,103,10,0,0,0,0,0,0,0,0,92,105,110,99,108,117,100,101,103,114,97,112,104,105,99,115,91,0,0,0,0,0,0,0,107,101,101,112,97,115,112,101,99,116,114,97,116,105,111,44,119,105,100,116,104,61,92,116,101,120,116,119,105,100,116,104,44,104,101,105,103,104,116,61,48,46,55,53,92,116,101,120,116,104,101,105,103,104,116,0,107,101,101,112,97,115,112,101,99,116,114,97,116,105,111,44,0,0,0,0,0,0,0,0,119,105,100,116,104,61,37,46,52,102,92,116,101,120,116,119,105,100,116,104,44,0,0,0,119,105,100,116,104,61,37,115,44,0,0,0,0,0,0,0,119,105,100,116,104,61,92,116,101,120,116,119,105,100,116,104,44,0,0,0,0,0,0,0,104,101,105,103,104,116,61,37,46,52,102,92,116,101,120,116,104,101,105,103,104,116,0,0,104,101,105,103,104,116,61,37,115,0,0,0,0,0,0,0,104,101,105,103,104,116,61,48,46,55,53,92,116,101,120,116,104,101,105,103,104,116,0,0,93,123,37,115,125,0,0,0,10,92,99,97,112,116,105,111,110,123,0,0,0,0,0,0,10,92,108,97,98,101,108,123,37,115,125,0,0,0,0,0,10,92,101,110,100,123,102,105,103,117,114,101,125,0,0,0,92,110,101,119,103,108,111,115,115,97,114,121,101,110,116,114,121,123,37,115,125,123,0,0,125,125,92,103,108,115,97,100,100,123,37,115,125,0,0,0,92,102,111,111,116,110,111,116,101,123,0,0,0,0,0,0,126,92,110,111,99,105,116,101,123,37,115,125,0,0,0,0,126,92,99,105,116,101,112,91,0,0,0,0,0,0,0,0,126,92,99,105,116,101,112,123,37,115,125,0,0,0,0,0,115,111,114,116,61,123,0,0,125,44,0,0,0,0,0,0,110,97,109,101,61,123,0,0,125,44,100,101,115,99,114,105,112,116,105,111,110,61,123,0,92,116,101,120,116,116,116,123,0,0,0,0,0,0,0,0,92,98,101,103,105,110,123,113,117,111,116,101,125,0,0,0,92,101,110,100,123,113,117,111,116,101,125,0,0,0,0,0,92,105,116,101,109,91,0,0,92,98,101,103,105,110,123,116,97,98,108,101,125,91,104,116,98,112,93,10,92,98,101,103,105,110,123,109,105,110,105,112,97,103,101,125,123,92,108,105,110,101,119,105,100,116,104,125,10,92,115,101,116,108,101,110,103,116,104,123,92,116,121,109,97,120,125,123,48,46,53,92,108,105,110,101,119,105,100,116,104,125,10,92,99,101,110,116,101,114,105,110,103,10,92,115,109,97,108,108,10,0,0,0,10,92,101,110,100,123,116,97,98,117,108,97,114,121,125,10,92,101,110,100,123,109,105,110,105,112,97,103,101,125,10,92,101,110,100,123,116,97,98,108,101,125,0,0,0,0,0,0,92,98,101,103,105,110,123,116,97,98,117,108,97,114,121,125,123,92,116,101,120,116,119,105,100,116,104,125,123,64,123,125,37,115,64,123,125,125,32,92,116,111,112,114,117,108,101,10,0,0,0,0,0,0,0,0,92,99,97,112,116,105,111,110,123,0,0,0,0,0,0,0,125,10,92,108,97,98,101,108,123,37,115,125,10,0,0,0,92,109,105,100,114,117,108,101,10,0,0,0,0,0,0,0,10,92,109,105,100,114,117,108,101,10,0,0,0,0,0,0,10,92,98,111,116,116,111,109,114,117,108,101,10,0,0,0,92,109,117,108,116,105,99,111,108,117,109,110,123,37,100,125,123,37,99,125,123,0,0,0,92,116,101,120,116,115,117,112,101,114,115,99,114,105,112,116,123,37,115,125,0,0,0,0,92,116,101,120,116,115,117,98,115,99,114,105,112,116,123,37,115,125,0,0,0,0,0,0,112,114,105,110,116,95,108,97,116,101,120,95,110,111,100,101,32,101,110,99,111,117,110,116,101,114,101,100,32,117,110,107,110,111,119,110,32,110,111,100,101,32,107,101,121,32,61,32,37,100,10,0,0,0,0,0,92,98,101,103,105,110,123,116,104,101,98,105,98,108,105,111,103,114,97,112,104,121,125,123,48,125,0,0,0,0,0,0,92,98,105,98,105,116,101,109,123,37,115,125,10,0,0,0,92,101,110,100,123,116,104,101,98,105,98,108,105,111,103,114,97,112,104,121,125,0,0,0,120,104,116,109,108,104,101,97,100,101,114,108,101,118,101,108,0,0,0,0,0,0,0,0,123,92,108,100,111,116,115,125,0,0,0,0,0,0,0,0,92,37,99,0,0,0,0,0,92,94,123,125,0,0,0,0,92,116,101,120,116,98,97,99,107,115,108,97,115,104,123,125,0,0,0,0,0,0,0,0,92,101,110,115,117,114,101,109,97,116,104,123,92,115,105,109,125,0,0,0,0,0,0,0,92,116,101,120,116,98,97,114,123,125,0,0,0,0,0,0,36,60,36,0,0,0,0,0,36,62,36,0,0,0,0,0,47,0,0,0,0,0,0,0,92,115,108,97,115,104,32,0,45,123,125,0,0,0,0,0,112,120,0,0,0,0,0,0,112,116,0,0,0,0,0,0,10,92,101,110,100,95,100,101,101,112,101,114,0,0,0,0,10,92,98,101,103,105,110,95,108,97,121,111,117,116,32,83,101,112,97,114,97,116,111,114,0,0,0,0,0,0,0,0,10,92,101,110,100,95,108,97,121,111,117,116,0,0,0,0,10,85,110,97,110,116,105,99,105,112,97,116,101,100,32,76,105,115,116,32,73,116,101,109,32,70,111,114,109,97,116,0,0,0,0,0,0,0,0,0,10,92,98,101,103,105,110,95,108,97,121,111,117,116,32,80,97,114,116,10,0,0,0,0,10,92,98,101,103,105,110,95,108,97,121,111,117,116,32,83,101,99,116,105,111,110,10,0,10,92,98,101,103,105,110,95,108,97,121,111,117,116,32,70,114,97,103,105,108,101,70,114,97,109,101,0,0,0,0,0,10,92,98,101,103,105,110,95,108,97,121,111,117,116,32,70,114,97,109,101,0,0,0,0,10,92,98,101,103,105,110,95,105,110,115,101,116,32,65,114,103,117,109,101,110,116,32,52,0,0,0,0,0,0,0,0,10,92,98,101,103,105,110,95,105,110,115,101,116,32,70,108,101,120,32,65,114,116,105,99,108,101,77,111,100,101,0,0,10,115,116,97,116,117,115,32,111,112,101,110,10,10,0,0,10,92,98,101,103,105,110,95,108,97,121,111,117,116,32,66,101,103,105,110,70,114,97,109,101,10,71,108,111,115,115,97,114,121,10,0,0,0,0,0,10,92,98,101,103,105,110,95,108,97,121,111,117,116,32,69,110,100,70,114,97,109,101,0,10,92,98,101,103,105,110,95,108,97,121,111,117,116,32,66,101,103,105,110,70,114,97,109,101,10,82,101,102,101,114,101,110,99,101,115,10,0,0,0,80,97,114,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,104,97,112,116,101,114,0,83,101,99,116,105,111,110,0,83,117,98,115,101,99,116,105,111,110,0,0,0,0,0,0,83,117,98,115,117,98,115,101,99,116,105,111,110,0,0,0,80,97,114,97,103,114,97,112,104,0,0,0,0,0,0,0,83,117,98,112,97,114,97,103,114,97,112,104,0,0,0,0,0,0,0,0,0,0,0,0,108,121,120,104,101,97,100,105,110,103,115,0,0,0,0,0,70,114,97,109,101,0,0,0,44,0,0,0,0,0,0,0,110,117,109,98,101,114,104,101,97,100,105,110,103,115,0,0,121,101,115,0,0,0,0,0,110,111,0,0,0,0,0,0,35,76,121,88,32,70,105,108,101,32,99,114,101,97,116,101,100,32,98,121,32,109,117,108,116,105,109,97,114,107,100,111,119,110,10,0,0,0,0,0,92,108,121,120,102,111,114,109,97,116,32,52,49,51,10,0,92,98,101,103,105,110,95,100,111,99,117,109,101,110,116,10,0,0,0,0,0,0,0,0,92,98,101,103,105,110,95,104,101,97,100,101,114,10,0,0,109,101,109,111,105,114,0,0,92,116,101,120,116,99,108,97,115,115,32,0,0,0,0,0,92,98,101,103,105,110,95,112,114,101,97,109,98,108,101,10,0,0,0,0,0,0,0,0,92,117,115,101,112,97,99,107,97,103,101,123,108,105,115,116,105,110,103,115,125,10,0,0,92,117,115,101,112,97,99,107,97,103,101,123,110,97,116,98,105,98,125,10,0,0,0,0,92,117,115,101,112,97,99,107,97,103,101,123,110,111,109,101,110,99,108,125,10,0,0,0,92,117,115,101,112,97,99,107,97,103,101,123,98,111,111,107,116,97,98,115,125,10,0,0,92,117,115,101,112,97,99,107,97,103,101,123,114,101,102,115,116,121,108,101,125,10,0,0,92,117,115,101,112,97,99,107,97,103,101,123,118,97,114,105,111,114,101,102,125,10,0,0,112,97,99,107,97,103,101,115,0,0,0,0,0,0,0,0,92,117,115,101,112,97,99,107,97,103,101,123,37,115,125,10,0,0,0,0,0,0,0,0,116,104,101,109,101,0,0,0,92,117,115,101,116,104,101,109,101,123,37,115,125,10,0,0,92,117,115,101,116,104,101,109,101,123,119,97,114,115,97,119,125,10,0,0,0,0,0,0,92,115,101,116,98,101,97,109,101,114,99,111,118,101,114,101,100,123,116,114,97,110,115,112,97,114,101,110,116,125,10,0,108,97,116,101,120,32,105,110,112,117,116,0,0,0,0,0,109,109,100,45,110,97,116,98,105,98,45,112,108,97,105,110,0,0,0,0,0,0,0,0,92,98,105,98,112,117,110,99,116,123,91,125,123,93,125,123,59,125,123,110,125,123,125,123,44,125,10,0,0,0,0,0,92,98,105,98,112,117,110,99,116,123,40,125,123,41,125,123,44,125,123,97,125,123,44,125,123,44,125,10,0,0,0,0,92,110,101,119,114,101,102,123,37,115,125,123,114,101,102,99,109,100,61,123,37,115,32,92,114,101,102,123,35,49,125,32,92,118,112,97,103,101,114,101,102,123,35,49,125,125,125,10,0,0,0,0,0,0,0,0,92,110,101,119,114,101,102,123,116,97,98,125,123,114,101,102,99,109,100,61,123,84,97,98,108,101,32,92,114,101,102,123,35,49,125,32,92,118,112,97,103,101,114,101,102,123,35,49,125,125,125,10,0,0,0,0,92,110,101,119,114,101,102,123,102,105,103,125,123,114,101,102,99,109,100,61,123,70,105,103,117,114,101,32,92,114,101,102,123,35,49,125,32,92,118,112,97,103,101,114,101,102,123,35,49,125,125,125,10,0,0,0,92,110,101,119,114,101,102,123,37,115,125,123,114,101,102,99,109,100,61,123,96,96,92,110,97,109,101,114,101,102,123,35,49,125,39,39,32,92,118,112,97,103,101,114,101,102,123,35,49,125,125,125,10,0,0,0,92,101,110,100,95,112,114,101,97,109,98,108,101,10,0,0,92,111,112,116,105,111,110,115,32,114,101,102,112,97,103,101,0,0,0,0,0,0,0,0,99,108,101,97,110,112,100,102,0,0,0,0,0,0,0,0,44,104,105,100,101,108,105,110,107,115,0,0,0,0,0,0,99,108,97,115,115,32,111,112,116,105,111,110,115,0,0,0,44,0,0,0,0,0,0,0,92,98,101,103,105,110,95,109,111,100,117,108,101,115,10,0,109,111,100,117,108,101,115,0,37,115,10,0,0,0,0,0,92,101,110,100,95,109,111,100,117,108,101,115,10,0,0,0,92,98,105,98,116,101,120,95,99,111,109,109,97,110,100,32,100,101,102,97,117,108,116,10,0,0,0,0,0,0,0,0,92,99,105,116,101,95,101,110,103,105,110,101,32,110,97,116,98,105,98,95,97,117,116,104,111,114,121,101,97,114,10,0,92,101,110,100,95,104,101,97,100,101,114,10,0,0,0,0,92,98,101,103,105,110,95,98,111,100,121,10,0,0,0,0,10,92,98,101,103,105,110,95,108,97,121,111,117,116,32,84,105,116,108,101,10,0,0,0,10,92,101,110,100,95,108,97,121,111,117,116,10,0,0,0,115,117,98,116,105,116,108,101,0,0,0,0,0,0,0,0,10,92,98,101,103,105,110,95,108,97,121,111,117,116,32,83,117,98,116,105,116,108,101,10,0,0,0,0,0,0,0,0,10,92,98,101,103,105,110,95,108,97,121,111,117,116,32,65,117,116,104,111,114,10,0,0,10,92,98,101,103,105,110,95,108,97,121,111,117,116,32,73,110,115,116,105,116,117,116,101,10,0,0,0,0,0,0,0,100,97,116,101,0,0,0,0,10,92,98,101,103,105,110,95,108,97,121,111,117,116,32,68,97,116,101,10,0,0,0,0,97,98,115,116,114,97,99,116,0,0,0,0,0,0,0,0,10,92,98,101,103,105,110,95,108,97,121,111,117,116,32,65,98,115,116,114,97,99,116,10,0,0,0,0,0,0,0,0,98,105,98,116,101,120,0,0,10,92,98,101,103,105,110,95,108,97,121,111,117,116,32,83,116,97,110,100,97,114,100,10,0,0,0,0,0,0,0,0,10,92,98,101,103,105,110,95,105,110,115,101,116,32,67,111,109,109,97,110,100,73,110,115,101,116,32,98,105,98,116,101,120,0,0,0,0,0,0,0,10,76,97,116,101,120,67,111,109,109,97,110,100,32,98,105,98,116,101,120,0,0,0,0,10,98,105,98,102,105,108,101,115,32,34,37,115,34,0,0,10,111,112,116,105,111,110,115,32,34,112,108,97,105,110,110,97,116,34,0,0,0,0,0,10,10,92,101,110,100,95,105,110,115,101,116,0,0,0,0,10,10,92,101,110,100,95,108,97,121,111,117,116,10,0,0,10,92,101,110,100,95,98,111,100,121,10,0,0,0,0,0,92,101,110,100,95,100,111,99,117,109,101,110,116,10,0,0,32,40,37,115,41,0,0,0,10,92,98,101,103,105,110,95,105,110,115,101,116,32,67,111,109,109,97,110,100,73,110,115,101,116,32,110,111,109,101,110,99,108,97,116,117,114,101,0,10,76,97,116,101,120,67,111,109,109,97,110,100,32,110,111,109,101,110,99,108,97,116,117,114,101,0,0,0,0,0,0,10,115,121,109,98,111,108,32,34,37,115,34,0,0,0,0,10,100,101,115,99,114,105,112,116,105,111,110,32,34,0,0,10,92,101,110,100,95,105,110,115,101,116,10,0,0,0,0,37,115,32,0,0,0,0,0,10,32,0,0,0,0,0,0,10,10,92,98,101,103,105,110,95,100,101,101,112,101,114,10,0,0,0,0,0,0,0,0,10,92,101,110,100,95,100,101,101,112,101,114,10,0,0,0,10,92,98,101,103,105,110,95,108,97,121,111,117,116,32,81,117,111,116,101,10,0,0,0,10,92,98,101,103,105,110,95,108,97,121,111,117,116,32,69,110,117,109,101,114,97,116,101,10,0,0,0,0,0,0,0,10,92,98,101,103,105,110,95,105,110,115,101,116,32,65,114,103,117,109,101,110,116,32,49,0,0,0,0,0,0,0,0,10,115,116,97,116,117,115,32,111,112,101,110,10,0,0,0,10,92,98,101,103,105,110,95,108,97,121,111,117,116,32,80,108,97,105,110,32,76,97,121,111,117,116,0,0,0,0,0,10,60,43,45,62,0,0,0,10,92,98,101,103,105,110,95,108,97,121,111,117,116,32,73,116,101,109,105,122,101,10,0,10,43,45,0,0,0,0,0,10,92,98,101,103,105,110,95,105,110,115,101,116,32,70,111,111,116,0,0,0,0,0,0,10,115,116,97,116,117,115,32,99,111,108,108,97,112,115,101,100,10,0,0,0,0,0,0,34,10,0,0,0,0,0,0,10,92,101,110,100,95,105,110,115,101,116,0,0,0,0,0,10,92,98,101,103,105,110,95,105,110,115,101,116,32,67,111,109,109,97,110,100,73,110,115,101,116,32,108,105,110,101,10,0,0,0,0,0,0,0,0,76,97,116,101,120,67,111,109,109,97,110,100,32,114,117,108,101,10,0,0,0,0,0,0,111,102,102,115,101,116,32,34,48,46,53,101,120,34,10,0,119,105,100,116,104,32,34,49,48,48,99,111,108,37,34,10,0,0,0,0,0,0,0,0,104,101,105,103,104,116,32,34,49,112,116,34,10,0,0,0,10,92,98,101,103,105,110,95,108,97,121,111,117,116,32,80,108,97,105,110,32,76,97,121,111,117,116,10,92,98,101,103,105,110,95,105,110,115,101,116,32,69,82,84,10,115,116,97,116,117,115,32,99,111,108,108,97,112,115,101,100,10,10,92,98,101,103,105,110,95,108,97,121,111,117,116,32,80,108,97,105,110,32,76,97,121,111,117,116,10,10,0,0,0,0,0,10,10,92,101,110,100,95,108,97,121,111,117,116,10,10,92,101,110,100,95,105,110,115,101,116,10,92,101,110,100,95,108,97,121,111,117,116,10,0,0,10,92,98,101,103,105,110,95,100,101,101,112,101,114,10,0,92,98,101,103,105,110,95,108,97,121,111,117,116,32,83,116,97,110,100,97,114,100,10,0,92,98,101,103,105,110,95,105,110,115,101,116,32,108,105,115,116,105,110,103,115,10,0,0,108,115,116,112,97,114,97,109,115,32,34,98,97,115,105,99,115,116,121,108,101,61,123,92,102,111,111,116,110,111,116,101,115,105,122,101,92,116,116,102,97,109,105,108,121,125,44,108,97,110,103,117,97,103,101,61,37,115,34,10,0,0,0,0,108,115,116,112,97,114,97,109,115,32,34,98,97,115,105,99,115,116,121,108,101,61,123,92,102,111,111,116,110,111,116,101,115,105,122,101,92,116,116,102,97,109,105,108,121,125,34,10,0,0,0,0,0,0,0,0,105,110,108,105,110,101,32,102,97,108,115,101,10,0,0,0,115,116,97,116,117,115,32,99,111,108,108,97,112,115,101,100,10,0,0,0,0,0,0,0,92,101,110,100,95,108,97,121,111,117,116,10,0,0,0,0,10,92,98,101,103,105,110,95,108,97,121,111,117,116,32,73,116,101,109,105,122,101,10,92,101,110,100,95,108,97,121,111,117,116,10,0,0,0,0,0,10,92,98,101,103,105,110,95,108,97,121,111,117,116,32,0,42,10,0,0,0,0,0,0,10,92,98,101,103,105,110,95,105,110,115,101,116,32,67,111,109,109,97,110,100,73,110,115,101,116,32,108,97,98,101,108,10,0,0,0,0,0,0,0,76,97,116,101,120,67,111,109,109,97,110,100,32,108,97,98,101,108,10,0,0,0,0,0,110,97,109,101,32,34,37,115,34,0,0,0,0,0,0,0,10,92,98,101,103,105,110,95,105,110,115,101,116,32,78,101,119,108,105,110,101,32,110,101,119,108,105,110,101,10,92,101,110,100,95,105,110,115,101,116,10,0,0,0,0,0,0,0,92,98,101,103,105,110,0,0,10,92,98,101,103,105,110,95,105,110,115,101,116,32,70,111,114,109,117,108,97,32,37,115,10,92,101,110,100,95,105,110,115,101,116,10,0,0,0,0,92,98,101,103,105,110,95,105,110,115,101,116,32,70,111,114,109,117,108,97,32,10,92,91,0,0,0,0,0,0,0,0,10,37,115,10,92,93,10,92,101,110,100,95,105,110,115,101,116,10,0,0,0,0,0,0,10,92,98,101,103,105,110,95,105,110,115,101,116,32,70,111,114,109,117,108,97,32,36,37,115,36,10,92,101,110,100,95,105,110,115,101,116,10,0,0,10,92,115,101,114,105,101,115,32,98,111,108,100,10,0,0,10,92,115,101,114,105,101,115,32,100,101,102,97,117,108,116,10,0,0,0,0,0,0,0,10,92,101,109,112,104,32,111,110,10,0,0,0,0,0,0,10,92,101,109,112,104,32,100,101,102,97,117,108,116,10,0,37,115,32,40,0,0,0,0,10,92,98,101,103,105,110,95,105,110,115,101,116,32,67,111,109,109,97,110,100,73,110,115,101,116,32,114,101,102,0,0,10,76,97,116,101,120,67,111,109,109,97,110,100,32,102,111,114,109,97,116,116,101,100,0,10,114,101,102,101,114,101,110,99,101,32,34,37,115,34,10,0,0,0,0,0,0,0,0,10,92,98,101,103,105,110,95,105,110,115,101,116,32,67,111,109,109,97,110,100,73,110,115,101,116,32,104,114,101,102,10,76,97,116,101,120,67,111,109,109,97,110,100,32,104,114,101,102,10,116,97,114,103,101,116,32,34,37,115,34,10,0,0,34,10,10,92,101,110,100,95,105,110,115,101,116,10,0,0,41,0,0,0,0,0,0,0,10,10,92,101,110,100,95,105,110,115,101,116,10,0,0,0,10,116,121,112,101,32,34,109,97,105,108,116,111,58,34,0,110,97,109,101,32,34,0,0,10,92,98,101,103,105,110,95,105,110,115,101,116,32,70,111,111,116,10,115,116,97,116,117,115,32,99,111,108,108,97,112,115,101,100,10,10,92,98,101,103,105,110,95,108,97,121,111,117,116,32,80,108,97,105,110,32,76,97,121,111,117,116,10,0,0,0,0,0,0,0,0,10,92,98,101,103,105,110,95,105,110,115,101,116,32,67,111,109,109,97,110,100,73,110,115,101,116,32,104,114,101,102,10,76,97,116,101,120,67,111,109,109,97,110,100,32,104,114,101,102,10,0,0,0,0,0,0,10,110,97,109,101,32,34,37,115,34,0,0,0,0,0,0,10,116,97,114,103,101,116,32,34,37,115,34,0,0,0,0,10,92,101,110,100,95,108,97,121,111,117,116,10,10,92,101,110,100,95,105,110,115,101,116,10,0,0,0,0,0,0,0,32,37,115,61,34,37,115,34,0,0,0,0,0,0,0,0,10,92,98,101,103,105,110,95,108,97,121,111,117,116,32,83,116,97,110,100,97,114,100,0,10,92,98,101,103,105,110,95,105,110,115,101,116,32,70,108,111,97,116,32,102,105,103,117,114,101,0,0,0,0,0,0,10,119,105,100,101,32,102,97,108,115,101,0,0,0,0,0,10,115,105,100,101,119,97,121,115,32,102,97,108,115,101,0,10,115,116,97,116,117,115,32,99,111,108,108,97,112,115,101,100,0,0,0,0,0,0,0,10,10,92,98,101,103,105,110,95,108,97,121,111,117,116,32,80,108,97,105,110,32,76,97,121,111,117,116,0,0,0,0,10,92,98,101,103,105,110,95,105,110,115,101,116,32,71,114,97,112,104,105,99,115,0,0,10,9,32,102,105,108,101,110,97,109,101,32,37,115,10,0,9,108,121,120,115,99,97,108,101,32,37,115,10,0,0,0,9,115,99,97,108,101,32,37,115,10,0,0,0,0,0,0,9,119,105,100,116,104,32,37,115,10,0,0,0,0,0,0,9,104,101,105,103,104,116,32,37,115,10,0,0,0,0,0,10,92,98,101,103,105,110,95,105,110,115,101,116,32,67,97,112,116,105,111,110,0,0,0,10,10,92,98,101,103,105,110,95,108,97,121,111,117,116,32,80,108,97,105,110,32,76,97,121,111,117,116,10,0,0,0,10,10,92,98,101,103,105,110,95,105,110,115,101,116,32,67,111,109,109,97,110,100,73,110,115,101,116,32,108,97,98,101,108,0,0,0,0,0,0,0,10,76,97,116,101,120,67,111,109,109,97,110,100,32,108,97,98,101,108,10,0,0,0,0,10,110,97,109,101,32,34,102,105,103,58,37,115,34,0,0,10,115,116,97,116,117,115,32,99,111,108,108,97,112,115,101,100,10,10,0,0,0,0,0,10,92,98,101,103,105,110,95,105,110,115,101,116,32,67,111,109,109,97,110,100,73,110,115,101,116,32,99,105,116,97,116,105,111,110,0,0,0,0,0,10,76,97,116,101,120,67,111,109,109,97,110,100,32,110,111,99,105,116,101,0,0,0,0,10,107,101,121,32,34,37,115,34,0,0,0,0,0,0,0,60,70,65,75,69,32,115,112,97,110,32,99,108,97,115,115,61,34,101,120,116,101,114,110,97,108,99,105,116,97,116,105,111,110,34,62,0,0,0,0,60,47,115,112,97,110,62,0,10,76,97,116,101,120,67,111,109,109,97,110,100,32,99,105,116,101,0,0,0,0,0,0,10,97,102,116,101,114,32,34,0,0,0,0,0,0,0,0,34,10,107,101,121,32,34,37,115,34,0,0,0,0,0,0,59,0,0,0,0,0,0,0,32,92,99,105,116,101,116,91,0,0,0,0,0,0,0,0,32,92,99,105,116,101,116,123,37,115,125,0,0,0,0,0,10,112,114,101,102,105,120,32,34,0,0,0,0,0,0,0,10,115,121,109,98,111,108,32,34,0,0,0,0,0,0,0,10,92,102,97,109,105,108,121,32,116,121,112,101,119,114,105,116,101,114,10,0,0,0,0,10,92,102,97,109,105,108,121,32,100,101,102,97,117,108,116,10,0,0,0,0,0,0,0,82,65,87,58,0,0,0,0,38,97,112,111,115,59,0,0,39,0,0,0,0,0,0,0,38,0,0,0,0,0,0,0,10,92,98,101,103,105,110,95,105,110,115,101,116,32,69,82,84,10,115,116,97,116,117,115,32,99,111,108,108,97,112,115,101,100,10,10,92,98,101,103,105,110,95,108,97,121,111,117,116,32,80,108,97,105,110,32,76,97,121,111,117,116,10,10,0,0,0,0,0,0,0,0,10,10,92,101,110,100,95,108,97,121,111,117,116,10,92,101,110,100,95,105,110,115,101,116,10,0,0,0,0,0,0,0,10,92,98,101,103,105,110,95,108,97,121,111,117,116,32,76,97,98,101,108,105,110,103,0,10,92,108,97,98,101,108,119,105,100,116,104,115,116,114,105,110,103,32,48,48,46,48,48,46,48,48,48,48,10,0,0,10,92,98,101,103,105,110,95,105,110,115,101,116,32,115,112,97,99,101,32,126,10,92,101,110,100,95,105,110,115,101,116,10,0,0,0,0,0,0,0,37,99,0,0,0,0,0,0,10,92,98,101,103,105,110,95,105,110,115,101,116,32,84,97,98,117,108,97,114,0,0,0,10,60,108,121,120,116,97,98,117,108,97,114,32,118,101,114,115,105,111,110,61,34,51,34,32,114,111,119,115,61,34,37,100,34,32,99,111,108,117,109,110,115,61,34,37,100,34,62,0,0,0,0,0,0,0,0,10,60,102,101,97,116,117,114,101,115,32,98,111,111,107,116,97,98,115,61,34,116,114,117,101,34,32,116,97,98,117,108,97,114,118,97,108,105,103,110,109,101,110,116,61,34,109,105,100,100,108,101,34,32,105,115,108,111,110,103,116,97,98,108,101,61,34,116,114,117,101,34,32,108,111,110,103,116,97,98,117,108,97,114,97,108,105,103,110,109,101,110,116,61,34,99,101,110,116,101,114,34,62,0,10,60,47,108,121,120,116,97,98,117,108,97,114,62,0,0,114,105,103,104,116,0,0,0,108,101,102,116,0,0,0,0,10,60,99,111,108,117,109,110,32,97,108,105,103,110,109,101,110,116,61,34,37,115,34,32,118,97,108,105,103,110,109,101,110,116,61,34,116,111,112,34,32,119,105,100,116,104,61,34,37,100,99,111,108,37,37,34,62,0,0,0,0,0,0,0,10,60,114,111,119,32,99,97,112,116,105,111,110,61,34,116,114,117,101,34,62,0,0,0,10,60,99,101,108,108,32,109,117,108,116,105,99,111,108,117,109,110,61,34,49,34,32,97,108,105,103,110,109,101,110,116,61,34,108,101,102,116,34,32,118,97,108,105,103,110,109,101,110,116,61,34,116,111,112,34,32,117,115,101,98,111,120,61,34,110,111,110,101,34,62,0,10,92,98,101,103,105,110,95,105,110,115,101,116,32,84,101,120,116,10,0,0,0,0,0,10,92,98,101,103,105,110,95,105,110,115,101,116,32,67,97,112,116,105,111,110,10,0,0,10,92,98,101,103,105,110,95,108,97,121,111,117,116,32,80,108,97,105,110,32,76,97,121,111,117,116,10,0,0,0,0,10,110,97,109,101,32,34,116,97,98,58,37,115,34], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([10,60,47,99,101,108,108,62,0,0,0,0,0,0,0,0,10,60,99,101,108,108,32,109,117,108,116,105,99,111,108,117,109,110,61,34,50,34,32,97,108,105,103,110,109,101,110,116,61,34,99,101,110,116,101,114,34,32,118,97,108,105,103,110,109,101,110,116,61,34,116,111,112,34,32,116,111,112,108,105,110,101,61,34,116,114,117,101,34,32,98,111,116,116,111,109,108,105,110,101,61,34,116,114,117,101,34,32,108,101,102,116,108,105,110,101,61,34,116,114,117,101,34,32,117,115,101,98,111,120,61,34,110,111,110,101,34,62,0,0,0,0,0,0,10,60,47,114,111,119,62,0,10,60,114,111,119,32,101,110,100,104,101,97,100,61,34,116,114,117,101,34,32,101,110,100,102,105,114,115,116,104,101,97,100,61,34,116,114,117,101,34,62,0,0,0,0,0,0,0,10,60,114,111,119,62,0,0,10,60,99,101,108,108,0,0,32,109,117,108,116,105,99,111,108,117,109,110,61,34,37,100,34,0,0,0,0,0,0,0,32,97,108,105,103,110,109,101,110,116,61,34,37,115,34,0,32,118,97,108,105,103,110,109,101,110,116,61,34,116,111,112,34,0,0,0,0,0,0,0,32,116,111,112,108,105,110,101,61,34,116,114,117,101,34,0,32,98,111,116,116,111,109,108,105,110,101,61,34,116,114,117,101,34,0,0,0,0,0,0,32,117,115,101,98,111,120,61,34,110,111,110,101,34,0,0,10,92,98,101,103,105,110,95,105,110,115,101,116,32,84,101,120,116,0,0,0,0,0,0,10,92,98,101,103,105,110,95,105,110,115,101,116,32,115,99,114,105,112,116,32,115,117,112,101,114,115,99,114,105,112,116,10,10,92,98,101,103,105,110,95,108,97,121,111,117,116,32,80,108,97,105,110,32,76,97,121,111,117,116,10,37,115,10,92,101,110,100,95,108,97,121,111,117,116,10,10,92,101,110,100,95,105,110,115,101,116,10,0,0,0,0,0,0,0,0,10,92,98,101,103,105,110,95,105,110,115,101,116,32,115,99,114,105,112,116,32,115,117,98,115,99,114,105,112,116,10,10,92,98,101,103,105,110,95,108,97,121,111,117,116,32,80,108,97,105,110,32,76,97,121,111,117,116,10,37,115,10,92,101,110,100,95,108,97,121,111,117,116,10,10,92,101,110,100,95,105,110,115,101,116,10,0,0,112,114,105,110,116,95,108,121,120,95,110,111,100,101,32,101,110,99,111,117,110,116,101,114,101,100,32,117,110,107,110,111,119,110,32,110,111,100,101,32,107,101,121,32,61,32,37,100,10,0,0,0,0,0,0,0,10,92,98,101,103,105,110,95,105,110,115,101,116,32,67,111,109,109,97,110,100,73,110,115,101,116,32,110,111,109,101,110,99,108,95,112,114,105,110,116,0,0,0,0,0,0,0,0,10,76,97,116,101,120,67,111,109,109,97,110,100,32,112,114,105,110,116,110,111,109,101,110,99,108,97,116,117,114,101,0,10,115,101,116,95,119,105,100,116,104,32,34,97,117,116,111,34,10,0,0,0,0,0,0,10,92,98,101,103,105,110,95,108,97,121,111,117,116,32,66,105,98,108,105,111,103,114,97,112,104,121,10,0,0,0,0,92,98,101,103,105,110,95,105,110,115,101,116,32,67,111,109,109,97,110,100,73,110,115,101,116,32,98,105,98,105,116,101,109,10,0,0,0,0,0,0,76,97,116,101,120,67,111,109,109,97,110,100,32,98,105,98,105,116,101,109,10,0,0,0,107,101,121,32,34,37,115,34,10,0,0,0,0,0,0,0,108,97,98,101,108,32,34,37,115,34,10,0,0,0,0,0,226,128,154,0,0,0,0,0,226,128,186,0,0,0,0,0,10,92,98,101,103,105,110,95,105,110,115,101,116,32,81,117,111,116,101,115,32,101,108,115,10,92,101,110,100,95,105,110,115,101,116,10,0,0,0,0,96,0,0,0,0,0,0,0,226,128,185,0,0,0,0,0,10,92,98,101,103,105,110,95,105,110,115,101,116,32,81,117,111,116,101,115,32,101,114,115,10,92,101,110,100,95,105,110,115,101,116,10,0,0,0,0,226,128,158,0,0,0,0,0,194,187,0,0,0,0,0,0,194,171,0,0,0,0,0,0,10,92,98,101,103,105,110,95,105,110,115,101,116,32,81,117,111,116,101,115,32,101,108,100,10,92,101,110,100,95,105,110,115,101,116,10,0,0,0,0,10,92,98,101,103,105,110,95,105,110,115,101,116,32,81,117,111,116,101,115,32,101,114,100,10,92,101,110,100,95,105,110,115,101,116,10,0,0,0,0,10,92,83,112,101,99,105,97,108,67,104,97,114,32,92,108,100,111,116,115,123,125,10,0,10,92,98,101,103,105,110,95,108,97,121,111,117,116,32,80,108,97,105,110,32,76,97,121,111,117,116,10,10,0,0,0,10,92,98,97,99,107,115,108,97,115,104,10,10,0,0,0,10,92,101,110,100,95,108,97,121,111,117,116,10,10,92,98,101,103,105,110,95,108,97,121,111,117,116,32,80,108,97,105,110,32,76,97,121,111,117,116,10,10,0,0,0,0,0,0,10,92,98,101,103,105,110,95,108,97,121,111,117,116,80,108,97,105,110,32,76,97,121,111,117,116,10,92,98,101,103,105,110,95,105,110,115,101,116,32,69,82,84,10,115,116,97,116,117,115,32,99,111,108,108,97,112,115,101,100,10,10,92,98,101,103,105,110,95,108,97,121,111,117,116,32,80,108,97,105,110,32,76,97,121,111,117,116,10,10,0,0,0,0,0,0,10,92,98,101,103,105,110,95,105,110,115,101,116,32,81,117,111,116,101,115,32,101,114,100,10,92,101,110,100,95,105,110,115,101,116,10,92,101,110,100,95,108,97,121,111,117,116,10,0,0,0,0,0,0,0,0,116,97,98,0,0,0,0,0,102,105,103,0,0,0,0,0,58,0,0,0,0,0,0,0,92,34,0,0,0,0,0,0,92,98,101,103,105,110,123,97,100,106,117,115,116,119,105,100,116,104,125,123,50,46,53,101,109,125,123,50,46,53,101,109,125,10,92,98,101,103,105,110,123,108,115,116,108,105,115,116,105,110,103,125,91,108,97,110,103,117,97,103,101,61,37,115,93,10,0,0,0,0,0,0,10,92,101,110,100,123,108,115,116,108,105,115,116,105,110,103,125,10,92,101,110,100,123,97,100,106,117,115,116,119,105,100,116,104,125,0,0,0,0,0,92,98,101,103,105,110,123,97,100,106,117,115,116,119,105,100,116,104,125,123,50,46,53,101,109,125,123,50,46,53,101,109,125,10,92,98,101,103,105,110,123,118,101,114,98,97,116,105,109,125,10,10,0,0,0,0,10,92,101,110,100,123,118,101,114,98,97,116,105,109,125,10,92,101,110,100,123,97,100,106,117,115,116,119,105,100,116,104,125,0,0,0,0,0,0,0,92,98,101,103,105,110,123,100,101,115,99,114,105,112,116,105,111,110,125,0,0,0,0,0,92,101,110,100,123,100,101,115,99,114,105,112,116,105,111,110,125,0,0,0,0,0,0,0,60,111,102,102,105,99,101,58,98,111,100,121,62,10,60,111,102,102,105,99,101,58,116,101,120,116,62,10,0,0,0,0,60,116,101,120,116,58,112,0,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,81,117,111,116,97,116,105,111,110,115,34,0,0,0,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,80,114,101,102,111,114,109,97,116,116,101,100,32,84,101,120,116,34,0,0,0,0,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,80,50,34,0,0,0,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,80,49,34,0,0,0,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,70,111,111,116,110,111,116,101,34,0,0,0,0,0,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,83,116,97,110,100,97,114,100,34,0,0,0,0,0,60,47,116,101,120,116,58,112,62,10,0,0,0,0,0,0,60,116,101,120,116,58,112,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,72,111,114,105,122,111,110,116,97,108,95,50,48,95,76,105,110,101,34,47,62,0,0,60,116,101,120,116,58,112,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,83,116,97,110,100,97,114,100,34,62,37,115,60,47,116,101,120,116,58,112,62,0,0,60,116,101,120,116,58,112,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,80,114,101,102,111,114,109,97,116,116,101,100,32,84,101,120,116,34,62,0,0,0,0,60,47,116,101,120,116,58,112,62,0,0,0,0,0,0,0,60,116,101,120,116,58,108,105,115,116,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,76,49,34,62,0,0,0,0,0,0,0,0,60,116,101,120,116,58,108,105,115,116,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,76,50,34,62,0,0,0,0,0,0,0,0,60,47,116,101,120,116,58,108,105,115,116,62,0,0,0,0,60,116,101,120,116,58,108,105,115,116,45,105,116,101,109,62,10,0,0,0,0,0,0,0,60,116,101,120,116,58,112,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,80,49,34,62,0,0,0,60,116,101,120,116,58,112,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,80,50,34,62,0,0,0,60,47,116,101,120,116,58,108,105,115,116,45,105,116,101,109,62,10,0,0,0,0,0,0,60,111,102,102,105,99,101,58,109,101,116,97,62,10,0,0,60,47,111,102,102,105,99,101,58,109,101,116,97,62,10,0,111,100,102,104,101,97,100,101,114,0,0,0,0,0,0,0,60,100,99,58,116,105,116,108,101,62,0,0,0,0,0,0,60,47,100,99,58,116,105,116,108,101,62,10,0,0,0,0,99,115,115,0,0,0,0,0,120,104,116,109,108,104,101,97,100,101,114,0,0,0,0,0,104,116,109,108,104,101,97,100,101,114,0,0,0,0,0,0,109,109,100,102,111,111,116,101,114,0,0,0,0,0,0,0,109,109,100,104,101,97,100,101,114,0,0,0,0,0,0,0,111,100,102,104,101,97,100,101,114,108,101,118,101,108,0,0,104,116,109,108,104,101,97,100,101,114,108,101,118,101,108,0,108,97,116,101,120,105,110,112,117,116,0,0,0,0,0,0,108,97,116,101,120,102,111,111,116,101,114,0,0,0,0,0,60,109,101,116,97,58,107,101,121,119,111,114,100,62,0,0,60,47,109,101,116,97,58,107,101,121,119,111,114,100,62,10,0,0,0,0,0,0,0,0,60,109,101,116,97,58,117,115,101,114,45,100,101,102,105,110,101,100,32,109,101,116,97,58,110,97,109,101,61,34,0,0,60,47,109,101,116,97,58,117,115,101,114,45,100,101,102,105,110,101,100,62,10,0,0,0,60,116,101,120,116,58,104,32,116,101,120,116,58,111,117,116,108,105,110,101,45,108,101,118,101,108,61,34,37,100,34,62,0,0,0,0,0,0,0,0,60,116,101,120,116,58,98,111,111,107,109,97,114,107,32,116,101,120,116,58,110,97,109,101,61,34,37,115,34,47,62,0,60,116,101,120,116,58,98,111,111,107,109,97,114,107,45,101,110,100,32,116,101,120,116,58,110,97,109,101,61,34,37,115,34,47,62,0,0,0,0,0,60,47,116,101,120,116,58,104,62,0,0,0,0,0,0,0,60,116,101,120,116,58,108,105,110,101,45,98,114,101,97,107,47,62,0,0,0,0,0,0,60,116,101,120,116,58,115,112,97,110,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,109,97,116,104,34,62,37,115,60,47,116,101,120,116,58,115,112,97,110,62,0,0,0,0,0,0,0,0,60,116,101,120,116,58,115,112,97,110,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,109,97,116,104,34,62,37,115,92,93,60,47,116,101,120,116,58,115,112,97,110,62,0,0,0,0,0,0,60,116,101,120,116,58,115,112,97,110,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,109,97,116,104,34,62,37,115,92,41,60,47,116,101,120,116,58,115,112,97,110,62,0,0,0,0,0,0,60,116,101,120,116,58,115,112,97,110,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,77,77,68,45,66,111,108,100,34,62,0,0,60,47,116,101,120,116,58,115,112,97,110,62,0,0,0,0,60,116,101,120,116,58,115,112,97,110,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,77,77,68,45,73,116,97,108,105,99,34,62,0,0,0,0,0,0,0,0,60,116,101,120,116,58,97,32,120,108,105,110,107,58,116,121,112,101,61,34,115,105,109,112,108,101,34,0,0,0,0,0,32,120,108,105,110,107,58,104,114,101,102,61,34,0,0,0,32,111,102,102,105,99,101,58,110,97,109,101,61,34,0,0,60,47,116,101,120,116,58,97,62,0,0,0,0,0,0,0,104,101,105,103,104,116,0,0,119,105,100,116,104,0,0,0,60,116,101,120,116,58,112,62,10,0,0,0,0,0,0,0,33,91,0,0,0,0,0,0,93,91,37,115,93,0,0,0,60,100,114,97,119,58,102,114,97,109,101,32,116,101,120,116,58,97,110,99,104,111,114,45,116,121,112,101,61,34,97,115,45,99,104,97,114,34,10,100,114,97,119,58,122,45,105,110,100,101,120,61,34,48,34,32,100,114,97,119,58,115,116,121,108,101,45,110,97,109,101,61,34,102,114,49,34,32,0,0,115,118,103,58,119,105,100,116,104,61,34,37,115,34,10,0,115,118,103,58,119,105,100,116,104,61,34,57,53,37,37,34,10,0,0,0,0,0,0,0,62,10,60,100,114,97,119,58,116,101,120,116,45,98,111,120,62,60,116,101,120,116,58,112,62,60,100,114,97,119,58,102,114,97,109,101,32,116,101,120,116,58,97,110,99,104,111,114,45,116,121,112,101,61,34,97,115,45,99,104,97,114,34,32,100,114,97,119,58,122,45,105,110,100,101,120,61,34,49,34,32,0,0,0,0,0,0,0,115,118,103,58,104,101,105,103,104,116,61,34,37,115,34,10,0,0,0,0,0,0,0,0,62,60,100,114,97,119,58,105,109,97,103,101,32,120,108,105,110,107,58,104,114,101,102,61,34,37,115,34,0,0,0,0,32,120,108,105,110,107,58,116,121,112,101,61,34,115,105,109,112,108,101,34,32,120,108,105,110,107,58,115,104,111,119,61,34,101,109,98,101,100,34,32,120,108,105,110,107,58,97,99,116,117,97,116,101,61,34,111,110,76,111,97,100,34,32,100,114,97,119,58,102,105,108,116,101,114,45,110,97,109,101,61,34,38,108,116,59,65,108,108,32,102,111,114,109,97,116,115,38,103,116,59,34,47,62,10,60,47,100,114,97,119,58,102,114,97,109,101,62,60,47,116,101,120,116,58,112,62,0,0,60,116,101,120,116,58,112,62,70,105,103,117,114,101,32,60,116,101,120,116,58,115,101,113,117,101,110,99,101,32,116,101,120,116,58,110,97,109,101,61,34,70,105,103,117,114,101,34,32,116,101,120,116,58,102,111,114,109,117,108,97,61,34,111,111,111,119,58,70,105,103,117,114,101,43,49,34,32,115,116,121,108,101,58,110,117,109,45,102,111,114,109,97,116,61,34,49,34,62,32,85,112,100,97,116,101,32,70,105,101,108,100,115,32,116,111,32,99,97,108,99,117,108,97,116,101,32,110,117,109,98,101,114,115,60,47,116,101,120,116,58,115,101,113,117,101,110,99,101,62,58,32,0,0,0,0,0,0,0,0,60,47,100,114,97,119,58,116,101,120,116,45,98,111,120,62,60,47,100,114,97,119,58,102,114,97,109,101,62,10,60,47,116,101,120,116,58,112,62,10,0,0,0,0,0,0,0,0,60,47,100,114,97,119,58,116,101,120,116,45,98,111,120,62,60,47,100,114,97,119,58,102,114,97,109,101,62,10,0,0,60,116,101,120,116,58,110,111,116,101,32,116,101,120,116,58,105,100,61,34,34,32,116,101,120,116,58,110,111,116,101,45,99,108,97,115,115,61,34,103,108,111,115,115,97,114,121,34,62,60,116,101,120,116,58,110,111,116,101,45,98,111,100,121,62,10,0,0,0,0,0,0,60,47,116,101,120,116,58,110,111,116,101,45,98,111,100,121,62,10,60,47,116,101,120,116,58,110,111,116,101,62,10,0,60,116,101,120,116,58,110,111,116,101,32,116,101,120,116,58,105,100,61,34,34,32,116,101,120,116,58,110,111,116,101,45,99,108,97,115,115,61,34,102,111,111,116,110,111,116,101,34,62,60,116,101,120,116,58,110,111,116,101,45,98,111,100,121,62,10,0,0,0,0,0,0,60,116,101,120,116,58,110,111,116,101,32,116,101,120,116,58,105,100,61,34,99,105,116,101,37,100,34,32,116,101,120,116,58,110,111,116,101,45,99,108,97,115,115,61,34,101,110,100,110,111,116,101,34,62,60,116,101,120,116,58,110,111,116,101,45,98,111,100,121,62,10,0,60,116,101,120,116,58,115,112,97,110,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,70,111,111,116,110,111,116,101,95,50,48,95,97,110,99,104,111,114,34,62,60,116,101,120,116,58,110,111,116,101,45,114,101,102,32,116,101,120,116,58,110,111,116,101,45,99,108,97,115,115,61,34,101,110,100,110,111,116,101,34,32,116,101,120,116,58,114,101,102,101,114,101,110,99,101,45,102,111,114,109,97,116,61,34,116,101,120,116,34,32,116,101,120,116,58,114,101,102,45,110,97,109,101,61,34,99,105,116,101,37,100,34,62,37,100,60,47,116,101,120,116,58,110,111,116,101,45,114,101,102,62,60,47,116,101,120,116,58,115,112,97,110,62,0,0,0,0,0,60,116,101,120,116,58,112,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,71,108,111,115,115,97,114,121,34,62,0,0,0,0,0,58,60,47,116,101,120,116,58,112,62,10,0,0,0,0,0,60,116,101,120,116,58,115,112,97,110,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,83,111,117,114,99,101,95,50,48,95,84,101,120,116,34,62,0,0,0,0,110,45,62,107,101,121,32,33,61,32,82,65,87,0,0,0,111,100,102,46,99,0,0,0,112,114,105,110,116,95,111,100,102,95,110,111,100,101,0,0,60,116,101,120,116,58,112,62,60,116,101,120,116,58,115,112,97,110,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,77,77,68,45,66,111,108,100,34,62,0,0,60,47,116,101,120,116,58,115,112,97,110,62,60,47,116,101,120,116,58,112,62,10,0,0,60,116,101,120,116,58,112,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,81,117,111,116,97,116,105,111,110,115,34,62,0,0,0,60,116,97,98,108,101,58,116,97,98,108,101,62,10,0,0,60,47,116,97,98,108,101,58,116,97,98,108,101,62,10,0,60,116,101,120,116,58,112,62,60,116,101,120,116,58,98,111,111,107,109,97,114,107,32,116,101,120,116,58,110,97,109,101,61,34,37,115,34,47,62,84,97,98,108,101,32,60,116,101,120,116,58,115,101,113,117,101,110,99,101,32,116,101,120,116,58,110,97,109,101,61,34,84,97,98,108,101,34,32,116,101,120,116,58,102,111,114,109,117,108,97,61,34,111,111,111,119,58,84,97,98,108,101,43,49,34,32,115,116,121,108,101,58,110,117,109,45,102,111,114,109,97,116,61,34,49,34,62,32,85,112,100,97,116,101,32,70,105,101,108,100,115,32,116,111,32,99,97,108,99,117,108,97,116,101,32,110,117,109,98,101,114,115,60,47,116,101,120,116,58,115,101,113,117,101,110,99,101,62,58,0,0,0,0,0,60,116,101,120,116,58,98,111,111,107,109,97,114,107,45,101,110,100,32,116,101,120,116,58,110,97,109,101,61,34,37,115,34,47,62,60,47,116,101,120,116,58,112,62,10,0,0,0,60,116,97,98,108,101,58,116,97,98,108,101,45,99,111,108,117,109,110,47,62,10,0,0,60,116,97,98,108,101,58,116,97,98,108,101,45,114,111,119,62,10,0,0,0,0,0,0,60,47,116,97,98,108,101,58,116,97,98,108,101,45,114,111,119,62,10,0,0,0,0,0,60,116,97,98,108,101,58,116,97,98,108,101,45,99,101,108,108,0,0,0,0,0,0,0,32,116,97,98,108,101,58,110,117,109,98,101,114,45,99,111,108,117,109,110,115,45,115,112,97,110,110,101,100,61,34,37,100,34,0,0,0,0,0,0,62,10,60,116,101,120,116,58,112,0,0,0,0,0,0,0,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,84,97,98,108,101,95,50,48,95,72,101,97,100,105,110,103,34,0,0,0,0,0,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,77,77,68,45,84,97,98,108,101,45,82,105,103,104,116,34,0,0,0,0,0,0,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,77,77,68,45,84,97,98,108,101,45,67,101,110,116,101,114,34,0,0,0,0,0,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,77,77,68,45,84,97,98,108,101,34,0,0,0,0,60,47,116,101,120,116,58,112,62,10,60,47,116,97,98,108,101,58,116,97,98,108,101,45,99,101,108,108,62,10,0,0,83,79,85,82,67,69,66,82,65,78,67,72,10,0,0,0,60,116,101,120,116,58,115,112,97,110,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,77,77,68,45,83,117,112,101,114,115,99,114,105,112,116,34,62,0,0,0,60,116,101,120,116,58,115,112,97,110,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,77,77,68,45,83,117,98,115,99,114,105,112,116,34,62,0,0,0,0,0,112,114,105,110,116,95,111,100,102,95,110,111,100,101,32,101,110,99,111,117,110,116,101,114,101,100,32,117,110,107,110,111,119,110,32,110,111,100,101,32,107,101,121,32,61,32,37,100,10,0,0,0,0,0,0,0,60,116,101,120,116,58,116,97,98,47,62,0,0,0,0,0,60,63,120,109,108,32,118,101,114,115,105,111,110,61,34,49,46,48,34,32,101,110,99,111,100,105,110,103,61,34,85,84,70,45,56,34,63,62,10,60,111,102,102,105,99,101,58,100,111,99,117,109,101,110,116,32,120,109,108,110,115,58,111,102,102,105,99,101,61,34,117,114,110,58,111,97,115,105,115,58,110,97,109,101,115,58,116,99,58,111,112,101,110,100,111,99,117,109,101,110,116,58,120,109,108,110,115,58,111,102,102,105,99,101,58,49,46,48,34,10,32,32,32,32,32,120,109,108,110,115,58,115,116,121,108,101,61,34,117,114,110,58,111,97,115,105,115,58,110,97,109,101,115,58,116,99,58,111,112,101,110,100,111,99,117,109,101,110,116,58,120,109,108,110,115,58,115,116,121,108,101,58,49,46,48,34,10,32,32,32,32,32,120,109,108,110,115,58,116,101,120,116,61,34,117,114,110,58,111,97,115,105,115,58,110,97,109,101,115,58,116,99,58,111,112,101,110,100,111,99,117,109,101,110,116,58,120,109,108,110,115,58,116,101,120,116,58,49,46,48,34,10,32,32,32,32,32,120,109,108,110,115,58,116,97,98,108,101,61,34,117,114,110,58,111,97,115,105,115,58,110,97,109,101,115,58,116,99,58,111,112,101,110,100,111,99,117,109,101,110,116,58,120,109,108,110,115,58,116,97,98,108,101,58,49,46,48,34,10,32,32,32,32,32,120,109,108,110,115,58,100,114,97,119,61,34,117,114,110,58,111,97,115,105,115,58,110,97,109,101,115,58,116,99,58,111,112,101,110,100,111,99,117,109,101,110,116,58,120,109,108,110,115,58,100,114,97,119,105,110,103,58,49,46,48,34,10,32,32,32,32,32,120,109,108,110,115,58,102,111,61,34,117,114,110,58,111,97,115,105,115,58,110,97,109,101,115,58,116,99,58,111,112,101,110,100,111,99,117,109,101,110,116,58,120,109,108,110,115,58,120,115,108,45,102,111,45,99,111,109,112,97,116,105,98,108,101,58,49,46,48,34,10,32,32,32,32,32,120,109,108,110,115,58,120,108,105,110,107,61,34,104,116,116,112,58,47,47,119,119,119,46,119,51,46,111,114,103,47,49,57,57,57,47,120,108,105,110,107,34,10,32,32,32,32,32,120,109,108,110,115,58,100,99,61,34,104,116,116,112,58,47,47,112,117,114,108,46,111,114,103,47,100,99,47,101,108,101,109,101,110,116,115,47,49,46,49,47,34,10,32,32,32,32,32,120,109,108,110,115,58,109,101,116,97,61,34,117,114,110,58,111,97,115,105,115,58,110,97,109,101,115,58,116,99,58,111,112,101,110,100,111,99,117,109,101,110,116,58,120,109,108,110,115,58,109,101,116,97,58,49,46,48,34,10,32,32,32,32,32,120,109,108,110,115,58,110,117,109,98,101,114,61,34,117,114,110,58,111,97,115,105,115,58,110,97,109,101,115,58,116,99,58,111,112,101,110,100,111,99,117,109,101,110,116,58,120,109,108,110,115,58,100,97,116,97,115,116,121,108,101,58,49,46,48,34,10,32,32,32,32,32,120,109,108,110,115,58,115,118,103,61,34,117,114,110,58,111,97,115,105,115,58,110,97,109,101,115,58,116,99,58,111,112,101,110,100,111,99,117,109,101,110,116,58,120,109,108,110,115,58,115,118,103,45,99,111,109,112,97,116,105,98,108,101,58,49,46,48,34,10,32,32,32,32,32,120,109,108,110,115,58,99,104,97,114,116,61,34,117,114,110,58,111,97,115,105,115,58,110,97,109,101,115,58,116,99,58,111,112,101,110,100,111,99,117,109,101,110,116,58,120,109,108,110,115,58,99,104,97,114,116,58,49,46,48,34,10,32,32,32,32,32,120,109,108,110,115,58,100,114,51,100,61,34,117,114,110,58,111,97,115,105,115,58,110,97,109,101,115,58,116,99,58,111,112,101,110,100,111,99,117,109,101,110,116,58,120,109,108,110,115,58,100,114,51,100,58,49,46,48,34,10,32,32,32,32,32,120,109,108,110,115,58,109,97,116,104,61,34,104,116,116,112,58,47,47,119,119,119,46,119,51,46,111,114,103,47,49,57,57,56,47,77,97,116,104,47,77,97,116,104,77,76,34,10,32,32,32,32,32,120,109,108,110,115,58,102,111,114,109,61,34,117,114,110,58,111,97,115,105,115,58,110,97,109,101,115,58,116,99,58,111,112,101,110,100,111,99,117,109,101,110,116,58,120,109,108,110,115,58,102,111,114,109,58,49,46,48,34,10,32,32,32,32,32,120,109,108,110,115,58,115,99,114,105,112,116,61,34,117,114,110,58,111,97,115,105,115,58,110,97,109,101,115,58,116,99,58,111,112,101,110,100,111,99,117,109,101,110,116,58,120,109,108,110,115,58,115,99,114,105,112,116,58,49,46,48,34,10,32,32,32,32,32,120,109,108,110,115,58,99,111,110,102,105,103,61,34,117,114,110,58,111,97,115,105,115,58,110,97,109,101,115,58,116,99,58,111,112,101,110,100,111,99,117,109,101,110,116,58,120,109,108,110,115,58,99,111,110,102,105,103,58,49,46,48,34,10,32,32,32,32,32,120,109,108,110,115,58,111,111,111,61,34,104,116,116,112,58,47,47,111,112,101,110,111,102,102,105,99,101,46,111,114,103,47,50,48,48,52,47,111,102,102,105,99,101,34,10,32,32,32,32,32,120,109,108,110,115,58,111,111,111,119,61,34,104,116,116,112,58,47,47,111,112,101,110,111,102,102,105,99,101,46,111,114,103,47,50,48,48,52,47,119,114,105,116,101,114,34,10,32,32,32,32,32,120,109,108,110,115,58,111,111,111,99,61,34,104,116,116,112,58,47,47,111,112,101,110,111,102,102,105,99,101,46,111,114,103,47,50,48,48,52,47,99,97,108,99,34,10,32,32,32,32,32,120,109,108,110,115,58,100,111,109,61,34,104,116,116,112,58,47,47,119,119,119,46,119,51,46,111,114,103,47,50,48,48,49,47,120,109,108,45,101,118,101,110,116,115,34,10,32,32,32,32,32,120,109,108,110,115,58,120,102,111,114,109,115,61,34,104,116,116,112,58,47,47,119,119,119,46,119,51,46,111,114,103,47,50,48,48,50,47,120,102,111,114,109,115,34,10,32,32,32,32,32,120,109,108,110,115,58,120,115,100,61,34,104,116,116,112,58,47,47,119,119,119,46,119,51,46,111,114,103,47,50,48,48,49,47,88,77,76,83,99,104,101,109,97,34,10,32,32,32,32,32,120,109,108,110,115,58,120,115,105,61,34,104,116,116,112,58,47,47,119,119,119,46,119,51,46,111,114,103,47,50,48,48,49,47,88,77,76,83,99,104,101,109,97,45,105,110,115,116,97,110,99,101,34,10,32,32,32,32,32,120,109,108,110,115,58,114,112,116,61,34,104,116,116,112,58,47,47,111,112,101,110,111,102,102,105,99,101,46,111,114,103,47,50,48,48,53,47,114,101,112,111,114,116,34,10,32,32,32,32,32,120,109,108,110,115,58,111,102,61,34,117,114,110,58,111,97,115,105,115,58,110,97,109,101,115,58,116,99,58,111,112,101,110,100,111,99,117,109,101,110,116,58,120,109,108,110,115,58,111,102,58,49,46,50,34,10,32,32,32,32,32,120,109,108,110,115,58,120,104,116,109,108,61,34,104,116,116,112,58,47,47,119,119,119,46,119,51,46,111,114,103,47,49,57,57,57,47,120,104,116,109,108,34,10,32,32,32,32,32,120,109,108,110,115,58,103,114,100,100,108,61,34,104,116,116,112,58,47,47,119,119,119,46,119,51,46,111,114,103,47,50,48,48,51,47,103,47,100,97,116,97,45,118,105,101,119,35,34,10,32,32,32,32,32,120,109,108,110,115,58,116,97,98,108,101,111,111,111,61,34,104,116,116,112,58,47,47,111,112,101,110,111,102,102,105,99,101,46,111,114,103,47,50,48,48,57,47,116,97,98,108,101,34,10,32,32,32,32,32,120,109,108,110,115,58,102,105,101,108,100,61,34,117,114,110,58,111,112,101,110,111,102,102,105,99,101,58,110,97,109,101,115,58,101,120,112,101,114,105,109,101,110,116,97,108,58,111,111,111,45,109,115,45,105,110,116,101,114,111,112,58,120,109,108,110,115,58,102,105,101,108,100,58,49,46,48,34,10,32,32,32,32,32,120,109,108,110,115,58,102,111,114,109,120,61,34,117,114,110,58,111,112,101,110,111,102,102,105,99,101,58,110,97,109,101,115,58,101,120,112,101,114,105,109,101,110,116,97,108,58,111,111,120,109,108,45,111,100,102,45,105,110,116,101,114,111,112,58,120,109,108,110,115,58,102,111,114,109,58,49,46,48,34,10,32,32,32,32,32,120,109,108,110,115,58,99,115,115,51,116,61,34,104,116,116,112,58,47,47,119,119,119,46,119,51,46,111,114,103,47,84,82,47,99,115,115,51,45,116,101,120,116,47,34,10,32,32,32,32,32,111,102,102,105,99,101,58,118,101,114,115,105,111,110,61,34,49,46,50,34,10,32,32,32,32,32,103,114,100,100,108,58,116,114,97,110,115,102,111,114,109,97,116,105,111,110,61,34,104,116,116,112,58,47,47,100,111,99,115,46,111,97,115,105,115,45,111,112,101,110,46,111,114,103,47,111,102,102,105,99,101,47,49,46,50,47,120,115,108,116,47,111,100,102,50,114,100,102,46,120,115,108,34,10,32,32,32,32,32,111,102,102,105,99,101,58,109,105,109,101,116,121,112,101,61,34,97,112,112,108,105,99,97,116,105,111,110,47,118,110,100,46,111,97,115,105,115,46,111,112,101,110,100,111,99,117,109,101,110,116,46,116,101,120,116,34,62,10,0,0,0,0,0,0,60,111,102,102,105,99,101,58,102,111,110,116,45,102,97,99,101,45,100,101,99,108,115,62,10,32,32,32,60,115,116,121,108,101,58,102,111,110,116,45,102,97,99,101,32,115,116,121,108,101,58,110,97,109,101,61,34,67,111,117,114,105,101,114,32,78,101,119,34,32,115,118,103,58,102,111,110,116,45,102,97,109,105,108,121,61,34,39,67,111,117,114,105,101,114,32,78,101,119,39,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,121,108,101,58,102,111,110,116,45,97,100,111,114,110,109,101,110,116,115,61,34,82,101,103,117,108,97,114,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,121,108,101,58,102,111,110,116,45,102,97,109,105,108,121,45,103,101,110,101,114,105,99,61,34,109,111,100,101,114,110,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,121,108,101,58,102,111,110,116,45,112,105,116,99,104,61,34,102,105,120,101,100,34,47,62,10,60,47,111,102,102,105,99,101,58,102,111,110,116,45,102,97,99,101,45,100,101,99,108,115,62,10,0,0,0,0,0,0,60,111,102,102,105,99,101,58,115,116,121,108,101,115,62,10,60,115,116,121,108,101,58,115,116,121,108,101,32,115,116,121,108,101,58,110,97,109,101,61,34,83,116,97,110,100,97,114,100,34,32,115,116,121,108,101,58,102,97,109,105,108,121,61,34,112,97,114,97,103,114,97,112,104,34,32,115,116,121,108,101,58,99,108,97,115,115,61,34,116,101,120,116,34,62,10,32,32,32,32,32,32,60,115,116,121,108,101,58,112,97,114,97,103,114,97,112,104,45,112,114,111,112,101,114,116,105,101,115,32,102,111,58,109,97,114,103,105,110,45,116,111,112,61,34,48,105,110,34,32,102,111,58,109,97,114,103,105,110,45,98,111,116,116,111,109,61,34,48,46,49,53,105,110,34,32,32,32,32,32,102,111,58,116,101,120,116,45,97,108,105,103,110,61,34,106,117,115,116,105,102,121,34,32,115,116,121,108,101,58,106,117,115,116,105,102,121,45,115,105,110,103,108,101,45,119,111,114,100,61,34,102,97,108,115,101,34,47,62,10,32,32,32,60,47,115,116,121,108,101,58,115,116,121,108,101,62,10,60,115,116,121,108,101,58,115,116,121,108,101,32,115,116,121,108,101,58,110,97,109,101,61,34,80,114,101,102,111,114,109,97,116,116,101,100,95,50,48,95,84,101,120,116,34,32,115,116,121,108,101,58,100,105,115,112,108,97,121,45,110,97,109,101,61,34,80,114,101,102,111,114,109,97,116,116,101,100,32,84,101,120,116,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,121,108,101,58,102,97,109,105,108,121,61,34,112,97,114,97,103,114,97,112,104,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,121,108,101,58,112,97,114,101,110,116,45,115,116,121,108,101,45,110,97,109,101,61,34,83,116,97,110,100,97,114,100,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,121,108,101,58,99,108,97,115,115,61,34,104,116,109,108,34,62,10,32,32,32,60,115,116,121,108,101,58,112,97,114,97,103,114,97,112,104,45,112,114,111,112,101,114,116,105,101,115,32,102,111,58,109,97,114,103,105,110,45,116,111,112,61,34,48,105,110,34,32,102,111,58,109,97,114,103,105,110,45,98,111,116,116,111,109,61,34,48,105,110,34,32,102,111,58,116,101,120,116,45,97,108,105,103,110,61,34,115,116,97,114,116,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,121,108,101,58,106,117,115,116,105,102,121,45,115,105,110,103,108,101,45,119,111,114,100,61,34,102,97,108,115,101,34,47,62,10,32,32,32,60,115,116,121,108,101,58,116,101,120,116,45,112,114,111,112,101,114,116,105,101,115,32,115,116,121,108,101,58,102,111,110,116,45,110,97,109,101,61,34,67,111,117,114,105,101,114,32,78,101,119,34,32,102,111,58,102,111,110,116,45,115,105,122,101,61,34,49,49,112,116,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,121,108,101,58,102,111,110,116,45,110,97,109,101,45,97,115,105,97,110,61,34,67,111,117,114,105,101,114,32,78,101,119,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,121,108,101,58,102,111,110,116,45,115,105,122,101,45,97,115,105,97,110,61,34,49,49,112,116,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,121,108,101,58,102,111,110,116,45,110,97,109,101,45,99,111,109,112,108,101,120,61,34,67,111,117,114,105,101,114,32,78,101,119,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,121,108,101,58,102,111,110,116,45,115,105,122,101,45,99,111,109,112,108,101,120,61,34,49,49,112,116,34,47,62,10,60,47,115,116,121,108,101,58,115,116,121,108,101,62,10,60,115,116,121,108,101,58,115,116,121,108,101,32,115,116,121,108,101,58,110,97,109,101,61,34,83,111,117,114,99,101,95,50,48,95,84,101,120,116,34,32,115,116,121,108,101,58,100,105,115,112,108,97,121,45,110,97,109,101,61,34,83,111,117,114,99,101,32,84,101,120,116,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,121,108,101,58,102,97,109,105,108,121,61,34,116,101,120,116,34,62,10,32,32,32,60,115,116,121,108,101,58,116,101,120,116,45,112,114,111,112,101,114,116,105,101,115,32,115,116,121,108,101,58,102,111,110,116,45,110,97,109,101,61,34,67,111,117,114,105,101,114,32,78,101,119,34,32,115,116,121,108,101,58,102,111,110,116,45,110,97,109,101,45,97,115,105,97,110,61,34,67,111,117,114,105,101,114,32,78,101,119,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,121,108,101,58,102,111,110,116,45,110,97,109,101,45,99,111,109,112,108,101,120,61,34,67,111,117,114,105,101,114,32,78,101,119,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,102,111,58,102,111,110,116,45,115,105,122,101,61,34,49,49,112,116,34,47,62,10,60,47,115,116,121,108,101,58,115,116,121,108,101,62,10,60,115,116,121,108,101,58,115,116,121,108,101,32,115,116,121,108,101,58,110,97,109,101,61,34,76,105,115,116,34,32,115,116,121,108,101,58,102,97,109,105,108,121,61,34,112,97,114,97,103,114,97,112,104,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,121,108,101,58,112,97,114,101,110,116,45,115,116,121,108,101,45,110,97,109,101,61,34,83,116,97,110,100,97,114,100,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,121,108,101,58,99,108,97,115,115,61,34,108,105,115,116,34,62,10,32,32,32,60,115,116,121,108,101,58,112,97,114,97,103,114,97,112,104,45,112,114,111,112,101,114,116,105,101,115,32,102,111,58,116,101,120,116,45,97,108,105,103,110,61,34,115,116,97,114,116,34,32,115,116,121,108,101,58,106,117,115,116,105,102,121,45,115,105,110,103,108,101,45,119,111,114,100,61,34,102,97,108,115,101,34,47,62,10,32,32,32,60,115,116,121,108,101,58,116,101,120,116,45,112,114,111,112,101,114,116,105,101,115,32,115,116,121,108,101,58,102,111,110,116,45,115,105,122,101,45,97,115,105,97,110,61,34,49,50,112,116,34,47,62,10,60,47,115,116,121,108,101,58,115,116,121,108,101,62,10,60,115,116,121,108,101,58,115,116,121,108,101,32,115,116,121,108,101,58,110,97,109,101,61,34,81,117,111,116,97,116,105,111,110,115,34,32,115,116,121,108,101,58,102,97,109,105,108,121,61,34,112,97,114,97,103,114,97,112,104,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,121,108,101,58,112,97,114,101,110,116,45,115,116,121,108,101,45,110,97,109,101,61,34,83,116,97,110,100,97,114,100,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,121,108,101,58,99,108,97,115,115,61,34,104,116,109,108,34,62,10,32,32,32,60,115,116,121,108,101,58,112,97,114,97,103,114,97,112,104,45,112,114,111,112,101,114,116,105,101,115,32,102,111,58,109,97,114,103,105,110,45,108,101,102,116,61,34,48,46,51,57,51,55,105,110,34,32,102,111,58,109,97,114,103,105,110,45,114,105,103,104,116,61,34,48,46,51,57,51,55,105,110,34,32,102,111,58,109,97,114,103,105,110,45,116,111,112,61,34,48,105,110,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,102,111,58,109,97,114,103,105,110,45,98,111,116,116,111,109,61,34,48,46,49,57,54,53,105,110,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,102,111,58,116,101,120,116,45,97,108,105,103,110,61,34,106,117,115,116,105,102,121,34,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,121,108,101,58,106,117,115,116,105,102,121,45,115,105,110,103,108,101,45,119,111,114,100,61,34,102,97,108,115,101,34,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,102,111,58,116,101,120,116,45,105,110,100,101,110,116,61,34,48,105,110,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,121,108,101,58,97,117,116,111,45,116,101,120,116,45,105,110,100,101,110,116,61,34,102,97,108,115,101,34,47,62,10,60,47,115,116,121,108,101,58,115,116,121,108,101,62,10,60,115,116,121,108,101,58,115,116,121,108,101,32,115,116,121,108,101,58,110,97,109,101,61,34,84,97,98,108,101,95,50,48,95,72,101,97,100,105,110,103,34,32,115,116,121,108,101,58,100,105,115,112,108,97,121,45,110,97,109,101,61,34,84,97,98,108,101,32,72,101,97,100,105,110,103,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,121,108,101,58,102,97,109,105,108,121,61,34,112,97,114,97,103,114,97,112,104,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,121,108,101,58,112,97,114,101,110,116,45,115,116,121,108,101,45,110,97,109,101,61,34,84,97,98,108,101,95,50,48,95,67,111,110,116,101,110,116,115,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,121,108,101,58,99,108,97,115,115,61,34,101,120,116,114,97,34,62,10,32,32,32,60,115,116,121,108,101,58,112,97,114,97,103,114,97,112,104,45,112,114,111,112,101,114,116,105,101,115,32,102,111,58,116,101,120,116,45,97,108,105,103,110,61,34,99,101,110,116,101,114,34,32,115,116,121,108,101,58,106,117,115,116,105,102,121,45,115,105,110,103,108,101,45,119,111,114,100,61,34,102,97,108,115,101,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,116,101,120,116,58,110,117,109,98,101,114,45,108,105,110,101,115,61,34,102,97,108,115,101,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,116,101,120,116,58,108,105,110,101,45,110,117,109,98,101,114,61,34,48,34,47,62,10,32,32,32,60,115,116,121,108,101,58,116,101,120,116,45,112,114,111,112,101,114,116,105,101,115,32,102,111,58,102,111,110,116,45,119,101,105,103,104,116,61], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([34,98,111,108,100,34,32,115,116,121,108,101,58,102,111,110,116,45,119,101,105,103,104,116,45,97,115,105,97,110,61,34,98,111,108,100,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,121,108,101,58,102,111,110,116,45,119,101,105,103,104,116,45,99,111,109,112,108,101,120,61,34,98,111,108,100,34,47,62,10,60,47,115,116,121,108,101,58,115,116,121,108,101,62,10,60,115,116,121,108,101,58,115,116,121,108,101,32,115,116,121,108,101,58,110,97,109,101,61,34,72,111,114,105,122,111,110,116,97,108,95,50,48,95,76,105,110,101,34,32,115,116,121,108,101,58,100,105,115,112,108,97,121,45,110,97,109,101,61,34,72,111,114,105,122,111,110,116,97,108,32,76,105,110,101,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,121,108,101,58,102,97,109,105,108,121,61,34,112,97,114,97,103,114,97,112,104,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,121,108,101,58,112,97,114,101,110,116,45,115,116,121,108,101,45,110,97,109,101,61,34,83,116,97,110,100,97,114,100,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,121,108,101,58,99,108,97,115,115,61,34,104,116,109,108,34,62,10,32,32,32,60,115,116,121,108,101,58,112,97,114,97,103,114,97,112,104,45,112,114,111,112,101,114,116,105,101,115,32,102,111,58,109,97,114,103,105,110,45,116,111,112,61,34,48,105,110,34,32,102,111,58,109,97,114,103,105,110,45,98,111,116,116,111,109,61,34,48,46,49,57,54,53,105,110,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,121,108,101,58,98,111,114,100,101,114,45,108,105,110,101,45,119,105,100,116,104,45,98,111,116,116,111,109,61,34,48,46,48,48,48,56,105,110,32,48,46,48,49,51,56,105,110,32,48,46,48,48,48,56,105,110,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,102,111,58,112,97,100,100,105,110,103,61,34,48,105,110,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,102,111,58,98,111,114,100,101,114,45,108,101,102,116,61,34,110,111,110,101,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,102,111,58,98,111,114,100,101,114,45,114,105,103,104,116,61,34,110,111,110,101,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,102,111,58,98,111,114,100,101,114,45,116,111,112,61,34,110,111,110,101,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,102,111,58,98,111,114,100,101,114,45,98,111,116,116,111,109,61,34,48,46,48,49,53,52,105,110,32,100,111,117,98,108,101,32,35,56,48,56,48,56,48,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,116,101,120,116,58,110,117,109,98,101,114,45,108,105,110,101,115,61,34,102,97,108,115,101,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,116,101,120,116,58,108,105,110,101,45,110,117,109,98,101,114,61,34,48,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,121,108,101,58,106,111,105,110,45,98,111,114,100,101,114,61,34,102,97,108,115,101,34,47,62,10,32,32,32,60,115,116,121,108,101,58,116,101,120,116,45,112,114,111,112,101,114,116,105,101,115,32,102,111,58,102,111,110,116,45,115,105,122,101,61,34,54,112,116,34,32,115,116,121,108,101,58,102,111,110,116,45,115,105,122,101,45,97,115,105,97,110,61,34,54,112,116,34,32,115,116,121,108,101,58,102,111,110,116,45,115,105,122,101,45,99,111,109,112,108,101,120,61,34,54,112,116,34,47,62,10,60,47,115,116,121,108,101,58,115,116,121,108,101,62,10,60,115,116,121,108,101,58,115,116,121,108,101,32,115,116,121,108,101,58,110,97,109,101,61,34,70,111,111,116,110,111,116,101,95,50,48,95,97,110,99,104,111,114,34,32,115,116,121,108,101,58,100,105,115,112,108,97,121,45,110,97,109,101,61,34,70,111,111,116,110,111,116,101,32,97,110,99,104,111,114,34,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,121,108,101,58,102,97,109,105,108,121,61,34,116,101,120,116,34,62,32,32,32,32,60,115,116,121,108,101,58,116,101,120,116,45,112,114,111,112,101,114,116,105,101,115,32,115,116,121,108,101,58,116,101,120,116,45,112,111,115,105,116,105,111,110,61,34,115,117,112,101,114,32,53,56,37,37,34,47,62,32,60,47,115,116,121,108,101,58,115,116,121,108,101,62,10,32,32,60,116,101,120,116,58,110,111,116,101,115,45,99,111,110,102,105,103,117,114,97,116,105,111,110,32,116,101,120,116,58,110,111,116,101,45,99,108,97,115,115,61,34,102,111,111,116,110,111,116,101,34,32,116,101,120,116,58,100,101,102,97,117,108,116,45,115,116,121,108,101,45,110,97,109,101,61,34,70,111,111,116,110,111,116,101,34,32,116,101,120,116,58,99,105,116,97,116,105,111,110,45,115,116,121,108,101,45,110,97,109,101,61,34,70,111,111,116,110,111,116,101,95,50,48,95,83,121,109,98,111,108,34,32,116,101,120,116,58,99,105,116,97,116,105,111,110,45,98,111,100,121,45,115,116,121,108,101,45,110,97,109,101,61,34,70,111,111,116,110,111,116,101,95,50,48,95,97,110,99,104,111,114,34,32,116,101,120,116,58,109,97,115,116,101,114,45,112,97,103,101,45,110,97,109,101,61,34,70,111,111,116,110,111,116,101,34,32,115,116,121,108,101,58,110,117,109,45,102,111,114,109,97,116,61,34,97,34,32,116,101,120,116,58,115,116,97,114,116,45,118,97,108,117,101,61,34,48,34,32,116,101,120,116,58,102,111,111,116,110,111,116,101,115,45,112,111,115,105,116,105,111,110,61,34,112,97,103,101,34,32,116,101,120,116,58,115,116,97,114,116,45,110,117,109,98,101,114,105,110,103,45,97,116,61,34,112,97,103,101,34,47,62,10,32,32,60,116,101,120,116,58,110,111,116,101,115,45,99,111,110,102,105,103,117,114,97,116,105,111,110,32,116,101,120,116,58,110,111,116,101,45,99,108,97,115,115,61,34,101,110,100,110,111,116,101,34,32,116,101,120,116,58,100,101,102,97,117,108,116,45,115,116,121,108,101,45,110,97,109,101,61,34,69,110,100,110,111,116,101,34,32,116,101,120,116,58,99,105,116,97,116,105,111,110,45,115,116,121,108,101,45,110,97,109,101,61,34,69,110,100,110,111,116,101,95,50,48,95,83,121,109,98,111,108,34,32,116,101,120,116,58,99,105,116,97,116,105,111,110,45,98,111,100,121,45,115,116,121,108,101,45,110,97,109,101,61,34,69,110,100,110,111,116,101,95,50,48,95,97,110,99,104,111,114,34,32,116,101,120,116,58,109,97,115,116,101,114,45,112,97,103,101,45,110,97,109,101,61,34,69,110,100,110,111,116,101,34,32,115,116,121,108,101,58,110,117,109,45,102,111,114,109,97,116,61,34,49,34,32,116,101,120,116,58,115,116,97,114,116,45,118,97,108,117,101,61,34,48,34,47,62,10,60,47,111,102,102,105,99,101,58,115,116,121,108,101,115,62,10,0,0,0,0,0,0,0,0,60,111,102,102,105,99,101,58,97,117,116,111,109,97,116,105,99,45,115,116,121,108,101,115,62,32,32,32,60,115,116,121,108,101,58,115,116,121,108,101,32,115,116,121,108,101,58,110,97,109,101,61,34,77,77,68,45,73,116,97,108,105,99,34,32,115,116,121,108,101,58,102,97,109,105,108,121,61,34,116,101,120,116,34,62,10,32,32,32,32,32,32,60,115,116,121,108,101,58,116,101,120,116,45,112,114,111,112,101,114,116,105,101,115,32,102,111,58,102,111,110,116,45,115,116,121,108,101,61,34,105,116,97,108,105,99,34,32,115,116,121,108,101,58,102,111,110,116,45,115,116,121,108,101,45,97,115,105,97,110,61,34,105,116,97,108,105,99,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,121,108,101,58,102,111,110,116,45,115,116,121,108,101,45,99,111,109,112,108,101,120,61,34,105,116,97,108,105,99,34,47,62,10,32,32,32,60,47,115,116,121,108,101,58,115,116,121,108,101,62,10,32,32,32,60,115,116,121,108,101,58,115,116,121,108,101,32,115,116,121,108,101,58,110,97,109,101,61,34,77,77,68,45,66,111,108,100,34,32,115,116,121,108,101,58,102,97,109,105,108,121,61,34,116,101,120,116,34,62,10,32,32,32,32,32,32,60,115,116,121,108,101,58,116,101,120,116,45,112,114,111,112,101,114,116,105,101,115,32,102,111,58,102,111,110,116,45,119,101,105,103,104,116,61,34,98,111,108,100,34,32,115,116,121,108,101,58,102,111,110,116,45,119,101,105,103,104,116,45,97,115,105,97,110,61,34,98,111,108,100,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,121,108,101,58,102,111,110,116,45,119,101,105,103,104,116,45,99,111,109,112,108,101,120,61,34,98,111,108,100,34,47,62,10,32,32,32,60,47,115,116,121,108,101,58,115,116,121,108,101,62,10,32,32,32,60,115,116,121,108,101,58,115,116,121,108,101,32,115,116,121,108,101,58,110,97,109,101,61,34,77,77,68,45,83,117,112,101,114,115,99,114,105,112,116,34,32,115,116,121,108,101,58,102,97,109,105,108,121,61,34,116,101,120,116,34,62,10,32,32,32,32,32,32,60,115,116,121,108,101,58,116,101,120,116,45,112,114,111,112,101,114,116,105,101,115,32,115,116,121,108,101,58,116,101,120,116,45,112,111,115,105,116,105,111,110,61,34,115,117,112,101,114,32,53,56,37,37,34,47,62,10,32,32,32,60,47,115,116,121,108,101,58,115,116,121,108,101,62,10,32,32,32,60,115,116,121,108,101,58,115,116,121,108,101,32,115,116,121,108,101,58,110,97,109,101,61,34,77,77,68,45,83,117,98,115,99,114,105,112,116,34,32,115,116,121,108,101,58,102,97,109,105,108,121,61,34,116,101,120,116,34,62,10,32,32,32,32,32,32,60,115,116,121,108,101,58,116,101,120,116,45,112,114,111,112,101,114,116,105,101,115,32,115,116,121,108,101,58,116,101,120,116,45,112,111,115,105,116,105,111,110,61,34,115,117,98,32,53,56,37,37,34,47,62,10,32,32,32,60,47,115,116,121,108,101,58,115,116,121,108,101,62,10,60,115,116,121,108,101,58,115,116,121,108,101,32,115,116,121,108,101,58,110,97,109,101,61,34,77,77,68,45,84,97,98,108,101,34,32,115,116,121,108,101,58,102,97,109,105,108,121,61,34,112,97,114,97,103,114,97,112,104,34,32,115,116,121,108,101,58,112,97,114,101,110,116,45,115,116,121,108,101,45,110,97,109,101,61,34,83,116,97,110,100,97,114,100,34,62,10,32,32,32,60,115,116,121,108,101,58,112,97,114,97,103,114,97,112,104,45,112,114,111,112,101,114,116,105,101,115,32,102,111,58,109,97,114,103,105,110,45,116,111,112,61,34,48,105,110,34,32,102,111,58,109,97,114,103,105,110,45,98,111,116,116,111,109,61,34,48,46,48,53,105,110,34,47,62,10,60,47,115,116,121,108,101,58,115,116,121,108,101,62,10,60,115,116,121,108,101,58,115,116,121,108,101,32,115,116,121,108,101,58,110,97,109,101,61,34,77,77,68,45,84,97,98,108,101,45,67,101,110,116,101,114,34,32,115,116,121,108,101,58,102,97,109,105,108,121,61,34,112,97,114,97,103,114,97,112,104,34,32,115,116,121,108,101,58,112,97,114,101,110,116,45,115,116,121,108,101,45,110,97,109,101,61,34,77,77,68,45,84,97,98,108,101,34,62,10,32,32,32,60,115,116,121,108,101,58,112,97,114,97,103,114,97,112,104,45,112,114,111,112,101,114,116,105,101,115,32,102,111,58,116,101,120,116,45,97,108,105,103,110,61,34,99,101,110,116,101,114,34,32,115,116,121,108,101,58,106,117,115,116,105,102,121,45,115,105,110,103,108,101,45,119,111,114,100,61,34,102,97,108,115,101,34,47,62,10,60,47,115,116,121,108,101,58,115,116,121,108,101,62,10,60,115,116,121,108,101,58,115,116,121,108,101,32,115,116,121,108,101,58,110,97,109,101,61,34,77,77,68,45,84,97,98,108,101,45,82,105,103,104,116,34,32,115,116,121,108,101,58,102,97,109,105,108,121,61,34,112,97,114,97,103,114,97,112,104,34,32,115,116,121,108,101,58,112,97,114,101,110,116,45,115,116,121,108,101,45,110,97,109,101,61,34,77,77,68,45,84,97,98,108,101,34,62,10,32,32,32,60,115,116,121,108,101,58,112,97,114,97,103,114,97,112,104,45,112,114,111,112,101,114,116,105,101,115,32,102,111,58,116,101,120,116,45,97,108,105,103,110,61,34,114,105,103,104,116,34,32,115,116,121,108,101,58,106,117,115,116,105,102,121,45,115,105,110,103,108,101,45,119,111,114,100,61,34,102,97,108,115,101,34,47,62,10,60,47,115,116,121,108,101,58,115,116,121,108,101,62,10,60,115,116,121,108,101,58,115,116,121,108,101,32,115,116,121,108,101,58,110,97,109,101,61,34,80,50,34,32,115,116,121,108,101,58,102,97,109,105,108,121,61,34,112,97,114,97,103,114,97,112,104,34,32,115,116,121,108,101,58,112,97,114,101,110,116,45,115,116,121,108,101,45,110,97,109,101,61,34,83,116,97,110,100,97,114,100,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,121,108,101,58,108,105,115,116,45,115,116,121,108,101,45,110,97,109,101,61,34,76,50,34,62,10,60,115,116,121,108,101,58,112,97,114,97,103,114,97,112,104,45,112,114,111,112,101,114,116,105,101,115,32,102,111,58,116,101,120,116,45,97,108,105,103,110,61,34,115,116,97,114,116,34,32,115,116,121,108,101,58,106,117,115,116,105,102,121,45,115,105,110,103,108,101,45,119,111,114,100,61,34,102,97,108,115,101,34,47,62,10,60,47,115,116,121,108,101,58,115,116,121,108,101,62,10,60,115,116,121,108,101,58,115,116,121,108,101,32,115,116,121,108,101,58,110,97,109,101,61,34,102,114,49,34,32,115,116,121,108,101,58,102,97,109,105,108,121,61,34,103,114,97,112,104,105,99,34,32,115,116,121,108,101,58,112,97,114,101,110,116,45,115,116,121,108,101,45,110,97,109,101,61,34,70,114,97,109,101,34,62,10,32,32,32,60,115,116,121,108,101,58,103,114,97,112,104,105,99,45,112,114,111,112,101,114,116,105,101,115,32,115,116,121,108,101,58,112,114,105,110,116,45,99,111,110,116,101,110,116,61,34,102,97,108,115,101,34,32,115,116,121,108,101,58,118,101,114,116,105,99,97,108,45,112,111,115,61,34,116,111,112,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,121,108,101,58,118,101,114,116,105,99,97,108,45,114,101,108,61,34,98,97,115,101,108,105,110,101,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,102,111,58,112,97,100,100,105,110,103,61,34,48,105,110,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,102,111,58,98,111,114,100,101,114,61,34,110,111,110,101,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,121,108,101,58,115,104,97,100,111,119,61,34,110,111,110,101,34,47,62,10,60,47,115,116,121,108,101,58,115,116,121,108,101,62,10,60,115,116,121,108,101,58,115,116,121,108,101,32,115,116,121,108,101,58,110,97,109,101,61,34,80,49,34,32,115,116,121,108,101,58,102,97,109,105,108,121,61,34,112,97,114,97,103,114,97,112,104,34,32,115,116,121,108,101,58,112,97,114,101,110,116,45,115,116,121,108,101,45,110,97,109,101,61,34,83,116,97,110,100,97,114,100,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,121,108,101,58,108,105,115,116,45,115,116,121,108,101,45,110,97,109,101,61,34,76,49,34,47,62,10,60,116,101,120,116,58,108,105,115,116,45,115,116,121,108,101,32,115,116,121,108,101,58,110,97,109,101,61,34,76,49,34,62,10,9,60,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,98,117,108,108,101,116,32,116,101,120,116,58,108,101,118,101,108,61,34,49,34,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,78,117,109,98,101,114,105,110,103,95,50,48,95,83,121,109,98,111,108,115,34,32,115,116,121,108,101,58,110,117,109,45,115,117,102,102,105,120,61,34,46,34,32,116,101,120,116,58,98,117,108,108,101,116,45,99,104,97,114,61,34,239,130,149,34,62,10,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,32,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,112,111,115,105,116,105,111,110,45,97,110,100,45,115,112,97,99,101,45,109,111,100,101,61,34,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,34,62,10,9,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,32,116,101,120,116,58,108,97,98,101,108,45,102,111,108,108,111,119,101,100,45,98,121,61,34,108,105,115,116,116,97,98,34,32,116,101,120,116,58,108,105,115,116,45,116,97,98,45,115,116,111,112,45,112,111,115,105,116,105,111,110,61,34,48,46,53,105,110,34,32,102,111,58,116,101,120,116,45,105,110,100,101,110,116,61,34,45,48,46,50,53,105,110,34,32,102,111,58,109,97,114,103,105,110,45,108,101,102,116,61,34,48,46,53,105,110,34,47,62,10,9,9,60,47,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,62,10,9,9,60,115,116,121,108,101,58,116,101,120,116,45,112,114,111,112,101,114,116,105,101,115,32,102,111,58,102,111,110,116,45,102,97,109,105,108,121,61,34,115,116,97,114,98,97,116,115,34,32,115,116,121,108,101,58,102,111,110,116,45,99,104,97,114,115,101,116,61,34,120,45,115,121,109,98,111,108,34,47,62,10,9,60,47,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,98,117,108,108,101,116,62,10,9,60,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,98,117,108,108,101,116,32,116,101,120,116,58,108,101,118,101,108,61,34,50,34,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,78,117,109,98,101,114,105,110,103,95,50,48,95,83,121,109,98,111,108,115,34,32,115,116,121,108,101,58,110,117,109,45,115,117,102,102,105,120,61,34,46,34,32,116,101,120,116,58,98,117,108,108,101,116,45,99,104,97,114,61,34,239,130,149,34,62,10,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,32,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,112,111,115,105,116,105,111,110,45,97,110,100,45,115,112,97,99,101,45,109,111,100,101,61,34,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,34,62,10,9,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,32,116,101,120,116,58,108,97,98,101,108,45,102,111,108,108,111,119,101,100,45,98,121,61,34,108,105,115,116,116,97,98,34,32,116,101,120,116,58,108,105,115,116,45,116,97,98,45,115,116,111,112,45,112,111,115,105,116,105,111,110,61,34,48,46,55,53,105,110,34,32,102,111,58,116,101,120,116,45,105,110,100,101,110,116,61,34,45,48,46,50,53,105,110,34,32,102,111,58,109,97,114,103,105,110,45,108,101,102,116,61,34,48,46,55,53,105,110,34,47,62,10,9,9,60,47,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,62,10,9,9,60,115,116,121,108,101,58,116,101,120,116,45,112,114,111,112,101,114,116,105,101,115,32,102,111,58,102,111,110,116,45,102,97,109,105,108,121,61,34,115,116,97,114,98,97,116,115,34,32,115,116,121,108,101,58,102,111,110,116,45,99,104,97,114,115,101,116,61,34,120,45,115,121,109,98,111,108,34,47,62,10,9,60,47,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,98,117,108,108,101,116,62,10,9,60,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,98,117,108,108,101,116,32,116,101,120,116,58,108,101,118,101,108,61,34,51,34,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,78,117,109,98,101,114,105,110,103,95,50,48,95,83,121,109,98,111,108,115,34,32,115,116,121,108,101,58,110,117,109,45,115,117,102,102,105,120,61,34,46,34,32,116,101,120,116,58,98,117,108,108,101,116,45,99,104,97,114,61,34,239,130,149,34,62,10,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,32,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,112,111,115,105,116,105,111,110,45,97,110,100,45,115,112,97,99,101,45,109,111,100,101,61,34,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,34,62,10,9,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,32,116,101,120,116,58,108,97,98,101,108,45,102,111,108,108,111,119,101,100,45,98,121,61,34,108,105,115,116,116,97,98,34,32,116,101,120,116,58,108,105,115,116,45,116,97,98,45,115,116,111,112,45,112,111,115,105,116,105,111,110,61,34,49,105,110,34,32,102,111,58,116,101,120,116,45,105,110,100,101,110,116,61,34,45,48,46,50,53,105,110,34,32,102,111,58,109,97,114,103,105,110,45,108,101,102,116,61,34,49,105,110,34,47,62,10,9,9,60,47,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,62,10,9,9,60,115,116,121,108,101,58,116,101,120,116,45,112,114,111,112,101,114,116,105,101,115,32,102,111,58,102,111,110,116,45,102,97,109,105,108,121,61,34,115,116,97,114,98,97,116,115,34,32,115,116,121,108,101,58,102,111,110,116,45,99,104,97,114,115,101,116,61,34,120,45,115,121,109,98,111,108,34,47,62,10,9,60,47,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,98,117,108,108,101,116,62,10,9,60,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,110,117,109,98,101,114,32,116,101,120,116,58,108,101,118,101,108,61,34,52,34,32,115,116,121,108,101,58,110,117,109,45,115,117,102,102,105,120,61,34,46,34,32,115,116,121,108,101,58,110,117,109,45,102,111,114,109,97,116,61,34,49,34,62,10,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,32,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,112,111,115,105,116,105,111,110,45,97,110,100,45,115,112,97,99,101,45,109,111,100,101,61,34,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,34,62,10,9,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,32,116,101,120,116,58,108,97,98,101,108,45,102,111,108,108,111,119,101,100,45,98,121,61,34,108,105,115,116,116,97,98,34,32,116,101,120,116,58,108,105,115,116,45,116,97,98,45,115,116,111,112,45,112,111,115,105,116,105,111,110,61,34,49,46,50,53,105,110,34,32,102,111,58,116,101,120,116,45,105,110,100,101,110,116,61,34,45,48,46,50,53,105,110,34,32,102,111,58,109,97,114,103,105,110,45,108,101,102,116,61,34,49,46,50,53,105,110,34,47,62,10,9,9,60,47,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,62,10,9,60,47,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,110,117,109,98,101,114,62,10,9,60,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,110,117,109,98,101,114,32,116,101,120,116,58,108,101,118,101,108,61,34,53,34,32,115,116,121,108,101,58,110,117,109,45,115,117,102,102,105,120,61,34,46,34,32,115,116,121,108,101,58,110,117,109,45,102,111,114,109,97,116,61,34,49,34,62,10,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,32,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,112,111,115,105,116,105,111,110,45,97,110,100,45,115,112,97,99,101,45,109,111,100,101,61,34,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,34,62,10,9,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,32,116,101,120,116,58,108,97,98,101,108,45,102,111,108,108,111,119,101,100,45,98,121,61,34,108,105,115,116,116,97,98,34,32,116,101,120,116,58,108,105,115,116,45,116,97,98,45,115,116,111,112,45,112,111,115,105,116,105,111,110,61,34,49,46,53,105,110,34,32,102,111,58,116,101,120,116,45,105,110,100,101,110,116,61,34,45,48,46,50,53,105,110,34,32,102,111,58,109,97,114,103,105,110,45,108,101,102,116,61,34,49,46,53,105,110,34,47,62,10,9,9,60,47,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,62,10,9,60,47,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,110,117,109,98,101,114,62,10,9,60,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,110,117,109,98,101,114,32,116,101,120,116,58,108,101,118,101,108,61,34,54,34,32,115,116,121,108,101,58,110,117,109,45,115,117,102,102,105,120,61,34,46,34,32,115,116,121,108,101,58,110,117,109,45,102,111,114,109,97,116,61,34,49,34,62,10,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,32,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,112,111,115,105,116,105,111,110,45,97,110,100,45,115,112,97,99,101,45,109,111,100,101,61,34,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,34,62,10,9,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,32,116,101,120,116,58,108,97,98,101,108,45,102,111,108,108,111,119,101,100,45,98,121,61,34,108,105,115,116,116,97,98,34,32,116,101,120,116,58,108,105,115,116,45,116,97,98,45,115,116,111,112,45,112,111,115,105,116,105,111,110,61,34,49,46,55,53,105,110,34,32,102,111,58,116,101,120,116,45,105,110,100,101,110,116,61,34,45,48,46,50,53,105,110,34,32,102,111,58,109,97,114,103,105,110,45,108,101,102,116,61,34,49,46,55,53,105,110,34,47,62,10,9,9,60,47,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,62,10,9,60,47,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,110,117,109,98,101,114,62,10,9,60,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,110,117,109,98,101,114,32,116,101,120,116,58,108,101,118,101,108,61,34,55,34,32,115,116,121,108,101,58,110,117,109,45,115,117,102,102,105,120,61,34,46,34,32,115,116,121,108,101,58,110,117,109,45,102,111,114,109,97,116,61,34,49,34,62,10,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,32,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,112,111,115,105,116,105,111,110,45,97,110,100,45,115,112,97,99,101,45,109,111,100,101,61,34,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,34,62,10,9,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,32,116,101,120,116,58,108,97,98,101,108,45,102,111,108,108,111,119,101,100,45,98,121,61,34,108,105,115,116,116,97,98,34,32,116,101,120,116,58,108,105,115,116,45,116,97,98,45,115,116,111,112,45,112,111,115,105,116,105,111,110,61,34,50,105,110,34,32,102,111,58,116,101,120,116,45,105,110,100,101,110,116,61,34,45,48,46,50,53,105,110,34,32,102,111,58,109,97,114,103,105,110,45,108,101,102,116,61,34,50,105,110,34,47,62,10,9,9,60,47,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,62,10,9,60,47,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,110,117,109,98,101,114,62,10,9,60,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,110,117,109,98,101,114,32,116,101,120,116,58,108,101,118,101,108,61,34,56,34,32,115,116,121,108,101,58,110,117,109,45,115,117,102,102,105,120,61,34,46,34,32,115,116,121,108,101,58,110,117,109,45,102,111,114,109,97,116,61,34,49,34,62,10,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,32,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,112,111,115,105,116,105,111,110,45,97,110,100,45,115,112,97,99,101,45,109,111,100,101,61,34,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,34,62,10,9,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,32,116,101,120,116,58,108,97,98,101,108,45,102,111,108,108,111,119,101,100,45,98,121,61,34,108,105,115,116,116,97,98,34,32,116,101,120,116,58,108,105,115,116,45,116,97,98,45,115,116,111,112,45,112,111,115,105,116,105,111,110,61,34,50,46,50,53,105,110,34,32,102,111,58,116,101,120,116,45,105,110,100,101,110,116,61,34,45,48,46,50,53,105,110,34,32,102,111,58,109,97,114,103,105,110,45,108,101,102,116,61,34,50,46,50,53,105,110,34,47,62,10,9,9,60,47,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,62,10,9,60,47,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,110,117,109,98,101,114,62,10,9,60,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,110,117,109,98,101,114,32,116,101,120,116,58,108,101,118,101,108,61,34,57,34,32,115,116,121,108,101,58,110,117,109,45,115,117,102,102,105,120,61,34,46,34,32,115,116,121,108,101,58,110,117,109,45,102,111,114,109,97,116,61,34,49,34,62,10,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,32,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,112,111,115,105,116,105,111,110,45,97,110,100,45,115,112,97,99,101,45,109,111,100,101,61,34,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,34,62,10,9,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,32,116,101,120,116,58,108,97,98,101,108,45,102,111,108,108,111,119,101,100,45,98,121,61,34,108,105,115,116,116,97,98,34,32,116,101,120,116,58,108,105,115,116,45,116,97,98,45,115,116,111,112,45,112,111,115,105,116,105,111,110,61,34,50,46,53,105,110,34,32,102,111,58,116,101,120,116,45,105,110,100,101,110,116,61,34,45,48,46,50,53,105,110,34,32,102,111,58,109,97,114,103,105,110,45,108,101,102,116,61,34,50,46,53,105,110,34,47,62,10,9,9,60,47,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,62,10,9,60,47,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,110,117,109,98,101,114,62,10,9,60,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,110,117,109,98,101,114,32,116,101,120,116,58,108,101,118,101,108,61,34,49,48,34,32,115,116,121,108,101,58,110,117,109,45,115,117,102,102,105,120,61,34,46,34,32,115,116,121,108,101,58,110,117,109,45,102,111,114,109,97,116,61,34,49,34,62,10,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,32,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,112,111,115,105,116,105,111,110,45,97,110,100,45,115,112,97,99,101,45,109,111,100,101,61,34,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,34,62,10,9,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,32,116,101,120,116,58,108,97,98,101,108,45,102,111,108,108,111,119,101,100,45,98,121,61,34,108,105,115,116,116,97,98,34,32,116,101,120,116,58,108,105,115,116,45,116,97,98,45,115,116,111,112,45,112,111,115,105,116,105,111,110,61,34,50,46,55,53,105,110,34,32,102,111,58,116,101,120,116,45,105,110,100,101,110,116,61,34,45,48,46,50,53,105,110,34,32,102,111,58,109,97,114,103,105,110,45,108,101,102,116,61,34,50,46,55,53,105,110,34,47,62,10,9,9,60,47,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,62,10,9,60,47,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,110,117,109,98,101,114,62,10,60,47,116,101,120,116,58,108,105,115,116,45,115,116,121,108,101,62,10,60,116,101,120,116,58,108,105,115,116,45,115,116,121,108,101,32,115,116,121,108,101,58,110,97,109,101,61,34,76,50,34,62,10,9,60,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,110,117,109,98,101,114,32,116,101,120,116,58,108,101,118,101,108,61,34,49,34,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,83,116,97,110,100,97,114,100,34,32,115,116,121,108,101,58,110,117,109,45,115,117,102,102,105,120,61,34,46,34,32,115,116,121,108,101,58,110,117,109,45,102,111,114,109,97,116,61,34,49,34,62,10,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,32,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,112,111,115,105,116,105,111,110,45,97,110,100,45,115,112,97,99,101,45,109,111,100,101,61,34,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,34,62,10,9,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,32,116,101,120,116,58,108,97,98,101,108,45,102,111,108,108,111,119,101,100,45,98,121,61,34,108,105,115,116,116,97,98,34,32,116,101,120,116,58,108,105,115,116,45,116,97,98,45,115,116,111,112,45,112,111,115,105,116,105,111,110,61,34,48,46,53,105,110,34,32,102,111,58,116,101,120,116,45,105,110,100,101,110,116,61,34,45,48,46,50,53,105,110,34,32,102,111,58,109,97,114,103,105,110,45,108,101,102,116,61,34,48,46,53,105,110,34,47,62,10,9,9,60,47,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,62,10,9,60,47,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,110,117,109,98,101,114,62,10,9,60,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,110,117,109,98,101,114,32,116,101,120,116,58,108,101,118,101,108,61,34,50,34,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,83,116,97,110,100,97,114,100,34,32,115,116,121,108,101,58,110,117,109,45,115,117,102,102,105,120,61,34,46,34,32,115,116,121,108,101,58,110,117,109,45,102,111,114,109,97,116,61,34,49,34,62,10,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,32,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,112,111,115,105,116,105,111,110,45,97,110,100,45,115,112,97,99,101,45,109,111,100,101,61,34,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,34,62,10,9,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,32,116,101,120,116,58,108,97,98,101,108,45,102,111,108,108,111,119,101,100,45,98,121,61,34,108,105,115,116,116,97,98,34,32,116,101,120,116,58,108,105,115,116,45,116,97,98,45,115,116,111,112,45,112,111,115,105,116,105,111,110,61,34,48,46,55,53,105,110,34,32,102,111,58,116,101,120,116,45,105,110,100,101,110,116,61,34,45,48,46,50,53,105,110,34,32,102,111,58,109,97,114,103,105,110,45,108,101,102,116,61,34,48,46,55,53,105,110,34,47,62,10,9,9,60,47,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,62,10,9,60,47,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,110,117,109,98,101,114,62,10,9,60,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,110,117,109,98,101,114,32,116,101,120,116,58,108,101,118,101,108,61,34,51,34,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,83,116,97,110,100,97,114,100,34,32,115,116,121,108,101,58,110,117,109,45,115,117,102,102,105,120,61,34,46,34,32,115,116,121,108,101,58,110,117,109,45,102,111,114,109,97,116,61,34,49,34,62,10,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,32,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,112,111,115,105,116,105,111,110,45,97,110,100,45,115,112,97,99,101,45,109,111,100,101,61,34,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,34,62,10,9,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,32,116,101,120,116,58,108,97,98,101,108,45,102,111,108,108,111,119,101,100,45,98,121,61,34,108,105,115,116,116,97,98,34,32,116,101,120,116,58,108,105,115,116,45,116,97,98,45,115,116,111,112,45,112,111,115,105,116,105,111,110,61,34,49,105,110,34,32,102,111,58,116,101,120,116,45,105,110,100,101,110,116,61,34,45,48,46,50,53,105,110,34,32,102,111,58,109,97,114,103,105,110,45,108,101,102,116,61,34,49,105,110,34,47,62,10,9,9,60,47,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,62,10,9,60,47,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,110,117,109,98,101,114,62,10,9,60,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,110,117,109,98,101,114,32,116,101,120,116,58,108,101,118,101,108,61,34,52,34,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,83,116,97,110,100,97,114,100,34,32,115,116,121,108,101,58,110,117,109,45,115,117,102,102,105,120,61,34,46,34,32,115,116,121,108,101,58,110,117,109,45,102,111,114,109,97,116,61,34,49,34,62,10,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,32,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,112,111,115,105,116,105,111,110,45,97,110,100,45,115,112,97,99,101,45,109,111,100,101,61,34,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,34,62,10,9,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,32,116,101,120,116,58,108,97,98,101,108,45,102,111,108,108,111,119,101,100,45,98,121,61,34,108,105,115,116,116,97,98,34,32,116,101,120,116,58,108,105,115,116,45,116,97,98,45,115,116,111,112,45,112,111,115,105,116,105,111,110,61,34,49,46,50,53,105,110,34,32,102,111,58,116,101,120,116,45,105,110,100,101,110,116,61,34,45,48,46,50,53,105,110,34,32,102,111,58,109,97,114,103,105,110,45,108,101,102,116,61,34,49,46,50,53,105,110,34,47,62,10,9,9,60,47,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,62,10,9,60,47,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,110,117,109,98,101,114,62,10,9,60,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,110,117,109,98,101,114,32,116,101,120,116,58,108,101,118,101,108,61,34,53,34,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,83,116,97,110,100,97,114,100,34,32,115,116,121], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);
/* memory initializer */ allocate([108,101,58,110,117,109,45,115,117,102,102,105,120,61,34,46,34,32,115,116,121,108,101,58,110,117,109,45,102,111,114,109,97,116,61,34,49,34,62,10,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,32,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,112,111,115,105,116,105,111,110,45,97,110,100,45,115,112,97,99,101,45,109,111,100,101,61,34,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,34,62,10,9,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,32,116,101,120,116,58,108,97,98,101,108,45,102,111,108,108,111,119,101,100,45,98,121,61,34,108,105,115,116,116,97,98,34,32,116,101,120,116,58,108,105,115,116,45,116,97,98,45,115,116,111,112,45,112,111,115,105,116,105,111,110,61,34,49,46,53,105,110,34,32,102,111,58,116,101,120,116,45,105,110,100,101,110,116,61,34,45,48,46,50,53,105,110,34,32,102,111,58,109,97,114,103,105,110,45,108,101,102,116,61,34,49,46,53,105,110,34,47,62,10,9,9,60,47,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,62,10,9,60,47,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,110,117,109,98,101,114,62,10,9,60,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,110,117,109,98,101,114,32,116,101,120,116,58,108,101,118,101,108,61,34,54,34,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,83,116,97,110,100,97,114,100,34,32,115,116,121,108,101,58,110,117,109,45,115,117,102,102,105,120,61,34,46,34,32,115,116,121,108,101,58,110,117,109,45,102,111,114,109,97,116,61,34,49,34,62,10,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,32,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,112,111,115,105,116,105,111,110,45,97,110,100,45,115,112,97,99,101,45,109,111,100,101,61,34,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,34,62,10,9,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,32,116,101,120,116,58,108,97,98,101,108,45,102,111,108,108,111,119,101,100,45,98,121,61,34,108,105,115,116,116,97,98,34,32,116,101,120,116,58,108,105,115,116,45,116,97,98,45,115,116,111,112,45,112,111,115,105,116,105,111,110,61,34,49,46,55,53,105,110,34,32,102,111,58,116,101,120,116,45,105,110,100,101,110,116,61,34,45,48,46,50,53,105,110,34,32,102,111,58,109,97,114,103,105,110,45,108,101,102,116,61,34,49,46,55,53,105,110,34,47,62,10,9,9,60,47,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,62,10,9,60,47,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,110,117,109,98,101,114,62,10,9,60,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,110,117,109,98,101,114,32,116,101,120,116,58,108,101,118,101,108,61,34,55,34,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,83,116,97,110,100,97,114,100,34,32,115,116,121,108,101,58,110,117,109,45,115,117,102,102,105,120,61,34,46,34,32,115,116,121,108,101,58,110,117,109,45,102,111,114,109,97,116,61,34,49,34,62,10,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,32,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,112,111,115,105,116,105,111,110,45,97,110,100,45,115,112,97,99,101,45,109,111,100,101,61,34,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,34,62,10,9,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,32,116,101,120,116,58,108,97,98,101,108,45,102,111,108,108,111,119,101,100,45,98,121,61,34,108,105,115,116,116,97,98,34,32,116,101,120,116,58,108,105,115,116,45,116,97,98,45,115,116,111,112,45,112,111,115,105,116,105,111,110,61,34,50,105,110,34,32,102,111,58,116,101,120,116,45,105,110,100,101,110,116,61,34,45,48,46,50,53,105,110,34,32,102,111,58,109,97,114,103,105,110,45,108,101,102,116,61,34,50,105,110,34,47,62,10,9,9,60,47,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,62,10,9,60,47,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,110,117,109,98,101,114,62,10,9,60,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,110,117,109,98,101,114,32,116,101,120,116,58,108,101,118,101,108,61,34,56,34,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,83,116,97,110,100,97,114,100,34,32,115,116,121,108,101,58,110,117,109,45,115,117,102,102,105,120,61,34,46,34,32,115,116,121,108,101,58,110,117,109,45,102,111,114,109,97,116,61,34,49,34,62,10,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,32,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,112,111,115,105,116,105,111,110,45,97,110,100,45,115,112,97,99,101,45,109,111,100,101,61,34,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,34,62,10,9,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,32,116,101,120,116,58,108,97,98,101,108,45,102,111,108,108,111,119,101,100,45,98,121,61,34,108,105,115,116,116,97,98,34,32,116,101,120,116,58,108,105,115,116,45,116,97,98,45,115,116,111,112,45,112,111,115,105,116,105,111,110,61,34,50,46,50,53,105,110,34,32,102,111,58,116,101,120,116,45,105,110,100,101,110,116,61,34,45,48,46,50,53,105,110,34,32,102,111,58,109,97,114,103,105,110,45,108,101,102,116,61,34,50,46,50,53,105,110,34,47,62,10,9,9,60,47,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,62,10,9,60,47,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,110,117,109,98,101,114,62,10,9,60,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,110,117,109,98,101,114,32,116,101,120,116,58,108,101,118,101,108,61,34,57,34,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,83,116,97,110,100,97,114,100,34,32,115,116,121,108,101,58,110,117,109,45,115,117,102,102,105,120,61,34,46,34,32,115,116,121,108,101,58,110,117,109,45,102,111,114,109,97,116,61,34,49,34,62,10,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,32,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,112,111,115,105,116,105,111,110,45,97,110,100,45,115,112,97,99,101,45,109,111,100,101,61,34,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,34,62,10,9,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,32,116,101,120,116,58,108,97,98,101,108,45,102,111,108,108,111,119,101,100,45,98,121,61,34,108,105,115,116,116,97,98,34,32,116,101,120,116,58,108,105,115,116,45,116,97,98,45,115,116,111,112,45,112,111,115,105,116,105,111,110,61,34,50,46,53,105,110,34,32,102,111,58,116,101,120,116,45,105,110,100,101,110,116,61,34,45,48,46,50,53,105,110,34,32,102,111,58,109,97,114,103,105,110,45,108,101,102,116,61,34,50,46,53,105,110,34,47,62,10,9,9,60,47,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,62,10,9,60,47,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,110,117,109,98,101,114,62,10,9,60,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,110,117,109,98,101,114,32,116,101,120,116,58,108,101,118,101,108,61,34,49,48,34,32,116,101,120,116,58,115,116,121,108,101,45,110,97,109,101,61,34,83,116,97,110,100,97,114,100,34,32,115,116,121,108,101,58,110,117,109,45,115,117,102,102,105,120,61,34,46,34,32,115,116,121,108,101,58,110,117,109,45,102,111,114,109,97,116,61,34,49,34,62,10,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,32,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,112,111,115,105,116,105,111,110,45,97,110,100,45,115,112,97,99,101,45,109,111,100,101,61,34,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,34,62,10,9,9,9,60,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,108,97,98,101,108,45,97,108,105,103,110,109,101,110,116,32,116,101,120,116,58,108,97,98,101,108,45,102,111,108,108,111,119,101,100,45,98,121,61,34,108,105,115,116,116,97,98,34,32,116,101,120,116,58,108,105,115,116,45,116,97,98,45,115,116,111,112,45,112,111,115,105,116,105,111,110,61,34,50,46,55,53,105,110,34,32,102,111,58,116,101,120,116,45,105,110,100,101,110,116,61,34,45,48,46,50,53,105,110,34,32,102,111,58,109,97,114,103,105,110,45,108,101,102,116,61,34,50,46,55,53,105,110,34,47,62,10,9,9,60,47,115,116,121,108,101,58,108,105,115,116,45,108,101,118,101,108,45,112,114,111,112,101,114,116,105,101,115,62,10,9,60,47,116,101,120,116,58,108,105,115,116,45,108,101,118,101,108,45,115,116,121,108,101,45,110,117,109,98,101,114,62,10,60,47,116,101,120,116,58,108,105,115,116,45,115,116,121,108,101,62,10,60,47,111,102,102,105,99,101,58,97,117,116,111,109,97,116,105,99,45,115,116,121,108,101,115,62,10,32,60,111,102,102,105,99,101,58,109,97,115,116,101,114,45,115,116,121,108,101,115,62,10,32,32,60,115,116,121,108,101,58,109,97,115,116,101,114,45,112,97,103,101,32,115,116,121,108,101,58,110,97,109,101,61,34,69,110,100,110,111,116,101,34,32,62,10,32,32,32,32,60,115,116,121,108,101,58,104,101,97,100,101,114,62,60,116,101,120,116,58,104,32,116,101,120,116,58,111,117,116,108,105,110,101,45,108,101,118,101,108,61,34,50,34,62,66,105,98,108,105,111,103,114,97,112,104,121,60,47,116,101,120,116,58,104,62,60,47,115,116,121,108,101,58,104,101,97,100,101,114,62,60,47,115,116,121,108,101,58,109,97,115,116,101,114,45,112,97,103,101,62,10,32,32,60,115,116,121,108,101,58,109,97,115,116,101,114,45,112,97,103,101,32,115,116,121,108,101,58,110,97,109,101,61,34,70,111,111,116,110,111,116,101,34,32,115,116,121,108,101,58,112,97,103,101,45,108,97,121,111,117,116,45,110,97,109,101,61,34,112,109,50,34,47,62,10,32,60,47,111,102,102,105,99,101,58,109,97,115,116,101,114,45,115,116,121,108,101,115,62,10,0,0,60,47,111,102,102,105,99,101,58,116,101,120,116,62,10,60,47,111,102,102,105,99,101,58,98,111,100,121,62,10,60,47,111,102,102,105,99,101,58,100,111,99,117,109,101,110,116,62,0,0,0,0,0,0,0,0,60,63,120,109,108,32,118,101,114,115,105,111,110,61,34,49,46,48,34,32,101,110,99,111,100,105,110,103,61,34,117,116,102,45,56,34,63,62,10,60,111,112,109,108,32,118,101,114,115,105,111,110,61,34,49,46,48,34,62,10,0,0,0,0,60,104,101,97,100,62,60,116,105,116,108,101,62,0,0,0,60,47,116,105,116,108,101,62,60,47,104,101,97,100,62,10,0,0,0,0,0,0,0,0,60,98,111,100,121,62,10,0,60,111,117,116,108,105,110,101,32,116,101,120,116,61,34,77,101,116,97,100,97,116,97,34,62,10,0,0,0,0,0,0,60,47,111,117,116,108,105,110,101,62,0,0,0,0,0,0,60,47,98,111,100,121,62,10,60,47,111,112,109,108,62,0,60,47,111,117,116,108,105,110,101,62,10,0,0,0,0,0,60,111,117,116,108,105,110,101,32,116,101,120,116,61,34,0,34,32,95,110,111,116,101,61,34,0,0,0,0,0,0,0,34,47,62,0,0,0,0,0,60,111,117,116,108,105,110,101,32,0,0,0,0,0,0,0,32,95,110,111,116,101,61,34,0,0,0,0,0,0,0,0,34,62,0,0,0,0,0,0,116,101,120,116,61,34,0,0,34,0,0,0,0,0,0,0,32,32,38,35,49,48,59,0,38,35,49,48,59,0,0,0,112,114,105,110,116,95,111,112,109,108,95,110,111,100,101,32,101,110,99,111,117,110,116,101,114,101,100,32,117,110,107,110,111,119,110,32,101,108,101,109,101,110,116,32,107,101,121,32,61,32,37,100,10,0,0,0,38,97,109,112,59,0,0,0,38,108,116,59,0,0,0,0,38,103,116,59,0,0,0,0,38,113,117,111,116,59,0,0,115,116,114,105,110,103,32,33,61,32,78,85,76,76,0,0,112,97,114,115,101,95,117,116,105,108,105,116,105,101,115,46,99,0,0,0,0,0,0,0,109,107,95,115,116,114,0,0,108,105,115,116,45,62,107,101,121,32,61,61,32,83,84,82,0,0,0,0,0,0,0,0,99,111,110,99,97,116,95,115,116,114,105,110,103,95,108,105,115,116,0,0,0,0,0,0,108,105,115,116,45,62,115,116,114,32,33,61,32,78,85,76,76,0,0,0,0,0,0,0,52,46,55,46,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,216,134], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+30720);
/* memory initializer */ allocate([123,92,105,110,102,111,10,0,125,10,0,0,0,0,0,0,98,97,115,101,104,101,97,100,101,114,108,101,118,101,108,0,114,116,102,104,101,97,100,101,114,108,101,118,101,108,0,0,113,117,111,116,101,115,108,97,110,103,117,97,103,101,0,0,110,108,0,0,0,0,0,0,100,117,116,99,104,0,0,0,100,101,0,0,0,0,0,0,103,101,114,109,97,110,0,0,103,101,114,109,97,110,103,117,105,108,108,101,109,101,116,115,0,0,0,0,0,0,0,0,102,114,0,0,0,0,0,0,102,114,101,110,99,104,0,0,115,118,0,0,0,0,0,0,115,119,101,100,105,115,104,0,116,105,116,108,101,0,0,0,123,92,116,105,116,108,101,32,0,0,0,0,0,0,0,0,97,117,116,104,111,114,0,0,123,92,97,117,116,104,111,114,32,0,0,0,0,0,0,0,97,102,102,105,108,105,97,116,105,111,110,0,0,0,0,0,123,92,99,111,109,112,97,110,121,32,0,0,0,0,0,0,99,111,109,112,97,110,121,0,107,101,121,119,111,114,100,115,0,0,0,0,0,0,0,0,123,92,107,101,121,119,111,114,100,115,32,0,0,0,0,0,99,111,112,121,114,105,103,104,116,0,0,0,0,0,0,0,123,92,42,92,99,111,112,121,114,105,103,104,116,32,0,0,99,111,109,109,101,110,116,0,123,92,100,111,99,99,111,109,109,32,0,0,0,0,0,0,115,117,98,106,101,99,116,0,123,92,115,117,98,106,101,99,116,32,0,0,0,0,0,0,123,92,112,97,114,100,32,92,115,55,32,92,113,106,92,115,97,49,56,48,92,102,50,92,102,115,50,48,92,108,105,51,54,48,92,114,105,51,54,48,32,0,0,0,0,0,0,0,10,92,112,97,114,125,10,0,123,92,112,97,114,100,32,92,115,55,32,92,113,106,92,115,97,49,56,48,92,102,48,92,102,115,50,52,92,108,105,55,50,48,92,114,105,55,50,48,32,0,0,0,0,0,0,0,123,92,112,97,114,100,32,92,115,55,32,92,113,106,92,115,97,49,56,48,92,102,48,92,102,115,50,52,92,108,105,51,54,48,92,114,105,51,54,48,32,0,0,0,0,0,0,0,123,92,112,97,114,100,32,92,115,48,32,92,113,106,92,115,97,49,56,48,92,102,48,92,102,115,50,52,32,0,0,0,123,92,112,97,114,100,32,92,115,49,32,92,102,49,92,102,115,51,50,92,113,108,92,115,98,50,52,48,92,115,97,49,56,48,92,98,32,0,0,0,123,92,112,97,114,100,32,92,115,50,32,92,102,49,92,102,115,50,56,92,113,108,92,115,98,50,52,48,92,115,97,49,56,48,92,105,92,98,32,0,123,92,112,97,114,100,32,92,115,51,32,92,102,49,92,102,115,50,56,92,113,108,92,115,98,50,52,48,92,115,97,49,56,48,92,98,32,0,0,0,123,92,112,97,114,100,32,92,115,52,32,92,102,49,92,102,115,50,52,92,113,108,92,115,98,50,52,48,92,115,97,49,56,48,92,105,92,98,32,0,123,92,112,97,114,100,32,92,115,53,32,92,102,49,92,102,115,50,52,92,113,108,92,115,98,50,52,48,92,115,97,49,56,48,92,98,32,0,0,0,123,92,112,97,114,100,32,92,115,54,32,92,102,49,92,102,115,50,50,92,113,108,92,115,98,50,52,48,92,115,97,49,56,48,92,98,32,0,0,0,123,92,42,92,98,107,109,107,115,116,97,114,116,32,37,115,125,123,92,42,92,98,107,109,107,101,110,100,32,37,115,125,0,0,0,0,0,0,0,0,92,112,97,114,125,10,0,0,123,92,112,97,114,100,32,92,115,48,32,92,113,106,92,115,97,49,56,48,92,102,48,92,102,115,50,52,32,92,113,99,32,0,0,0,0,0,0,0,92,112,97,114,100,92,112,97,114,10,0,0,0,0,0,0,92,116,114,111,119,100,92,116,114,97,117,116,111,102,105,116,49,10,0,0,0,0,0,0,92,99,101,108,108,120,37,100,10,0,0,0,0,0,0,0,92,114,111,119,10,0,0,0,92,105,110,116,98,108,0,0,92,113,99,123,92,98,32,0,92,113,114,0,0,0,0,0,92,113,99,0,0,0,0,0,92,113,108,0,0,0,0,0,32,123,0,0,0,0,0,0,125,0,0,0,0,0,0,0,125,92,99,101,108,108,10,0,123,92,98,32,0,0,0,0,123,92,105,32,0,0,0,0,92,108,105,110,101,32,0,0,93,0,0,0,0,0,0,0,91,37,115,93,0,0,0,0,123,92,102,105,101,108,100,123,92,42,92,102,108,100,105,110,115,116,123,72,89,80,69,82,76,73,78,75,32,34,0,0,34,125,125,123,92,102,108,100,114,115,108,116,32,0,0,0,125,125,0,0,0,0,0,0,92,108,115,49,92,105,108,118,108,48,32,0,0,0,0,0,123,92,108,105,115,116,116,101,120,116,32,92,39,57,53,32,125,0,0,0,0,0,0,0,123,92,115,117,112,101,114,92,99,104,102,116,110,125,123,92,102,111,111,116,110,111,116,101,92,112,97,114,100,92,112,108,97,105,110,92,99,104,116,102,110,32,0,0,0,0,0,0,58,32,0,0,0,0,0,0,123,92,115,117,112,101,114,92,99,104,102,116,110,125,123,92,102,111,111,116,110,111,116,101,92,102,116,110,97,108,116,92,112,97,114,100,92,112,108,97,105,110,92,99,104,116,102,110,32,0,0,0,0,0,0,0,82,69,85,83,69,32,67,73,84,65,84,73,79,78,0,0,93,91,0,0,0,0,0,0,35,37,115,93,0,0,0,0,92,10,0,0,0,0,0,0,73,77,65,71,69,83,32,67,65,78,78,79,84,32,66,69,32,73,78,83,69,82,84,69,68,32,73,78,84,79,32,65,78,32,82,84,70,32,68,79,67,85,77,69,78,84,32,70,82,79,77,32,77,85,76,84,73,77,65,82,75,68,79,87,78,32,92,10,0,0,0,0,91,37,37,37,115,93,0,0,112,114,105,110,116,95,114,116,102,95,110,111,100,101,32,101,110,99,111,117,110,116,101,114,101,100,32,117,110,107,110,111,119,110,32,110,111,100,101,32,107,101,121,32,61,32,37,100,10,0,0,0,0,0,0,0,123,92,114,116,102,49,92,97,110,115,105,92,100,101,102,102,48,32,123,92,102,111,110,116,116,98,108,10,123,92,102,48,92,102,114,111,109,97,110,32,84,105,109,101,115,32,78,101,119,32,82,111,109,97,110,59,125,10,123,92,102,49,92,102,115,119,105,115,115,32,65,114,105,97,108,59,125,10,123,92,102,50,92,102,109,111,100,101,114,110,32,67,111,117,114,105,101,114,32,78,101,119,59,125,10,125,10,123,92,115,116,121,108,101,115,104,101,101,116,10,123,92,115,48,32,92,113,106,92,115,97,49,56,48,92,102,48,92,102,115,50,52,32,78,111,114,109,97,108,59,125,10,123,92,115,49,32,92,102,49,92,102,115,51,50,92,113,108,92,115,98,50,52,48,92,115,97,49,56,48,92,98,32,72,101,97,100,101,114,32,49,59,125,10,123,92,115,50,32,92,102,49,92,102,115,50,56,92,113,108,92,115,98,50,52,48,92,115,97,49,56,48,92,105,92,98,32,72,101,97,100,101,114,32,50,59,125,10,123,92,115,51,32,92,102,49,92,102,115,50,56,92,113,108,92,115,98,50,52,48,92,115,97,49,56,48,92,98,32,72,101,97,100,101,114,32,51,59,125,10,123,92,115,52,32,92,102,49,92,102,115,50,52,92,113,108,92,115,98,50,52,48,92,115,97,49,56,48,92,105,92,98,32,72,101,97,100,101,114,32,52,59,125,10,123,92,115,53,32,92,102,49,92,102,115,50,52,92,113,108,92,115,98,50,52,48,92,115,97,49,56,48,92,98,32,72,101,97,100,101,114,32,53,59,125,10,123,92,115,54,32,92,102,49,92,102,115,50,50,92,113,108,92,115,98,50,52,48,92,115,97,49,56,48,92,98,32,72,101,97,100,101,114,32,54,59,125,10,123,92,115,55,32,92,113,106,92,115,97,49,56,48,92,102,48,92,102,115,50,52,92,108,105,55,50,48,92,114,105,55,50,48,32,81,117,111,116,97,116,105,111,110,59,125,10,123,92,115,55,32,92,113,106,92,115,97,49,56,48,92,102,48,92,102,115,50,52,92,108,105,51,54,48,92,114,105,51,54,48,32,78,111,116,101,59,125,10,125,10,92,109,97,114,103,116,49,49,53,48,92,109,97,114,103,98,49,49,53,48,92,109,97,114,103,108,49,49,53,48,92,109,97,114,103,114,49,49,53,48,10,0,0,0,0,38,35,56,50,49,55,59,0,38,35,51,57,59,0,0,0,38,35,56,50,49,56,59,0,38,35,56,50,53,48,59,0,92,39,57,49,0,0,0,0,38,35,56,50,49,54,59,0,38,35,56,50,52,57,59,0,92,39,57,50,0,0,0,0,92,39,50,55,0,0,0,0,38,35,56,50,50,50,59,0,38,35,49,56,55,59,0,0,38,35,49,55,49,59,0,0,38,35,56,50,50,49,59,0,92,39,57,51,0,0,0,0,38,35,56,50,50,48,59,0,92,39,57,52,0,0,0,0,92,39,57,54,0,0,0,0,92,39,57,55,0,0,0,0,92,39,56,53,0,0,0,0,92,92,0,0,0,0,0,0,92,123,0,0,0,0,0,0,92,125,0,0,0,0,0,0,32,10,0,0,0,0,0,0,37,115,58,9,0,0,0,0,112,114,105,110,116,95,116,101,120,116,95,110,111,100,101,32,101,110,99,111,117,110,116,101,114,101,100,32,117,110,107,110,111,119,110,32,110,111,100,101,32,107,101,121,32,61,32,37,100,10,0,0,0,0,0,0,9,0,0,0,0,0,0,0,42,32,0,0,0,0,0,0,91,0,0,0,0,0,0,0,93,91,37,115,93,10,0,0,42,0,0,0,0,0,0,0,37,115,0,0,0,0,0,0,112,114,105,110,116,95,116,111,99,95,110,111,100,101,32,101,110,99,111,117,110,116,101,114,101,100,32,117,110,107,110,111,119,110,32,110,111,100,101,32,107,101,121,32,61,32,37,100,10,0,0,0,0,0,0,0,92,93,0,0,0,0,0,0,108,97,110,103,0,0,0,0,60,33,68,79,67,84,89,80,69,32,104,116,109,108,62,10,60,104,116,109,108,32,108,97,110,103,61,34,37,115,34,62,10,60,104,101,97,100,62,10,9,60,109,101,116,97,32,99,104,97,114,115,101,116,61,34,117,116,102,45,56,34,47,62,10,0,0,0,0,0,0,0,60,33,68,79,67,84,89,80,69,32,104,116,109,108,62,10,60,104,116,109,108,62,10,60,104,101,97,100,62,10,9,60,109,101,116,97,32,99,104,97,114,115,101,116,61,34,117,116,102,45,56,34,47,62,10,0,60,47,98,111,100,121,62,10,60,47,104,116,109,108,62,0,85,110,107,110,111,119,110,32,101,120,112,111,114,116,32,102,111,114,109,97,116,32,61,32,37,100,10,0,0,0,0,0,116,114,121,32,116,111,32,101,120,116,114,97,99,116,32,108,105,110,107,32,102,111,114,32,39,37,115,39,10,0,0,0,97,58,109,97,116,99,104,101,100,32,37,115,32,116,111,32,37,115,10,0,0,0,0,0,97,58,100,105,100,32,110,111,116,32,109,97,116,99,104,32,37,115,32,116,111,32,37,115,10,0,0,0,0,0,0,0,98,58,109,97,116,99,104,101,100,32,37,115,32,116,111,32,37,115,10,0,0,0,0,0,98,58,100,105,100,32,110,111,116,32,109,97,116,99,104,32,37,115,32,116,111,32,37,115,10,0,0,0,0,0,0,0,102,105,110,105,115,104,32,101,120,116,114,97,99,116,10,0,1,0,0,0,0,0,0,0,108,97,116,101,120,109,111,100,101,0,0,0,0,0,0,0,98,101,97,109,101,114,0,0,77,117,108,116,105,77,97,114,107,100,111,119,110,32,119,97,115,32,117,110,97,98,108,101,32,116,111,32,112,97,114,115,101,32,116,104,105,115,32,102,105,108,101,46,0,0,0,0,121,121,80,117,115,104,0,0,121,121,83,101,116,0,0,0,121,121,95,49,95,68,111,99,70,111,114,77,101,116,97,68,97,116,97,79,110,108,121,0,121,121,95,50,95,68,111,99,70,111,114,77,101,116,97,68,97,116,97,79,110,108,121,0,121,121,80,111,112,0,0,0,121,121,95,49,95,83,107,105,112,66,108,111,99,107,0,0,32,32,32,0,0,0,0,0,32,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,121,121,95,49,95,72,116,109,108,66,108,111,99,107,0,0,0,0,0,0,0,0,255,3,254,255,255,7,254,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,45,90,97,45,122,48,45,57,0,0,0,0,0,0,0,97,100,100,114,101,115,115,0,98,108,111,99,107,113,117,111,116,101,0,0,0,0,0,0,99,101,110,116,101,114,0,0,100,105,114,0,0,0,0,0,100,105,118,0,0,0,0,0,100,108,0,0,0,0,0,0,102,105,101,108,100,115,101,116,0,0,0,0,0,0,0,0,102,111,114,109,0,0,0,0,104,49,0,0,0,0,0,0,104,50,0,0,0,0,0,0,104,51,0,0,0,0,0,0,104,52,0,0,0,0,0,0,104,53,0,0,0,0,0,0,104,54,0,0,0,0,0,0,104,114,0,0,0,0,0,0,105,115,105,110,100,101,120,0,109,101,110,117,0,0,0,0,110,111,102,114,97,109,101,115,0,0,0,0,0,0,0,0,110,111,115,99,114,105,112,116,0,0,0,0,0,0,0,0,111,108,0,0,0,0,0,0,112,114,101,0,0,0,0,0,116,97,98,108,101,0,0,0,117,108,0,0,0,0,0,0,100,100,0,0,0,0,0,0,100,116,0,0,0,0,0,0,102,114,97,109,101,115,101,116,0,0,0,0,0,0,0,0,108,105,0,0,0,0,0,0,116,98,111,100,121,0,0,0,116,100,0,0,0,0,0,0,116,102,111,111,116,0,0,0,116,104,0,0,0,0,0,0,116,104,101,97,100,0,0,0,116,114,0,0,0,0,0,0,115,99,114,105,112,116,0,0,65,68,68,82,69,83,83,0,66,76,79,67,75,81,85,79,84,69,0,0,0,0,0,0,67,69,78,84,69,82,0,0,68,73,82,0,0,0,0,0,68,73,86,0,0,0,0,0,68,76,0,0,0,0,0,0,70,73,69,76,68,83,69,84,0,0,0,0,0,0,0,0,70,79,82,77,0,0,0,0,72,49,0,0,0,0,0,0,72,50,0,0,0,0,0,0,72,51,0,0,0,0,0,0,72,52,0,0,0,0,0,0,72,53,0,0,0,0,0,0,72,54,0,0,0,0,0,0,72,82,0,0,0,0,0,0,73,83,73,78,68,69,88,0,77,69,78,85,0,0,0,0,78,79,70,82,65,77,69,83,0,0,0,0,0,0,0,0,78,79,83,67,82,73,80,84,0,0,0,0,0,0,0,0,79,76,0,0,0,0,0,0,80,82,69,0,0,0,0,0,84,65,66,76,69,0,0,0,85,76,0,0,0,0,0,0,68,68,0,0,0,0,0,0,68,84,0,0,0,0,0,0,70,82,65,77,69,83,69,84,0,0,0,0,0,0,0,0,76,73,0,0,0,0,0,0,84,66,79,68,89,0,0,0,84,68,0,0,0,0,0,0,84,70,79,79,84,0,0,0,84,72,0,0,0,0,0,0,84,72,69,65,68,0,0,0,84,82,0,0,0,0,0,0,83,67,82,73,80,84,0,0,60,33,45,45,0,0,0,0,45,45,62,0,0,0,0,0,109,97,114,107,0,0,0,0,77,65,82,75,0,0,0,0,105,110,115,0,0,0,0,0,73,78,83,0,0,0,0,0,100,101,108,0,0,0,0,0,68,69,76,0,0,0,0,0,110,97,118,0,0,0,0,0,78,65,86,0,0,0,0,0,109,97,105,110,0,0,0,0,77,65,73,78,0,0,0,0,104,101,97,100,0,0,0,0,72,69,65,68,0,0,0,0,118,105,100,101,111,0,0,0,86,73,68,69,79,0,0,0,115,101,99,116,105,111,110,0,83,69,67,84,73,79,78,0,112,114,111,103,114,101,115,115,0,0,0,0,0,0,0,0,80,82,79,71,82,69,83,83,0,0,0,0,0,0,0,0,104,103,114,111,117,112,0,0,72,71,82,79,85,80,0,0,104,101,97,100,101,114,0,0,72,69,65,68,69,82,0,0,102,111,111,116,101,114,0,0,70,79,79,84,69,82,0,0,102,105,103,117,114,101,0,0,70,73,71,85,82,69,0,0,99,97,110,118,97,115,0,0,67,65,78,86,65,83,0,0,97,115,105,100,101,0,0,0,65,83,73,68,69,0,0,0,97,114,116,105,99,108,101,0,65,82,84,73,67,76,69,0,121,121,95,49,95,77,97,114,107,100,111,119,110,72,116,109,108,84,97,103,79,112,101,110,0,0,0,0,0,0,0,0,121,121,95,50,95,77,97,114,107,100,111,119,110,72,116,109,108,84,97,103,79,112,101,110,0,0,0,0,0,0,0,0,121,121,95,51,95,77,97,114,107,100,111,119,110,72,116,109,108,84,97,103,79,112,101,110,0,0,0,0,0,0,0,0,121,121,95,52,95,77,97,114,107,100,111,119,110,72,116,109,108,84,97,103,79,112,101,110,0,0,0,0,0,0,0,0,121,121,95,53,95,77,97,114,107,100,111,119,110,72,116,109,108,84,97,103,79,112,101,110,0,0,0,0,0,0,0,0,121,121,95,54,95,77,97,114,107,100,111,119,110,72,116,109,108,84,97,103,79,112,101,110,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,109,97,114,107,100,111,119,110,0,0,0,0,0,0,0,0,77,65,82,75,68,79,87,78,0,0,0,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,7,254,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,45,90,97,45,122,0,0,58,47,47,0,0,0,0,0,121,121,95,49,95,77,101,116,97,68,97,116,97,0,0,0,121,121,95,50,95,77,101,116,97,68,97,116,97,0,0,0,45,45,45,0,0,0,0,0,46,46,46,0,0,0,0,0,121,121,95,49,95,77,101,116,97,68,97,116,97,75,101,121,86,97,108,117,101,0,0,0,121,121,95,49,95,77,101,116,97,68,97,116,97,86,97,108,117,101,0,0,0,0,0,0,121,121,95,50,95,77,101,116,97,68,97,116,97,86,97,108,117,101,0,0,0,0,0,0,121,121,95,51,95,77,101,116,97,68,97,116,97,86,97,108,117,101,0,0,0,0,0,0,121,121,95,52,95,77,101,116,97,68,97,116,97,86,97,108,117,101,0,0,0,0,0,0,10,0,0,0,0,0,0,0,121,121,95,49,95,83,101,116,101,120,116,72,101,97,100,105,110,103,50,0,0,0,0,0,121,121,95,50,95,83,101,116,101,120,116,72,101,97,100,105,110,103,50,0,0,0,0,0,121,121,95,51,95,83,101,116,101,120,116,72,101,97,100,105,110,103,50,0,0,0,0,0,121,121,95,49,95,83,121,109,98,111,108,0,0,0,0,0,227,128,130,0,0,0,0,0,227,128,129,0,0,0,0,0,121,121,95,49,95,65,112,111,115,116,114,111,112,104,101,0,121,121,95,49,95,66,97,99,107,84,105,99,107,81,117,111,116,101,100,0,0,0,0,0,121,121,95,50,95,66,97,99,107,84,105,99,107,81,117,111,116,101,100,0,0,0,0,0,39,39,0,0,0,0,0,0,96,96,0,0,0,0,0,0,121,121,95,49,95,68,111,117,98,108,101,81,117,111,116,101,100,0,0,0,0,0,0,0,121,121,95,50,95,68,111,117,98,108,101,81,117,111,116,101,100,0,0,0,0,0,0,0,121,121,95,49,95,83,105,110,103,108,101,81,117,111,116,101,100,0,0,0,0,0,0,0,121,121,95,50,95,83,105,110,103,108,101,81,117,111,116,101,100,0,0,0,0,0,0,0,48,45,57,65,45,90,97,45,122,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,129,0,0,0,0,0,0,0,130,0,0,0,0,0,0,0,131,0,0,0,0,0,0,0,132,0,0,0,0,0,0,0,133,0,0,0,0,0,0,0,134,0,0,0,0,0,0,0,135,0,0,0,0,0,0,0,136,0,0,0,0,0,0,0,137,0,0,0,0,0,0,0,138,0,0,0,0,0,0,0,139,0,0,0,0,0,0,0,140,0,0,0,0,0,0,0,141,0,0,0,0,0,0,0,142,0,0,0,0,0,0,0,143,0,0,0,0,0,0,0,144,0,0,0,0,0,0,0,145,0,0,0,0,0,0,0,146,0,0,0,0,0,0,0,147,0,0,0,0,0,0,0,148,0,0,0,0,0,0,0,149,0,0,0,0,0,0,0,150,0,0,0,0,0,0,0,151,0,0,0,0,0,0,0,152,0,0,0,0,0,0,0,153,0,0,0,0,0,0,0,154,0,0,0,0,0,0,0,155,0,0,0,0,0,0,0,156,0,0,0,0,0,0,0,157,0,0,0,0,0,0,0,158,0,0,0,0,0,0,0,159,0,0,0,0,0,0,0,160,0,0,0,0,0,0,0,161,0,0,0,0,0,0,0,162,0,0,0,0,0,0,0,163,0,0,0,0,0,0,0,164,0,0,0,0,0,0,0,165,0,0,0,0,0,0,0,166,0,0,0,0,0,0,0,167,0,0,0,0,0,0,0,168,0,0,0,0,0,0,0,169,0,0,0,0,0,0,0,170,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,172,0,0,0,0,0,0,0,173,0,0,0,0,0,0,0,174,0,0,0,0,0,0,0,175,0,0,0,0,0,0,0,176,0,0,0,0,0,0,0,177,0,0,0,0,0,0,0,178,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,180,0,0,0,0,0,0,0,181,0,0,0,0,0,0,0,182,0,0,0,0,0,0,0,183,0,0,0,0,0,0,0,184,0,0,0,0,0,0,0,185,0,0,0,0,0,0,0,186,0,0,0,0,0,0,0,187,0,0,0,0,0,0,0,188,0,0,0,0,0,0,0,189,0,0,0,0,0,0,0,190,0,0,0,0,0,0,0,191,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,193,0,0,0,0,0,0,0,194,0,0,0,0,0,0,0,195,0,0,0,0,0,0,0,196,0,0,0,0,0,0,0,197,0,0,0,0,0,0,0,198,0,0,0,0,0,0,0,199,0,0,0,0,0,0,0,200,0,0,0,0,0,0,0,201,0,0,0,0,0,0,0,202,0,0,0,0,0,0,0,203,0,0,0,0,0,0,0,204,0,0,0,0,0,0,0,205,0,0,0,0,0,0,0,206,0,0,0,0,0,0,0,207,0,0,0,0,0,0,0,208,0,0,0,0,0,0,0,209,0,0,0,0,0,0,0,210,0,0,0,0,0,0,0,211,0,0,0,0,0,0,0,212,0,0,0,0,0,0,0,213,0,0,0,0,0,0,0,214,0,0,0,0,0,0,0,215,0,0,0,0,0,0,0,216,0,0,0,0,0,0,0,217,0,0,0,0,0,0,0,218,0,0,0,0,0,0,0,219,0,0,0,0,0,0,0,220,0,0,0,0,0,0,0,221,0,0,0,0,0,0,0,222,0,0,0,0,0,0,0,223,0,0,0,0,0,0,0,224,0,0,0,0,0,0,0,225,0,0,0,0,0,0,0,226,0,0,0,0,0,0,0,227,0,0,0,0,0,0,0,228,0,0,0,0,0,0,0,229,0,0,0,0,0,0,0,230,0,0,0,0,0,0,0,231,0,0,0,0,0,0,0,232,0,0,0,0,0,0,0,233,0,0,0,0,0,0,0,234,0,0,0,0,0,0,0,235,0,0,0,0,0,0,0,236,0,0,0,0,0,0,0,237,0,0,0,0,0,0,0,238,0,0,0,0,0,0,0,239,0,0,0,0,0,0,0,240,0,0,0,0,0,0,0,241,0,0,0,0,0,0,0,242,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,244,0,0,0,0,0,0,0,245,0,0,0,0,0,0,0,246,0,0,0,0,0,0,0,247,0,0,0,0,0,0,0,248,0,0,0,0,0,0,0,249,0,0,0,0,0,0,0,250,0,0,0,0,0,0,0,251,0,0,0,0,0,0,0,252,0,0,0,0,0,0,0,253,0,0,0,0,0,0,0,254,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,45,45,0,0,0,0,0,0,121,121,95,49,95,69,110,68,97,115,104,0,0,0,0,0,0,0,0,0,0,0,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,45,57,0,0,0,0,0,121,121,95,49,95,69,109,68,97,115,104,0,0,0,0,0,46,32,46,32,46,0,0,0,121,121,95,49,95,69,108,108,105,112,115,105,115,0,0,0,0,4,0,0,158,111,0,80,0,0,0,248,1,0,0,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,92,92,96,124,42,95,123,125,91,92,93,40,41,35,43,46,33,36,62,60,39,34,34,92,110,126,94,0,0,0,0,121,121,95,49,95,69,115,99,97,112,101,100,67,104,97,114,0,0,0,0,0,0,0,0,121,121,95,49,95,69,110,116,105,116,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,120,0,0,0,0,0,0,0,0,0,0,0,0,255,3,126,0,0,0,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,45,57,97,45,102,65,45,70,0,0,0,0,0,0,0,121,121,95,49,95,82,97,119,72,116,109,108,0,0,0,0,121,121,95,49,95,67,111,100,101,0,0,0,0,0,0,0,96,96,96,96,96,0,0,0,96,96,96,96,0,0,0,0,96,96,96,0,0,0,0,0,91,94,0,0,0,0,0,0,121,121,95,49,95,78,111,116,101,82,101,102,101,114,101,110,99,101,0,0,0,0,0,0,109,97,105,108,116,111,58,0,0,0,0,0,50,232,255,3,254,255,255,135,254,255,255,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,65,45,90,97,45,122,48,45,57,43,95,46,47,33,37,37,126,36,0,0,0,0,0,121,121,95,49,95,65,117,116,111,76,105,110,107,69,109,97,105,108,0,0,0,0,0,0,109,97,105,108,116,111,58,37,115,0,0,0,0,0,0,0,121,121,95,49,95,65,117,116,111,76,105,110,107,85,114,108,0,0,0,0,0,0,0,0,91,93,0,0,0,0,0,0,121,121,95,49,95,82,101,102,101,114,101,110,99,101,76,105,110,107,83,105,110,103,108,101,0,0,0,0,0,0,0,0,121,121,95,49,95,76,97,98,101,108,0,0,0,0,0,0,121,121,95,50,95,76,97,98,101,108,0,0,0,0,0,0,121,121,95,49,95,82,101,102,101,114,101,110,99,101,76,105,110,107,68,111,117,98,108,101,0,0,0,0,0,0,0,0,121,121,95,49,95,69,120,112,108,105,99,105,116,76,105,110,107,0,0,0,0,0,0,0,121,121,95,49,95,84,105,116,108,101,0,0,0,0,0,0,121,121,95,49,95,83,111,117,114,99,101,0,0,0,0,0,121,121,95,49,95,73,109,97,103,101,0,0,0,0,0,0,91,37,0,0,0,0,0,0,121,121,95,49,95,86,97,114,105,97,98,108,101,0,0,0,121,121,95,49,95,67,105,116,97,116,105,111,110,82,101,102,101,114,101,110,99,101,83,105,110,103,108,101,0,0,0,0,91,35,0,0,0,0,0,0,121,121,95,49,95,82,97,119,67,105,116,97,116,105,111,110,82,101,102,101,114,101,110,99,101,0,0,0,0,0,0,0,121,121,95,49,95,67,105,116,97,116,105,111,110,82,101,102,101,114,101,110,99,101,68,111,117,98,108,101,0,0,0,0,110,111,116,99,105,116,101,100,0,0,0,0,0,0,0,0,121,121,95,49,95,69,109,112,104,85,108,0,0,0,0,0,121,121,95,50,95,69,109,112,104,85,108,0,0,0,0,0,121,121,95,51,95,69,109,112,104,85,108,0,0,0,0,0,95,95,0,0,0,0,0,0,121,121,95,49,95,83,116,114,111,110,103,85,108,0,0,0,121,121,95,50,95,83,116,114,111,110,103,85,108,0,0,0,121,121,95,49,95,69,109,112,104,83,116,97,114,0,0,0,121,121,95,50,95,69,109,112,104,83,116,97,114,0,0,0,121,121,95,51,95,69,109,112,104,83,116,97,114,0,0,0,42,42,0,0,0,0,0,0,121,121,95,49,95,83,116,114,111,110,103,83,116,97,114,0,121,121,95,50,95,83,116,114,111,110,103,83,116,97,114,0,121,121,95,49,95,69,109,112,104,65,110,100,83,116,114,111,110,103,85,108,0,0,0,0,121,121,95,50,95,69,109,112,104,65,110,100,83,116,114,111,110,103,85,108,0,0,0,0,121,121,95,49,95,69,109,112,104,65,110,100,83,116,114,111,110,103,83,116,97,114,0,0,121,121,95,50,95,69,109,112,104,65,110,100,83,116,114,111,110,103,83,116,97,114,0,0,95,95,95,0,0,0,0,0,121,121,95,49,95,83,116,114,111,110,103,65,110,100,69,109,112,104,85,108,0,0,0,0,121,121,95,50,95,83,116,114,111,110,103,65,110,100,69,109,112,104,85,108,0,0,0,0,42,42,42,0,0,0,0,0,121,121,95,49,95,83,116,114,111,110,103,65,110,100,69,109,112,104,83,116,97,114,0,0,121,121,95,50,95,83,116,114,111,110,103,65,110,100,69,109,112,104,83,116,97,114,0,0,121,121,95,49,95,83,112,97,99,101,0,0,0,0,0,0,121,121,95,49,95,85,108,79,114,83,116,97,114,76,105,110,101,0,0,0,0,0,0,0,42,42,42,42,0,0,0,0,95,95,95,95,0,0,0,0,92,91,0,0,0,0,0,0,92,92,93,0,0,0,0,0,92,40,0,0,0,0,0,0,92,92,41,0,0,0,0,0,121,121,95,49,95,77,97,116,104,83,112,97,110,0,0,0,121,121,95,49,95,83,116,114,0,0,0,0,0,0,0,0,121,121,95,50,95,83,116,114,0,0,0,0,0,0,0,0,121,121,95,51,95,83,116,114,0,0,0,0,0,0,0,0,121,121,95,52,95,83,116,114,0,0,0,0,0,0,0,0,121,121,95,49,95,83,117,98,115,99,114,105,112,116,0,0,121,121,95,49,95,83,117,112,101,114,115,99,114,105,112,116,0,0,0,0,0,0,0,0,121,121,95,49,95,83,116,114,67,104,117,110,107,0,0,0,121,121,95,49,95,65,112,111,115,67,104,117,110,107,0,0,121,121,95,49,95,68,111,117,98,108,101,68,111,108,108,97,114,77,97,116,104,0,0,0,121,121,95,49,95,83,105,110,103,108,101,68,111,108,108,97,114,77,97,116,104,0,0,0,123,62,62,0,0,0,0,0,60,60,125,0,0,0,0,0,121,121,95,49,95,67,114,105,116,105,99,67,111,109,109,101,110,116,0,0,0,0,0,0,123,61,61,0,0,0,0,0,61,61,125,0,0,0,0,0,121,121,95,49,95,67,114,105,116,105,99,72,105,103,104,108,105,103,104,116,0,0,0,0,123,126,126,0,0,0,0,0,121,121,95,49,95,67,114,105,116,105,99,83,117,98,115,116,105,116,117,116,105,111,110,0,126,62,0,0,0,0,0,0,121,121,95,50,95,67,114,105,116,105,99,83,117,98,115,116,105,116,117,116,105,111,110,0,126,126,125,0,0,0,0,0,121,121,95,51,95,67,114,105,116,105,99,83,117,98,115,116,105,116,117,116,105,111,110,0,121,121,95,49,95,67,114,105,116,105,99,83,117,98,115,116,65,100,100,0,0,0,0,0,121,121,95,49,95,67,114,105,116,105,99,83,117,98,115,116,68,101,108,0,0,0,0,0,123,45,45,0,0,0,0,0,45,45,125,0,0,0,0,0,121,121,95,49,95,67,114,105,116,105,99,68,101,108,101,116,105,111,110,0,0,0,0,0,123,43,43,0,0,0,0,0,43,43,125,0,0,0,0,0,121,121,95,49,95,67,114,105,116,105,99,65,100,100,105,116,105,111,110,0,0,0,0,0,121,121,95,49,95,65,117,116,111,76,97,98,101,108,0,0,35,0,0,0,0,0,0,0,121,121,95,49,95,78,111,114,109,97,108,69,110,100,108,105,110,101,0,0,0,0,0,0,35,35,35,35,35,35,0,0,35,35,35,35,35,0,0,0,35,35,35,35,0,0,0,0,35,35,35,0,0,0,0,0,35,35,0,0,0,0,0,0,121,121,95,49,95,65,116,120,83,116,97,114,116,0,0,0,121,121,95,49,95,84,101,114,109,105,110,97,108,69,110,100,108,105,110,101,0,0,0,0,121,121,95,49,95,76,105,110,101,66,114,101,97,107,0,0,121,121,95,49,95,83,101,116,101,120,116,72,101,97,100,105,110,103,49,0,0,0,0,0,121,121,95,50,95,83,101,116,101,120,116,72,101,97,100,105,110,103,49,0,0,0,0,0,121,121,95,51,95,83,101,116,101,120,116,72,101,97,100,105,110,103,49,0,0,0,0,0,121,121,95,49,95,77,101,116,97,68,97,116,97,75,101,121,0,0,0,0,0,0,0,0,121,121,95,49,95,83,116,97,114,116,76,105,115,116,0,0,239,187,191,0,0,0,0,0,121,121,95,49,95,68,111,99,70,111,114,84,79,67,0,0,121,121,95,50,95,68,111,99,70,111,114,84,79,67,0,0,121,121,95,51,95,68,111,99,70,111,114,84,79,67,0,0,121,121,95,49,95,84,79,67,80,108,97,105,110,0,0,0,121,121,95,49,95,76,105,110,101,0,0,0,0,0,0,0,121,121,95,49,95,65,116,120,72,101,97,100,105,110,103,0,121,121,95,50,95,65,116,120,72,101,97,100,105,110,103,0,121,121,95,51,95,65,116,120,72,101,97,100,105,110,103,0,121,121,95,49,95,84,79,67,72,101,97,100,105,110,103,83,101,99,116,105,111,110,0,0,121,121,95,50,95,84,79,67,72,101,97,100,105,110,103,83,101,99,116,105,111,110,0,0,121,121,95,49,95,68,111,99,70,111,114,79,80,77,76,0,121,121,95,50,95,68,111,99,70,111,114,79,80,77,76,0,121,121,95,51,95,68,111,99,70,111,114,79,80,77,76,0,121,121,95,49,95,79,80,77,76,80,108,97,105,110,0,0,121,121,95,50,95,79,80,77,76,80,108,97,105,110,0,0,121,121,95,49,95,79,80,77,76,72,101,97,100,105,110,103,83,101,99,116,105,111,110,0,121,121,95,50,95,79,80,77,76,72,101,97,100,105,110,103,83,101,99,116,105,111,110,0,121,121,95,51,95,79,80,77,76,72,101,97,100,105,110,103,83,101,99,116,105,111,110,0,121,121,95,49,95,79,80,77,76,83,101,116,101,120,116,72,101,97,100,105,110,103,50,0,121,121,95,49,95,79,80,77,76,83,101,116,101,120,116,72,101,97,100,105,110,103,49,0,121,121,95,49,95,79,80,77,76,65,116,120,72,101,97,100,105,110,103,0,0,0,0,0,121,121,95,49,95,68,111,99,70,111,114,67,114,105,116,105,99,0,0,0,0,0,0,0,121,121,95,50,95,68,111,99,70,111,114,67,114,105,116,105,99,0,0,0,0,0,0,0,121,121,95,51,95,68,111,99,70,111,114,67,114,105,116,105,99,0,0,0,0,0,0,0,121,121,95,52,95,68,111,99,70,111,114,67,114,105,116,105,99,0,0,0,0,0,0,0,121,121,95,53,95,68,111,99,70,111,114,67,114,105,116,105,99,0,0,0,0,0,0,0,121,121,95,49,95,70,97,108,115,101,77,97,116,99,104,0,121,121,95,49,95,82,97,119,83,116,114,105,110,103,0,0,121,121,95,49,95,68,111,99,0,0,0,0,0,0,0,0,121,121,95,50,95,68,111,99,0,0,0,0,0,0,0,0,121,121,95,51,95,68,111,99,0,0,0,0,0,0,0,0,121,121,95,49,95,80,108,97,105,110,0,0,0,0,0,0,121,121,95,49,95,73,110,108,105,110,101,115,0,0,0,0,121,121,95,50,95,73,110,108,105,110,101,115,0,0,0,0,121,121,95,51,95,73,110,108,105,110,101,115,0,0,0,0,121,121,95,49,95,80,97,114,97,0,0,0,0,0,0,0,123,123,84,79,67,125,125,0,121,121,95,49,95,84,79,67,0,0,0,0,0,0,0,0,121,121,95,49,95,73,109,97,103,101,66,108,111,99,107,0,121,121,95,49,95,84,97,98,108,101,0,0,0,0,0,0,121,121,95,50,95,84,97,98,108,101,0,0,0,0,0,0,121,121,95,51,95,84,97,98,108,101,0,0,0,0,0,0,121,121,95,52,95,84,97,98,108,101,0,0,0,0,0,0,121,121,95,53,95,84,97,98,108,101,0,0,0,0,0,0,121,121,95,54,95,84,97,98,108,101,0,0,0,0,0,0,121,121,95,55,95,84,97,98,108,101,0,0,0,0,0,0,121,121,95,49,95,83,101,112,97,114,97,116,111,114,76,105,110,101,0,0,0,0,0,0,121,121,95,50,95,83,101,112,97,114,97,116,111,114,76,105,110,101,0,0,0,0,0,0,121,121,95,51,95,83,101,112,97,114,97,116,111,114,76,105,110,101,0,0,0,0,0,0,104,0,0,0,0,0,0,0,121,121,95,49,95,82,105,103,104,116,65,108,105,103,110,0,114,0,0,0,0,0,0,0,121,121,95,49,95,67,101,110,116,101,114,65,108,105,103,110,0,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,121,121,95,49,95,76,101,102,116,65,108,105,103,110,0,0,108,0,0,0,0,0,0,0,121,121,95,49,95,82,105,103,104,116,65,108,105,103,110,87,114,97,112,0,0,0,0,0,82,0,0,0,0,0,0,0,121,121,95,49,95,67,101,110,116,101,114,65,108,105,103,110,87,114,97,112,0,0,0,0,67,0,0,0,0,0,0,0,121,121,95,49,95,76,101,102,116,65,108,105,103,110,87,114,97,112,0,0,0,0,0,0,76,0,0,0,0,0,0,0,121,121,95,49,95,84,97,98,108,101,66,111,100,121,0,0,121,121,95,50,95,84,97,98,108,101,66,111,100,121,0,0,121,121,95,49,95,84,97,98,108,101,82,111,119,0,0,0,121,121,95,50,95,84,97,98,108,101,82,111,119,0,0,0,121,121,95,49,95,70,117,108,108,67,101,108,108,0,0,0,121,121,95,50,95,70,117,108,108,67,101,108,108,0,0,0,121,121,95,49,95,69,109,112,116,121,67,101,108,108,0,0,121,121,95,49,95,69,120,116,101,110,100,101,100,67,101,108,108,0,0,0,0,0,0,0,121,121,95,49,95,84,97,98,108,101,67,97,112,116,105,111,110,0,0,0,0,0,0,0,121,121,95,50,95,84,97,98,108,101,67,97,112,116,105,111,110,0,0,0,0,0,0,0,121,121,95,49,95,83,116,121,108,101,66,108,111,99,107,0,115,116,121,108,101,0,0,0,83,84,89,76,69,0,0,0,121,121,95,49,95,77,97,114,107,100,111,119,110,72,116,109,108,66,108,111,99,107,0,0,121,121,95,49,95,66,117,108,108,101,116,76,105,115,116,0,121,121,95,49,95,76,105,115,116,76,111,111,115,101,0,0,121,121,95,50,95,76,105,115,116,76,111,111,115,101,0,0,10,10,0,0,0,0,0,0,121,121,95,49,95,76,105,115,116,73,116,101,109,0,0,0,121,121,95,50,95,76,105,115,116,73,116,101,109,0,0,0,121,121,95,51,95,76,105,115,116,73,116,101,109,0,0,0,121,121,95,52,95,76,105,115,116,73,116,101,109,0,0,0,121,121,95,49,95,76,105,115,116,67,111,110,116,105,110,117,97,116,105,111,110,66,108,111,99,107,0,0,0,0,0,0,121,121,95,50,95,76,105,115,116,67,111,110,116,105,110,117,97,116,105,111,110,66,108,111,99,107,0,0,0,0,0,0,121,121,95,51,95,76,105,115,116,67,111,110,116,105,110,117,97,116,105,111,110,66,108,111,99,107,0,0,0,0,0,0,32,32,32,32,0,0,0,0,121,121,95,49,95,76,105,115,116,66,108,111,99,107,0,0,121,121,95,50,95,76,105,115,116,66,108,111,99,107,0,0,121,121,95,51,95,76,105,115,116,66,108,111,99,107,0,0,121,121,95,49,95,69,109,112,116,121,76,105,115,116,0,0,121,121,95,49,95,76,105,115,116,84,105,103,104,116,0,0,121,121,95,50,95,76,105,115,116,84,105,103,104,116,0,0,121,121,95,49,95,76,105,115,116,73,116,101,109,84,105,103,104,116,0,0,0,0,0,0,121,121,95,50,95,76,105,115,116,73,116,101,109,84,105,103,104,116,0,0,0,0,0,0,121,121,95,51,95,76,105,115,116,73,116,101,109,84,105,103,104,116,0,0,0,0,0,0,121,121,95,52,95,76,105,115,116,73,116,101,109,84,105,103,104,116,0,0,0,0,0,0,121,121,95,49,95,79,114,100,101,114,101,100,76,105,115,116,0,0,0,0,0,0,0,0,121,121,95,49,95,72,101,97,100,105,110,103,83,101,99,116,105,111,110,0,0,0,0,0,121,121,95,50,95,72,101,97,100,105,110,103,83,101,99,116,105,111,110,0,0,0,0,0,121,121,95,51,95,72,101,97,100,105,110,103,83,101,99,116,105,111,110,0,0,0,0,0,121,121,95,49,95,72,111,114,105,122,111,110,116,97,108,82,117,108,101,0,0,0,0,0,121,121,95,49,95,65,98,98,114,101,118,105,97,116,105,111,110,0,0,0,0,0,0,0,121,121,95,49,95,76,105,110,107,82,101,102,101,114,101,110,99,101,0,0,0,0,0,0,121,121,95,50,95,76,105,110,107,82,101,102,101,114,101,110,99,101,0,0,0,0,0,0,121,121,95,49,95,65,116,116,114,105,98,117,116,101,115,0,121,121,95,50,95,65,116,116,114,105,98,117,116,101,115,0,121,121,95,49,95,65,116,116,114,105,98,117,116,101,0,0,121,121,95,49,95,65,116,116,114,86,97,108,117,101,0,0,121,121,95,49,95,65,116,116,114,75,101,121,0,0,0,0,121,121,95,49,95,82,101,102,84,105,116,108,101,0,0,0,121,121,95,49,95,82,101,102,83,114,99,0,0,0,0,0,121,121,95,49,95,78,111,116,101,0,0,0,0,0,0,0,121,121,95,50,95,78,111,116,101,0,0,0,0,0,0,0,121,121,95,51,95,78,111,116,101,0,0,0,0,0,0,0,121,121,95,49,95,82,97,119,78,111,116,101,66,108,111,99,107,0,0,0,0,0,0,0,121,121,95,50,95,82,97,119,78,111,116,101,66,108,111,99,107,0,0,0,0,0,0,0,121,121,95,51,95,82,97,119,78,111,116,101,66,108,111,99,107,0,0,0,0,0,0,0,121,121,95,49,95,82,97,119,78,111,116,101,82,101,102,101,114,101,110,99,101,0,0,0,103,108,111,115,115,97,114,121,58,0,0,0,0,0,0,0,121,121,95,49,95,71,108,111,115,115,97,114,121,0,0,0,121,121,95,50,95,71,108,111,115,115,97,114,121,0,0,0,121,121,95,51,95,71,108,111,115,115,97,114,121,0,0,0,121,121,95,52,95,71,108,111,115,115,97,114,121,0,0,0,121,121,95,53,95,71,108,111,115,115,97,114,121,0,0,0,121,121,95,49,95,71,108,111,115,115,97,114,121,83,111,114,116,75,101,121,0,0,0,0,121,121,95,49,95,71,108,111,115,115,97,114,121,84,101,114,109,0,0,0,0,0,0,0,121,121,95,49,95,68,101,102,105,110,105,116,105,111,110,76,105,115,116,0,0,0,0,0,121,121,95,50,95,68,101,102,105,110,105,116,105,111,110,76,105,115,116,0,0,0,0,0,121,121,95,51,95,68,101,102,105,110,105,116,105,111,110,76,105,115,116,0,0,0,0,0,121,121,95,49,95,68,101,102,105,110,105,116,105,111,110,0,121,121,95,50,95,68,101,102,105,110,105,116,105,111,110,0,121,121,95,51,95,68,101,102,105,110,105,116,105,111,110,0,121,121,95,52,95,68,101,102,105,110,105,116,105,111,110,0,121,121,95,53,95,68,101,102,105,110,105,116,105,111,110], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+38576);
/* memory initializer */ allocate([121,121,95,54,95,68,101,102,105,110,105,116,105,111,110,0,121,121,95,55,95,68,101,102,105,110,105,116,105,111,110,0,121,121,95,49,95,84,101,114,109,0,0,0,0,0,0,0,121,121,95,50,95,84,101,114,109,0,0,0,0,0,0,0,121,121,95,49,95,86,101,114,98,97,116,105,109,0,0,0,121,121,95,50,95,86,101,114,98,97,116,105,109,0,0,0,121,121,95,49,95,86,101,114,98,97,116,105,109,67,104,117,110,107,0,0,0,0,0,0,121,121,95,50,95,86,101,114,98,97,116,105,109,67,104,117,110,107,0,0,0,0,0,0,121,121,95,51,95,86,101,114,98,97,116,105,109,67,104,117,110,107,0,0,0,0,0,0,121,121,95,49,95,70,101,110,99,101,100,0,0,0,0,0,121,121,95,49,95,70,101,110,99,101,84,121,112,101,0,0,121,121,95,49,95,66,108,111,99,107,81,117,111,116,101,0,121,121,95,49,95,66,108,111,99,107,81,117,111,116,101,82,97,119,0,0,0,0,0,0,121,121,95,50,95,66,108,111,99,107,81,117,111,116,101,82,97,119,0,0,0,0,0,0,121,121,95,51,95,66,108,111,99,107,81,117,111,116,101,82,97,119,0,0,0,0,0,0,121,121,95,52,95,66,108,111,99,107,81,117,111,116,101,82,97,119,0,0,0,0,0,0,121,121,95,49,95,66,108,111,99,107,81,117,111,116,101,77,97,114,107,101,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,0,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+48816);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  var _BDtoIHigh=true;

   
  Module["_i64Subtract"] = _i64Subtract;

  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  
   
  Module["_strlen"] = _strlen; 
  Module["_strcat"] = _strcat;

  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(lookup.node.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      assert((varargs & 7) === 0);
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        argIndex = Runtime.prepVararg(argIndex, type);
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
          argIndex += 8;
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
          argIndex += 8;
        } else {
          assert((argIndex & 3) === 0);
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += 4;
        }
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }


  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

   
  Module["_strncpy"] = _strncpy;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

   
  Module["_i64Add"] = _i64Add;

  var _fabs=Math_abs;

  function _clock() {
      if (_clock.start === undefined) _clock.start = Date.now();
      return ((Date.now() - _clock.start) * (1000000 / 1000))|0;
    }

   
  Module["_memmove"] = _memmove;

  function ___errno_location() {
      return ___errno_state;
    }

  var _BItoD=true;

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_ii": nullFunc_ii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiii": nullFunc_viiiii, "invoke_ii": invoke_ii, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "_fabs": _fabs, "_send": _send, "__reallyNegative": __reallyNegative, "___assert_fail": ___assert_fail, "_fflush": _fflush, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fileno": _fileno, "__exit": __exit, "___setErrNo": ___setErrNo, "_clock": _clock, "_mkport": _mkport, "_write": _write, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___errno_location": ___errno_location, "_sysconf": _sysconf, "_abort": _abort, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_strerror": _strerror, "__formatString": __formatString, "_exit": _exit, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "_stderr": _stderr };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var _stderr=env._stderr|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var _fabs=env._fabs;
  var _send=env._send;
  var __reallyNegative=env.__reallyNegative;
  var ___assert_fail=env.___assert_fail;
  var _fflush=env._fflush;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fileno=env._fileno;
  var __exit=env.__exit;
  var ___setErrNo=env.___setErrNo;
  var _clock=env._clock;
  var _mkport=env._mkport;
  var _write=env._write;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___errno_location=env.___errno_location;
  var _sysconf=env._sysconf;
  var _abort=env._abort;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _strerror=env._strerror;
  var __formatString=env.__formatString;
  var _exit=env._exit;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}
function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _print_beamer_node_tree($out,$list,$scratch) {
 $out = $out|0;
 $list = $list|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $list;
 $2 = $scratch;
 while(1) {
  $3 = $1;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = $1;
  $7 = $2;
  _print_beamer_node($5,$6,$7);
  $8 = $1;
  $9 = (($8) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $1 = $10;
 }
 STACKTOP = sp;return;
}
function _print_beamer_node($out,$n,$scratch) {
 $out = $out|0;
 $n = $n|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $lev = 0, $temp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer32 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer32 = sp + 128|0;
 $vararg_buffer29 = sp + 120|0;
 $vararg_buffer27 = sp + 112|0;
 $vararg_buffer25 = sp + 104|0;
 $vararg_buffer23 = sp + 96|0;
 $vararg_buffer21 = sp + 88|0;
 $vararg_buffer19 = sp + 80|0;
 $vararg_buffer17 = sp + 72|0;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $n;
 $2 = $scratch;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 2;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $2;
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 8;
  $10 = ($9|0)!=(0);
  if (!($10)) {
   $11 = $1;
   $12 = HEAP16[$11>>1]|0;
   $13 = $12 << 16 >> 16;
   $14 = ($13|0)==(4);
   if (!($14)) {
    $15 = $1;
    $16 = HEAP16[$15>>1]|0;
    $17 = $16 << 16 >> 16;
    $18 = ($17|0)==(17);
    if (!($18)) {
     $19 = $0;
     $20 = $2;
     _pad($19,2,$20);
     $21 = $2;
     $22 = HEAP32[$21>>2]|0;
     $23 = $22 | 8;
     $24 = $2;
     HEAP32[$24>>2] = $23;
    }
   }
  }
 }
 $25 = $1;
 $26 = HEAP16[$25>>1]|0;
 $27 = $26 << 16 >> 16;
 switch ($27|0) {
 case 15: case 14: case 13: case 12: case 11: case 10:  {
  $122 = $0;
  $123 = $2;
  _pad($122,2,$123);
  $124 = $1;
  $125 = HEAP16[$124>>1]|0;
  $126 = $125 << 16 >> 16;
  $127 = (($126) - 10)|0;
  $128 = $2;
  $129 = (($128) + 8|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (($127) + ($130))|0;
  $lev = $131;
  $132 = $lev;
  if ((($132|0) == 3)) {
   $135 = $0;
   _g_string_append_printf($135,128,$vararg_buffer25);
  } else if ((($132|0) == 2)) {
   $134 = $0;
   _g_string_append_printf($134,3640,$vararg_buffer23);
  } else if ((($132|0) == 1)) {
   $133 = $0;
   _g_string_append_printf($133,3616,$vararg_buffer21);
  } else {
   $136 = $0;
   _g_string_append_printf($136,3776,$vararg_buffer27);
  }
  $137 = $2;
  $138 = (($137) + 76|0);
  HEAP8[$138>>0] = 1;
  $139 = $1;
  $140 = (($139) + 12|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = HEAP16[$141>>1]|0;
  $143 = $142 << 16 >> 16;
  $144 = ($143|0)==(27);
  if ($144) {
   $145 = $1;
   $146 = (($145) + 12|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = (($147) + 4|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = (_label_from_string($149)|0);
   $temp = $150;
   $151 = $0;
   $152 = $1;
   $153 = (($152) + 12|0);
   $154 = HEAP32[$153>>2]|0;
   $155 = (($154) + 16|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = $2;
   _print_latex_node_tree($151,$156,$157);
   $158 = $0;
   $159 = $temp;
   HEAP32[$vararg_buffer29>>2] = $159;
   _g_string_append_printf($158,3720,$vararg_buffer29);
   $160 = $temp;
   _free($160);
  } else {
   $161 = $0;
   $162 = $1;
   $163 = (($162) + 12|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = $2;
   _print_latex_node_tree($161,$164,$165);
   $166 = $1;
   $167 = (($166) + 12|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = (_label_from_node_tree($168)|0);
   $temp = $169;
   $170 = $0;
   $171 = $temp;
   HEAP32[$vararg_buffer32>>2] = $171;
   _g_string_append_printf($170,3720,$vararg_buffer32);
   $172 = $temp;
   _free($172);
  }
  $173 = $2;
  $174 = (($173) + 76|0);
  HEAP8[$174>>0] = 0;
  $175 = $2;
  $176 = (($175) + 4|0);
  HEAP32[$176>>2] = 0;
  STACKTOP = sp;return;
  break;
 }
 case 9:  {
  $58 = $1;
  $59 = (($58) + 12|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = HEAP16[$60>>1]|0;
  $62 = $61 << 16 >> 16;
  $63 = (($62) - 10)|0;
  $64 = $2;
  $65 = (($64) + 8|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (($63) + ($66))|0;
  $68 = ($67|0)==(3);
  if ($68) {
   $69 = $0;
   $70 = $2;
   _pad($69,2,$70);
   $71 = $0;
   _g_string_append_printf($71,48,$vararg_buffer11);
   $72 = $1;
   $73 = (($72) + 12|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (_tree_contains_key($74,41)|0);
   if ($75) {
    label = 16;
   } else {
    $76 = $1;
    $77 = (($76) + 12|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (_tree_contains_key($78,43)|0);
    if ($79) {
     label = 16;
    }
   }
   if ((label|0) == 16) {
    $80 = $0;
    _g_string_append_printf($80,64,$vararg_buffer13);
   }
   $81 = $2;
   $82 = (($81) + 4|0);
   HEAP32[$82>>2] = 0;
   $83 = $0;
   $84 = $1;
   $85 = (($84) + 12|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = $2;
   _print_beamer_node_tree($83,$86,$87);
   $88 = $0;
   _g_string_append_printf($88,80,$vararg_buffer15);
   $89 = $2;
   $90 = (($89) + 4|0);
   HEAP32[$90>>2] = 2;
  } else {
   $91 = $1;
   $92 = (($91) + 12|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = HEAP16[$93>>1]|0;
   $95 = $94 << 16 >> 16;
   $96 = (($95) - 10)|0;
   $97 = $2;
   $98 = (($97) + 8|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = (($96) + ($99))|0;
   $101 = ($100|0)==(4);
   if ($101) {
    $102 = $0;
    $103 = $2;
    _pad($102,1,$103);
    $104 = $0;
    _g_string_append_printf($104,96,$vararg_buffer17);
    $105 = $2;
    $106 = (($105) + 4|0);
    HEAP32[$106>>2] = 0;
    $107 = $0;
    $108 = $1;
    $109 = (($108) + 12|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = (($110) + 16|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = $2;
    _print_beamer_node_tree($107,$112,$113);
    $114 = $0;
    _g_string_append_printf($114,120,$vararg_buffer19);
    $115 = $2;
    $116 = (($115) + 4|0);
    HEAP32[$116>>2] = 2;
   } else {
    $117 = $0;
    $118 = $1;
    $119 = (($118) + 12|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = $2;
    _print_beamer_node_tree($117,$120,$121);
   }
  }
  STACKTOP = sp;return;
  break;
 }
 case 50:  {
  $47 = $0;
  $48 = $2;
  _pad($47,1,$48);
  $49 = $0;
  _g_string_append_printf($49,32,$vararg_buffer7);
  $50 = $2;
  $51 = (($50) + 4|0);
  HEAP32[$51>>2] = 2;
  $52 = $0;
  $53 = $1;
  $54 = (($53) + 12|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $2;
  _print_latex_node_tree($52,$55,$56);
  $57 = $0;
  _g_string_append_printf($57,42896,$vararg_buffer9);
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $28 = $0;
  $29 = $2;
  _print_beamer_endnotes($28,$29);
  $30 = $0;
  _g_string_append_printf($30,8,$vararg_buffer);
  $31 = $2;
  $32 = (($31) + 72|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33|0)!=(0|0);
  if ($34) {
   $35 = $0;
   $36 = $2;
   _pad($35,2,$36);
   $37 = $0;
   $38 = $2;
   $39 = (($38) + 72|0);
   $40 = HEAP32[$39>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $40;
   _g_string_append_printf($37,3528,$vararg_buffer1);
  }
  $41 = $2;
  $42 = HEAP32[$41>>2]|0;
  $43 = $42 & 2;
  $44 = ($43|0)!=(0);
  if ($44) {
   $45 = $0;
   _g_string_append_printf($45,3600,$vararg_buffer3);
  }
  $46 = $0;
  _g_string_append_printf($46,24,$vararg_buffer5);
  STACKTOP = sp;return;
  break;
 }
 default: {
  $177 = $0;
  $178 = $1;
  $179 = $2;
  _print_latex_node($177,$178,$179);
  STACKTOP = sp;return;
 }
 }
}
function _print_beamer_endnotes($out,$scratch) {
 $out = $out|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $note = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $scratch;
 $2 = $1;
 $3 = (($2) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_reverse_list($4)|0);
 $6 = $1;
 $7 = (($6) + 48|0);
 HEAP32[$7>>2] = $5;
 $8 = $1;
 $9 = (($8) + 25|0);
 HEAP8[$9>>0] = 1;
 $10 = $1;
 $11 = (($10) + 48|0);
 $12 = HEAP32[$11>>2]|0;
 $note = $12;
 $13 = $note;
 $14 = ($13|0)==(0|0);
 do {
  if (!($14)) {
   $15 = $note;
   $16 = HEAP16[$15>>1]|0;
   $17 = $16 << 16 >> 16;
   $18 = ($17|0)==(87);
   if ($18) {
    $19 = $note;
    $20 = (($19) + 16|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==(0|0);
    if ($22) {
     break;
    }
   }
   while(1) {
    $23 = $note;
    $24 = ($23|0)!=(0|0);
    if (!($24)) {
     break;
    }
    $25 = $note;
    $26 = HEAP16[$25>>1]|0;
    $27 = $26 << 16 >> 16;
    $28 = ($27|0)==(63);
    if ($28) {
     label = 8;
     break;
    }
    $29 = $note;
    $30 = (($29) + 16|0);
    $31 = HEAP32[$30>>2]|0;
    $note = $31;
   }
   if ((label|0) == 8) {
   }
   $32 = $note;
   $33 = ($32|0)==(0|0);
   if ($33) {
    STACKTOP = sp;return;
   }
   $34 = $1;
   $35 = (($34) + 48|0);
   $36 = HEAP32[$35>>2]|0;
   $note = $36;
   $37 = $0;
   $38 = $1;
   _pad($37,2,$38);
   $39 = $0;
   _g_string_append_printf($39,144,$vararg_buffer);
   while(1) {
    $40 = $note;
    $41 = ($40|0)!=(0|0);
    if (!($41)) {
     break;
    }
    $42 = $note;
    $43 = HEAP16[$42>>1]|0;
    $44 = $43 << 16 >> 16;
    $45 = ($44|0)==(87);
    if ($45) {
     $46 = $note;
     $47 = (($46) + 16|0);
     $48 = HEAP32[$47>>2]|0;
     $note = $48;
     continue;
    }
    $49 = $0;
    $50 = $1;
    _pad($49,1,$50);
    $51 = $note;
    $52 = HEAP16[$51>>1]|0;
    $53 = $52 << 16 >> 16;
    $54 = ($53|0)==(63);
    if ($54) {
     $55 = $0;
     $56 = $note;
     $57 = (($56) + 4|0);
     $58 = HEAP32[$57>>2]|0;
     HEAP32[$vararg_buffer1>>2] = $58;
     _g_string_append_printf($55,4856,$vararg_buffer1);
     $59 = $1;
     $60 = (($59) + 4|0);
     HEAP32[$60>>2] = 2;
     $61 = $0;
     $62 = $note;
     $63 = $1;
     _print_latex_node($61,$62,$63);
     $64 = $0;
     $65 = $1;
     _pad($64,1,$65);
     $66 = $1;
     $67 = (($66) + 4|0);
     HEAP32[$67>>2] = 1;
    } else {
    }
    $68 = $note;
    $69 = (($68) + 16|0);
    $70 = HEAP32[$69>>2]|0;
    $note = $70;
   }
   $71 = $0;
   $72 = $1;
   _pad($71,2,$72);
   $73 = $0;
   _g_string_append_printf($73,272,$vararg_buffer3);
   $74 = $1;
   $75 = (($74) + 4|0);
   HEAP32[$75>>2] = 0;
   STACKTOP = sp;return;
  }
 } while(0);
 STACKTOP = sp;return;
}
function _print_critic_accept_node_tree($out,$list,$scratch) {
 $out = $out|0;
 $list = $list|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $list;
 $2 = $scratch;
 while(1) {
  $3 = $1;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = $1;
  $7 = $2;
  _print_critic_accept_node($5,$6,$7);
  $8 = $1;
  $9 = (($8) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $1 = $10;
 }
 STACKTOP = sp;return;
}
function _print_critic_accept_node($out,$n,$scratch) {
 $out = $out|0;
 $n = $n|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $n;
 $2 = $scratch;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $1;
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 << 16 >> 16;
 switch ($7|0) {
 case 74: case 77:  {
  break;
 }
 case 78: case 75:  {
  STACKTOP = sp;return;
  break;
 }
 case 76: case 1:  {
  $8 = $0;
  $9 = $1;
  $10 = (($9) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $2;
  _print_critic_accept_node_tree($8,$11,$12);
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $13 = $0;
 $14 = $1;
 $15 = (($14) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP32[$vararg_buffer>>2] = $16;
 _g_string_append_printf($13,40832,$vararg_buffer);
 STACKTOP = sp;return;
}
function _print_critic_reject_node_tree($out,$list,$scratch) {
 $out = $out|0;
 $list = $list|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $list;
 $2 = $scratch;
 while(1) {
  $3 = $1;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = $1;
  $7 = $2;
  _print_critic_reject_node($5,$6,$7);
  $8 = $1;
  $9 = (($8) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $1 = $10;
 }
 STACKTOP = sp;return;
}
function _print_critic_reject_node($out,$n,$scratch) {
 $out = $out|0;
 $n = $n|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $n;
 $2 = $scratch;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $1;
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 << 16 >> 16;
 switch ($7|0) {
 case 76: case 1:  {
  $8 = $0;
  $9 = $1;
  $10 = (($9) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $2;
  _print_critic_reject_node_tree($8,$11,$12);
  STACKTOP = sp;return;
  break;
 }
 case 75: case 77:  {
  break;
 }
 case 78: case 74:  {
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $13 = $0;
 $14 = $1;
 $15 = (($14) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP32[$vararg_buffer>>2] = $16;
 _g_string_append_printf($13,40832,$vararg_buffer);
 STACKTOP = sp;return;
}
function _print_critic_html_highlight_node_tree($out,$list,$scratch) {
 $out = $out|0;
 $list = $list|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $list;
 $2 = $scratch;
 while(1) {
  $3 = $1;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = $1;
  $7 = $2;
  _print_critic_html_highlight_node($5,$6,$7);
  $8 = $1;
  $9 = (($8) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $1 = $10;
 }
 STACKTOP = sp;return;
}
function _print_critic_html_highlight_node($out,$n,$scratch) {
 $out = $out|0;
 $n = $n|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $n;
 $2 = $scratch;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $1;
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 << 16 >> 16;
 switch ($7|0) {
 case 75:  {
  $26 = $0;
  $27 = $1;
  $28 = (($27) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $29;
  _g_string_append_printf($26,344,$vararg_buffer4);
  STACKTOP = sp;return;
  break;
 }
 case 78:  {
  STACKTOP = sp;return;
  break;
 }
 case 77:  {
  $22 = $0;
  $23 = $1;
  $24 = (($23) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $25;
  _g_string_append_printf($22,328,$vararg_buffer1);
  STACKTOP = sp;return;
  break;
 }
 case 74:  {
  $18 = $0;
  $19 = $1;
  $20 = (($19) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  HEAP32[$vararg_buffer>>2] = $21;
  _g_string_append_printf($18,312,$vararg_buffer);
  STACKTOP = sp;return;
  break;
 }
 case 76:  {
  $13 = $0;
  $14 = $1;
  $15 = (($14) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $2;
  _print_critic_html_highlight_node_tree($13,$16,$17);
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $8 = $0;
  $9 = $1;
  $10 = (($9) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $2;
  _print_critic_html_highlight_node_tree($8,$11,$12);
  STACKTOP = sp;return;
  break;
 }
 default: {
  $30 = $0;
  $31 = $1;
  $32 = (($31) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $33;
  _g_string_append_printf($30,40832,$vararg_buffer7);
  STACKTOP = sp;return;
 }
 }
}
function _g_string_new($startingString) {
 $startingString = $startingString|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $newString = 0, $startingBufferSize = 0, $startingStringSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $startingString;
 $1 = (_malloc(12)|0);
 $newString = $1;
 $2 = $0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $0 = 41432;
 }
 $startingBufferSize = 1024;
 $4 = $0;
 $5 = (_strlen(($4|0))|0);
 $startingStringSize = $5;
 while(1) {
  $6 = $startingBufferSize;
  $7 = $startingStringSize;
  $8 = (($7) + 1)|0;
  $9 = ($6>>>0)<($8>>>0);
  if (!($9)) {
   break;
  }
  $10 = $startingBufferSize;
  $11 = $10<<1;
  $startingBufferSize = $11;
 }
 $12 = $startingBufferSize;
 $13 = (_malloc($12)|0);
 $14 = $newString;
 HEAP32[$14>>2] = $13;
 $15 = $startingBufferSize;
 $16 = $newString;
 $17 = (($16) + 4|0);
 HEAP32[$17>>2] = $15;
 $18 = $newString;
 $19 = HEAP32[$18>>2]|0;
 $20 = $0;
 $21 = $startingStringSize;
 (_strncpy(($19|0),($20|0),($21|0))|0);
 $22 = $startingStringSize;
 $23 = $newString;
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + ($22)|0);
 HEAP8[$25>>0] = 0;
 $26 = $startingStringSize;
 $27 = $newString;
 $28 = (($27) + 8|0);
 HEAP32[$28>>2] = $26;
 $29 = $newString;
 STACKTOP = sp;return ($29|0);
}
function _g_string_free($ripString,$freeCharacterData) {
 $ripString = $ripString|0;
 $freeCharacterData = $freeCharacterData|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $returnedString = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ripString;
 $3 = $freeCharacterData&1;
 $2 = $3;
 $4 = $1;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = 0;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $returnedString = $7;
 $8 = $2;
 $9 = $8&1;
 if ($9) {
  $10 = $1;
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0|0);
  if ($12) {
   $13 = $1;
   $14 = HEAP32[$13>>2]|0;
   _free($14);
  }
  $returnedString = 0;
 }
 $15 = $1;
 _free($15);
 $16 = $returnedString;
 $0 = $16;
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _g_string_append($baseString,$appendedString) {
 $baseString = $baseString|0;
 $appendedString = $appendedString|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $appendedStringLength = 0, $newStringLength = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $baseString;
 $1 = $appendedString;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = (_strlen(($4|0))|0);
 $6 = ($5>>>0)>(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = (_strlen(($7|0))|0);
 $appendedStringLength = $8;
 $9 = $0;
 $10 = (($9) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $appendedStringLength;
 $13 = (($11) + ($12))|0;
 $newStringLength = $13;
 $14 = $0;
 $15 = $newStringLength;
 _ensureStringBufferCanHold($14,$15);
 $16 = $0;
 $17 = HEAP32[$16>>2]|0;
 $18 = $0;
 $19 = (($18) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($17) + ($20)|0);
 $22 = $1;
 $23 = $appendedStringLength;
 (_strncat($21,$22,$23)|0);
 $24 = $newStringLength;
 $25 = $0;
 $26 = (($25) + 8|0);
 HEAP32[$26>>2] = $24;
 STACKTOP = sp;return;
}
function _g_string_append_c($baseString,$appendedCharacter) {
 $baseString = $baseString|0;
 $appendedCharacter = $appendedCharacter|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $newSizeNeeded = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $baseString;
 $1 = $appendedCharacter;
 $2 = $0;
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 $newSizeNeeded = $5;
 $6 = $0;
 $7 = $newSizeNeeded;
 _ensureStringBufferCanHold($6,$7);
 $8 = $1;
 $9 = $0;
 $10 = (($9) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $0;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($11)|0);
 HEAP8[$14>>0] = $8;
 $15 = $0;
 $16 = (($15) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 1)|0;
 HEAP32[$16>>2] = $18;
 $19 = $0;
 $20 = (($19) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $0;
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + ($21)|0);
 HEAP8[$24>>0] = 0;
 STACKTOP = sp;return;
}
function _g_string_append_printf($baseString,$format,$varargs) {
 $baseString = $baseString|0;
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $args = 0, $formattedString = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 8|0;
 $formattedString = sp;
 $0 = $baseString;
 $1 = $format;
 HEAP32[$args>>2] = $varargs;
 HEAP32[$formattedString>>2] = 0;
 $2 = $1;
 (_vasprintf($formattedString,$2,$args)|0);
 $3 = HEAP32[$formattedString>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = HEAP32[$formattedString>>2]|0;
 _g_string_append($5,$6);
 $7 = HEAP32[$formattedString>>2]|0;
 _free($7);
 STACKTOP = sp;return;
}
function _g_string_prepend($baseString,$prependedString) {
 $baseString = $baseString|0;
 $prependedString = $prependedString|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $newStringLength = 0, $prependedStringLength = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $baseString;
 $1 = $prependedString;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = (_strlen(($4|0))|0);
 $6 = ($5>>>0)>(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = (_strlen(($7|0))|0);
 $prependedStringLength = $8;
 $9 = $0;
 $10 = (($9) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $prependedStringLength;
 $13 = (($11) + ($12))|0;
 $newStringLength = $13;
 $14 = $0;
 $15 = $newStringLength;
 _ensureStringBufferCanHold($14,$15);
 $16 = $0;
 $17 = HEAP32[$16>>2]|0;
 $18 = $prependedStringLength;
 $19 = (($17) + ($18)|0);
 $20 = $0;
 $21 = HEAP32[$20>>2]|0;
 $22 = $0;
 $23 = (($22) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 _memmove(($19|0),($21|0),($24|0))|0;
 $25 = $0;
 $26 = HEAP32[$25>>2]|0;
 $27 = $1;
 $28 = $prependedStringLength;
 (_strncpy(($26|0),($27|0),($28|0))|0);
 $29 = $newStringLength;
 $30 = $0;
 $31 = (($30) + 8|0);
 HEAP32[$31>>2] = $29;
 $32 = $0;
 $33 = (($32) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $0;
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + ($34)|0);
 HEAP8[$37>>0] = 0;
 STACKTOP = sp;return;
}
function _ensureStringBufferCanHold($baseString,$newStringSize) {
 $baseString = $baseString|0;
 $newStringSize = $newStringSize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $newBufferSize = 0, $newBufferSizeNeeded = 0, $temp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $baseString;
 $1 = $newStringSize;
 $2 = $1;
 $3 = (($2) + 1)|0;
 $newBufferSizeNeeded = $3;
 $4 = $newBufferSizeNeeded;
 $5 = $0;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4>>>0)>($7>>>0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $0;
 $10 = (($9) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $newBufferSize = $11;
 while(1) {
  $12 = $newBufferSizeNeeded;
  $13 = $newBufferSize;
  $14 = ($12>>>0)>($13>>>0);
  if (!($14)) {
   break;
  }
  $15 = $newBufferSize;
  $16 = $15<<1;
  $newBufferSize = $16;
 }
 $17 = $0;
 $18 = HEAP32[$17>>2]|0;
 $19 = $newBufferSize;
 $20 = (_realloc($18,$19)|0);
 $temp = $20;
 $21 = $temp;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $23 = HEAP32[_stderr>>2]|0;
  (_fprintf(($23|0),(360|0),($vararg_buffer|0))|0);
  _exit(1);
  // unreachable;
 }
 $24 = $temp;
 $25 = $0;
 HEAP32[$25>>2] = $24;
 $26 = $newBufferSize;
 $27 = $0;
 $28 = (($27) + 4|0);
 HEAP32[$28>>2] = $26;
 STACKTOP = sp;return;
}
function _print_html_node_tree($out,$list,$scratch) {
 $out = $out|0;
 $list = $list|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $list;
 $2 = $scratch;
 while(1) {
  $3 = $1;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = $1;
  $7 = $2;
  _print_html_node($5,$6,$7);
  $8 = $1;
  $9 = (($8) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $1 = $10;
 }
 STACKTOP = sp;return;
}
function _print_html_node($out,$n,$scratch) {
 $out = $out|0;
 $n = $n|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $height = 0, $lev = 0, $random = 0, $temp = 0, $temp_link_data = 0;
 var $temp_node = 0, $temp_str = 0, $temp_type = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer101 = 0, $vararg_buffer104 = 0, $vararg_buffer107 = 0, $vararg_buffer11 = 0, $vararg_buffer110 = 0, $vararg_buffer113 = 0, $vararg_buffer115 = 0, $vararg_buffer117 = 0, $vararg_buffer119 = 0, $vararg_buffer121 = 0, $vararg_buffer123 = 0, $vararg_buffer125 = 0, $vararg_buffer127 = 0, $vararg_buffer129 = 0, $vararg_buffer13 = 0;
 var $vararg_buffer132 = 0, $vararg_buffer135 = 0, $vararg_buffer137 = 0, $vararg_buffer139 = 0, $vararg_buffer141 = 0, $vararg_buffer143 = 0, $vararg_buffer145 = 0, $vararg_buffer147 = 0, $vararg_buffer149 = 0, $vararg_buffer15 = 0, $vararg_buffer153 = 0, $vararg_buffer155 = 0, $vararg_buffer157 = 0, $vararg_buffer159 = 0, $vararg_buffer162 = 0, $vararg_buffer164 = 0, $vararg_buffer167 = 0, $vararg_buffer169 = 0, $vararg_buffer17 = 0, $vararg_buffer171 = 0;
 var $vararg_buffer174 = 0, $vararg_buffer177 = 0, $vararg_buffer179 = 0, $vararg_buffer181 = 0, $vararg_buffer183 = 0, $vararg_buffer186 = 0, $vararg_buffer189 = 0, $vararg_buffer19 = 0, $vararg_buffer191 = 0, $vararg_buffer193 = 0, $vararg_buffer195 = 0, $vararg_buffer197 = 0, $vararg_buffer199 = 0, $vararg_buffer204 = 0, $vararg_buffer208 = 0, $vararg_buffer21 = 0, $vararg_buffer213 = 0, $vararg_buffer217 = 0, $vararg_buffer219 = 0, $vararg_buffer222 = 0;
 var $vararg_buffer224 = 0, $vararg_buffer226 = 0, $vararg_buffer229 = 0, $vararg_buffer232 = 0, $vararg_buffer234 = 0, $vararg_buffer237 = 0, $vararg_buffer24 = 0, $vararg_buffer240 = 0, $vararg_buffer243 = 0, $vararg_buffer245 = 0, $vararg_buffer247 = 0, $vararg_buffer250 = 0, $vararg_buffer252 = 0, $vararg_buffer254 = 0, $vararg_buffer257 = 0, $vararg_buffer26 = 0, $vararg_buffer260 = 0, $vararg_buffer262 = 0, $vararg_buffer264 = 0, $vararg_buffer266 = 0;
 var $vararg_buffer268 = 0, $vararg_buffer270 = 0, $vararg_buffer272 = 0, $vararg_buffer274 = 0, $vararg_buffer276 = 0, $vararg_buffer278 = 0, $vararg_buffer28 = 0, $vararg_buffer280 = 0, $vararg_buffer282 = 0, $vararg_buffer285 = 0, $vararg_buffer288 = 0, $vararg_buffer290 = 0, $vararg_buffer292 = 0, $vararg_buffer294 = 0, $vararg_buffer296 = 0, $vararg_buffer298 = 0, $vararg_buffer3 = 0, $vararg_buffer300 = 0, $vararg_buffer302 = 0, $vararg_buffer304 = 0;
 var $vararg_buffer307 = 0, $vararg_buffer309 = 0, $vararg_buffer31 = 0, $vararg_buffer311 = 0, $vararg_buffer313 = 0, $vararg_buffer315 = 0, $vararg_buffer317 = 0, $vararg_buffer319 = 0, $vararg_buffer321 = 0, $vararg_buffer324 = 0, $vararg_buffer327 = 0, $vararg_buffer330 = 0, $vararg_buffer333 = 0, $vararg_buffer336 = 0, $vararg_buffer339 = 0, $vararg_buffer34 = 0, $vararg_buffer341 = 0, $vararg_buffer344 = 0, $vararg_buffer346 = 0, $vararg_buffer349 = 0;
 var $vararg_buffer352 = 0, $vararg_buffer354 = 0, $vararg_buffer356 = 0, $vararg_buffer37 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer46 = 0, $vararg_buffer49 = 0, $vararg_buffer5 = 0, $vararg_buffer52 = 0, $vararg_buffer54 = 0, $vararg_buffer56 = 0, $vararg_buffer58 = 0, $vararg_buffer61 = 0, $vararg_buffer63 = 0, $vararg_buffer65 = 0, $vararg_buffer67 = 0, $vararg_buffer69 = 0, $vararg_buffer7 = 0, $vararg_buffer71 = 0;
 var $vararg_buffer73 = 0, $vararg_buffer75 = 0, $vararg_buffer77 = 0, $vararg_buffer80 = 0, $vararg_buffer82 = 0, $vararg_buffer85 = 0, $vararg_buffer89 = 0, $vararg_buffer9 = 0, $vararg_buffer92 = 0, $vararg_buffer96 = 0, $vararg_buffer99 = 0, $vararg_ptr152 = 0, $vararg_ptr202 = 0, $vararg_ptr203 = 0, $vararg_ptr207 = 0, $vararg_ptr211 = 0, $vararg_ptr212 = 0, $vararg_ptr216 = 0, $vararg_ptr88 = 0, $vararg_ptr95 = 0;
 var $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1248|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer356 = sp + 1192|0;
 $vararg_buffer354 = sp + 1184|0;
 $vararg_buffer352 = sp + 1176|0;
 $vararg_buffer349 = sp + 1168|0;
 $vararg_buffer346 = sp + 1160|0;
 $vararg_buffer344 = sp + 1152|0;
 $vararg_buffer341 = sp + 1144|0;
 $vararg_buffer339 = sp + 1136|0;
 $vararg_buffer336 = sp + 1128|0;
 $vararg_buffer333 = sp + 1120|0;
 $vararg_buffer330 = sp + 1112|0;
 $vararg_buffer327 = sp + 1104|0;
 $vararg_buffer324 = sp + 1096|0;
 $vararg_buffer321 = sp + 1088|0;
 $vararg_buffer319 = sp + 1080|0;
 $vararg_buffer317 = sp + 1072|0;
 $vararg_buffer315 = sp + 1064|0;
 $vararg_buffer313 = sp + 1056|0;
 $vararg_buffer311 = sp + 1048|0;
 $vararg_buffer309 = sp + 1040|0;
 $vararg_buffer307 = sp + 1032|0;
 $vararg_buffer304 = sp + 1024|0;
 $vararg_buffer302 = sp + 1016|0;
 $vararg_buffer300 = sp + 1008|0;
 $vararg_buffer298 = sp + 1000|0;
 $vararg_buffer296 = sp + 992|0;
 $vararg_buffer294 = sp + 984|0;
 $vararg_buffer292 = sp + 976|0;
 $vararg_buffer290 = sp + 968|0;
 $vararg_buffer288 = sp + 960|0;
 $vararg_buffer285 = sp + 952|0;
 $vararg_buffer282 = sp + 944|0;
 $vararg_buffer280 = sp + 936|0;
 $vararg_buffer278 = sp + 928|0;
 $vararg_buffer276 = sp + 920|0;
 $vararg_buffer274 = sp + 912|0;
 $vararg_buffer272 = sp + 904|0;
 $vararg_buffer270 = sp + 896|0;
 $vararg_buffer268 = sp + 888|0;
 $vararg_buffer266 = sp + 880|0;
 $vararg_buffer264 = sp + 872|0;
 $vararg_buffer262 = sp + 864|0;
 $vararg_buffer260 = sp + 856|0;
 $vararg_buffer257 = sp + 848|0;
 $vararg_buffer254 = sp + 840|0;
 $vararg_buffer252 = sp + 832|0;
 $vararg_buffer250 = sp + 824|0;
 $vararg_buffer247 = sp + 816|0;
 $vararg_buffer245 = sp + 808|0;
 $vararg_buffer243 = sp + 800|0;
 $vararg_buffer240 = sp + 792|0;
 $vararg_buffer237 = sp + 784|0;
 $vararg_buffer234 = sp + 776|0;
 $vararg_buffer232 = sp + 768|0;
 $vararg_buffer229 = sp + 760|0;
 $vararg_buffer226 = sp + 752|0;
 $vararg_buffer224 = sp + 744|0;
 $vararg_buffer222 = sp + 736|0;
 $vararg_buffer219 = sp + 728|0;
 $vararg_buffer217 = sp + 720|0;
 $vararg_buffer213 = sp + 712|0;
 $vararg_buffer208 = sp + 696|0;
 $vararg_buffer204 = sp + 688|0;
 $vararg_buffer199 = sp + 672|0;
 $vararg_buffer197 = sp + 664|0;
 $vararg_buffer195 = sp + 656|0;
 $vararg_buffer193 = sp + 648|0;
 $vararg_buffer191 = sp + 640|0;
 $vararg_buffer189 = sp + 632|0;
 $vararg_buffer186 = sp + 624|0;
 $vararg_buffer183 = sp + 616|0;
 $vararg_buffer181 = sp + 608|0;
 $vararg_buffer179 = sp + 600|0;
 $vararg_buffer177 = sp + 592|0;
 $vararg_buffer174 = sp + 584|0;
 $vararg_buffer171 = sp + 576|0;
 $vararg_buffer169 = sp + 568|0;
 $vararg_buffer167 = sp + 560|0;
 $vararg_buffer164 = sp + 552|0;
 $vararg_buffer162 = sp + 544|0;
 $vararg_buffer159 = sp + 536|0;
 $vararg_buffer157 = sp + 528|0;
 $vararg_buffer155 = sp + 520|0;
 $vararg_buffer153 = sp + 512|0;
 $vararg_buffer149 = sp + 504|0;
 $vararg_buffer147 = sp + 496|0;
 $vararg_buffer145 = sp + 488|0;
 $vararg_buffer143 = sp + 480|0;
 $vararg_buffer141 = sp + 472|0;
 $vararg_buffer139 = sp + 464|0;
 $vararg_buffer137 = sp + 456|0;
 $vararg_buffer135 = sp + 448|0;
 $vararg_buffer132 = sp + 440|0;
 $vararg_buffer129 = sp + 432|0;
 $vararg_buffer127 = sp + 424|0;
 $vararg_buffer125 = sp + 416|0;
 $vararg_buffer123 = sp + 408|0;
 $vararg_buffer121 = sp + 400|0;
 $vararg_buffer119 = sp + 392|0;
 $vararg_buffer117 = sp + 384|0;
 $vararg_buffer115 = sp + 376|0;
 $vararg_buffer113 = sp + 368|0;
 $vararg_buffer110 = sp + 360|0;
 $vararg_buffer107 = sp + 352|0;
 $vararg_buffer104 = sp + 344|0;
 $vararg_buffer101 = sp + 336|0;
 $vararg_buffer99 = sp + 328|0;
 $vararg_buffer96 = sp + 320|0;
 $vararg_buffer92 = sp + 312|0;
 $vararg_buffer89 = sp + 304|0;
 $vararg_buffer85 = sp + 296|0;
 $vararg_buffer82 = sp + 288|0;
 $vararg_buffer80 = sp + 280|0;
 $vararg_buffer77 = sp + 272|0;
 $vararg_buffer75 = sp + 264|0;
 $vararg_buffer73 = sp + 256|0;
 $vararg_buffer71 = sp + 248|0;
 $vararg_buffer69 = sp + 240|0;
 $vararg_buffer67 = sp + 232|0;
 $vararg_buffer65 = sp + 224|0;
 $vararg_buffer63 = sp + 216|0;
 $vararg_buffer61 = sp + 208|0;
 $vararg_buffer58 = sp + 200|0;
 $vararg_buffer56 = sp + 192|0;
 $vararg_buffer54 = sp + 184|0;
 $vararg_buffer52 = sp + 176|0;
 $vararg_buffer49 = sp + 168|0;
 $vararg_buffer46 = sp + 160|0;
 $vararg_buffer43 = sp + 152|0;
 $vararg_buffer40 = sp + 144|0;
 $vararg_buffer37 = sp + 136|0;
 $vararg_buffer34 = sp + 128|0;
 $vararg_buffer31 = sp + 120|0;
 $vararg_buffer28 = sp + 112|0;
 $vararg_buffer26 = sp + 104|0;
 $vararg_buffer24 = sp + 96|0;
 $vararg_buffer21 = sp + 88|0;
 $vararg_buffer19 = sp + 80|0;
 $vararg_buffer17 = sp + 72|0;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $n;
 $2 = $scratch;
 $temp_link_data = 0;
 $width = 0;
 $height = 0;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 2;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = $10 & 8;
  $12 = ($11|0)!=(0);
  if (!($12)) {
   $13 = $1;
   $14 = HEAP16[$13>>1]|0;
   $15 = $14 << 16 >> 16;
   $16 = ($15|0)==(4);
   if (!($16)) {
    $17 = $1;
    $18 = HEAP16[$17>>1]|0;
    $19 = $18 << 16 >> 16;
    $20 = ($19|0)==(17);
    if (!($20)) {
     $21 = $0;
     _g_string_append_printf($21,392,$vararg_buffer);
     $22 = $2;
     $23 = HEAP32[$22>>2]|0;
     $24 = $23 | 8;
     $25 = $2;
     HEAP32[$25>>2] = $24;
    }
   }
  }
 }
 $26 = $1;
 $27 = HEAP16[$26>>1]|0;
 $28 = $27 << 16 >> 16;
 do {
  switch ($28|0) {
  case 21:  {
   $623 = $0;
   _g_string_append_printf($623,992,$vararg_buffer113);
   $624 = $0;
   $625 = $1;
   $626 = (($625) + 12|0);
   $627 = HEAP32[$626>>2]|0;
   $628 = $2;
   _print_html_node_tree($624,$627,$628);
   $629 = $0;
   _g_string_append_printf($629,1008,$vararg_buffer115);
   STACKTOP = sp;return;
   break;
  }
  case 17:  {
   $243 = $2;
   $244 = HEAP32[$243>>2]|0;
   $245 = $244 & 4;
   $246 = ($245|0)!=(0);
   if ($246) {
    $247 = $1;
    (_is_html_complete_doc($247)|0);
    $248 = $0;
    $249 = $1;
    $250 = (($249) + 12|0);
    $251 = HEAP32[$250>>2]|0;
    $252 = $2;
    _print_html_node_tree($248,$251,$252);
    STACKTOP = sp;return;
   }
   $253 = $2;
   $254 = HEAP32[$253>>2]|0;
   $255 = $254 & 2;
   $256 = ($255|0)!=(0);
   if ($256) {
    label = 52;
   } else {
    $257 = $1;
    $258 = (_is_html_complete_doc($257)|0);
    if ($258) {
     $259 = $2;
     $260 = (($259) + 52|0);
     $261 = HEAP32[$260>>2]|0;
     $262 = (_metavalue_for_key(40904,$261)|0);
     $temp = $262;
     $263 = $temp;
     $264 = ($263|0)!=(0|0);
     if ($264) {
      $265 = $0;
      $266 = $temp;
      HEAP32[$vararg_buffer58>>2] = $266;
      _g_string_append_printf($265,40912,$vararg_buffer58);
      $267 = $temp;
      _free($267);
     } else {
      $268 = $0;
      _g_string_append_printf($268,40984,$vararg_buffer61);
     }
     $269 = $2;
     $270 = HEAP32[$269>>2]|0;
     $271 = $270 | 2;
     $272 = $2;
     HEAP32[$272>>2] = $271;
    } else {
     label = 52;
    }
   }
   if ((label|0) == 52) {
    $273 = $1;
    (_is_html_complete_doc($273)|0);
   }
   $274 = $2;
   $275 = HEAP32[$274>>2]|0;
   $276 = $275 | 8;
   $277 = $2;
   HEAP32[$277>>2] = $276;
   $278 = $0;
   $279 = $1;
   $280 = (($279) + 12|0);
   $281 = HEAP32[$280>>2]|0;
   $282 = $2;
   _print_html_node_tree($278,$281,$282);
   $283 = $2;
   $284 = HEAP32[$283>>2]|0;
   $285 = $284 & 2;
   $286 = ($285|0)!=(0);
   if ($286) {
    $287 = $0;
    _g_string_append_printf($287,664,$vararg_buffer63);
   }
   STACKTOP = sp;return;
   break;
  }
  case 50:  {
   $230 = $0;
   $231 = $2;
   _pad($230,1,$231);
   $232 = $0;
   _g_string_append_printf($232,648,$vararg_buffer54);
   $233 = $2;
   $234 = (($233) + 4|0);
   HEAP32[$234>>2] = 2;
   $235 = $0;
   $236 = $1;
   $237 = (($236) + 12|0);
   $238 = HEAP32[$237>>2]|0;
   $239 = $2;
   _print_html_node_tree($235,$238,$239);
   $240 = $0;
   _g_string_append_printf($240,656,$vararg_buffer56);
   $241 = $2;
   $242 = (($241) + 4|0);
   HEAP32[$242>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 34:  {
   $550 = $0;
   $551 = $2;
   _print_html_localized_typography($550,4,$551);
   STACKTOP = sp;return;
   break;
  }
  case 15: case 14: case 13: case 12: case 11: case 10:  {
   $470 = $1;
   $471 = HEAP16[$470>>1]|0;
   $472 = $471 << 16 >> 16;
   $473 = (($472) - 10)|0;
   $474 = $2;
   $475 = (($474) + 8|0);
   $476 = HEAP32[$475>>2]|0;
   $477 = (($473) + ($476))|0;
   $lev = $477;
   $478 = $lev;
   $479 = ($478|0)>(6);
   if ($479) {
    $lev = 6;
   }
   $480 = $0;
   $481 = $2;
   _pad($480,2,$481);
   $482 = $2;
   $483 = HEAP32[$482>>2]|0;
   $484 = $483 & 1;
   $485 = ($484|0)!=(0);
   if ($485) {
    $486 = $0;
    $487 = $lev;
    HEAP32[$vararg_buffer82>>2] = $487;
    _g_string_append_printf($486,808,$vararg_buffer82);
    $488 = $0;
    $489 = $1;
    $490 = (($489) + 12|0);
    $491 = HEAP32[$490>>2]|0;
    $492 = $2;
    _print_html_node_tree($488,$491,$492);
   } else {
    $493 = $1;
    $494 = (($493) + 12|0);
    $495 = HEAP32[$494>>2]|0;
    $496 = HEAP16[$495>>1]|0;
    $497 = $496 << 16 >> 16;
    $498 = ($497|0)==(27);
    if ($498) {
     $499 = $1;
     $500 = (($499) + 12|0);
     $501 = HEAP32[$500>>2]|0;
     $502 = (($501) + 4|0);
     $503 = HEAP32[$502>>2]|0;
     $504 = (_label_from_string($503)|0);
     $temp = $504;
     $505 = $0;
     $506 = $lev;
     $507 = $temp;
     HEAP32[$vararg_buffer85>>2] = $506;
     $vararg_ptr88 = (($vararg_buffer85) + 4|0);
     HEAP32[$vararg_ptr88>>2] = $507;
     _g_string_append_printf($505,816,$vararg_buffer85);
     $508 = $0;
     $509 = $1;
     $510 = (($509) + 12|0);
     $511 = HEAP32[$510>>2]|0;
     $512 = (($511) + 16|0);
     $513 = HEAP32[$512>>2]|0;
     $514 = $2;
     _print_html_node_tree($508,$513,$514);
     $515 = $temp;
     _free($515);
    } else {
     $516 = $2;
     $517 = HEAP32[$516>>2]|0;
     $518 = $517 & 64;
     $519 = ($518|0)!=(0);
     if ($519) {
      $520 = $0;
      $521 = $lev;
      HEAP32[$vararg_buffer89>>2] = $521;
      _g_string_append_printf($520,808,$vararg_buffer89);
      $522 = $0;
      $523 = $1;
      $524 = (($523) + 12|0);
      $525 = HEAP32[$524>>2]|0;
      $526 = $2;
      _print_html_node_tree($522,$525,$526);
     } else {
      $527 = $1;
      $528 = (($527) + 12|0);
      $529 = HEAP32[$528>>2]|0;
      $530 = (_label_from_node_tree($529)|0);
      $temp = $530;
      $531 = $0;
      $532 = $lev;
      $533 = $temp;
      HEAP32[$vararg_buffer92>>2] = $532;
      $vararg_ptr95 = (($vararg_buffer92) + 4|0);
      HEAP32[$vararg_ptr95>>2] = $533;
      _g_string_append_printf($531,816,$vararg_buffer92);
      $534 = $0;
      $535 = $1;
      $536 = (($535) + 12|0);
      $537 = HEAP32[$536>>2]|0;
      $538 = $2;
      _print_html_node_tree($534,$537,$538);
      $539 = $temp;
      _free($539);
     }
    }
   }
   $540 = $0;
   $541 = $lev;
   HEAP32[$vararg_buffer96>>2] = $541;
   _g_string_append_printf($540,832,$vararg_buffer96);
   $542 = $2;
   $543 = (($542) + 4|0);
   HEAP32[$543>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 46:  {
   $1394 = $0;
   $1395 = $2;
   _pad($1394,1,$1395);
   $1396 = $2;
   $1397 = (($1396) + 4|0);
   HEAP32[$1397>>2] = 1;
   $1398 = $0;
   _g_string_append_printf($1398,2144,$vararg_buffer296);
   $1399 = $0;
   $1400 = $1;
   $1401 = (($1400) + 12|0);
   $1402 = HEAP32[$1401>>2]|0;
   $1403 = $2;
   _print_html_node_tree($1399,$1402,$1403);
   $1404 = $0;
   _g_string_append_printf($1404,2152,$vararg_buffer298);
   $1405 = $2;
   $1406 = (($1405) + 4|0);
   HEAP32[$1406>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 36:  {
   $552 = $0;
   $553 = $2;
   _print_html_localized_typography($552,0,$553);
   $554 = $0;
   $555 = $1;
   $556 = (($555) + 12|0);
   $557 = HEAP32[$556>>2]|0;
   $558 = $2;
   _print_html_node_tree($554,$557,$558);
   $559 = $0;
   $560 = $2;
   _print_html_localized_typography($559,1,$560);
   STACKTOP = sp;return;
   break;
  }
  case 48:  {
   $215 = $0;
   $216 = $2;
   _pad($215,2,$216);
   $217 = $0;
   HEAP32[$vararg_buffer49>>2] = 632;
   _g_string_append_printf($217,40832,$vararg_buffer49);
   $218 = $2;
   $219 = (($218) + 4|0);
   HEAP32[$219>>2] = 0;
   $220 = $0;
   $221 = $1;
   $222 = (($221) + 12|0);
   $223 = HEAP32[$222>>2]|0;
   $224 = $2;
   _print_html_node_tree($220,$223,$224);
   $225 = $0;
   $226 = $2;
   _pad($225,1,$226);
   $227 = $0;
   _g_string_append_printf($227,640,$vararg_buffer52);
   $228 = $2;
   $229 = (($228) + 4|0);
   HEAP32[$229>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 49:  {
   $200 = $0;
   $201 = $2;
   _pad($200,2,$201);
   $202 = $0;
   HEAP32[$vararg_buffer43>>2] = 616;
   _g_string_append_printf($202,40832,$vararg_buffer43);
   $203 = $2;
   $204 = (($203) + 4|0);
   HEAP32[$204>>2] = 0;
   $205 = $0;
   $206 = $1;
   $207 = (($206) + 12|0);
   $208 = HEAP32[$207>>2]|0;
   $209 = $2;
   _print_html_node_tree($205,$208,$209);
   $210 = $0;
   $211 = $2;
   _pad($210,1,$211);
   $212 = $0;
   HEAP32[$vararg_buffer46>>2] = 624;
   _g_string_append_printf($212,40832,$vararg_buffer46);
   $213 = $2;
   $214 = (($213) + 4|0);
   HEAP32[$214>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 6:  {
   $94 = $0;
   $95 = $2;
   _pad($94,1,$95);
   $96 = $0;
   $97 = $1;
   $98 = (($97) + 12|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = $2;
   _print_html_node_tree($96,$99,$100);
   $101 = $2;
   $102 = (($101) + 4|0);
   HEAP32[$102>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 9:  {
   $465 = $0;
   $466 = $1;
   $467 = (($466) + 12|0);
   $468 = HEAP32[$467>>2]|0;
   $469 = $2;
   _print_html_node_tree($465,$468,$469);
   STACKTOP = sp;return;
   break;
  }
  case 30:  {
   $1108 = $1;
   $1109 = $2;
   $1110 = (_note_number_for_node($1108,$1109)|0);
   $lev = $1110;
   $1111 = $2;
   $1112 = (($1111) + 48|0);
   $1113 = HEAP32[$1112>>2]|0;
   $1114 = $lev;
   $1115 = (_node_for_count($1113,$1114)|0);
   $temp_node = $1115;
   $1116 = $2;
   $1117 = HEAP32[$1116>>2]|0;
   $1118 = $1117 & 32768;
   $1119 = ($1118|0)!=(0);
   if ($1119) {
    $1120 = $2;
    $1121 = (($1120) + 88|0);
    $1122 = HEAP32[$1121>>2]|0;
    $1123 = $lev;
    $1124 = (($1122) + ($1123))|0;
    _srand($1124);
    $1125 = (_rand()|0);
    $1126 = (($1125|0) % 99999)&-1;
    $1127 = (($1126) + 1)|0;
    $random = $1127;
   } else {
    $1128 = $lev;
    $random = $1128;
   }
   $1129 = $temp_node;
   $1130 = HEAP16[$1129>>1]|0;
   $1131 = $1130 << 16 >> 16;
   $1132 = ($1131|0)==(69);
   if ($1132) {
    $1133 = $lev;
    $1134 = $2;
    $1135 = (($1134) + 64|0);
    $1136 = HEAP32[$1135>>2]|0;
    $1137 = ($1133|0)>($1136|0);
    if ($1137) {
     $1138 = $0;
     $1139 = $random;
     $1140 = $random;
     $1141 = $lev;
     HEAP32[$vararg_buffer199>>2] = $1139;
     $vararg_ptr202 = (($vararg_buffer199) + 4|0);
     HEAP32[$vararg_ptr202>>2] = $1140;
     $vararg_ptr203 = (($vararg_buffer199) + 8|0);
     HEAP32[$vararg_ptr203>>2] = $1141;
     _g_string_append_printf($1138,1320,$vararg_buffer199);
     $1142 = $lev;
     $1143 = $2;
     $1144 = (($1143) + 64|0);
     HEAP32[$1144>>2] = $1142;
    } else {
     $1145 = $0;
     $1146 = $random;
     $1147 = $lev;
     HEAP32[$vararg_buffer204>>2] = $1146;
     $vararg_ptr207 = (($vararg_buffer204) + 4|0);
     HEAP32[$vararg_ptr207>>2] = $1147;
     _g_string_append_printf($1145,1408,$vararg_buffer204);
    }
   } else {
    $1148 = $lev;
    $1149 = $2;
    $1150 = (($1149) + 64|0);
    $1151 = HEAP32[$1150>>2]|0;
    $1152 = ($1148|0)>($1151|0);
    if ($1152) {
     $1153 = $0;
     $1154 = $random;
     $1155 = $random;
     $1156 = $lev;
     HEAP32[$vararg_buffer208>>2] = $1154;
     $vararg_ptr211 = (($vararg_buffer208) + 4|0);
     HEAP32[$vararg_ptr211>>2] = $1155;
     $vararg_ptr212 = (($vararg_buffer208) + 8|0);
     HEAP32[$vararg_ptr212>>2] = $1156;
     _g_string_append_printf($1153,1488,$vararg_buffer208);
     $1157 = $lev;
     $1158 = $2;
     $1159 = (($1158) + 64|0);
     HEAP32[$1159>>2] = $1157;
    } else {
     $1160 = $0;
     $1161 = $random;
     $1162 = $lev;
     HEAP32[$vararg_buffer213>>2] = $1161;
     $vararg_ptr216 = (($vararg_buffer213) + 4|0);
     HEAP32[$vararg_ptr216>>2] = $1162;
     _g_string_append_printf($1160,1568,$vararg_buffer213);
    }
   }
   STACKTOP = sp;return;
   break;
  }
  case 60:  {
   $1465 = $2;
   $1466 = (($1465) + 24|0);
   $1467 = HEAP8[$1466>>0]|0;
   $1468 = $1467 << 24 >> 24;
   $1469 = ($1468|0)==(0);
   if ($1469) {
    $1470 = $0;
    $1471 = $2;
    _print_col_group($1470,$1471);
   }
   $1472 = $2;
   $1473 = (($1472) + 24|0);
   HEAP8[$1473>>0] = 104;
   $1474 = $0;
   _g_string_append_printf($1474,2232,$vararg_buffer309);
   $1475 = $0;
   $1476 = $1;
   $1477 = (($1476) + 12|0);
   $1478 = HEAP32[$1477>>2]|0;
   $1479 = $2;
   _print_html_node_tree($1475,$1478,$1479);
   $1480 = $0;
   _g_string_append_printf($1480,2248,$vararg_buffer311);
   $1481 = $2;
   $1482 = (($1481) + 24|0);
   HEAP8[$1482>>0] = 100;
   STACKTOP = sp;return;
   break;
  }
  case 19:  {
   $457 = $1;
   $458 = (($457) + 4|0);
   $459 = HEAP32[$458>>2]|0;
   _trim_trailing_whitespace($459);
   $460 = $0;
   $461 = $1;
   $462 = (($461) + 4|0);
   $463 = HEAP32[$462>>2]|0;
   $464 = $2;
   _print_html_string($460,$463,$464);
   STACKTOP = sp;return;
   break;
  }
  case 1:  {
   $29 = $0;
   $30 = $1;
   $31 = (($30) + 12|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $2;
   _print_html_node_tree($29,$32,$33);
   STACKTOP = sp;return;
   break;
  }
  case 4:  {
   STACKTOP = sp;return;
   break;
  }
  case 45:  {
   $1383 = $0;
   $1384 = $2;
   _pad($1383,1,$1384);
   $1385 = $0;
   _g_string_append_printf($1385,2128,$vararg_buffer292);
   $1386 = $0;
   $1387 = $1;
   $1388 = (($1387) + 12|0);
   $1389 = HEAP32[$1388>>2]|0;
   $1390 = $2;
   _print_html_node_tree($1386,$1389,$1390);
   $1391 = $0;
   _g_string_append_printf($1391,2136,$vararg_buffer294);
   $1392 = $2;
   $1393 = (($1392) + 4|0);
   HEAP32[$1393>>2] = 1;
   STACKTOP = sp;return;
   break;
  }
  case 69:  {
   $1597 = $2;
   $1598 = (($1597) + 25|0);
   $1599 = HEAP8[$1598>>0]|0;
   $1600 = $1599&1;
   if ($1600) {
    $1601 = $0;
    $1602 = $1;
    $1603 = (($1602) + 12|0);
    $1604 = HEAP32[$1603>>2]|0;
    $1605 = $2;
    _print_html_node_tree($1601,$1604,$1605);
   }
   STACKTOP = sp;return;
   break;
  }
  case 62: case 63:  {
   $1606 = $2;
   $1607 = (($1606) + 25|0);
   $1608 = HEAP8[$1607>>0]|0;
   $1609 = $1608&1;
   if ($1609) {
    $1610 = $0;
    $1611 = $1;
    $1612 = (($1611) + 12|0);
    $1613 = HEAP32[$1612>>2]|0;
    $1614 = $2;
    _print_html_node_tree($1610,$1613,$1614);
   }
   STACKTOP = sp;return;
   break;
  }
  case 44:  {
   $1370 = $0;
   $1371 = $2;
   _pad($1370,2,$1371);
   $1372 = $2;
   $1373 = (($1372) + 4|0);
   HEAP32[$1373>>2] = 1;
   $1374 = $0;
   _g_string_append_printf($1374,2112,$vararg_buffer288);
   $1375 = $0;
   $1376 = $1;
   $1377 = (($1376) + 12|0);
   $1378 = HEAP32[$1377>>2]|0;
   $1379 = $2;
   _print_html_node_tree($1375,$1378,$1379);
   $1380 = $0;
   _g_string_append_printf($1380,2120,$vararg_buffer290);
   $1381 = $2;
   $1382 = (($1381) + 4|0);
   HEAP32[$1382>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 56:  {
   $1499 = $2;
   $1500 = (($1499) + 16|0);
   $1501 = HEAP32[$1500>>2]|0;
   $temp = $1501;
   $1502 = $2;
   $1503 = (($1502) + 20|0);
   $1504 = HEAP32[$1503>>2]|0;
   $1505 = $temp;
   $1506 = (($1505) + ($1504)|0);
   $1507 = (_strncmp($1506,47240,1)|0);
   $1508 = ($1507|0)==(0);
   if ($1508) {
    $temp_type = 104;
    $1509 = $2;
    $1510 = (($1509) + 20|0);
    $1511 = HEAP32[$1510>>2]|0;
    $1512 = (($1511) + 1)|0;
    HEAP32[$1510>>2] = $1512;
   } else {
    $1513 = $2;
    $1514 = (($1513) + 24|0);
    $1515 = HEAP8[$1514>>0]|0;
    $temp_type = $1515;
   }
   $1516 = $2;
   $1517 = (($1516) + 20|0);
   $1518 = HEAP32[$1517>>2]|0;
   $lev = $1518;
   $1519 = $lev;
   $1520 = $temp;
   $1521 = (($1520) + ($1519)|0);
   $1522 = (_strncmp($1521,47264,1)|0);
   $1523 = ($1522|0)==(0);
   if ($1523) {
    $1524 = $0;
    $1525 = $temp_type;
    $1526 = $1525 << 24 >> 24;
    HEAP32[$vararg_buffer321>>2] = $1526;
    _g_string_append_printf($1524,2312,$vararg_buffer321);
   } else {
    $1527 = $lev;
    $1528 = $temp;
    $1529 = (($1528) + ($1527)|0);
    $1530 = (_strncmp($1529,47352,1)|0);
    $1531 = ($1530|0)==(0);
    if ($1531) {
     $1532 = $0;
     $1533 = $temp_type;
     $1534 = $1533 << 24 >> 24;
     HEAP32[$vararg_buffer324>>2] = $1534;
     _g_string_append_printf($1532,2312,$vararg_buffer324);
    } else {
     $1535 = $lev;
     $1536 = $temp;
     $1537 = (($1536) + ($1535)|0);
     $1538 = (_strncmp($1537,47296,1)|0);
     $1539 = ($1538|0)==(0);
     if ($1539) {
      $1540 = $0;
      $1541 = $temp_type;
      $1542 = $1541 << 24 >> 24;
      HEAP32[$vararg_buffer327>>2] = $1542;
      _g_string_append_printf($1540,2344,$vararg_buffer327);
     } else {
      $1543 = $lev;
      $1544 = $temp;
      $1545 = (($1544) + ($1543)|0);
      $1546 = (_strncmp($1545,47384,1)|0);
      $1547 = ($1546|0)==(0);
      if ($1547) {
       $1548 = $0;
       $1549 = $temp_type;
       $1550 = $1549 << 24 >> 24;
       HEAP32[$vararg_buffer330>>2] = $1550;
       _g_string_append_printf($1548,2344,$vararg_buffer330);
      } else {
       $1551 = $0;
       $1552 = $temp_type;
       $1553 = $1552 << 24 >> 24;
       HEAP32[$vararg_buffer333>>2] = $1553;
       _g_string_append_printf($1551,2384,$vararg_buffer333);
      }
     }
    }
   }
   $1554 = $1;
   $1555 = (($1554) + 12|0);
   $1556 = HEAP32[$1555>>2]|0;
   $1557 = ($1556|0)!=(0|0);
   if ($1557) {
    $1558 = $1;
    $1559 = (($1558) + 12|0);
    $1560 = HEAP32[$1559>>2]|0;
    $1561 = HEAP16[$1560>>1]|0;
    $1562 = $1561 << 16 >> 16;
    $1563 = ($1562|0)==(57);
    if ($1563) {
     $1564 = $0;
     $1565 = $1;
     $1566 = (($1565) + 12|0);
     $1567 = HEAP32[$1566>>2]|0;
     $1568 = (($1567) + 4|0);
     $1569 = HEAP32[$1568>>2]|0;
     $1570 = (_strlen(($1569|0))|0);
     $1571 = (($1570) + 1)|0;
     HEAP32[$vararg_buffer336>>2] = $1571;
     _g_string_append_printf($1564,2416,$vararg_buffer336);
     $1572 = $1;
     $1573 = (($1572) + 12|0);
     $1574 = HEAP32[$1573>>2]|0;
     $1575 = (($1574) + 4|0);
     $1576 = HEAP32[$1575>>2]|0;
     $1577 = (_strlen(($1576|0))|0);
     $1578 = $2;
     $1579 = (($1578) + 20|0);
     $1580 = HEAP32[$1579>>2]|0;
     $1581 = (($1580) + ($1577))|0;
     HEAP32[$1579>>2] = $1581;
    }
   }
   $1582 = $0;
   _g_string_append_printf($1582,42616,$vararg_buffer339);
   $1583 = $2;
   $1584 = (($1583) + 4|0);
   HEAP32[$1584>>2] = 2;
   $1585 = $0;
   $1586 = $1;
   $1587 = (($1586) + 12|0);
   $1588 = HEAP32[$1587>>2]|0;
   $1589 = $2;
   _print_html_node_tree($1585,$1588,$1589);
   $1590 = $0;
   $1591 = $temp_type;
   $1592 = $1591 << 24 >> 24;
   HEAP32[$vararg_buffer341>>2] = $1592;
   _g_string_append_printf($1590,2432,$vararg_buffer341);
   $1593 = $2;
   $1594 = (($1593) + 20|0);
   $1595 = HEAP32[$1594>>2]|0;
   $1596 = (($1595) + 1)|0;
   HEAP32[$1594>>2] = $1596;
   STACKTOP = sp;return;
   break;
  }
  case 2:  {
   $34 = $0;
   $35 = $1;
   $36 = (($35) + 4|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $2;
   _print_html_string($34,$37,$38);
   STACKTOP = sp;return;
   break;
  }
  case 32:  {
   $1366 = $0;
   $1367 = $1;
   $1368 = (($1367) + 4|0);
   $1369 = HEAP32[$1368>>2]|0;
   HEAP32[$vararg_buffer285>>2] = $1369;
   _g_string_append_printf($1366,40832,$vararg_buffer285);
   STACKTOP = sp;return;
   break;
  }
  case 40:  {
   $1361 = $0;
   _g_string_append_printf($1361,9536,$vararg_buffer280);
   $1362 = $0;
   $1363 = $1;
   $1364 = (($1363) + 4|0);
   $1365 = HEAP32[$1364>>2]|0;
   HEAP32[$vararg_buffer282>>2] = $1365;
   _g_string_append_printf($1362,40832,$vararg_buffer282);
   STACKTOP = sp;return;
   break;
  }
  case 38:  {
   $1346 = $0;
   $1347 = $2;
   _pad($1346,2,$1347);
   $1348 = $0;
   _g_string_append_printf($1348,2080,$vararg_buffer276);
   $1349 = $2;
   $1350 = (($1349) + 4|0);
   HEAP32[$1350>>2] = 2;
   $1351 = $0;
   $1352 = $1;
   $1353 = (($1352) + 12|0);
   $1354 = HEAP32[$1353>>2]|0;
   $1355 = $2;
   _print_html_node_tree($1351,$1354,$1355);
   $1356 = $0;
   $1357 = $2;
   _pad($1356,1,$1357);
   $1358 = $0;
   _g_string_append_printf($1358,2096,$vararg_buffer278);
   $1359 = $2;
   $1360 = (($1359) + 4|0);
   HEAP32[$1360>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 57:  {
   STACKTOP = sp;return;
   break;
  }
  case 28:  {
   break;
  }
  case 25: case 24: case 26:  {
   STACKTOP = sp;return;
   break;
  }
  case 29:  {
   $842 = $0;
   $843 = $2;
   _pad($842,2,$843);
   break;
  }
  case 68:  {
   $823 = $1;
   $824 = (($823) + 4|0);
   $825 = HEAP32[$824>>2]|0;
   $826 = (_strcmp($825,13280)|0);
   $827 = ($826|0)==(0);
   if ($827) {
    label = 171;
   } else {
    $828 = $1;
    $829 = (($828) + 4|0);
    $830 = HEAP32[$829>>2]|0;
    $831 = (_strcmp($830,13288)|0);
    $832 = ($831|0)==(0);
    if ($832) {
     label = 171;
    } else {
     $833 = $0;
     $834 = $1;
     $835 = (($834) + 4|0);
     $836 = HEAP32[$835>>2]|0;
     $837 = $1;
     $838 = (($837) + 12|0);
     $839 = HEAP32[$838>>2]|0;
     $840 = (($839) + 4|0);
     $841 = HEAP32[$840>>2]|0;
     HEAP32[$vararg_buffer149>>2] = $836;
     $vararg_ptr152 = (($vararg_buffer149) + 4|0);
     HEAP32[$vararg_ptr152>>2] = $841;
     _g_string_append_printf($833,8808,$vararg_buffer149);
    }
   }
   if ((label|0) == 171) {
   }
   STACKTOP = sp;return;
   break;
  }
  case 20:  {
   $571 = $1;
   $572 = (($571) + 4|0);
   $573 = HEAP32[$572>>2]|0;
   $574 = (___strdup($573)|0);
   $temp = $574;
   $575 = $temp;
   $576 = HEAP8[$575>>0]|0;
   $577 = $576 << 24 >> 24;
   $578 = ($577|0)==(36);
   if ($578) {
    $579 = $temp;
    $580 = (_strlen(($579|0))|0);
    $581 = (($580) - 1)|0;
    $582 = $temp;
    $583 = (($582) + ($581)|0);
    HEAP8[$583>>0] = 0;
    $584 = $temp;
    $585 = (($584) + 1|0);
    $586 = HEAP8[$585>>0]|0;
    $587 = $586 << 24 >> 24;
    $588 = ($587|0)==(36);
    if ($588) {
     $589 = $temp;
     $590 = (_strlen(($589|0))|0);
     $591 = (($590) - 1)|0;
     $592 = $temp;
     $593 = (($592) + ($591)|0);
     HEAP8[$593>>0] = 0;
     $594 = $0;
     $595 = $temp;
     $596 = (($595) + 2|0);
     HEAP32[$vararg_buffer101>>2] = $596;
     _g_string_append_printf($594,848,$vararg_buffer101);
    } else {
     $597 = $0;
     $598 = $temp;
     $599 = (($598) + 1|0);
     HEAP32[$vararg_buffer104>>2] = $599;
     _g_string_append_printf($597,888,$vararg_buffer104);
    }
   } else {
    $600 = $temp;
    $601 = (_strlen(($600|0))|0);
    $602 = (($601) - 1)|0;
    $603 = $temp;
    $604 = (($603) + ($602)|0);
    $605 = HEAP8[$604>>0]|0;
    $606 = $605 << 24 >> 24;
    $607 = ($606|0)==(93);
    if ($607) {
     $608 = $temp;
     $609 = (_strlen(($608|0))|0);
     $610 = (($609) - 3)|0;
     $611 = $temp;
     $612 = (($611) + ($610)|0);
     HEAP8[$612>>0] = 0;
     $613 = $0;
     $614 = $temp;
     HEAP32[$vararg_buffer107>>2] = $614;
     _g_string_append_printf($613,928,$vararg_buffer107);
    } else {
     $615 = $temp;
     $616 = (_strlen(($615|0))|0);
     $617 = (($616) - 3)|0;
     $618 = $temp;
     $619 = (($618) + ($617)|0);
     HEAP8[$619>>0] = 0;
     $620 = $0;
     $621 = $temp;
     HEAP32[$vararg_buffer110>>2] = $621;
     _g_string_append_printf($620,960,$vararg_buffer110);
    }
   }
   $622 = $temp;
   _free($622);
   STACKTOP = sp;return;
   break;
  }
  case 7:  {
   $570 = $0;
   _g_string_append_printf($570,840,$vararg_buffer99);
   STACKTOP = sp;return;
   break;
  }
  case 37:  {
   $561 = $0;
   $562 = $2;
   _print_html_localized_typography($561,2,$562);
   $563 = $0;
   $564 = $1;
   $565 = (($564) + 12|0);
   $566 = HEAP32[$565>>2]|0;
   $567 = $2;
   _print_html_node_tree($563,$566,$567);
   $568 = $0;
   $569 = $2;
   _print_html_localized_typography($568,3,$569);
   STACKTOP = sp;return;
   break;
  }
  case 43: case 41:  {
   $160 = $0;
   $161 = $2;
   _pad($160,2,$161);
   $162 = $1;
   $163 = (($162) + 12|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = ($164|0)!=(0|0);
   if ($165) {
    $166 = $1;
    $167 = (($166) + 12|0);
    $168 = HEAP32[$167>>2]|0;
    $169 = HEAP16[$168>>1]|0;
    $170 = $169 << 16 >> 16;
    $171 = ($170|0)==(42);
    if ($171) {
     $172 = $1;
     $173 = (($172) + 12|0);
     $174 = HEAP32[$173>>2]|0;
     $175 = (($174) + 4|0);
     $176 = HEAP32[$175>>2]|0;
     _trim_trailing_whitespace($176);
     $177 = $1;
     $178 = (($177) + 12|0);
     $179 = HEAP32[$178>>2]|0;
     $180 = (($179) + 4|0);
     $181 = HEAP32[$180>>2]|0;
     $182 = (_strlen(($181|0))|0);
     $183 = ($182>>>0)>(0);
     if ($183) {
      $184 = $0;
      $185 = $1;
      $186 = (($185) + 12|0);
      $187 = HEAP32[$186>>2]|0;
      $188 = (($187) + 4|0);
      $189 = HEAP32[$188>>2]|0;
      HEAP32[$vararg_buffer31>>2] = $189;
      _g_string_append_printf($184,560,$vararg_buffer31);
     } else {
      $190 = $0;
      HEAP32[$vararg_buffer34>>2] = 584;
      _g_string_append_printf($190,40832,$vararg_buffer34);
     }
    } else {
     label = 39;
    }
   } else {
    label = 39;
   }
   if ((label|0) == 39) {
    $191 = $0;
    HEAP32[$vararg_buffer37>>2] = 584;
    _g_string_append_printf($191,40832,$vararg_buffer37);
   }
   $192 = $0;
   $193 = $1;
   $194 = (($193) + 4|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = $2;
   _print_html_string($192,$195,$196);
   $197 = $0;
   HEAP32[$vararg_buffer40>>2] = 600;
   _g_string_append_printf($197,40832,$vararg_buffer40);
   $198 = $2;
   $199 = (($198) + 4|0);
   HEAP32[$199>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 51:  {
   $152 = $0;
   $153 = $2;
   _pad($152,2,$153);
   $154 = $0;
   $155 = $1;
   $156 = (($155) + 4|0);
   $157 = HEAP32[$156>>2]|0;
   HEAP32[$vararg_buffer28>>2] = $157;
   _g_string_append_printf($154,40832,$vararg_buffer28);
   $158 = $2;
   $159 = (($158) + 4|0);
   HEAP32[$159>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 47:  {
   $147 = $0;
   $148 = $2;
   _pad($147,2,$148);
   $149 = $0;
   _g_string_append_printf($149,552,$vararg_buffer26);
   $150 = $2;
   $151 = (($150) + 4|0);
   HEAP32[$151>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 81:  {
   $1289 = $1;
   $1290 = (($1289) + 4|0);
   $1291 = HEAP32[$1290>>2]|0;
   $1292 = $2;
   $1293 = (($1292) + 52|0);
   $1294 = HEAP32[$1293>>2]|0;
   $1295 = (_metavalue_for_key($1291,$1294)|0);
   $temp = $1295;
   $1296 = $temp;
   $1297 = ($1296|0)==(0|0);
   if ($1297) {
    $1298 = $0;
    $1299 = $1;
    $1300 = (($1299) + 4|0);
    $1301 = HEAP32[$1300>>2]|0;
    HEAP32[$vararg_buffer257>>2] = $1301;
    _g_string_append_printf($1298,39936,$vararg_buffer257);
   } else {
    $1302 = $0;
    $1303 = $temp;
    _g_string_append_printf($1302,$1303,$vararg_buffer260);
    $1304 = $temp;
    _free($1304);
   }
   STACKTOP = sp;return;
   break;
  }
  case 0:  {
   STACKTOP = sp;return;
   break;
  }
  case 70:  {
   STACKTOP = sp;return;
   break;
  }
  case 35:  {
   $548 = $0;
   $549 = $2;
   _print_html_localized_typography($548,5,$549);
   STACKTOP = sp;return;
   break;
  }
  case 86:  {
   $1624 = $0;
   _g_string_append_printf($1624,2472,$vararg_buffer352);
   $1625 = $0;
   $1626 = $1;
   $1627 = (($1626) + 12|0);
   $1628 = HEAP32[$1627>>2]|0;
   $1629 = $2;
   _print_html_node_tree($1625,$1628,$1629);
   $1630 = $0;
   _g_string_append_printf($1630,2496,$vararg_buffer354);
   STACKTOP = sp;return;
   break;
  }
  case 54:  {
   STACKTOP = sp;return;
   break;
  }
  case 8:  {
   $90 = $0;
   $91 = $1;
   $92 = (($91) + 4|0);
   $93 = HEAP32[$92>>2]|0;
   HEAP32[$vararg_buffer17>>2] = $93;
   _g_string_append_printf($90,40832,$vararg_buffer17);
   STACKTOP = sp;return;
   break;
  }
  case 71:  {
   $1305 = $0;
   _g_string_append_printf($1305,1976,$vararg_buffer262);
   $1306 = $0;
   $1307 = $1;
   $1308 = (($1307) + 12|0);
   $1309 = HEAP32[$1308>>2]|0;
   $1310 = (($1309) + 4|0);
   $1311 = HEAP32[$1310>>2]|0;
   $1312 = $2;
   _print_html_string($1306,$1311,$1312);
   $1313 = $0;
   _g_string_append_printf($1313,9352,$vararg_buffer264);
   $1314 = $1;
   $1315 = (($1314) + 16|0);
   $1316 = HEAP32[$1315>>2]|0;
   $1317 = ($1316|0)!=(0|0);
   if ($1317) {
    $1318 = $1;
    $1319 = (($1318) + 16|0);
    $1320 = HEAP32[$1319>>2]|0;
    $1321 = HEAP16[$1320>>1]|0;
    $1322 = $1321 << 16 >> 16;
    $1323 = ($1322|0)==(70);
    if ($1323) {
     $1324 = $0;
     _g_string_append_printf($1324,2008,$vararg_buffer266);
     $1325 = $0;
     $1326 = $1;
     $1327 = (($1326) + 16|0);
     $1328 = HEAP32[$1327>>2]|0;
     $1329 = (($1328) + 4|0);
     $1330 = HEAP32[$1329>>2]|0;
     $1331 = $2;
     _print_html_string($1325,$1330,$1331);
     $1332 = $0;
     _g_string_append_printf($1332,9352,$vararg_buffer268);
    }
   }
   $1333 = $0;
   _g_string_append_printf($1333,39760,$vararg_buffer270);
   STACKTOP = sp;return;
   break;
  }
  case 53:  {
   $1436 = $1;
   $1437 = (($1436) + 12|0);
   $1438 = HEAP32[$1437>>2]|0;
   $1439 = ($1438|0)!=(0|0);
   if ($1439) {
    $1440 = $1;
    $1441 = (($1440) + 12|0);
    $1442 = HEAP32[$1441>>2]|0;
    $1443 = HEAP16[$1442>>1]|0;
    $1444 = $1443 << 16 >> 16;
    $1445 = ($1444|0)==(54);
    if ($1445) {
     $1446 = $1;
     $1447 = (($1446) + 12|0);
     $1448 = HEAP32[$1447>>2]|0;
     $1449 = (($1448) + 4|0);
     $1450 = HEAP32[$1449>>2]|0;
     $1451 = (_label_from_string($1450)|0);
     $temp = $1451;
    } else {
     label = 293;
    }
   } else {
    label = 293;
   }
   if ((label|0) == 293) {
    $1452 = $1;
    $1453 = (($1452) + 12|0);
    $1454 = HEAP32[$1453>>2]|0;
    $1455 = (_label_from_node_tree($1454)|0);
    $temp = $1455;
   }
   $1456 = $0;
   $1457 = $temp;
   HEAP32[$vararg_buffer304>>2] = $1457;
   _g_string_append_printf($1456,2192,$vararg_buffer304);
   $1458 = $0;
   $1459 = $1;
   $1460 = (($1459) + 12|0);
   $1461 = HEAP32[$1460>>2]|0;
   $1462 = $2;
   _print_html_node_tree($1458,$1461,$1462);
   $1463 = $0;
   _g_string_append_printf($1463,2216,$vararg_buffer307);
   $1464 = $temp;
   _free($1464);
   STACKTOP = sp;return;
   break;
  }
  case 85:  {
   $84 = $0;
   $85 = $1;
   $86 = (($85) + 4|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = $2;
   _print_html_string($84,$87,$88);
   $89 = $0;
   _g_string_append_printf($89,432,$vararg_buffer15);
   STACKTOP = sp;return;
   break;
  }
  case 79:  {
   $1616 = $0;
   $1617 = $1;
   $1618 = (($1617) + 4|0);
   $1619 = HEAP32[$1618>>2]|0;
   HEAP32[$vararg_buffer346>>2] = $1619;
   _g_string_append_printf($1616,2440,$vararg_buffer346);
   STACKTOP = sp;return;
   break;
  }
  case 80:  {
   $1620 = $0;
   $1621 = $1;
   $1622 = (($1621) + 4|0);
   $1623 = HEAP32[$1622>>2]|0;
   HEAP32[$vararg_buffer349>>2] = $1623;
   _g_string_append_printf($1620,2456,$vararg_buffer349);
   STACKTOP = sp;return;
   break;
  }
  case 87: case 82:  {
   STACKTOP = sp;return;
   break;
  }
  case 64:  {
   $1615 = HEAP32[_stderr>>2]|0;
   (_fprintf(($1615|0),(15240|0),($vararg_buffer344|0))|0);
   STACKTOP = sp;return;
   break;
  }
  case 66: case 65:  {
   STACKTOP = sp;return;
   break;
  }
  case 84:  {
   $62 = $1;
   $63 = (($62) + 12|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (($64) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (_strlen(($66|0))|0);
   $68 = ($67|0)==(0);
   if ($68) {
    $69 = $0;
    _g_string_append_printf($69,408,$vararg_buffer9);
   } else {
    $70 = $0;
    _g_string_append_printf($70,416,$vararg_buffer11);
    $71 = $0;
    $72 = $1;
    $73 = (($72) + 12|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (($74) + 4|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $2;
    _print_html_string($71,$76,$77);
    $78 = $0;
    _g_string_append_printf($78,33864,$vararg_buffer13);
   }
   $79 = $0;
   $80 = $1;
   $81 = (($80) + 4|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = $2;
   _print_html_string($79,$82,$83);
   STACKTOP = sp;return;
   break;
  }
  case 55:  {
   $1422 = $1;
   $1423 = (($1422) + 4|0);
   $1424 = HEAP32[$1423>>2]|0;
   $1425 = $2;
   $1426 = (($1425) + 16|0);
   HEAP32[$1426>>2] = $1424;
   $1427 = $2;
   $1428 = (($1427) + 24|0);
   $1429 = HEAP8[$1428>>0]|0;
   $1430 = $1429 << 24 >> 24;
   $1431 = ($1430|0)==(0);
   if ($1431) {
    $1432 = $0;
    $1433 = $2;
    _print_col_group($1432,$1433);
   }
   $1434 = $2;
   $1435 = (($1434) + 24|0);
   HEAP8[$1435>>0] = 100;
   STACKTOP = sp;return;
   break;
  }
  case 83:  {
   $39 = $1;
   $40 = (($39) + 12|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($41) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (_strlen(($43|0))|0);
   $45 = ($44|0)==(0);
   if ($45) {
    $46 = $0;
    _g_string_append_printf($46,408,$vararg_buffer1);
   } else {
    $47 = $0;
    _g_string_append_printf($47,416,$vararg_buffer3);
    $48 = $0;
    $49 = $1;
    $50 = (($49) + 12|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (($51) + 4|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = $2;
    _print_html_string($48,$53,$54);
    $55 = $0;
    _g_string_append_printf($55,33864,$vararg_buffer5);
   }
   $56 = $0;
   $57 = $1;
   $58 = (($57) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $2;
   _print_html_string($56,$59,$60);
   $61 = $0;
   _g_string_append_printf($61,432,$vararg_buffer7);
   STACKTOP = sp;return;
   break;
  }
  case 58:  {
   $1490 = $0;
   _g_string_append_printf($1490,2296,$vararg_buffer317);
   $1491 = $2;
   $1492 = (($1491) + 20|0);
   HEAP32[$1492>>2] = 0;
   $1493 = $0;
   $1494 = $1;
   $1495 = (($1494) + 12|0);
   $1496 = HEAP32[$1495>>2]|0;
   $1497 = $2;
   _print_html_node_tree($1493,$1496,$1497);
   $1498 = $0;
   _g_string_append_printf($1498,2304,$vararg_buffer319);
   STACKTOP = sp;return;
   break;
  }
  case 33:  {
   $546 = $0;
   $547 = $2;
   _print_html_localized_typography($546,6,$547);
   STACKTOP = sp;return;
   break;
  }
  case 52:  {
   $1407 = $0;
   $1408 = $2;
   _pad($1407,2,$1408);
   $1409 = $0;
   _g_string_append_printf($1409,2160,$vararg_buffer300);
   $1410 = $0;
   $1411 = $1;
   $1412 = (($1411) + 12|0);
   $1413 = HEAP32[$1412>>2]|0;
   $1414 = $2;
   _print_html_node_tree($1410,$1413,$1414);
   $1415 = $0;
   _g_string_append_printf($1415,2176,$vararg_buffer302);
   $1416 = $2;
   $1417 = (($1416) + 24|0);
   HEAP8[$1417>>0] = 0;
   $1418 = $2;
   $1419 = (($1418) + 4|0);
   HEAP32[$1419>>2] = 1;
   $1420 = $2;
   $1421 = (($1420) + 16|0);
   HEAP32[$1421>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 59:  {
   $1483 = $0;
   _g_string_append_printf($1483,2264,$vararg_buffer313);
   $1484 = $0;
   $1485 = $1;
   $1486 = (($1485) + 12|0);
   $1487 = HEAP32[$1486>>2]|0;
   $1488 = $2;
   _print_html_node_tree($1484,$1487,$1488);
   $1489 = $0;
   _g_string_append_printf($1489,2280,$vararg_buffer315);
   STACKTOP = sp;return;
   break;
  }
  case 18:  {
   $288 = $1;
   $289 = (($288) + 4|0);
   $290 = HEAP32[$289>>2]|0;
   $291 = (_strcmp($290,38600)|0);
   $292 = ($291|0)==(0);
   if ($292) {
    $293 = $1;
    $294 = (($293) + 12|0);
    $295 = HEAP32[$294>>2]|0;
    $296 = (($295) + 4|0);
    $297 = HEAP32[$296>>2]|0;
    $298 = (_atoi($297)|0);
    $299 = $2;
    $300 = (($299) + 8|0);
    HEAP32[$300>>2] = $298;
    STACKTOP = sp;return;
   }
   $301 = $1;
   $302 = (($301) + 4|0);
   $303 = HEAP32[$302>>2]|0;
   $304 = (_strcmp($303,4896)|0);
   $305 = ($304|0)==(0);
   if ($305) {
    $306 = $1;
    $307 = (($306) + 12|0);
    $308 = HEAP32[$307>>2]|0;
    $309 = (($308) + 4|0);
    $310 = HEAP32[$309>>2]|0;
    $311 = (_atoi($310)|0);
    $312 = $2;
    $313 = (($312) + 8|0);
    HEAP32[$313>>2] = $311;
    STACKTOP = sp;return;
   }
   $314 = $1;
   $315 = (($314) + 4|0);
   $316 = HEAP32[$315>>2]|0;
   $317 = (_strcmp($316,12632)|0);
   $318 = ($317|0)==(0);
   if ($318) {
    $319 = $1;
    $320 = (($319) + 12|0);
    $321 = HEAP32[$320>>2]|0;
    $322 = (($321) + 4|0);
    $323 = HEAP32[$322>>2]|0;
    $324 = (_atoi($323)|0);
    $325 = $2;
    $326 = (($325) + 8|0);
    HEAP32[$326>>2] = $324;
    STACKTOP = sp;return;
   }
   $327 = $1;
   $328 = (($327) + 4|0);
   $329 = HEAP32[$328>>2]|0;
   $330 = (_strcmp($329,38632)|0);
   $331 = ($330|0)==(0);
   if ($331) {
    $332 = $1;
    $333 = (($332) + 12|0);
    $334 = HEAP32[$333>>2]|0;
    $335 = (_label_from_node_tree($334)|0);
    $temp = $335;
    $336 = $temp;
    $337 = (_strcmp($336,38648)|0);
    $338 = ($337|0)==(0);
    if ($338) {
     label = 65;
    } else {
     $339 = $temp;
     $340 = (_strcmp($339,38656)|0);
     $341 = ($340|0)==(0);
     if ($341) {
      label = 65;
     } else {
      $344 = $temp;
      $345 = (_strcmp($344,38664)|0);
      $346 = ($345|0)==(0);
      if ($346) {
       label = 68;
      } else {
       $347 = $temp;
       $348 = (_strcmp($347,38672)|0);
       $349 = ($348|0)==(0);
       if ($349) {
        label = 68;
       } else {
        $352 = $temp;
        $353 = (_strcmp($352,38680)|0);
        $354 = ($353|0)==(0);
        if ($354) {
         $355 = $2;
         $356 = (($355) + 12|0);
         HEAP32[$356>>2] = 4;
        } else {
         $357 = $temp;
         $358 = (_strcmp($357,38704)|0);
         $359 = ($358|0)==(0);
         if ($359) {
          label = 73;
         } else {
          $360 = $temp;
          $361 = (_strcmp($360,38712)|0);
          $362 = ($361|0)==(0);
          if ($362) {
           label = 73;
          } else {
           $365 = $temp;
           $366 = (_strcmp($365,38720)|0);
           $367 = ($366|0)==(0);
           if ($367) {
            label = 76;
           } else {
            $368 = $temp;
            $369 = (_strcmp($368,38728)|0);
            $370 = ($369|0)==(0);
            if ($370) {
             label = 76;
            }
           }
           if ((label|0) == 76) {
            $371 = $2;
            $372 = (($371) + 12|0);
            HEAP32[$372>>2] = 5;
           }
          }
         }
         if ((label|0) == 73) {
          $363 = $2;
          $364 = (($363) + 12|0);
          HEAP32[$364>>2] = 2;
         }
        }
       }
      }
      if ((label|0) == 68) {
       $350 = $2;
       $351 = (($350) + 12|0);
       HEAP32[$351>>2] = 3;
      }
     }
    }
    if ((label|0) == 65) {
     $342 = $2;
     $343 = (($342) + 12|0);
     HEAP32[$343>>2] = 1;
    }
    $373 = $temp;
    _free($373);
    STACKTOP = sp;return;
   }
   $374 = $2;
   $375 = HEAP32[$374>>2]|0;
   $376 = $375 & 4;
   $377 = ($376|0)!=(0);
   if ($377) {
    STACKTOP = sp;return;
   }
   $378 = $1;
   $379 = (($378) + 4|0);
   $380 = HEAP32[$379>>2]|0;
   $381 = (_strcmp($380,38736)|0);
   $382 = ($381|0)==(0);
   if ($382) {
    $383 = $0;
    _g_string_append_printf($383,688,$vararg_buffer65);
    $384 = $0;
    $385 = $1;
    $386 = (($385) + 12|0);
    $387 = HEAP32[$386>>2]|0;
    $388 = $2;
    _print_html_node($384,$387,$388);
    $389 = $0;
    _g_string_append_printf($389,704,$vararg_buffer67);
   } else {
    $390 = $1;
    $391 = (($390) + 4|0);
    $392 = HEAP32[$391>>2]|0;
    $393 = (_strcmp($392,12544)|0);
    $394 = ($393|0)==(0);
    if ($394) {
     $395 = $0;
     _g_string_append_printf($395,720,$vararg_buffer69);
     $396 = $0;
     $397 = $1;
     $398 = (($397) + 12|0);
     $399 = HEAP32[$398>>2]|0;
     $400 = $2;
     _print_html_node($396,$399,$400);
     $401 = $0;
     _g_string_append_printf($401,768,$vararg_buffer71);
    } else {
     $402 = $1;
     $403 = (($402) + 4|0);
     $404 = HEAP32[$403>>2]|0;
     $405 = (_strcmp($404,12552)|0);
     $406 = ($405|0)==(0);
     if ($406) {
      $407 = $1;
      $408 = (($407) + 12|0);
      $409 = HEAP32[$408>>2]|0;
      $410 = (($409) + 4|0);
      $411 = HEAP32[$410>>2]|0;
      _trim_trailing_whitespace($411);
      $412 = $0;
      $413 = $1;
      $414 = (($413) + 12|0);
      $415 = HEAP32[$414>>2]|0;
      _print_raw_node($412,$415);
      $416 = $0;
      _g_string_append_printf($416,42896,$vararg_buffer73);
     } else {
      $417 = $1;
      $418 = (($417) + 4|0);
      $419 = HEAP32[$418>>2]|0;
      $420 = (_strcmp($419,12568)|0);
      $421 = ($420|0)==(0);
      if ($421) {
       $422 = $1;
       $423 = (($422) + 12|0);
       $424 = HEAP32[$423>>2]|0;
       $425 = (($424) + 4|0);
       $426 = HEAP32[$425>>2]|0;
       _trim_trailing_whitespace($426);
       $427 = $0;
       $428 = $1;
       $429 = (($428) + 12|0);
       $430 = HEAP32[$429>>2]|0;
       _print_raw_node($427,$430);
       $431 = $0;
       _g_string_append_printf($431,42896,$vararg_buffer75);
      } else {
       $432 = $1;
       $433 = (($432) + 4|0);
       $434 = HEAP32[$433>>2]|0;
       $435 = (_strcmp($434,12584)|0);
       $436 = ($435|0)==(0);
       if ($436) {
       } else {
        $437 = $1;
        $438 = (($437) + 4|0);
        $439 = HEAP32[$438>>2]|0;
        $440 = (_strcmp($439,12600)|0);
        $441 = ($440|0)==(0);
        if ($441) {
        } else {
         $442 = $1;
         $443 = (($442) + 4|0);
         $444 = HEAP32[$443>>2]|0;
         $445 = (_strcmp($444,40904)|0);
         $446 = ($445|0)==(0);
         if ($446) {
         } else {
          $447 = $0;
          $448 = $1;
          $449 = (($448) + 4|0);
          $450 = HEAP32[$449>>2]|0;
          HEAP32[$vararg_buffer77>>2] = $450;
          _g_string_append_printf($447,776,$vararg_buffer77);
          $451 = $0;
          $452 = $1;
          $453 = (($452) + 12|0);
          $454 = HEAP32[$453>>2]|0;
          $455 = $2;
          _print_html_node($451,$454,$455);
          $456 = $0;
          _g_string_append_printf($456,768,$vararg_buffer80);
         }
        }
       }
      }
     }
    }
   }
   STACKTOP = sp;return;
   break;
  }
  case 72: case 73:  {
   $1163 = $1;
   $1164 = (($1163) + 8|0);
   $1165 = HEAP32[$1164>>2]|0;
   $1166 = ($1165|0)!=(0|0);
   if ($1166) {
    $1167 = $1;
    $1168 = (($1167) + 8|0);
    $1169 = HEAP32[$1168>>2]|0;
    $1170 = HEAP32[$1169>>2]|0;
    $1171 = (_strncmp($1170,45008,2)|0);
    $1172 = ($1171|0)==(0);
    if ($1172) {
     $1173 = HEAP32[_stderr>>2]|0;
     (_fprintf(($1173|0),(1632|0),($vararg_buffer217|0))|0);
     $1174 = $1;
     $1175 = HEAP16[$1174>>1]|0;
     $1176 = $1175 << 16 >> 16;
     $1177 = ($1176|0)==(73);
     if ($1177) {
      $1178 = $0;
      $1179 = $1;
      $1180 = (($1179) + 4|0);
      $1181 = HEAP32[$1180>>2]|0;
      HEAP32[$vararg_buffer219>>2] = $1181;
      _g_string_append_printf($1178,1648,$vararg_buffer219);
     } else {
      $1182 = $0;
      _g_string_append_printf($1182,1688,$vararg_buffer222);
      $1183 = $0;
      _g_string_append_printf($1183,9352,$vararg_buffer224);
     }
    } else {
     label = 240;
    }
   } else {
    label = 240;
   }
   if ((label|0) == 240) {
    $lev = 0;
    $1184 = $1;
    $1185 = (($1184) + 8|0);
    $1186 = HEAP32[$1185>>2]|0;
    $1187 = ($1186|0)!=(0|0);
    if ($1187) {
     $1188 = $1;
     $1189 = (($1188) + 8|0);
     $1190 = HEAP32[$1189>>2]|0;
     $1191 = HEAP32[$1190>>2]|0;
     $1192 = $2;
     $1193 = (_note_number_for_label($1191,$1192)|0);
     $lev = $1193;
    }
    $1194 = $lev;
    $1195 = ($1194|0)!=(0);
    if ($1195) {
     $1196 = $2;
     $1197 = HEAP32[$1196>>2]|0;
     $1198 = $1197 & 32768;
     $1199 = ($1198|0)!=(0);
     if ($1199) {
      $1200 = $2;
      $1201 = (($1200) + 88|0);
      $1202 = HEAP32[$1201>>2]|0;
      $1203 = $lev;
      $1204 = (($1202) + ($1203))|0;
      _srand($1204);
      $1205 = (_rand()|0);
      $1206 = (($1205|0) % 99999)&-1;
      $1207 = (($1206) + 1)|0;
      $random = $1207;
     } else {
      $1208 = $lev;
      $random = $1208;
     }
     $1209 = $2;
     $1210 = (($1209) + 48|0);
     $1211 = HEAP32[$1210>>2]|0;
     $1212 = $lev;
     $1213 = (_node_for_count($1211,$1212)|0);
     $temp_node = $1213;
     $1214 = $temp_node;
     HEAP16[$1214>>1] = 63;
     $1215 = $lev;
     $1216 = $2;
     $1217 = (($1216) + 64|0);
     $1218 = HEAP32[$1217>>2]|0;
     $1219 = ($1215|0)>($1218|0);
     if ($1219) {
      $1220 = $lev;
      $1221 = $2;
      $1222 = (($1221) + 64|0);
      HEAP32[$1222>>2] = $1220;
     }
     $1223 = $1;
     $1224 = HEAP16[$1223>>1]|0;
     $1225 = $1224 << 16 >> 16;
     $1226 = ($1225|0)==(73);
     if ($1226) {
      $1227 = $0;
      $1228 = $random;
      HEAP32[$vararg_buffer226>>2] = $1228;
      _g_string_append_printf($1227,1720,$vararg_buffer226);
     } else {
      $1229 = $0;
      $1230 = $random;
      HEAP32[$vararg_buffer229>>2] = $1230;
      _g_string_append_printf($1229,1752,$vararg_buffer229);
      $1231 = $1;
      $1232 = (($1231) + 12|0);
      $1233 = HEAP32[$1232>>2]|0;
      $1234 = ($1233|0)!=(0|0);
      if ($1234) {
       $1235 = $0;
       _g_string_append_printf($1235,1816,$vararg_buffer232);
       $1236 = $0;
       $1237 = $1;
       $1238 = (($1237) + 12|0);
       $1239 = HEAP32[$1238>>2]|0;
       $1240 = $2;
       _print_html_node($1236,$1239,$1240);
       $1241 = $0;
       $1242 = $lev;
       HEAP32[$vararg_buffer234>>2] = $1242;
       _g_string_append_printf($1241,1840,$vararg_buffer234);
      } else {
       $1243 = $0;
       $1244 = $lev;
       HEAP32[$vararg_buffer237>>2] = $1244;
       _g_string_append_printf($1243,1856,$vararg_buffer237);
      }
     }
     $1245 = $0;
     $1246 = $1;
     $1247 = (($1246) + 8|0);
     $1248 = HEAP32[$1247>>2]|0;
     $1249 = HEAP32[$1248>>2]|0;
     HEAP32[$vararg_buffer240>>2] = $1249;
     _g_string_append_printf($1245,1864,$vararg_buffer240);
     $1250 = $1;
     $1251 = HEAP16[$1250>>1]|0;
     $1252 = $1251 << 16 >> 16;
     $1253 = ($1252|0)==(73);
     if ($1253) {
      $1254 = $0;
      _g_string_append_printf($1254,9352,$vararg_buffer243);
     } else {
      $1255 = $0;
      _g_string_append_printf($1255,1072,$vararg_buffer245);
     }
    } else {
     $1256 = $1;
     $1257 = (($1256) + 8|0);
     $1258 = HEAP32[$1257>>2]|0;
     $1259 = ($1258|0)!=(0|0);
     if ($1259) {
      $1260 = $1;
      $1261 = HEAP16[$1260>>1]|0;
      $1262 = $1261 << 16 >> 16;
      $1263 = ($1262|0)==(73);
      if ($1263) {
       $1264 = $0;
       $1265 = $1;
       $1266 = (($1265) + 8|0);
       $1267 = HEAP32[$1266>>2]|0;
       $1268 = HEAP32[$1267>>2]|0;
       HEAP32[$vararg_buffer247>>2] = $1268;
       _g_string_append_printf($1264,1648,$vararg_buffer247);
      } else {
       label = 261;
      }
     } else {
      label = 261;
     }
     if ((label|0) == 261) {
      $1269 = $1;
      $1270 = (($1269) + 8|0);
      $1271 = HEAP32[$1270>>2]|0;
      $1272 = ($1271|0)!=(0|0);
      if ($1272) {
       $1273 = $0;
       _g_string_append_printf($1273,1920,$vararg_buffer250);
       $1274 = $1;
       $1275 = (($1274) + 12|0);
       $1276 = HEAP32[$1275>>2]|0;
       $1277 = ($1276|0)!=(0|0);
       if ($1277) {
        $1278 = $0;
        $1279 = $1;
        $1280 = (($1279) + 12|0);
        $1281 = HEAP32[$1280>>2]|0;
        $1282 = $2;
        _print_html_node($1278,$1281,$1282);
        $1283 = $0;
        _g_string_append_printf($1283,39840,$vararg_buffer252);
       }
       $1284 = $0;
       $1285 = $1;
       $1286 = (($1285) + 8|0);
       $1287 = HEAP32[$1286>>2]|0;
       $1288 = HEAP32[$1287>>2]|0;
       HEAP32[$vararg_buffer254>>2] = $1288;
       _g_string_append_printf($1284,1960,$vararg_buffer254);
      }
     }
    }
   }
   STACKTOP = sp;return;
   break;
  }
  case 23:  {
   $637 = $1;
   $638 = (($637) + 8|0);
   $639 = HEAP32[$638>>2]|0;
   $640 = ($639|0)!=(0|0);
   if ($640) {
    $641 = $1;
    $642 = (($641) + 8|0);
    $643 = HEAP32[$642>>2]|0;
    $644 = HEAP32[$643>>2]|0;
    $645 = $1;
    $646 = (($645) + 8|0);
    $647 = HEAP32[$646>>2]|0;
    $648 = (($647) + 4|0);
    $649 = HEAP32[$648>>2]|0;
    $650 = $1;
    $651 = (($650) + 8|0);
    $652 = HEAP32[$651>>2]|0;
    $653 = (($652) + 8|0);
    $654 = HEAP32[$653>>2]|0;
    $655 = $1;
    $656 = (($655) + 8|0);
    $657 = HEAP32[$656>>2]|0;
    $658 = (($657) + 12|0);
    $659 = HEAP32[$658>>2]|0;
    $660 = (_mk_link_data($644,$649,$654,$659)|0);
    $temp_link_data = $660;
   }
   $661 = $1;
   $662 = (($661) + 8|0);
   $663 = HEAP32[$662>>2]|0;
   $664 = HEAP32[$663>>2]|0;
   $665 = ($664|0)==(0|0);
   if ($665) {
    $666 = $1;
    $667 = (($666) + 8|0);
    $668 = HEAP32[$667>>2]|0;
    $669 = (($668) + 4|0);
    $670 = HEAP32[$669>>2]|0;
    $671 = ($670|0)==(0|0);
    if ($671) {
     $672 = (_g_string_new(41432)|0);
     $temp_str = $672;
     $673 = $temp_str;
     $674 = $1;
     $675 = (($674) + 12|0);
     $676 = HEAP32[$675>>2]|0;
     _print_raw_node_tree($673,$676);
     $677 = $temp_str;
     $678 = HEAP32[$677>>2]|0;
     $679 = $1;
     $680 = (($679) + 8|0);
     $681 = HEAP32[$680>>2]|0;
     HEAP32[$681>>2] = $678;
     $682 = $temp_str;
     (_g_string_free($682,0)|0);
    }
   }
   $683 = $1;
   $684 = (($683) + 8|0);
   $685 = HEAP32[$684>>2]|0;
   $686 = HEAP32[$685>>2]|0;
   $687 = ($686|0)!=(0|0);
   do {
    if ($687) {
     $688 = $1;
     $689 = (($688) + 8|0);
     $690 = HEAP32[$689>>2]|0;
     $691 = HEAP32[$690>>2]|0;
     $692 = (___strdup($691)|0);
     $temp = $692;
     $693 = $1;
     $694 = (($693) + 8|0);
     $695 = HEAP32[$694>>2]|0;
     $696 = (($695) + 12|0);
     HEAP32[$696>>2] = 0;
     $697 = $1;
     $698 = (($697) + 8|0);
     $699 = HEAP32[$698>>2]|0;
     _free_link_data($699);
     $700 = $temp;
     $701 = $2;
     $702 = (_extract_link_data($700,$701)|0);
     $703 = $1;
     $704 = (($703) + 8|0);
     HEAP32[$704>>2] = $702;
     $705 = $1;
     $706 = (($705) + 8|0);
     $707 = HEAP32[$706>>2]|0;
     $708 = ($707|0)==(0|0);
     if (!($708)) {
      $745 = $temp;
      _free($745);
      break;
     }
     $709 = $0;
     _g_string_append_printf($709,40808,$vararg_buffer121);
     $710 = $0;
     $711 = $1;
     $712 = (($711) + 12|0);
     $713 = HEAP32[$712>>2]|0;
     $714 = $2;
     _print_html_node($710,$713,$714);
     $715 = $0;
     _g_string_append_printf($715,39600,$vararg_buffer123);
     $716 = $1;
     $717 = (($716) + 12|0);
     $718 = HEAP32[$717>>2]|0;
     $719 = (($718) + 16|0);
     $720 = HEAP32[$719>>2]|0;
     $721 = ($720|0)!=(0|0);
     if ($721) {
      $722 = $0;
      _g_string_append_printf($722,40808,$vararg_buffer125);
      $723 = $0;
      $724 = $1;
      $725 = (($724) + 12|0);
      $726 = HEAP32[$725>>2]|0;
      $727 = (($726) + 16|0);
      $728 = HEAP32[$727>>2]|0;
      $729 = $2;
      _print_html_node_tree($723,$728,$729);
      $730 = $0;
      _g_string_append_printf($730,39600,$vararg_buffer127);
     } else {
      $731 = $1;
      $732 = (($731) + 4|0);
      $733 = HEAP32[$732>>2]|0;
      $734 = ($733|0)!=(0|0);
      if ($734) {
       $735 = $0;
       $736 = $1;
       $737 = (($736) + 4|0);
       $738 = HEAP32[$737>>2]|0;
       HEAP32[$vararg_buffer129>>2] = $738;
       _g_string_append_printf($735,40832,$vararg_buffer129);
      } else {
       $739 = $0;
       $740 = $temp;
       HEAP32[$vararg_buffer132>>2] = $740;
       _g_string_append_printf($739,39608,$vararg_buffer132);
      }
     }
     $741 = $temp;
     _free($741);
     $742 = $temp_link_data;
     $743 = $1;
     $744 = (($743) + 8|0);
     HEAP32[$744>>2] = $742;
     STACKTOP = sp;return;
    }
   } while(0);
   $746 = $0;
   _g_string_append_printf($746,1040,$vararg_buffer135);
   $747 = $1;
   $748 = (($747) + 8|0);
   $749 = HEAP32[$748>>2]|0;
   $750 = (($749) + 4|0);
   $751 = HEAP32[$750>>2]|0;
   $752 = ($751|0)!=(0|0);
   if ($752) {
    $753 = $0;
    _g_string_append_printf($753,1048,$vararg_buffer137);
    $754 = $1;
    $755 = (($754) + 8|0);
    $756 = HEAP32[$755>>2]|0;
    $757 = (($756) + 4|0);
    $758 = HEAP32[$757>>2]|0;
    $759 = (_strncmp($758,44640,6)|0);
    $760 = ($759|0)==(0);
    if ($760) {
     $761 = $2;
     $762 = (($761) + 68|0);
     HEAP8[$762>>0] = 1;
    }
    $763 = $0;
    $764 = $1;
    $765 = (($764) + 8|0);
    $766 = HEAP32[$765>>2]|0;
    $767 = (($766) + 4|0);
    $768 = HEAP32[$767>>2]|0;
    $769 = $2;
    _print_html_string($763,$768,$769);
    $770 = $0;
    _g_string_append_printf($770,33880,$vararg_buffer139);
   }
   $771 = $1;
   $772 = (($771) + 8|0);
   $773 = HEAP32[$772>>2]|0;
   $774 = (($773) + 8|0);
   $775 = HEAP32[$774>>2]|0;
   $776 = ($775|0)!=(0|0);
   if ($776) {
    $777 = $1;
    $778 = (($777) + 8|0);
    $779 = HEAP32[$778>>2]|0;
    $780 = (($779) + 8|0);
    $781 = HEAP32[$780>>2]|0;
    $782 = (_strlen(($781|0))|0);
    $783 = ($782>>>0)>(0);
    if ($783) {
     $784 = $0;
     _g_string_append_printf($784,1056,$vararg_buffer141);
     $785 = $0;
     $786 = $1;
     $787 = (($786) + 8|0);
     $788 = HEAP32[$787>>2]|0;
     $789 = (($788) + 8|0);
     $790 = HEAP32[$789>>2]|0;
     $791 = $2;
     _print_html_string($785,$790,$791);
     $792 = $0;
     _g_string_append_printf($792,33880,$vararg_buffer143);
    }
   }
   $793 = $0;
   $794 = $1;
   $795 = (($794) + 8|0);
   $796 = HEAP32[$795>>2]|0;
   $797 = (($796) + 12|0);
   $798 = HEAP32[$797>>2]|0;
   $799 = $2;
   _print_html_node_tree($793,$798,$799);
   $800 = $0;
   _g_string_append_printf($800,42616,$vararg_buffer145);
   $801 = $1;
   $802 = (($801) + 12|0);
   $803 = HEAP32[$802>>2]|0;
   $804 = ($803|0)!=(0|0);
   if ($804) {
    $805 = $0;
    $806 = $1;
    $807 = (($806) + 12|0);
    $808 = HEAP32[$807>>2]|0;
    $809 = $2;
    _print_html_node_tree($805,$808,$809);
   }
   $810 = $0;
   _g_string_append_printf($810,1072,$vararg_buffer147);
   $811 = $2;
   $812 = (($811) + 68|0);
   HEAP8[$812>>0] = 0;
   $813 = $1;
   $814 = (($813) + 8|0);
   $815 = HEAP32[$814>>2]|0;
   $816 = (($815) + 12|0);
   HEAP32[$816>>2] = 0;
   $817 = $1;
   $818 = (($817) + 8|0);
   $819 = HEAP32[$818>>2]|0;
   _free_link_data($819);
   $820 = $temp_link_data;
   $821 = $1;
   $822 = (($821) + 8|0);
   HEAP32[$822>>2] = $820;
   STACKTOP = sp;return;
   break;
  }
  case 3:  {
   $544 = $0;
   $545 = $2;
   _print_html_localized_typography($544,7,$545);
   STACKTOP = sp;return;
   break;
  }
  case 61:  {
   STACKTOP = sp;return;
   break;
  }
  case 22:  {
   $630 = $0;
   _g_string_append_printf($630,1024,$vararg_buffer117);
   $631 = $0;
   $632 = $1;
   $633 = (($632) + 12|0);
   $634 = HEAP32[$633>>2]|0;
   $635 = $2;
   _print_html_node_tree($631,$634,$635);
   $636 = $0;
   _g_string_append_printf($636,1032,$vararg_buffer119);
   STACKTOP = sp;return;
   break;
  }
  case 5:  {
   $103 = $0;
   $104 = $2;
   _pad($103,2,$104);
   $105 = $0;
   _g_string_append_printf($105,440,$vararg_buffer19);
   $106 = $0;
   $107 = $1;
   $108 = (($107) + 12|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = $2;
   _print_html_node_tree($106,$109,$110);
   $111 = $2;
   $112 = (($111) + 56|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = ($113|0)!=(0);
   if ($114) {
    $115 = $2;
    $116 = (($115) + 60|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = (($117) + -1)|0;
    HEAP32[$116>>2] = $118;
    $119 = $2;
    $120 = (($119) + 60|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = ($121|0)==(0);
    if ($122) {
     $123 = $2;
     $124 = HEAP32[$123>>2]|0;
     $125 = $124 & 32768;
     $126 = ($125|0)!=(0);
     if ($126) {
      $127 = $2;
      $128 = (($127) + 88|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = $2;
      $131 = (($130) + 56|0);
      $132 = HEAP32[$131>>2]|0;
      $133 = (($129) + ($132))|0;
      _srand($133);
      $134 = (_rand()|0);
      $135 = (($134|0) % 99999)&-1;
      $136 = (($135) + 1)|0;
      $random = $136;
     } else {
      $137 = $2;
      $138 = (($137) + 56|0);
      $139 = HEAP32[$138>>2]|0;
      $random = $139;
     }
     $140 = $0;
     $141 = $random;
     HEAP32[$vararg_buffer21>>2] = $141;
     _g_string_append_printf($140,448,$vararg_buffer21);
     $142 = $2;
     $143 = (($142) + 56|0);
     HEAP32[$143>>2] = 0;
    }
   }
   $144 = $0;
   _g_string_append_printf($144,544,$vararg_buffer24);
   $145 = $2;
   $146 = (($145) + 4|0);
   HEAP32[$146>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 31:  {
   $1334 = $0;
   _g_string_append_printf($1334,2064,$vararg_buffer272);
   $1335 = $0;
   $1336 = $1;
   $1337 = (($1336) + 4|0);
   $1338 = HEAP32[$1337>>2]|0;
   $1339 = $2;
   _print_html_string($1335,$1338,$1339);
   $1340 = $0;
   _g_string_append_printf($1340,2072,$vararg_buffer274);
   STACKTOP = sp;return;
   break;
  }
  case 39:  {
   $1341 = $0;
   $1342 = $1;
   $1343 = (($1342) + 12|0);
   $1344 = HEAP32[$1343>>2]|0;
   $1345 = $2;
   _print_html_node_tree($1341,$1344,$1345);
   STACKTOP = sp;return;
   break;
  }
  default: {
   $1631 = HEAP32[_stderr>>2]|0;
   $1632 = $1;
   $1633 = HEAP16[$1632>>1]|0;
   $1634 = $1633 << 16 >> 16;
   HEAP32[$vararg_buffer356>>2] = $1634;
   (_fprintf(($1631|0),(2504|0),($vararg_buffer356|0))|0);
   _exit(1);
   // unreachable;
  }
  }
 } while(0);
 $844 = $1;
 $845 = (($844) + 8|0);
 $846 = HEAP32[$845>>2]|0;
 $847 = ($846|0)==(0|0);
 if ($847) {
  $848 = HEAP32[_stderr>>2]|0;
  (_fprintf(($848|0),(1080|0),($vararg_buffer153|0))|0);
  _exit(1);
  // unreachable;
 }
 $849 = $1;
 $850 = (($849) + 8|0);
 $851 = HEAP32[$850>>2]|0;
 $852 = ($851|0)!=(0|0);
 if ($852) {
  $853 = $1;
  $854 = (($853) + 8|0);
  $855 = HEAP32[$854>>2]|0;
  $856 = HEAP32[$855>>2]|0;
  $857 = $1;
  $858 = (($857) + 8|0);
  $859 = HEAP32[$858>>2]|0;
  $860 = (($859) + 4|0);
  $861 = HEAP32[$860>>2]|0;
  $862 = $1;
  $863 = (($862) + 8|0);
  $864 = HEAP32[$863>>2]|0;
  $865 = (($864) + 8|0);
  $866 = HEAP32[$865>>2]|0;
  $867 = $1;
  $868 = (($867) + 8|0);
  $869 = HEAP32[$868>>2]|0;
  $870 = (($869) + 12|0);
  $871 = HEAP32[$870>>2]|0;
  $872 = (_mk_link_data($856,$861,$866,$871)|0);
  $temp_link_data = $872;
 }
 $873 = $1;
 $874 = HEAP16[$873>>1]|0;
 $875 = $874 << 16 >> 16;
 $876 = ($875|0)==(29);
 if ($876) {
  $877 = $0;
  _g_string_append_printf($877,1136,$vararg_buffer155);
 }
 $878 = $1;
 $879 = (($878) + 8|0);
 $880 = HEAP32[$879>>2]|0;
 $881 = HEAP32[$880>>2]|0;
 $882 = ($881|0)==(0|0);
 if ($882) {
  $883 = $1;
  $884 = (($883) + 8|0);
  $885 = HEAP32[$884>>2]|0;
  $886 = (($885) + 4|0);
  $887 = HEAP32[$886>>2]|0;
  $888 = ($887|0)==(0|0);
  if ($888) {
   $889 = (_g_string_new(41432)|0);
   $temp_str = $889;
   $890 = $temp_str;
   $891 = $1;
   $892 = (($891) + 12|0);
   $893 = HEAP32[$892>>2]|0;
   _print_raw_node_tree($890,$893);
   $894 = $temp_str;
   $895 = HEAP32[$894>>2]|0;
   $896 = $1;
   $897 = (($896) + 8|0);
   $898 = HEAP32[$897>>2]|0;
   HEAP32[$898>>2] = $895;
   $899 = $temp_str;
   (_g_string_free($899,0)|0);
  }
 }
 $900 = $1;
 $901 = (($900) + 8|0);
 $902 = HEAP32[$901>>2]|0;
 $903 = HEAP32[$902>>2]|0;
 $904 = ($903|0)!=(0|0);
 do {
  if ($904) {
   $905 = $1;
   $906 = (($905) + 8|0);
   $907 = HEAP32[$906>>2]|0;
   $908 = HEAP32[$907>>2]|0;
   $909 = (___strdup($908)|0);
   $temp = $909;
   $910 = $1;
   $911 = (($910) + 8|0);
   $912 = HEAP32[$911>>2]|0;
   $913 = (($912) + 12|0);
   HEAP32[$913>>2] = 0;
   $914 = $1;
   $915 = (($914) + 8|0);
   $916 = HEAP32[$915>>2]|0;
   _free_link_data($916);
   $917 = $temp;
   $918 = $2;
   $919 = (_extract_link_data($917,$918)|0);
   $920 = $1;
   $921 = (($920) + 8|0);
   HEAP32[$921>>2] = $919;
   $922 = $1;
   $923 = (($922) + 8|0);
   $924 = HEAP32[$923>>2]|0;
   $925 = ($924|0)==(0|0);
   if (!($925)) {
    $938 = $temp;
    _free($938);
    break;
   }
   $926 = $0;
   _g_string_append_printf($926,13312,$vararg_buffer157);
   $927 = $0;
   $928 = $1;
   $929 = (($928) + 12|0);
   $930 = HEAP32[$929>>2]|0;
   $931 = $2;
   _print_html_node_tree($927,$930,$931);
   $932 = $0;
   $933 = $temp;
   HEAP32[$vararg_buffer159>>2] = $933;
   _g_string_append_printf($932,13320,$vararg_buffer159);
   $934 = $temp_link_data;
   $935 = $1;
   $936 = (($935) + 8|0);
   HEAP32[$936>>2] = $934;
   $937 = $temp;
   _free($937);
   STACKTOP = sp;return;
  }
 } while(0);
 $939 = $0;
 _g_string_append_printf($939,1152,$vararg_buffer162);
 $940 = $1;
 $941 = (($940) + 8|0);
 $942 = HEAP32[$941>>2]|0;
 $943 = (($942) + 4|0);
 $944 = HEAP32[$943>>2]|0;
 $945 = ($944|0)!=(0|0);
 if ($945) {
  $946 = $0;
  $947 = $1;
  $948 = (($947) + 8|0);
  $949 = HEAP32[$948>>2]|0;
  $950 = (($949) + 4|0);
  $951 = HEAP32[$950>>2]|0;
  HEAP32[$vararg_buffer164>>2] = $951;
  _g_string_append_printf($946,1160,$vararg_buffer164);
 }
 $952 = $1;
 $953 = (($952) + 12|0);
 $954 = HEAP32[$953>>2]|0;
 $955 = ($954|0)!=(0|0);
 if ($955) {
  $956 = $0;
  _g_string_append_printf($956,1176,$vararg_buffer167);
  $957 = (_g_string_new(41432)|0);
  $temp_str = $957;
  $958 = $temp_str;
  $959 = $1;
  $960 = (($959) + 12|0);
  $961 = HEAP32[$960>>2]|0;
  _print_raw_node_tree($958,$961);
  $962 = $0;
  $963 = $temp_str;
  $964 = HEAP32[$963>>2]|0;
  $965 = $2;
  _print_html_string($962,$964,$965);
  $966 = $temp_str;
  (_g_string_free($966,1)|0);
  $967 = $0;
  _g_string_append_printf($967,33880,$vararg_buffer169);
 } else {
  $968 = $0;
  $969 = $1;
  $970 = (($969) + 8|0);
  $971 = HEAP32[$970>>2]|0;
  $972 = (($971) + 8|0);
  $973 = HEAP32[$972>>2]|0;
  HEAP32[$vararg_buffer171>>2] = $973;
  _g_string_append_printf($968,1184,$vararg_buffer171);
 }
 $974 = $2;
 $975 = HEAP32[$974>>2]|0;
 $976 = $975 & 1;
 $977 = ($976|0)!=(0);
 if (!($977)) {
  $978 = $1;
  $979 = (($978) + 8|0);
  $980 = HEAP32[$979>>2]|0;
  $981 = HEAP32[$980>>2]|0;
  $982 = ($981|0)!=(0|0);
  if ($982) {
   $983 = $1;
   $984 = (($983) + 8|0);
   $985 = HEAP32[$984>>2]|0;
   $986 = HEAP32[$985>>2]|0;
   $987 = (_label_from_string($986)|0);
   $temp = $987;
   $988 = $0;
   $989 = $temp;
   HEAP32[$vararg_buffer174>>2] = $989;
   _g_string_append_printf($988,1200,$vararg_buffer174);
   $990 = $temp;
   _free($990);
  }
 }
 $991 = $1;
 $992 = (($991) + 8|0);
 $993 = HEAP32[$992>>2]|0;
 $994 = (($993) + 8|0);
 $995 = HEAP32[$994>>2]|0;
 $996 = ($995|0)!=(0|0);
 if ($996) {
  $997 = $1;
  $998 = (($997) + 8|0);
  $999 = HEAP32[$998>>2]|0;
  $1000 = (($999) + 8|0);
  $1001 = HEAP32[$1000>>2]|0;
  $1002 = (_strlen(($1001|0))|0);
  $1003 = ($1002>>>0)>(0);
  if ($1003) {
   $1004 = $0;
   _g_string_append_printf($1004,1056,$vararg_buffer177);
   $1005 = $0;
   $1006 = $1;
   $1007 = (($1006) + 8|0);
   $1008 = HEAP32[$1007>>2]|0;
   $1009 = (($1008) + 8|0);
   $1010 = HEAP32[$1009>>2]|0;
   $1011 = $2;
   _print_html_string($1005,$1010,$1011);
   $1012 = $0;
   _g_string_append_printf($1012,33880,$vararg_buffer179);
  }
 }
 $1013 = $1;
 $1014 = (($1013) + 8|0);
 $1015 = HEAP32[$1014>>2]|0;
 $1016 = (($1015) + 12|0);
 $1017 = HEAP32[$1016>>2]|0;
 $1018 = ($1017|0)!=(0|0);
 if ($1018) {
  $1019 = $1;
  $1020 = (($1019) + 8|0);
  $1021 = HEAP32[$1020>>2]|0;
  $1022 = (($1021) + 12|0);
  $1023 = HEAP32[$1022>>2]|0;
  $1024 = (_node_for_attribute(13280,$1023)|0);
  $temp_node = $1024;
  $1025 = $temp_node;
  $1026 = ($1025|0)!=(0|0);
  if ($1026) {
   $1027 = $temp_node;
   $1028 = (($1027) + 12|0);
   $1029 = HEAP32[$1028>>2]|0;
   $1030 = (($1029) + 4|0);
   $1031 = HEAP32[$1030>>2]|0;
   $1032 = (___strdup($1031)|0);
   $height = $1032;
  }
  $1033 = $1;
  $1034 = (($1033) + 8|0);
  $1035 = HEAP32[$1034>>2]|0;
  $1036 = (($1035) + 12|0);
  $1037 = HEAP32[$1036>>2]|0;
  $1038 = (_node_for_attribute(13288,$1037)|0);
  $temp_node = $1038;
  $1039 = $temp_node;
  $1040 = ($1039|0)!=(0|0);
  if ($1040) {
   $1041 = $temp_node;
   $1042 = (($1041) + 12|0);
   $1043 = HEAP32[$1042>>2]|0;
   $1044 = (($1043) + 4|0);
   $1045 = HEAP32[$1044>>2]|0;
   $1046 = (___strdup($1045)|0);
   $width = $1046;
  }
  $1047 = $height;
  $1048 = ($1047|0)!=(0|0);
  if ($1048) {
   label = 208;
  } else {
   $1049 = $width;
   $1050 = ($1049|0)!=(0|0);
   if ($1050) {
    label = 208;
   }
  }
  if ((label|0) == 208) {
   $1051 = $0;
   _g_string_append_printf($1051,1216,$vararg_buffer181);
   $1052 = $height;
   $1053 = ($1052|0)!=(0|0);
   if ($1053) {
    $1054 = $0;
    $1055 = $height;
    HEAP32[$vararg_buffer183>>2] = $1055;
    _g_string_append_printf($1054,1232,$vararg_buffer183);
   }
   $1056 = $width;
   $1057 = ($1056|0)!=(0|0);
   if ($1057) {
    $1058 = $0;
    $1059 = $width;
    HEAP32[$vararg_buffer186>>2] = $1059;
    _g_string_append_printf($1058,1248,$vararg_buffer186);
   }
   $1060 = $0;
   _g_string_append_printf($1060,33880,$vararg_buffer189);
  }
  $1061 = $0;
  $1062 = $1;
  $1063 = (($1062) + 8|0);
  $1064 = HEAP32[$1063>>2]|0;
  $1065 = (($1064) + 12|0);
  $1066 = HEAP32[$1065>>2]|0;
  $1067 = $2;
  _print_html_node_tree($1061,$1066,$1067);
  $1068 = $height;
  _free($1068);
  $1069 = $width;
  _free($1069);
 }
 $1070 = $0;
 _g_string_append_printf($1070,1264,$vararg_buffer191);
 $1071 = $1;
 $1072 = HEAP16[$1071>>1]|0;
 $1073 = $1072 << 16 >> 16;
 $1074 = ($1073|0)==(29);
 if ($1074) {
  $1075 = $1;
  $1076 = (($1075) + 12|0);
  $1077 = HEAP32[$1076>>2]|0;
  $1078 = ($1077|0)!=(0|0);
  if ($1078) {
   $1079 = (_g_string_new(41432)|0);
   $temp_str = $1079;
   $1080 = $temp_str;
   $1081 = $1;
   $1082 = (($1081) + 12|0);
   $1083 = HEAP32[$1082>>2]|0;
   $1084 = $2;
   _print_html_node($1080,$1083,$1084);
   $1085 = $temp_str;
   $1086 = (($1085) + 8|0);
   $1087 = HEAP32[$1086>>2]|0;
   $1088 = ($1087>>>0)>(0);
   if ($1088) {
    $1089 = $0;
    _g_string_append_printf($1089,1272,$vararg_buffer193);
    $1090 = $0;
    $1091 = $temp_str;
    $1092 = HEAP32[$1091>>2]|0;
    _g_string_append($1090,$1092);
    $1093 = $0;
    _g_string_append_printf($1093,1288,$vararg_buffer195);
   }
   $1094 = $temp_str;
   (_g_string_free($1094,1)|0);
  }
  $1095 = $0;
  _g_string_append_printf($1095,1304,$vararg_buffer197);
  $1096 = $2;
  $1097 = (($1096) + 4|0);
  HEAP32[$1097>>2] = 0;
 }
 $1098 = $1;
 $1099 = (($1098) + 8|0);
 $1100 = HEAP32[$1099>>2]|0;
 $1101 = (($1100) + 12|0);
 HEAP32[$1101>>2] = 0;
 $1102 = $1;
 $1103 = (($1102) + 8|0);
 $1104 = HEAP32[$1103>>2]|0;
 _free_link_data($1104);
 $1105 = $temp_link_data;
 $1106 = $1;
 $1107 = (($1106) + 8|0);
 HEAP32[$1107>>2] = $1105;
 STACKTOP = sp;return;
}
function _print_html_string($out,$str,$scratch) {
 $out = $out|0;
 $str = $str|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $str;
 $2 = $scratch;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 while(1) {
  $5 = $1;
  $6 = HEAP8[$5>>0]|0;
  $7 = $6 << 24 >> 24;
  $8 = ($7|0)!=(0);
  if (!($8)) {
   break;
  }
  $9 = $1;
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  if ((($11|0) == 60)) {
   $13 = $0;
   _g_string_append_printf($13,33968,$vararg_buffer1);
  } else if ((($11|0) == 38)) {
   $12 = $0;
   _g_string_append_printf($12,33960,$vararg_buffer);
  } else if ((($11|0) == 62)) {
   $14 = $0;
   _g_string_append_printf($14,33976,$vararg_buffer3);
  } else if ((($11|0) == 34)) {
   $15 = $0;
   _g_string_append_printf($15,33984,$vararg_buffer5);
  } else {
   $16 = $2;
   $17 = (($16) + 68|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&1;
   $20 = $19&1;
   $21 = ($20|0)==(1);
   if ($21) {
    $22 = $2;
    $23 = HEAP32[$22>>2]|0;
    $24 = (_extension(2048,$23)|0);
    if ($24) {
     $25 = $1;
     $26 = HEAP8[$25>>0]|0;
     $27 = $26 << 24 >> 24;
     $28 = $1;
     $29 = HEAP8[$28>>0]|0;
     $30 = $29 << 24 >> 24;
     $31 = $30 & 127;
     $32 = ($27|0)==($31|0);
     if ($32) {
      $33 = (_ran_num_next()|0);
      $34 = (($33|0) % 2)&-1;
      $35 = ($34|0)==(0);
      if ($35) {
       $36 = $0;
       $37 = $1;
       $38 = HEAP8[$37>>0]|0;
       $39 = $38 << 24 >> 24;
       HEAP32[$vararg_buffer7>>2] = $39;
       _g_string_append_printf($36,2752,$vararg_buffer7);
      } else {
       $40 = $0;
       $41 = $1;
       $42 = HEAP8[$41>>0]|0;
       $43 = $42 << 24 >> 24;
       HEAP32[$vararg_buffer9>>2] = $43;
       _g_string_append_printf($40,2760,$vararg_buffer9);
      }
     } else {
      label = 17;
     }
    } else {
     label = 17;
    }
   } else {
    label = 17;
   }
   if ((label|0) == 17) {
    label = 0;
    $44 = $0;
    $45 = $1;
    $46 = HEAP8[$45>>0]|0;
    _g_string_append_c($44,$46);
   }
  }
  $47 = $1;
  $48 = (($47) + 1|0);
  $1 = $48;
 }
 STACKTOP = sp;return;
}
function _is_html_complete_doc($meta) {
 $meta = $meta|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $step = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = $meta;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $step = $4;
 while(1) {
  $5 = $step;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   break;
  }
  $7 = $step;
  $8 = (($7) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $temp = $9;
  $10 = $step;
  $11 = (($10) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_label_from_string($12)|0);
  $14 = $step;
  $15 = (($14) + 4|0);
  HEAP32[$15>>2] = $13;
  $16 = $temp;
  _free($16);
  $17 = $step;
  $18 = (($17) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  $step = $19;
 }
 $20 = $1;
 $21 = (($20) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $step = $22;
 while(1) {
  $23 = $step;
  $24 = ($23|0)!=(0|0);
  if (!($24)) {
   label = 14;
   break;
  }
  $25 = $step;
  $26 = (($25) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (_strcmp($27,38600)|0);
  $29 = ($28|0)!=(0);
  if ($29) {
   $30 = $step;
   $31 = (($30) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (_strcmp($32,4896)|0);
   $34 = ($33|0)!=(0);
   if ($34) {
    $35 = $step;
    $36 = (($35) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (_strcmp($37,12632)|0);
    $39 = ($38|0)!=(0);
    if ($39) {
     $40 = $step;
     $41 = (($40) + 4|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = (_strcmp($42,3352)|0);
     $44 = ($43|0)!=(0);
     if ($44) {
      $45 = $step;
      $46 = (($45) + 4|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = (_strcmp($47,12616)|0);
      $49 = ($48|0)!=(0);
      if ($49) {
       $50 = $step;
       $51 = (($50) + 4|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = (_strcmp($52,38632)|0);
       $54 = ($53|0)!=(0);
       if ($54) {
        label = 12;
        break;
       }
      }
     }
    }
   }
  }
  $55 = $step;
  $56 = (($55) + 16|0);
  $57 = HEAP32[$56>>2]|0;
  $step = $57;
 }
 if ((label|0) == 12) {
  $$expand_i1_val = 1;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $58 = $$pre_trunc&1;
  STACKTOP = sp;return ($58|0);
 }
 else if ((label|0) == 14) {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $58 = $$pre_trunc&1;
  STACKTOP = sp;return ($58|0);
 }
 return (0)|0;
}
function _print_html_localized_typography($out,$character,$scratch) {
 $out = $out|0;
 $character = $character|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0;
 var $vararg_buffer37 = 0, $vararg_buffer39 = 0, $vararg_buffer41 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer41 = sp + 168|0;
 $vararg_buffer39 = sp + 160|0;
 $vararg_buffer37 = sp + 152|0;
 $vararg_buffer35 = sp + 144|0;
 $vararg_buffer33 = sp + 136|0;
 $vararg_buffer31 = sp + 128|0;
 $vararg_buffer29 = sp + 120|0;
 $vararg_buffer27 = sp + 112|0;
 $vararg_buffer25 = sp + 104|0;
 $vararg_buffer23 = sp + 96|0;
 $vararg_buffer21 = sp + 88|0;
 $vararg_buffer19 = sp + 80|0;
 $vararg_buffer17 = sp + 72|0;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $character;
 $2 = $scratch;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (_extension(16,$4)|0);
 if (!($5)) {
  $6 = $0;
  $7 = $1;
  $8 = $7&255;
  _g_string_append_c($6,$8);
  STACKTOP = sp;return;
 }
 $9 = $1;
 switch ($9|0) {
 case 6:  {
  $43 = $0;
  _g_string_append_printf($43,2744,$vararg_buffer41);
  STACKTOP = sp;return;
  break;
 }
 case 0:  {
  $10 = $2;
  $11 = (($10) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  if ((($12|0) == 3)) {
   $15 = $0;
   _g_string_append_printf($15,40560,$vararg_buffer3);
  } else if ((($12|0) == 2)) {
   $14 = $0;
   _g_string_append_printf($14,40552,$vararg_buffer1);
  } else if ((($12|0) == 5)) {
   $13 = $0;
   _g_string_append_printf($13,40544,$vararg_buffer);
  } else if ((($12|0) == 4)) {
   $16 = $0;
   _g_string_append_printf($16,40568,$vararg_buffer5);
  } else {
   $17 = $0;
   _g_string_append_printf($17,40584,$vararg_buffer7);
  }
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $18 = $2;
  $19 = (($18) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  if ((($20|0) == 3)) {
   $21 = $0;
   _g_string_append_printf($21,40584,$vararg_buffer9);
  } else if ((($20|0) == 4)) {
   $22 = $0;
   _g_string_append_printf($22,40592,$vararg_buffer11);
  } else {
   $23 = $0;
   _g_string_append_printf($23,40544,$vararg_buffer13);
  }
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $33 = $2;
  $34 = (($33) + 12|0);
  $35 = HEAP32[$34>>2]|0;
  switch ($35|0) {
  case 4:  {
   $38 = $0;
   _g_string_append_printf($38,40632,$vararg_buffer31);
   break;
  }
  case 1: case 5:  {
   $36 = $0;
   _g_string_append_printf($36,40640,$vararg_buffer27);
   break;
  }
  case 3:  {
   $37 = $0;
   _g_string_append_printf($37,40656,$vararg_buffer29);
   break;
  }
  case 2:  {
   $39 = $0;
   _g_string_append_printf($39,40624,$vararg_buffer33);
   break;
  }
  default: {
   $40 = $0;
   _g_string_append_printf($40,40640,$vararg_buffer35);
  }
  }
  STACKTOP = sp;return;
  break;
 }
 case 5:  {
  $42 = $0;
  _g_string_append_printf($42,2736,$vararg_buffer39);
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $41 = $0;
  _g_string_append_printf($41,2728,$vararg_buffer37);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $25 = $2;
  $26 = (($25) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  switch ($27|0) {
  case 2:  {
   $30 = $0;
   _g_string_append_printf($30,40632,$vararg_buffer21);
   break;
  }
  case 4:  {
   $29 = $0;
   _g_string_append_printf($29,40624,$vararg_buffer19);
   break;
  }
  case 5:  {
   $31 = $0;
   _g_string_append_printf($31,40640,$vararg_buffer23);
   break;
  }
  case 3: case 1:  {
   $28 = $0;
   _g_string_append_printf($28,40616,$vararg_buffer17);
   break;
  }
  default: {
   $32 = $0;
   _g_string_append_printf($32,40656,$vararg_buffer25);
  }
  }
  STACKTOP = sp;return;
  break;
 }
 case 7:  {
  $24 = $0;
  _g_string_append_printf($24,40544,$vararg_buffer15);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _print_col_group($out,$scratch) {
 $out = $out|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lev = 0, $temp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $scratch;
 $2 = $0;
 _g_string_append_printf($2,2768,$vararg_buffer);
 $3 = $1;
 $4 = (($3) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $temp = $5;
 $lev = 0;
 while(1) {
  $6 = $lev;
  $7 = $temp;
  $8 = (_strlen(($7|0))|0);
  $9 = ($6>>>0)<($8>>>0);
  if (!($9)) {
   break;
  }
  $10 = $lev;
  $11 = $temp;
  $12 = (($11) + ($10)|0);
  $13 = (_strncmp($12,47264,1)|0);
  $14 = ($13|0)==(0);
  if ($14) {
   $15 = $0;
   _g_string_append_printf($15,2784,$vararg_buffer1);
  } else {
   $16 = $lev;
   $17 = $temp;
   $18 = (($17) + ($16)|0);
   $19 = (_strncmp($18,47352,1)|0);
   $20 = ($19|0)==(0);
   if ($20) {
    $21 = $0;
    _g_string_append_printf($21,2824,$vararg_buffer3);
   } else {
    $22 = $lev;
    $23 = $temp;
    $24 = (($23) + ($22)|0);
    $25 = (_strncmp($24,47296,1)|0);
    $26 = ($25|0)==(0);
    if ($26) {
     $27 = $0;
     _g_string_append_printf($27,2880,$vararg_buffer5);
    } else {
     $28 = $lev;
     $29 = $temp;
     $30 = (($29) + ($28)|0);
     $31 = (_strncmp($30,47384,1)|0);
     $32 = ($31|0)==(0);
     if ($32) {
      $33 = $0;
      _g_string_append_printf($33,2920,$vararg_buffer7);
     } else {
      $34 = $lev;
      $35 = $temp;
      $36 = (($35) + ($34)|0);
      $37 = (_strncmp($36,47416,1)|0);
      $38 = ($37|0)==(0);
      if ($38) {
       $39 = $0;
       _g_string_append_printf($39,2976,$vararg_buffer9);
      } else {
       $40 = $0;
       _g_string_append_printf($40,3032,$vararg_buffer11);
      }
     }
    }
   }
  }
  $41 = $lev;
  $42 = (($41) + 1)|0;
  $lev = $42;
 }
 $43 = $0;
 _g_string_append_printf($43,3072,$vararg_buffer13);
 STACKTOP = sp;return;
}
function _print_html_endnotes($out,$scratch) {
 $out = $out|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $counter = 0, $note = 0, $random = 0, $reversed = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $scratch;
 $counter = 0;
 $2 = $1;
 $3 = (($2) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_copy_node_tree($4)|0);
 $reversed = $5;
 $6 = $reversed;
 $7 = (_reverse_list($6)|0);
 $reversed = $7;
 $8 = $1;
 $9 = (($8) + 25|0);
 HEAP8[$9>>0] = 1;
 $10 = $reversed;
 $note = $10;
 $11 = $note;
 $12 = ($11|0)==(0|0);
 do {
  if (!($12)) {
   $13 = $note;
   $14 = HEAP16[$13>>1]|0;
   $15 = $14 << 16 >> 16;
   $16 = ($15|0)==(87);
   if ($16) {
    $17 = $note;
    $18 = (($17) + 16|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)==(0|0);
    if ($20) {
     break;
    }
   }
   $22 = $0;
   $23 = $1;
   _pad($22,2,$23);
   $24 = $0;
   _g_string_append_printf($24,2560,$vararg_buffer);
   while(1) {
    $25 = $note;
    $26 = ($25|0)!=(0|0);
    if (!($26)) {
     break;
    }
    $27 = $note;
    $28 = HEAP16[$27>>1]|0;
    $29 = $28 << 16 >> 16;
    $30 = ($29|0)==(87);
    if ($30) {
     $31 = $note;
     $32 = (($31) + 16|0);
     $33 = HEAP32[$32>>2]|0;
     $note = $33;
     continue;
    }
    $34 = $counter;
    $35 = (($34) + 1)|0;
    $counter = $35;
    $36 = $0;
    $37 = $1;
    _pad($36,1,$37);
    $38 = $1;
    $39 = HEAP32[$38>>2]|0;
    $40 = $39 & 32768;
    $41 = ($40|0)!=(0);
    if ($41) {
     $42 = $1;
     $43 = (($42) + 88|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = $counter;
     $46 = (($44) + ($45))|0;
     _srand($46);
     $47 = (_rand()|0);
     $48 = (($47|0) % 99999)&-1;
     $49 = (($48) + 1)|0;
     $random = $49;
    } else {
     $50 = $counter;
     $random = $50;
    }
    $51 = $note;
    $52 = HEAP16[$51>>1]|0;
    $53 = $52 << 16 >> 16;
    $54 = ($53|0)==(63);
    if ($54) {
     $55 = $0;
     $56 = $random;
     $57 = $note;
     $58 = (($57) + 4|0);
     $59 = HEAP32[$58>>2]|0;
     HEAP32[$vararg_buffer1>>2] = $56;
     $vararg_ptr3 = (($vararg_buffer1) + 4|0);
     HEAP32[$vararg_ptr3>>2] = $59;
     _g_string_append_printf($55,2600,$vararg_buffer1);
    } else {
     $60 = $0;
     $61 = $random;
     HEAP32[$vararg_buffer4>>2] = $61;
     _g_string_append_printf($60,2688,$vararg_buffer4);
    }
    $62 = $1;
    $63 = (($62) + 4|0);
    HEAP32[$63>>2] = 2;
    $64 = $note;
    $65 = HEAP16[$64>>1]|0;
    $66 = $65 << 16 >> 16;
    $67 = ($66|0)==(62);
    if ($67) {
     label = 17;
    } else {
     $68 = $note;
     $69 = HEAP16[$68>>1]|0;
     $70 = $69 << 16 >> 16;
     $71 = ($70|0)==(69);
     if ($71) {
      label = 17;
     }
    }
    if ((label|0) == 17) {
     label = 0;
     $72 = $counter;
     $73 = $1;
     $74 = (($73) + 56|0);
     HEAP32[$74>>2] = $72;
    }
    $75 = $note;
    $76 = (($75) + 12|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (_tree_contains_key_count($77,5)|0);
    $79 = $1;
    $80 = (($79) + 60|0);
    HEAP32[$80>>2] = $78;
    $81 = $0;
    $82 = $note;
    $83 = $1;
    _print_html_node($81,$82,$83);
    $84 = $0;
    $85 = $1;
    _pad($84,1,$85);
    $86 = $0;
    _g_string_append_printf($86,656,$vararg_buffer7);
    $87 = $note;
    $88 = (($87) + 16|0);
    $89 = HEAP32[$88>>2]|0;
    $note = $89;
   }
   $90 = $0;
   $91 = $1;
   _pad($90,1,$91);
   $92 = $0;
   _g_string_append_printf($92,2712,$vararg_buffer9);
   $93 = $1;
   $94 = (($93) + 4|0);
   HEAP32[$94>>2] = 0;
   $95 = $reversed;
   _free_node_tree($95);
   STACKTOP = sp;return;
  }
 } while(0);
 $21 = $reversed;
 _free_node_tree($21);
 STACKTOP = sp;return;
}
function _find_latex_mode($format,$n) {
 $format = $format|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $key = 0, $label = 0, $latex_mode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $format;
 $2 = $n;
 $3 = $1;
 $4 = ($3|0)!=(2);
 if ($4) {
  $5 = $1;
  $0 = $5;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 $6 = $2;
 $7 = (_tree_contains_key($6,18)|0);
 if ($7) {
  $8 = $2;
  $9 = (_metadata_for_key(41256,$8)|0);
  $latex_mode = $9;
  $10 = $latex_mode;
  $11 = ($10|0)!=(0|0);
  if ($11) {
   $12 = $2;
   $13 = (_metavalue_for_key(41256,$12)|0);
   $key = $13;
   $14 = $key;
   $15 = (_label_from_string($14)|0);
   $label = $15;
   $16 = $label;
   $17 = (_strcmp($16,41272)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    $1 = 4;
   } else {
    $19 = $label;
    $20 = (_strcmp($19,5752)|0);
    $21 = ($20|0)==(0);
    if ($21) {
     $1 = 3;
    }
   }
   $22 = $label;
   _free($22);
   $23 = $key;
   _free($23);
  }
 }
 $24 = $1;
 $0 = $24;
 $25 = $0;
 STACKTOP = sp;return ($25|0);
}
function _print_latex_node_tree($out,$list,$scratch) {
 $out = $out|0;
 $list = $list|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $list;
 $2 = $scratch;
 while(1) {
  $3 = $1;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = $1;
  $7 = $2;
  _print_latex_node($5,$6,$7);
  $8 = $1;
  $9 = (($8) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $1 = $10;
 }
 STACKTOP = sp;return;
}
function _print_latex_node($out,$n,$scratch) {
 $out = $out|0;
 $n = $n|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0.0, $1128 = 0.0, $1129 = 0.0, $113 = 0, $1130 = 0, $1131 = 0.0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0.0, $1152 = 0.0, $1153 = 0.0, $1154 = 0, $1155 = 0.0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
 var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0;
 var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0;
 var $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
 var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0;
 var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
 var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0;
 var $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0;
 var $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0;
 var $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
 var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0;
 var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
 var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
 var $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0;
 var $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0;
 var $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0;
 var $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0;
 var $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0;
 var $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0;
 var $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0;
 var $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0;
 var $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0;
 var $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0;
 var $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0;
 var $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $height = 0, $i = 0, $lev = 0, $raw_str = 0, $temp = 0, $temp_float = 0.0, $temp_node = 0, $temp_str = 0, $vararg_buffer = 0;
 var $vararg_buffer10 = 0, $vararg_buffer101 = 0, $vararg_buffer104 = 0, $vararg_buffer107 = 0, $vararg_buffer110 = 0, $vararg_buffer113 = 0, $vararg_buffer116 = 0, $vararg_buffer119 = 0, $vararg_buffer121 = 0, $vararg_buffer123 = 0, $vararg_buffer125 = 0, $vararg_buffer127 = 0, $vararg_buffer129 = 0, $vararg_buffer13 = 0, $vararg_buffer131 = 0, $vararg_buffer133 = 0, $vararg_buffer135 = 0, $vararg_buffer138 = 0, $vararg_buffer141 = 0, $vararg_buffer144 = 0;
 var $vararg_buffer147 = 0, $vararg_buffer15 = 0, $vararg_buffer150 = 0, $vararg_buffer153 = 0, $vararg_buffer156 = 0, $vararg_buffer160 = 0, $vararg_buffer164 = 0, $vararg_buffer167 = 0, $vararg_buffer169 = 0, $vararg_buffer171 = 0, $vararg_buffer174 = 0, $vararg_buffer176 = 0, $vararg_buffer18 = 0, $vararg_buffer180 = 0, $vararg_buffer182 = 0, $vararg_buffer184 = 0, $vararg_buffer186 = 0, $vararg_buffer188 = 0, $vararg_buffer191 = 0, $vararg_buffer194 = 0;
 var $vararg_buffer196 = 0, $vararg_buffer198 = 0, $vararg_buffer2 = 0, $vararg_buffer200 = 0, $vararg_buffer202 = 0, $vararg_buffer205 = 0, $vararg_buffer208 = 0, $vararg_buffer210 = 0, $vararg_buffer213 = 0, $vararg_buffer216 = 0, $vararg_buffer218 = 0, $vararg_buffer22 = 0, $vararg_buffer221 = 0, $vararg_buffer223 = 0, $vararg_buffer225 = 0, $vararg_buffer228 = 0, $vararg_buffer230 = 0, $vararg_buffer233 = 0, $vararg_buffer236 = 0, $vararg_buffer238 = 0;
 var $vararg_buffer240 = 0, $vararg_buffer243 = 0, $vararg_buffer245 = 0, $vararg_buffer247 = 0, $vararg_buffer25 = 0, $vararg_buffer250 = 0, $vararg_buffer252 = 0, $vararg_buffer255 = 0, $vararg_buffer258 = 0, $vararg_buffer261 = 0, $vararg_buffer263 = 0, $vararg_buffer265 = 0, $vararg_buffer268 = 0, $vararg_buffer27 = 0, $vararg_buffer271 = 0, $vararg_buffer274 = 0, $vararg_buffer277 = 0, $vararg_buffer279 = 0, $vararg_buffer281 = 0, $vararg_buffer283 = 0;
 var $vararg_buffer285 = 0, $vararg_buffer287 = 0, $vararg_buffer289 = 0, $vararg_buffer29 = 0, $vararg_buffer291 = 0, $vararg_buffer293 = 0, $vararg_buffer295 = 0, $vararg_buffer297 = 0, $vararg_buffer300 = 0, $vararg_buffer303 = 0, $vararg_buffer305 = 0, $vararg_buffer307 = 0, $vararg_buffer309 = 0, $vararg_buffer31 = 0, $vararg_buffer311 = 0, $vararg_buffer313 = 0, $vararg_buffer315 = 0, $vararg_buffer318 = 0, $vararg_buffer321 = 0, $vararg_buffer323 = 0;
 var $vararg_buffer326 = 0, $vararg_buffer328 = 0, $vararg_buffer33 = 0, $vararg_buffer330 = 0, $vararg_buffer332 = 0, $vararg_buffer334 = 0, $vararg_buffer338 = 0, $vararg_buffer340 = 0, $vararg_buffer342 = 0, $vararg_buffer344 = 0, $vararg_buffer347 = 0, $vararg_buffer35 = 0, $vararg_buffer350 = 0, $vararg_buffer37 = 0, $vararg_buffer39 = 0, $vararg_buffer4 = 0, $vararg_buffer41 = 0, $vararg_buffer44 = 0, $vararg_buffer46 = 0, $vararg_buffer48 = 0;
 var $vararg_buffer51 = 0, $vararg_buffer53 = 0, $vararg_buffer55 = 0, $vararg_buffer57 = 0, $vararg_buffer59 = 0, $vararg_buffer6 = 0, $vararg_buffer62 = 0, $vararg_buffer65 = 0, $vararg_buffer67 = 0, $vararg_buffer69 = 0, $vararg_buffer71 = 0, $vararg_buffer74 = 0, $vararg_buffer76 = 0, $vararg_buffer78 = 0, $vararg_buffer80 = 0, $vararg_buffer82 = 0, $vararg_buffer84 = 0, $vararg_buffer86 = 0, $vararg_buffer88 = 0, $vararg_buffer90 = 0;
 var $vararg_buffer93 = 0, $vararg_buffer96 = 0, $vararg_buffer98 = 0, $vararg_ptr1 = 0, $vararg_ptr159 = 0, $vararg_ptr163 = 0, $vararg_ptr179 = 0, $vararg_ptr21 = 0, $vararg_ptr337 = 0, $vararg_ptr9 = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1200|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer350 = sp + 1152|0;
 $vararg_buffer347 = sp + 1144|0;
 $vararg_buffer344 = sp + 1136|0;
 $vararg_buffer342 = sp + 1128|0;
 $vararg_buffer340 = sp + 1120|0;
 $vararg_buffer338 = sp + 1112|0;
 $vararg_buffer334 = sp + 1104|0;
 $vararg_buffer332 = sp + 1096|0;
 $vararg_buffer330 = sp + 1088|0;
 $vararg_buffer328 = sp + 1080|0;
 $vararg_buffer326 = sp + 1072|0;
 $vararg_buffer323 = sp + 1064|0;
 $vararg_buffer321 = sp + 1056|0;
 $vararg_buffer318 = sp + 1048|0;
 $vararg_buffer315 = sp + 1040|0;
 $vararg_buffer313 = sp + 1032|0;
 $vararg_buffer311 = sp + 1024|0;
 $vararg_buffer309 = sp + 1016|0;
 $vararg_buffer307 = sp + 1008|0;
 $vararg_buffer305 = sp + 1000|0;
 $vararg_buffer303 = sp + 992|0;
 $vararg_buffer300 = sp + 984|0;
 $vararg_buffer297 = sp + 976|0;
 $vararg_buffer295 = sp + 968|0;
 $vararg_buffer293 = sp + 960|0;
 $vararg_buffer291 = sp + 952|0;
 $vararg_buffer289 = sp + 944|0;
 $vararg_buffer287 = sp + 936|0;
 $vararg_buffer285 = sp + 928|0;
 $vararg_buffer283 = sp + 920|0;
 $vararg_buffer281 = sp + 912|0;
 $vararg_buffer279 = sp + 904|0;
 $vararg_buffer277 = sp + 896|0;
 $vararg_buffer274 = sp + 888|0;
 $vararg_buffer271 = sp + 880|0;
 $vararg_buffer268 = sp + 872|0;
 $vararg_buffer265 = sp + 864|0;
 $vararg_buffer263 = sp + 856|0;
 $vararg_buffer261 = sp + 848|0;
 $vararg_buffer258 = sp + 840|0;
 $vararg_buffer255 = sp + 832|0;
 $vararg_buffer252 = sp + 824|0;
 $vararg_buffer250 = sp + 816|0;
 $vararg_buffer247 = sp + 808|0;
 $vararg_buffer245 = sp + 800|0;
 $vararg_buffer243 = sp + 792|0;
 $vararg_buffer240 = sp + 784|0;
 $vararg_buffer238 = sp + 776|0;
 $vararg_buffer236 = sp + 768|0;
 $vararg_buffer233 = sp + 760|0;
 $vararg_buffer230 = sp + 752|0;
 $vararg_buffer228 = sp + 744|0;
 $vararg_buffer225 = sp + 736|0;
 $vararg_buffer223 = sp + 728|0;
 $vararg_buffer221 = sp + 720|0;
 $vararg_buffer218 = sp + 712|0;
 $vararg_buffer216 = sp + 704|0;
 $vararg_buffer213 = sp + 696|0;
 $vararg_buffer210 = sp + 688|0;
 $vararg_buffer208 = sp + 680|0;
 $vararg_buffer205 = sp + 672|0;
 $vararg_buffer202 = sp + 664|0;
 $vararg_buffer200 = sp + 656|0;
 $vararg_buffer198 = sp + 648|0;
 $vararg_buffer196 = sp + 640|0;
 $vararg_buffer194 = sp + 632|0;
 $vararg_buffer191 = sp + 624|0;
 $vararg_buffer188 = sp + 616|0;
 $vararg_buffer186 = sp + 608|0;
 $vararg_buffer184 = sp + 600|0;
 $vararg_buffer182 = sp + 592|0;
 $vararg_buffer180 = sp + 584|0;
 $vararg_buffer176 = sp + 576|0;
 $vararg_buffer174 = sp + 568|0;
 $vararg_buffer171 = sp + 560|0;
 $vararg_buffer169 = sp + 552|0;
 $vararg_buffer167 = sp + 544|0;
 $vararg_buffer164 = sp + 536|0;
 $vararg_buffer160 = sp + 528|0;
 $vararg_buffer156 = sp + 520|0;
 $vararg_buffer153 = sp + 512|0;
 $vararg_buffer150 = sp + 504|0;
 $vararg_buffer147 = sp + 496|0;
 $vararg_buffer144 = sp + 488|0;
 $vararg_buffer141 = sp + 480|0;
 $vararg_buffer138 = sp + 472|0;
 $vararg_buffer135 = sp + 464|0;
 $vararg_buffer133 = sp + 456|0;
 $vararg_buffer131 = sp + 448|0;
 $vararg_buffer129 = sp + 440|0;
 $vararg_buffer127 = sp + 432|0;
 $vararg_buffer125 = sp + 424|0;
 $vararg_buffer123 = sp + 416|0;
 $vararg_buffer121 = sp + 408|0;
 $vararg_buffer119 = sp + 400|0;
 $vararg_buffer116 = sp + 392|0;
 $vararg_buffer113 = sp + 384|0;
 $vararg_buffer110 = sp + 376|0;
 $vararg_buffer107 = sp + 368|0;
 $vararg_buffer104 = sp + 360|0;
 $vararg_buffer101 = sp + 352|0;
 $vararg_buffer98 = sp + 344|0;
 $vararg_buffer96 = sp + 336|0;
 $vararg_buffer93 = sp + 328|0;
 $vararg_buffer90 = sp + 320|0;
 $vararg_buffer88 = sp + 312|0;
 $vararg_buffer86 = sp + 304|0;
 $vararg_buffer84 = sp + 296|0;
 $vararg_buffer82 = sp + 288|0;
 $vararg_buffer80 = sp + 280|0;
 $vararg_buffer78 = sp + 272|0;
 $vararg_buffer76 = sp + 264|0;
 $vararg_buffer74 = sp + 256|0;
 $vararg_buffer71 = sp + 248|0;
 $vararg_buffer69 = sp + 240|0;
 $vararg_buffer67 = sp + 232|0;
 $vararg_buffer65 = sp + 224|0;
 $vararg_buffer62 = sp + 216|0;
 $vararg_buffer59 = sp + 208|0;
 $vararg_buffer57 = sp + 200|0;
 $vararg_buffer55 = sp + 192|0;
 $vararg_buffer53 = sp + 184|0;
 $vararg_buffer51 = sp + 176|0;
 $vararg_buffer48 = sp + 168|0;
 $vararg_buffer46 = sp + 160|0;
 $vararg_buffer44 = sp + 152|0;
 $vararg_buffer41 = sp + 144|0;
 $vararg_buffer39 = sp + 136|0;
 $vararg_buffer37 = sp + 128|0;
 $vararg_buffer35 = sp + 120|0;
 $vararg_buffer33 = sp + 112|0;
 $vararg_buffer31 = sp + 104|0;
 $vararg_buffer29 = sp + 96|0;
 $vararg_buffer27 = sp + 88|0;
 $vararg_buffer25 = sp + 80|0;
 $vararg_buffer22 = sp + 72|0;
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer15 = sp + 56|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer6 = sp + 32|0;
 $vararg_buffer4 = sp + 24|0;
 $vararg_buffer2 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $0 = $out;
 $1 = $n;
 $2 = $scratch;
 $width = 0;
 $height = 0;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 2;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = $10 & 8;
  $12 = ($11|0)!=(0);
  if (!($12)) {
   $13 = $1;
   $14 = HEAP16[$13>>1]|0;
   $15 = $14 << 16 >> 16;
   $16 = ($15|0)==(4);
   if (!($16)) {
    $17 = $1;
    $18 = HEAP16[$17>>1]|0;
    $19 = $18 << 16 >> 16;
    $20 = ($19|0)==(17);
    if (!($20)) {
     $21 = $0;
     $22 = $2;
     _pad($21,2,$22);
     $23 = $2;
     $24 = HEAP32[$23>>2]|0;
     $25 = $24 | 8;
     $26 = $2;
     HEAP32[$26>>2] = $25;
    }
   }
  }
 }
 $27 = $1;
 $28 = HEAP16[$27>>1]|0;
 $29 = $28 << 16 >> 16;
 do {
  switch ($29|0) {
  case 31:  {
   $1436 = $0;
   _g_string_append_printf($1436,4352,$vararg_buffer287);
   $1437 = $0;
   $1438 = $1;
   $1439 = (($1438) + 4|0);
   $1440 = HEAP32[$1439>>2]|0;
   $1441 = $2;
   _print_latex_string($1437,$1440,$1441);
   $1442 = $0;
   _g_string_append_printf($1442,39560,$vararg_buffer289);
   STACKTOP = sp;return;
   break;
  }
  case 9:  {
   $537 = $0;
   $538 = $1;
   $539 = (($538) + 12|0);
   $540 = HEAP32[$539>>2]|0;
   $541 = $2;
   _print_latex_node_tree($537,$540,$541);
   STACKTOP = sp;return;
   break;
  }
  case 71:  {
   $1408 = $1;
   $1409 = (($1408) + 16|0);
   $1410 = HEAP32[$1409>>2]|0;
   $1411 = ($1410|0)!=(0|0);
   if ($1411) {
    $1412 = $1;
    $1413 = (($1412) + 16|0);
    $1414 = HEAP32[$1413>>2]|0;
    $1415 = HEAP16[$1414>>1]|0;
    $1416 = $1415 << 16 >> 16;
    $1417 = ($1416|0)==(70);
    if ($1417) {
     $1418 = $0;
     _g_string_append_printf($1418,4312,$vararg_buffer279);
     $1419 = $0;
     $1420 = $1;
     $1421 = (($1420) + 16|0);
     $1422 = HEAP32[$1421>>2]|0;
     $1423 = (($1422) + 4|0);
     $1424 = HEAP32[$1423>>2]|0;
     $1425 = $2;
     _print_latex_string($1419,$1424,$1425);
     $1426 = $0;
     _g_string_append_printf($1426,4320,$vararg_buffer281);
    }
   }
   $1427 = $0;
   _g_string_append_printf($1427,4328,$vararg_buffer283);
   $1428 = $0;
   $1429 = $1;
   $1430 = (($1429) + 12|0);
   $1431 = HEAP32[$1430>>2]|0;
   $1432 = (($1431) + 4|0);
   $1433 = HEAP32[$1432>>2]|0;
   $1434 = $2;
   _print_latex_string($1428,$1433,$1434);
   $1435 = $0;
   _g_string_append_printf($1435,4336,$vararg_buffer285);
   STACKTOP = sp;return;
   break;
  }
  case 17:  {
   $245 = $0;
   $246 = $1;
   $247 = (($246) + 12|0);
   $248 = HEAP32[$247>>2]|0;
   $249 = $2;
   _print_latex_node_tree($245,$248,$249);
   $250 = $2;
   $251 = HEAP32[$250>>2]|0;
   $252 = $251 & 4;
   $253 = ($252|0)!=(0);
   if (!($253)) {
    $254 = $1;
    $255 = (_is_latex_complete_doc($254)|0);
    if ($255) {
     $256 = $2;
     $257 = HEAP32[$256>>2]|0;
     $258 = $257 | 2;
     $259 = $2;
     HEAP32[$259>>2] = $258;
    }
   }
   $260 = $0;
   $261 = $2;
   $262 = (($261) + 44|0);
   $263 = HEAP32[$262>>2]|0;
   $264 = $2;
   _print_latex_node_tree($260,$263,$264);
   STACKTOP = sp;return;
   break;
  }
  case 30:  {
   $1211 = $1;
   $1212 = $2;
   $1213 = (_note_number_for_node($1211,$1212)|0);
   $lev = $1213;
   $1214 = $2;
   $1215 = (($1214) + 48|0);
   $1216 = HEAP32[$1215>>2]|0;
   $1217 = $lev;
   $1218 = (_node_for_count($1216,$1217)|0);
   $temp_node = $1218;
   $1219 = $2;
   $1220 = (($1219) + 4|0);
   HEAP32[$1220>>2] = 2;
   $1221 = $temp_node;
   $1222 = HEAP16[$1221>>1]|0;
   $1223 = $1222 << 16 >> 16;
   $1224 = ($1223|0)==(69);
   if ($1224) {
    $1225 = $0;
    $1226 = $temp_node;
    $1227 = (($1226) + 12|0);
    $1228 = HEAP32[$1227>>2]|0;
    $1229 = (($1228) + 12|0);
    $1230 = HEAP32[$1229>>2]|0;
    $1231 = (($1230) + 4|0);
    $1232 = HEAP32[$1231>>2]|0;
    HEAP32[$vararg_buffer230>>2] = $1232;
    _g_string_append_printf($1225,4208,$vararg_buffer230);
    $1233 = $0;
    $1234 = $temp_node;
    $1235 = (($1234) + 12|0);
    $1236 = HEAP32[$1235>>2]|0;
    $1237 = $2;
    _print_latex_node_tree($1233,$1236,$1237);
    $1238 = $0;
    $1239 = $temp_node;
    $1240 = (($1239) + 12|0);
    $1241 = HEAP32[$1240>>2]|0;
    $1242 = (($1241) + 12|0);
    $1243 = HEAP32[$1242>>2]|0;
    $1244 = (($1243) + 4|0);
    $1245 = HEAP32[$1244>>2]|0;
    HEAP32[$vararg_buffer233>>2] = $1245;
    _g_string_append_printf($1238,4232,$vararg_buffer233);
   } else {
    $1246 = $0;
    _g_string_append_printf($1246,4248,$vararg_buffer236);
    $1247 = $0;
    $1248 = $temp_node;
    $1249 = (($1248) + 12|0);
    $1250 = HEAP32[$1249>>2]|0;
    $1251 = $2;
    _print_latex_node_tree($1247,$1250,$1251);
    $1252 = $0;
    _g_string_append_printf($1252,39560,$vararg_buffer238);
   }
   $1253 = $2;
   $1254 = (($1253) + 4|0);
   HEAP32[$1254>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 54:  {
   STACKTOP = sp;return;
   break;
  }
  case 46:  {
   $1515 = $0;
   $1516 = $2;
   _pad($1515,2,$1516);
   $1517 = $2;
   $1518 = (($1517) + 4|0);
   HEAP32[$1518>>2] = 2;
   $1519 = $0;
   $1520 = $1;
   $1521 = (($1520) + 12|0);
   $1522 = HEAP32[$1521>>2]|0;
   $1523 = $2;
   _print_latex_node_tree($1519,$1522,$1523);
   $1524 = $2;
   $1525 = (($1524) + 4|0);
   HEAP32[$1525>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 50:  {
   $232 = $0;
   $233 = $2;
   _pad($232,1,$233);
   $234 = $0;
   _g_string_append_printf($234,3344,$vararg_buffer33);
   $235 = $2;
   $236 = (($235) + 4|0);
   HEAP32[$236>>2] = 2;
   $237 = $0;
   $238 = $1;
   $239 = (($238) + 12|0);
   $240 = HEAP32[$239>>2]|0;
   $241 = $2;
   _print_latex_node_tree($237,$240,$241);
   $242 = $0;
   _g_string_append_printf($242,42896,$vararg_buffer35);
   $243 = $2;
   $244 = (($243) + 4|0);
   HEAP32[$244>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 56:  {
   $1639 = $2;
   $1640 = (($1639) + 4|0);
   HEAP32[$1640>>2] = 2;
   $1641 = $2;
   $1642 = (($1641) + 16|0);
   $1643 = HEAP32[$1642>>2]|0;
   $temp = $1643;
   $1644 = $1;
   $1645 = (($1644) + 12|0);
   $1646 = HEAP32[$1645>>2]|0;
   $1647 = ($1646|0)!=(0|0);
   if ($1647) {
    $1648 = $1;
    $1649 = (($1648) + 12|0);
    $1650 = HEAP32[$1649>>2]|0;
    $1651 = HEAP16[$1650>>1]|0;
    $1652 = $1651 << 16 >> 16;
    $1653 = ($1652|0)==(57);
    if ($1653) {
     $1654 = $0;
     $1655 = $1;
     $1656 = (($1655) + 12|0);
     $1657 = HEAP32[$1656>>2]|0;
     $1658 = (($1657) + 4|0);
     $1659 = HEAP32[$1658>>2]|0;
     $1660 = (_strlen(($1659|0))|0);
     $1661 = (($1660) + 1)|0;
     $1662 = $2;
     $1663 = (($1662) + 20|0);
     $1664 = HEAP32[$1663>>2]|0;
     $1665 = $temp;
     $1666 = (($1665) + ($1664)|0);
     $1667 = HEAP8[$1666>>0]|0;
     $1668 = $1667 << 24 >> 24;
     $1669 = (_tolower($1668)|0);
     HEAP32[$vararg_buffer334>>2] = $1661;
     $vararg_ptr337 = (($vararg_buffer334) + 4|0);
     HEAP32[$vararg_ptr337>>2] = $1669;
     _g_string_append_printf($1654,4696,$vararg_buffer334);
    }
   }
   $1670 = $0;
   $1671 = $1;
   $1672 = (($1671) + 12|0);
   $1673 = HEAP32[$1672>>2]|0;
   $1674 = $2;
   _print_latex_node_tree($1670,$1673,$1674);
   $1675 = $1;
   $1676 = (($1675) + 12|0);
   $1677 = HEAP32[$1676>>2]|0;
   $1678 = ($1677|0)!=(0|0);
   if ($1678) {
    $1679 = $1;
    $1680 = (($1679) + 12|0);
    $1681 = HEAP32[$1680>>2]|0;
    $1682 = HEAP16[$1681>>1]|0;
    $1683 = $1682 << 16 >> 16;
    $1684 = ($1683|0)==(57);
    if ($1684) {
     $1685 = $0;
     _g_string_append_printf($1685,39560,$vararg_buffer338);
    }
   }
   $1686 = $1;
   $1687 = (($1686) + 16|0);
   $1688 = HEAP32[$1687>>2]|0;
   $1689 = ($1688|0)!=(0|0);
   if ($1689) {
    $1690 = $0;
    _g_string_append_printf($1690,9560,$vararg_buffer340);
   }
   $1691 = $1;
   $1692 = (($1691) + 12|0);
   $1693 = HEAP32[$1692>>2]|0;
   $1694 = ($1693|0)!=(0|0);
   if ($1694) {
    $1695 = $1;
    $1696 = (($1695) + 12|0);
    $1697 = HEAP32[$1696>>2]|0;
    $1698 = HEAP16[$1697>>1]|0;
    $1699 = $1698 << 16 >> 16;
    $1700 = ($1699|0)==(57);
    if ($1700) {
     $1701 = $1;
     $1702 = (($1701) + 12|0);
     $1703 = HEAP32[$1702>>2]|0;
     $1704 = (($1703) + 4|0);
     $1705 = HEAP32[$1704>>2]|0;
     $1706 = (_strlen(($1705|0))|0);
     $1707 = $2;
     $1708 = (($1707) + 20|0);
     $1709 = HEAP32[$1708>>2]|0;
     $1710 = (($1709) + ($1706))|0;
     HEAP32[$1708>>2] = $1710;
    }
   }
   $1711 = $2;
   $1712 = (($1711) + 20|0);
   $1713 = HEAP32[$1712>>2]|0;
   $1714 = (($1713) + 1)|0;
   HEAP32[$1712>>2] = $1714;
   STACKTOP = sp;return;
   break;
  }
  case 83:  {
   label = 17;
   break;
  }
  case 1:  {
   $30 = $0;
   $31 = $1;
   $32 = (($31) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $2;
   _print_latex_node_tree($30,$33,$34);
   STACKTOP = sp;return;
   break;
  }
  case 48:  {
   $217 = $0;
   $218 = $2;
   _pad($217,2,$218);
   $219 = $0;
   _g_string_append_printf($219,3304,$vararg_buffer29);
   $220 = $2;
   $221 = (($220) + 4|0);
   HEAP32[$221>>2] = 0;
   $222 = $0;
   $223 = $1;
   $224 = (($223) + 12|0);
   $225 = HEAP32[$224>>2]|0;
   $226 = $2;
   _print_latex_node_tree($222,$225,$226);
   $227 = $0;
   $228 = $2;
   _pad($227,1,$228);
   $229 = $0;
   _g_string_append_printf($229,3328,$vararg_buffer31);
   $230 = $2;
   $231 = (($230) + 4|0);
   HEAP32[$231>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 20:  {
   $629 = $1;
   $630 = (($629) + 4|0);
   $631 = HEAP32[$630>>2]|0;
   $632 = (___strdup($631)|0);
   $temp = $632;
   $633 = $temp;
   $634 = HEAP8[$633>>0]|0;
   $635 = $634 << 24 >> 24;
   $636 = ($635|0)==(36);
   if ($636) {
    $637 = $temp;
    $638 = (($637) + 1|0);
    $639 = HEAP8[$638>>0]|0;
    $640 = $639 << 24 >> 24;
    $641 = ($640|0)==(36);
    if ($641) {
     $642 = $temp;
     $643 = (($642) + 2|0);
     $644 = (_strncmp($643,8184,5)|0);
     $645 = ($644|0)==(0);
     if ($645) {
      $646 = $temp;
      $647 = (_strlen(($646|0))|0);
      $648 = (($647) - 2)|0;
      $649 = $temp;
      $650 = (($649) + ($648)|0);
      HEAP8[$650>>0] = 0;
      $651 = $0;
      $652 = $temp;
      $653 = (($652) + 1|0);
      HEAP32[$vararg_buffer98>>2] = $653;
      _g_string_append_printf($651,40832,$vararg_buffer98);
     } else {
      $654 = $0;
      $655 = $temp;
      HEAP32[$vararg_buffer101>>2] = $655;
      _g_string_append_printf($654,40832,$vararg_buffer101);
     }
    } else {
     $656 = $temp;
     $657 = (($656) + 1|0);
     $658 = (_strncmp($657,8184,5)|0);
     $659 = ($658|0)==(0);
     if ($659) {
      $660 = $temp;
      $661 = (_strlen(($660|0))|0);
      $662 = (($661) - 1)|0;
      $663 = $temp;
      $664 = (($663) + ($662)|0);
      HEAP8[$664>>0] = 0;
      $665 = $0;
      $666 = $temp;
      $667 = (($666) + 1|0);
      HEAP32[$vararg_buffer104>>2] = $667;
      _g_string_append_printf($665,40832,$vararg_buffer104);
     } else {
      $668 = $0;
      $669 = $temp;
      HEAP32[$vararg_buffer107>>2] = $669;
      _g_string_append_printf($668,40832,$vararg_buffer107);
     }
    }
   } else {
    $670 = $temp;
    $671 = (($670) + 2|0);
    $672 = (_strncmp($671,8184,5)|0);
    $673 = ($672|0)==(0);
    if ($673) {
     $674 = $temp;
     $675 = (_strlen(($674|0))|0);
     $676 = (($675) - 3)|0;
     $677 = $temp;
     $678 = (($677) + ($676)|0);
     HEAP8[$678>>0] = 0;
     $679 = $0;
     $680 = $temp;
     $681 = (($680) + 2|0);
     HEAP32[$vararg_buffer110>>2] = $681;
     _g_string_append_printf($679,40832,$vararg_buffer110);
    } else {
     $682 = $temp;
     $683 = (_strlen(($682|0))|0);
     $684 = (($683) - 1)|0;
     $685 = $temp;
     $686 = (($685) + ($684)|0);
     $687 = HEAP8[$686>>0]|0;
     $688 = $687 << 24 >> 24;
     $689 = ($688|0)==(93);
     if ($689) {
      $690 = $temp;
      $691 = (_strlen(($690|0))|0);
      $692 = (($691) - 3)|0;
      $693 = $temp;
      $694 = (($693) + ($692)|0);
      HEAP8[$694>>0] = 0;
      $695 = $0;
      $696 = $temp;
      HEAP32[$vararg_buffer113>>2] = $696;
      _g_string_append_printf($695,3744,$vararg_buffer113);
     } else {
      $697 = $temp;
      $698 = (_strlen(($697|0))|0);
      $699 = (($698) - 3)|0;
      $700 = $temp;
      $701 = (($700) + ($699)|0);
      HEAP8[$701>>0] = 0;
      $702 = $0;
      $703 = $temp;
      $704 = (($703) + 2|0);
      HEAP32[$vararg_buffer116>>2] = $704;
      _g_string_append_printf($702,3752,$vararg_buffer116);
     }
    }
   }
   $705 = $temp;
   _free($705);
   STACKTOP = sp;return;
   break;
  }
  case 45:  {
   $1504 = $0;
   $1505 = $2;
   _pad($1504,2,$1505);
   $1506 = $0;
   _g_string_append_printf($1506,4400,$vararg_buffer307);
   $1507 = $0;
   $1508 = $1;
   $1509 = (($1508) + 12|0);
   $1510 = HEAP32[$1509>>2]|0;
   $1511 = $2;
   _print_latex_node_tree($1507,$1510,$1511);
   $1512 = $0;
   _g_string_append_printf($1512,39600,$vararg_buffer309);
   $1513 = $2;
   $1514 = (($1513) + 4|0);
   HEAP32[$1514>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 51:  {
   $138 = $1;
   $139 = (($138) + 4|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = (_strncmp($140,42136,4)|0);
   $142 = ($141|0)==(0);
   if ($142) {
    $143 = $0;
    $144 = $2;
    _pad($143,2,$144);
    $145 = $1;
    $146 = (($145) + 4|0);
    $147 = HEAP32[$146>>2]|0;
    $148 = (_strlen(($147|0))|0);
    $149 = (($148) - 3)|0;
    $150 = $1;
    $151 = (($150) + 4|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = (($152) + ($149)|0);
    HEAP8[$153>>0] = 0;
    $154 = $0;
    $155 = $1;
    $156 = (($155) + 4|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = (($157) + 4|0);
    HEAP32[$vararg_buffer15>>2] = $158;
    _g_string_append_printf($154,40832,$vararg_buffer15);
    $159 = $2;
    $160 = (($159) + 4|0);
    HEAP32[$160>>2] = 0;
   }
   STACKTOP = sp;return;
   break;
  }
  case 4:  {
   $520 = $0;
   $521 = $2;
   _print_latex_endnotes($520,$521);
   $522 = $2;
   $523 = (($522) + 72|0);
   $524 = HEAP32[$523>>2]|0;
   $525 = ($524|0)!=(0|0);
   if ($525) {
    $526 = $0;
    $527 = $2;
    _pad($526,2,$527);
    $528 = $0;
    $529 = $2;
    $530 = (($529) + 72|0);
    $531 = HEAP32[$530>>2]|0;
    HEAP32[$vararg_buffer71>>2] = $531;
    _g_string_append_printf($528,3528,$vararg_buffer71);
   }
   $532 = $2;
   $533 = HEAP32[$532>>2]|0;
   $534 = $533 & 2;
   $535 = ($534|0)!=(0);
   if ($535) {
    $536 = $0;
    _g_string_append_printf($536,3600,$vararg_buffer74);
   }
   STACKTOP = sp;return;
   break;
  }
  case 7:  {
   $628 = $0;
   _g_string_append_printf($628,3736,$vararg_buffer96);
   STACKTOP = sp;return;
   break;
  }
  case 19:  {
   $512 = $1;
   $513 = (($512) + 4|0);
   $514 = HEAP32[$513>>2]|0;
   _trim_trailing_whitespace($514);
   $515 = $0;
   $516 = $1;
   $517 = (($516) + 4|0);
   $518 = HEAP32[$517>>2]|0;
   $519 = $2;
   _print_latex_string($515,$518,$519);
   STACKTOP = sp;return;
   break;
  }
  case 37:  {
   $619 = $0;
   $620 = $2;
   _print_latex_localized_typography($619,2,$620);
   $621 = $0;
   $622 = $1;
   $623 = (($622) + 12|0);
   $624 = HEAP32[$623>>2]|0;
   $625 = $2;
   _print_latex_node_tree($621,$624,$625);
   $626 = $0;
   $627 = $2;
   _print_latex_localized_typography($626,3,$627);
   STACKTOP = sp;return;
   break;
  }
  case 81:  {
   $1392 = $1;
   $1393 = (($1392) + 4|0);
   $1394 = HEAP32[$1393>>2]|0;
   $1395 = $2;
   $1396 = (($1395) + 52|0);
   $1397 = HEAP32[$1396>>2]|0;
   $1398 = (_metavalue_for_key($1394,$1397)|0);
   $temp = $1398;
   $1399 = $temp;
   $1400 = ($1399|0)==(0|0);
   if ($1400) {
    $1401 = $0;
    $1402 = $1;
    $1403 = (($1402) + 4|0);
    $1404 = HEAP32[$1403>>2]|0;
    HEAP32[$vararg_buffer274>>2] = $1404;
    _g_string_append_printf($1401,39936,$vararg_buffer274);
   } else {
    $1405 = $0;
    $1406 = $temp;
    _g_string_append_printf($1405,$1406,$vararg_buffer277);
    $1407 = $temp;
    _free($1407);
   }
   STACKTOP = sp;return;
   break;
  }
  case 44:  {
   $1489 = $0;
   $1490 = $2;
   _pad($1489,2,$1490);
   $1491 = $0;
   _g_string_append_printf($1491,11808,$vararg_buffer303);
   $1492 = $2;
   $1493 = (($1492) + 4|0);
   HEAP32[$1493>>2] = 0;
   $1494 = $0;
   $1495 = $1;
   $1496 = (($1495) + 12|0);
   $1497 = HEAP32[$1496>>2]|0;
   $1498 = $2;
   _print_latex_node_tree($1494,$1497,$1498);
   $1499 = $0;
   $1500 = $2;
   _pad($1499,1,$1500);
   $1501 = $0;
   _g_string_append_printf($1501,11832,$vararg_buffer305);
   $1502 = $2;
   $1503 = (($1502) + 4|0);
   HEAP32[$1503>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 64:  {
   $1733 = HEAP32[_stderr>>2]|0;
   (_fprintf(($1733|0),(15240|0),($vararg_buffer342|0))|0);
   STACKTOP = sp;return;
   break;
  }
  case 66: case 65:  {
   STACKTOP = sp;return;
   break;
  }
  case 28:  {
   break;
  }
  case 29:  {
   $981 = $0;
   $982 = $2;
   _pad($981,2,$982);
   break;
  }
  case 68:  {
   $972 = $0;
   $973 = $1;
   $974 = (($973) + 4|0);
   $975 = HEAP32[$974>>2]|0;
   $976 = $1;
   $977 = (($976) + 12|0);
   $978 = HEAP32[$977>>2]|0;
   $979 = (($978) + 4|0);
   $980 = HEAP32[$979>>2]|0;
   HEAP32[$vararg_buffer176>>2] = $975;
   $vararg_ptr179 = (($vararg_buffer176) + 4|0);
   HEAP32[$vararg_ptr179>>2] = $980;
   _g_string_append_printf($972,8808,$vararg_buffer176);
   STACKTOP = sp;return;
   break;
  }
  case 25: case 24: case 26:  {
   STACKTOP = sp;return;
   break;
  }
  case 21:  {
   $706 = $0;
   _g_string_append_printf($706,3760,$vararg_buffer119);
   $707 = $0;
   $708 = $1;
   $709 = (($708) + 12|0);
   $710 = HEAP32[$709>>2]|0;
   $711 = $2;
   _print_latex_node_tree($707,$710,$711);
   $712 = $0;
   _g_string_append_printf($712,39560,$vararg_buffer121);
   STACKTOP = sp;return;
   break;
  }
  case 84:  {
   $68 = $1;
   $69 = (($68) + 16|0);
   $70 = HEAP32[$69>>2]|0;
   $temp_node = $70;
   while(1) {
    $71 = $temp_node;
    $72 = HEAP16[$71>>1]|0;
    $73 = $72 << 16 >> 16;
    $74 = ($73|0)!=(85);
    if (!($74)) {
     break;
    }
    $75 = $temp_node;
    $76 = (($75) + 16|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = $1;
    $79 = (($78) + 16|0);
    HEAP32[$79>>2] = $77;
    $80 = $temp_node;
    $81 = (($80) + 16|0);
    HEAP32[$81>>2] = 0;
    $82 = $temp_node;
    _free_node($82);
    $83 = $1;
    $84 = (($83) + 16|0);
    $85 = HEAP32[$84>>2]|0;
    $temp_node = $85;
   }
   $86 = $temp_node;
   $87 = (($86) + 16|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $1;
   $90 = (($89) + 16|0);
   HEAP32[$90>>2] = $88;
   $91 = $temp_node;
   $92 = (($91) + 16|0);
   HEAP32[$92>>2] = 0;
   $93 = $temp_node;
   _free_node($93);
   label = 17;
   break;
  }
  case 36:  {
   $610 = $0;
   $611 = $2;
   _print_latex_localized_typography($610,0,$611);
   $612 = $0;
   $613 = $1;
   $614 = (($613) + 12|0);
   $615 = HEAP32[$614>>2]|0;
   $616 = $2;
   _print_latex_node_tree($612,$615,$616);
   $617 = $0;
   $618 = $2;
   _print_latex_localized_typography($617,1,$618);
   STACKTOP = sp;return;
   break;
  }
  case 49:  {
   $202 = $0;
   $203 = $2;
   _pad($202,2,$203);
   $204 = $0;
   _g_string_append_printf($204,3272,$vararg_buffer25);
   $205 = $2;
   $206 = (($205) + 4|0);
   HEAP32[$206>>2] = 0;
   $207 = $0;
   $208 = $1;
   $209 = (($208) + 12|0);
   $210 = HEAP32[$209>>2]|0;
   $211 = $2;
   _print_latex_node_tree($207,$210,$211);
   $212 = $0;
   $213 = $2;
   _pad($212,1,$213);
   $214 = $0;
   _g_string_append_printf($214,3288,$vararg_buffer27);
   $215 = $2;
   $216 = (($215) + 4|0);
   HEAP32[$216>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 33:  {
   $604 = $0;
   $605 = $2;
   _print_latex_localized_typography($604,6,$605);
   STACKTOP = sp;return;
   break;
  }
  case 70:  {
   STACKTOP = sp;return;
   break;
  }
  case 43: case 41:  {
   $161 = $0;
   $162 = $2;
   _pad($161,2,$162);
   $163 = $1;
   $164 = (($163) + 12|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = ($165|0)!=(0|0);
   do {
    if ($166) {
     $167 = $1;
     $168 = (($167) + 12|0);
     $169 = HEAP32[$168>>2]|0;
     $170 = HEAP16[$169>>1]|0;
     $171 = $170 << 16 >> 16;
     $172 = ($171|0)==(42);
     if ($172) {
      $173 = $1;
      $174 = (($173) + 12|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = (($175) + 4|0);
      $177 = HEAP32[$176>>2]|0;
      _trim_trailing_whitespace($177);
      $178 = $1;
      $179 = (($178) + 12|0);
      $180 = HEAP32[$179>>2]|0;
      $181 = (($180) + 4|0);
      $182 = HEAP32[$181>>2]|0;
      $183 = (_strlen(($182|0))|0);
      $184 = ($183>>>0)>(0);
      if (!($184)) {
       break;
      }
      $185 = $0;
      $186 = $1;
      $187 = (($186) + 12|0);
      $188 = HEAP32[$187>>2]|0;
      $189 = (($188) + 4|0);
      $190 = HEAP32[$189>>2]|0;
      $191 = $1;
      $192 = (($191) + 4|0);
      $193 = HEAP32[$192>>2]|0;
      HEAP32[$vararg_buffer18>>2] = $190;
      $vararg_ptr21 = (($vararg_buffer18) + 4|0);
      HEAP32[$vararg_ptr21>>2] = $193;
      _g_string_append_printf($185,3176,$vararg_buffer18);
      $194 = $2;
      $195 = (($194) + 4|0);
      HEAP32[$195>>2] = 0;
      STACKTOP = sp;return;
     }
    }
   } while(0);
   $196 = $0;
   $197 = $1;
   $198 = (($197) + 4|0);
   $199 = HEAP32[$198>>2]|0;
   HEAP32[$vararg_buffer22>>2] = $199;
   _g_string_append_printf($196,3232,$vararg_buffer22);
   $200 = $2;
   $201 = (($200) + 4|0);
   HEAP32[$201>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 18:  {
   $265 = $1;
   $266 = (($265) + 4|0);
   $267 = HEAP32[$266>>2]|0;
   $temp = $267;
   $268 = $temp;
   $269 = (_label_from_string($268)|0);
   $270 = $1;
   $271 = (($270) + 4|0);
   HEAP32[$271>>2] = $269;
   $272 = $temp;
   _free($272);
   $273 = $1;
   $274 = (($273) + 4|0);
   $275 = HEAP32[$274>>2]|0;
   $276 = (_strcmp($275,38600)|0);
   $277 = ($276|0)==(0);
   if ($277) {
    $278 = $1;
    $279 = (($278) + 12|0);
    $280 = HEAP32[$279>>2]|0;
    $281 = (($280) + 4|0);
    $282 = HEAP32[$281>>2]|0;
    $283 = (_atoi($282)|0);
    $284 = $2;
    $285 = (($284) + 8|0);
    HEAP32[$285>>2] = $283;
    STACKTOP = sp;return;
   }
   $286 = $1;
   $287 = (($286) + 4|0);
   $288 = HEAP32[$287>>2]|0;
   $289 = (_strcmp($288,3352)|0);
   $290 = ($289|0)==(0);
   if ($290) {
    $291 = $1;
    $292 = (($291) + 12|0);
    $293 = HEAP32[$292>>2]|0;
    $294 = (($293) + 4|0);
    $295 = HEAP32[$294>>2]|0;
    $296 = (_atoi($295)|0);
    $297 = $2;
    $298 = (($297) + 8|0);
    HEAP32[$298>>2] = $296;
    STACKTOP = sp;return;
   }
   $299 = $1;
   $300 = (($299) + 4|0);
   $301 = HEAP32[$300>>2]|0;
   $302 = (_strcmp($301,38632)|0);
   $303 = ($302|0)==(0);
   if ($303) {
    $304 = $1;
    $305 = (($304) + 12|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = (_label_from_node_tree($306)|0);
    $temp = $307;
    $308 = $temp;
    $309 = (_strcmp($308,38648)|0);
    $310 = ($309|0)==(0);
    if ($310) {
     label = 46;
    } else {
     $311 = $temp;
     $312 = (_strcmp($311,38656)|0);
     $313 = ($312|0)==(0);
     if ($313) {
      label = 46;
     } else {
      $316 = $temp;
      $317 = (_strcmp($316,38664)|0);
      $318 = ($317|0)==(0);
      if ($318) {
       label = 49;
      } else {
       $319 = $temp;
       $320 = (_strcmp($319,38672)|0);
       $321 = ($320|0)==(0);
       if ($321) {
        label = 49;
       } else {
        $324 = $temp;
        $325 = (_strcmp($324,38680)|0);
        $326 = ($325|0)==(0);
        if ($326) {
         $327 = $2;
         $328 = (($327) + 12|0);
         HEAP32[$328>>2] = 4;
        } else {
         $329 = $temp;
         $330 = (_strcmp($329,38704)|0);
         $331 = ($330|0)==(0);
         if ($331) {
          label = 54;
         } else {
          $332 = $temp;
          $333 = (_strcmp($332,38712)|0);
          $334 = ($333|0)==(0);
          if ($334) {
           label = 54;
          } else {
           $337 = $temp;
           $338 = (_strcmp($337,38720)|0);
           $339 = ($338|0)==(0);
           if ($339) {
            label = 57;
           } else {
            $340 = $temp;
            $341 = (_strcmp($340,38728)|0);
            $342 = ($341|0)==(0);
            if ($342) {
             label = 57;
            }
           }
           if ((label|0) == 57) {
            $343 = $2;
            $344 = (($343) + 12|0);
            HEAP32[$344>>2] = 5;
           }
          }
         }
         if ((label|0) == 54) {
          $335 = $2;
          $336 = (($335) + 12|0);
          HEAP32[$336>>2] = 2;
         }
        }
       }
      }
      if ((label|0) == 49) {
       $322 = $2;
       $323 = (($322) + 12|0);
       HEAP32[$323>>2] = 3;
      }
     }
    }
    if ((label|0) == 46) {
     $314 = $2;
     $315 = (($314) + 12|0);
     HEAP32[$315>>2] = 1;
    }
    STACKTOP = sp;return;
   }
   $345 = $2;
   $346 = HEAP32[$345>>2]|0;
   $347 = $346 & 4;
   $348 = ($347|0)!=(0);
   if ($348) {
    STACKTOP = sp;return;
   }
   $349 = $1;
   $350 = (($349) + 4|0);
   $351 = HEAP32[$350>>2]|0;
   $352 = (_strcmp($351,38736)|0);
   $353 = ($352|0)==(0);
   if ($353) {
    $354 = $0;
    _g_string_append_printf($354,3376,$vararg_buffer37);
    $355 = $0;
    $356 = $1;
    $357 = (($356) + 12|0);
    $358 = HEAP32[$357>>2]|0;
    $359 = $2;
    _print_latex_node($355,$358,$359);
    $360 = $0;
    _g_string_append_printf($360,38592,$vararg_buffer39);
   } else {
    $361 = $1;
    $362 = (($361) + 4|0);
    $363 = HEAP32[$362>>2]|0;
    $364 = (_strcmp($363,3392)|0);
    $365 = ($364|0)==(0);
    if ($365) {
     $366 = $0;
     $367 = $1;
     $368 = (($367) + 12|0);
     $369 = HEAP32[$368>>2]|0;
     $370 = (($369) + 4|0);
     $371 = HEAP32[$370>>2]|0;
     HEAP32[$vararg_buffer41>>2] = $371;
     _g_string_append_printf($366,3408,$vararg_buffer41);
    } else {
     $372 = $1;
     $373 = (($372) + 4|0);
     $374 = HEAP32[$373>>2]|0;
     $375 = (_strcmp($374,38760)|0);
     $376 = ($375|0)==(0);
     if ($376) {
      $377 = $0;
      _g_string_append_printf($377,3432,$vararg_buffer44);
      $378 = $0;
      $379 = $1;
      $380 = (($379) + 12|0);
      $381 = HEAP32[$380>>2]|0;
      $382 = $2;
      _print_latex_node($378,$381,$382);
      $383 = $0;
      _g_string_append_printf($383,38592,$vararg_buffer46);
     } else {
      $384 = $1;
      $385 = (($384) + 4|0);
      $386 = HEAP32[$385>>2]|0;
      $387 = (_strcmp($386,3448)|0);
      $388 = ($387|0)==(0);
      if ($388) {
       $389 = $0;
       $390 = $1;
       $391 = (($390) + 12|0);
       $392 = HEAP32[$391>>2]|0;
       $393 = (($392) + 4|0);
       $394 = HEAP32[$393>>2]|0;
       HEAP32[$vararg_buffer48>>2] = $394;
       _g_string_append_printf($389,3464,$vararg_buffer48);
      } else {
       $395 = $1;
       $396 = (($395) + 4|0);
       $397 = HEAP32[$396>>2]|0;
       $398 = (_strcmp($397,6776)|0);
       $399 = ($398|0)==(0);
       if ($399) {
        $400 = $0;
        _g_string_append_printf($400,3488,$vararg_buffer51);
        $401 = $0;
        $402 = $1;
        $403 = (($402) + 12|0);
        $404 = HEAP32[$403>>2]|0;
        $405 = $2;
        _print_latex_node($401,$404,$405);
        $406 = $0;
        _g_string_append_printf($406,38592,$vararg_buffer53);
       } else {
        $407 = $1;
        $408 = (($407) + 4|0);
        $409 = HEAP32[$408>>2]|0;
        $410 = (_strcmp($409,38856)|0);
        $411 = ($410|0)==(0);
        if ($411) {
         $412 = $0;
         _g_string_append_printf($412,3504,$vararg_buffer55);
         $413 = $0;
         $414 = $1;
         $415 = (($414) + 12|0);
         $416 = HEAP32[$415>>2]|0;
         $417 = $2;
         _print_latex_node($413,$416,$417);
         $418 = $0;
         _g_string_append_printf($418,38592,$vararg_buffer57);
        } else {
         $419 = $1;
         $420 = (($419) + 4|0);
         $421 = HEAP32[$420>>2]|0;
         $422 = (_strcmp($421,12544)|0);
         $423 = ($422|0)==(0);
         if ($423) {
         } else {
          $424 = $1;
          $425 = (($424) + 4|0);
          $426 = HEAP32[$425>>2]|0;
          $427 = (_strcmp($426,12552)|0);
          $428 = ($427|0)==(0);
          if ($428) {
          } else {
           $429 = $1;
           $430 = (($429) + 4|0);
           $431 = HEAP32[$430>>2]|0;
           $432 = (_strcmp($431,12568)|0);
           $433 = ($432|0)==(0);
           if ($433) {
           } else {
            $434 = $1;
            $435 = (($434) + 4|0);
            $436 = HEAP32[$435>>2]|0;
            $437 = (_strcmp($436,12584)|0);
            $438 = ($437|0)==(0);
            if ($438) {
            } else {
             $439 = $1;
             $440 = (($439) + 4|0);
             $441 = HEAP32[$440>>2]|0;
             $442 = (_strcmp($441,12600)|0);
             $443 = ($442|0)==(0);
             if ($443) {
             } else {
              $444 = $1;
              $445 = (($444) + 4|0);
              $446 = HEAP32[$445>>2]|0;
              $447 = (_strcmp($446,40904)|0);
              $448 = ($447|0)==(0);
              if ($448) {
              } else {
               $449 = $1;
               $450 = (($449) + 4|0);
               $451 = HEAP32[$450>>2]|0;
               $452 = (_strcmp($451,12648)|0);
               $453 = ($452|0)==(0);
               if ($453) {
                $454 = $1;
                $455 = (($454) + 12|0);
                $456 = HEAP32[$455>>2]|0;
                $457 = (($456) + 4|0);
                $458 = HEAP32[$457>>2]|0;
                _trim_trailing_whitespace($458);
                $459 = $0;
                $460 = $1;
                $461 = (($460) + 12|0);
                $462 = HEAP32[$461>>2]|0;
                $463 = (($462) + 4|0);
                $464 = HEAP32[$463>>2]|0;
                HEAP32[$vararg_buffer59>>2] = $464;
                _g_string_append_printf($459,3528,$vararg_buffer59);
               } else {
                $465 = $1;
                $466 = (($465) + 4|0);
                $467 = HEAP32[$466>>2]|0;
                $468 = (_strcmp($467,12664)|0);
                $469 = ($468|0)==(0);
                if ($469) {
                 $470 = $1;
                 $471 = (($470) + 12|0);
                 $472 = HEAP32[$471>>2]|0;
                 $473 = (($472) + 4|0);
                 $474 = HEAP32[$473>>2]|0;
                 _trim_trailing_whitespace($474);
                 $475 = $1;
                 $476 = (($475) + 12|0);
                 $477 = HEAP32[$476>>2]|0;
                 $478 = (($477) + 4|0);
                 $479 = HEAP32[$478>>2]|0;
                 $480 = (___strdup($479)|0);
                 $481 = $2;
                 $482 = (($481) + 72|0);
                 HEAP32[$482>>2] = $480;
                } else {
                 $483 = $1;
                 $484 = (($483) + 4|0);
                 $485 = HEAP32[$484>>2]|0;
                 $486 = (_strcmp($485,6856)|0);
                 $487 = ($486|0)==(0);
                 if ($487) {
                  $488 = $1;
                  $489 = (($488) + 12|0);
                  $490 = HEAP32[$489>>2]|0;
                  $491 = (($490) + 4|0);
                  $492 = HEAP32[$491>>2]|0;
                  _trim_trailing_whitespace($492);
                  $493 = $0;
                  $494 = $1;
                  $495 = (($494) + 12|0);
                  $496 = HEAP32[$495>>2]|0;
                  $497 = (($496) + 4|0);
                  $498 = HEAP32[$497>>2]|0;
                  HEAP32[$vararg_buffer62>>2] = $498;
                  _g_string_append_printf($493,3544,$vararg_buffer62);
                 } else {
                  $499 = $0;
                  _g_string_append_printf($499,3584,$vararg_buffer65);
                  $500 = $0;
                  $501 = $1;
                  $502 = (($501) + 4|0);
                  $503 = HEAP32[$502>>2]|0;
                  $504 = $2;
                  _print_latex_string($500,$503,$504);
                  $505 = $0;
                  _g_string_append_printf($505,3592,$vararg_buffer67);
                  $506 = $0;
                  $507 = $1;
                  $508 = (($507) + 12|0);
                  $509 = HEAP32[$508>>2]|0;
                  $510 = $2;
                  _print_latex_node_tree($506,$509,$510);
                  $511 = $0;
                  _g_string_append_printf($511,38592,$vararg_buffer69);
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
   STACKTOP = sp;return;
   break;
  }
  case 57:  {
   STACKTOP = sp;return;
   break;
  }
  case 69:  {
   $1715 = $2;
   $1716 = (($1715) + 25|0);
   $1717 = HEAP8[$1716>>0]|0;
   $1718 = $1717&1;
   if ($1718) {
    $1719 = $0;
    $1720 = $1;
    $1721 = (($1720) + 12|0);
    $1722 = HEAP32[$1721>>2]|0;
    $1723 = $2;
    _print_latex_node_tree($1719,$1722,$1723);
   }
   STACKTOP = sp;return;
   break;
  }
  case 61:  {
   STACKTOP = sp;return;
   break;
  }
  case 22:  {
   $713 = $0;
   _g_string_append_printf($713,3776,$vararg_buffer123);
   $714 = $0;
   $715 = $1;
   $716 = (($715) + 12|0);
   $717 = HEAP32[$716>>2]|0;
   $718 = $2;
   _print_latex_node_tree($714,$717,$718);
   $719 = $0;
   _g_string_append_printf($719,39560,$vararg_buffer125);
   STACKTOP = sp;return;
   break;
  }
  case 3:  {
   $602 = $0;
   $603 = $2;
   _print_latex_localized_typography($602,7,$603);
   STACKTOP = sp;return;
   break;
  }
  case 82:  {
   $40 = $1;
   $41 = (($40) + 12|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (_ascii_label_from_node($42)|0);
   $width = $43;
   $44 = $1;
   $45 = (($44) + 4|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (_ascii_label_from_string($46)|0);
   $temp = $47;
   $48 = $0;
   $49 = $width;
   $50 = $temp;
   HEAP32[$vararg_buffer>>2] = $49;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $50;
   _g_string_append_printf($48,3088,$vararg_buffer);
   $51 = $0;
   $52 = $1;
   $53 = (($52) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $2;
   _print_latex_node_tree($51,$54,$55);
   $56 = $0;
   _g_string_append_printf($56,3104,$vararg_buffer2);
   $57 = $1;
   $58 = (($57) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   _trim_trailing_whitespace($59);
   $60 = $0;
   $61 = $1;
   $62 = (($61) + 4|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $2;
   _print_latex_string($60,$63,$64);
   $65 = $0;
   _g_string_append_printf($65,38592,$vararg_buffer4);
   $66 = $temp;
   _free($66);
   $67 = $width;
   _free($67);
   STACKTOP = sp;return;
   break;
  }
  case 15: case 14: case 13: case 12: case 11: case 10:  {
   $542 = $1;
   $543 = HEAP16[$542>>1]|0;
   $544 = $543 << 16 >> 16;
   $545 = (($544) - 10)|0;
   $546 = $2;
   $547 = (($546) + 8|0);
   $548 = HEAP32[$547>>2]|0;
   $549 = (($545) + ($548))|0;
   $lev = $549;
   $550 = $lev;
   $551 = ($550|0)>(7);
   if ($551) {
    $lev = 7;
   }
   $552 = $0;
   $553 = $2;
   _pad($552,2,$553);
   $554 = $lev;
   switch ($554|0) {
   case 4:  {
    $558 = $0;
    _g_string_append_printf($558,3656,$vararg_buffer82);
    break;
   }
   case 3:  {
    $557 = $0;
    _g_string_append_printf($557,3640,$vararg_buffer80);
    break;
   }
   case 2:  {
    $556 = $0;
    _g_string_append_printf($556,3624,$vararg_buffer78);
    break;
   }
   case 1:  {
    $555 = $0;
    _g_string_append_printf($555,3616,$vararg_buffer76);
    break;
   }
   case 7:  {
    $561 = $0;
    _g_string_append_printf($561,3704,$vararg_buffer88);
    break;
   }
   case 5:  {
    $559 = $0;
    _g_string_append_printf($559,3672,$vararg_buffer84);
    break;
   }
   case 6:  {
    $560 = $0;
    _g_string_append_printf($560,3688,$vararg_buffer86);
    break;
   }
   default: {
   }
   }
   $562 = $2;
   $563 = (($562) + 76|0);
   HEAP8[$563>>0] = 1;
   $564 = $1;
   $565 = (($564) + 12|0);
   $566 = HEAP32[$565>>2]|0;
   $567 = HEAP16[$566>>1]|0;
   $568 = $567 << 16 >> 16;
   $569 = ($568|0)==(27);
   if ($569) {
    $570 = $1;
    $571 = (($570) + 12|0);
    $572 = HEAP32[$571>>2]|0;
    $573 = (($572) + 4|0);
    $574 = HEAP32[$573>>2]|0;
    $575 = (_label_from_string($574)|0);
    $temp = $575;
    $576 = $0;
    $577 = $1;
    $578 = (($577) + 12|0);
    $579 = HEAP32[$578>>2]|0;
    $580 = (($579) + 16|0);
    $581 = HEAP32[$580>>2]|0;
    $582 = $2;
    _print_latex_node_tree($576,$581,$582);
    $583 = $0;
    $584 = $temp;
    HEAP32[$vararg_buffer90>>2] = $584;
    _g_string_append_printf($583,3720,$vararg_buffer90);
    $585 = $temp;
    _free($585);
   } else {
    $586 = $1;
    $587 = (($586) + 12|0);
    $588 = HEAP32[$587>>2]|0;
    $589 = (_label_from_node_tree($588)|0);
    $temp = $589;
    $590 = $0;
    $591 = $1;
    $592 = (($591) + 12|0);
    $593 = HEAP32[$592>>2]|0;
    $594 = $2;
    _print_latex_node_tree($590,$593,$594);
    $595 = $0;
    $596 = $temp;
    HEAP32[$vararg_buffer93>>2] = $596;
    _g_string_append_printf($595,3720,$vararg_buffer93);
    $597 = $temp;
    _free($597);
   }
   $598 = $2;
   $599 = (($598) + 76|0);
   HEAP8[$599>>0] = 0;
   $600 = $2;
   $601 = (($600) + 4|0);
   HEAP32[$601>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 53:  {
   $1579 = $1;
   $1580 = (($1579) + 12|0);
   $1581 = HEAP32[$1580>>2]|0;
   $1582 = ($1581|0)!=(0|0);
   if ($1582) {
    $1583 = $1;
    $1584 = (($1583) + 12|0);
    $1585 = HEAP32[$1584>>2]|0;
    $1586 = HEAP16[$1585>>1]|0;
    $1587 = $1586 << 16 >> 16;
    $1588 = ($1587|0)==(54);
    if ($1588) {
     $1589 = $1;
     $1590 = (($1589) + 12|0);
     $1591 = HEAP32[$1590>>2]|0;
     $1592 = (($1591) + 4|0);
     $1593 = HEAP32[$1592>>2]|0;
     $1594 = (_label_from_string($1593)|0);
     $temp = $1594;
    } else {
     label = 322;
    }
   } else {
    label = 322;
   }
   if ((label|0) == 322) {
    $1595 = $1;
    $1596 = (($1595) + 12|0);
    $1597 = HEAP32[$1596>>2]|0;
    $1598 = (_label_from_node_tree($1597)|0);
    $temp = $1598;
   }
   $1599 = $0;
   _g_string_append_printf($1599,4616,$vararg_buffer321);
   $1600 = $0;
   $1601 = $1;
   $1602 = (($1601) + 12|0);
   $1603 = HEAP32[$1602>>2]|0;
   $1604 = $2;
   _print_latex_node_tree($1600,$1603,$1604);
   $1605 = $0;
   $1606 = $temp;
   HEAP32[$vararg_buffer323>>2] = $1606;
   _g_string_append_printf($1605,4632,$vararg_buffer323);
   $1607 = $temp;
   _free($1607);
   STACKTOP = sp;return;
   break;
  }
  case 39:  {
   $1443 = $0;
   $1444 = $1;
   $1445 = (($1444) + 12|0);
   $1446 = HEAP32[$1445>>2]|0;
   $1447 = $2;
   _print_latex_node_tree($1443,$1446,$1447);
   STACKTOP = sp;return;
   break;
  }
  case 38:  {
   $1448 = $0;
   $1449 = $2;
   _pad($1448,2,$1449);
   $1450 = $0;
   _g_string_append_printf($1450,4368,$vararg_buffer291);
   $1451 = $2;
   $1452 = (($1451) + 4|0);
   HEAP32[$1452>>2] = 0;
   $1453 = $0;
   $1454 = $1;
   $1455 = (($1454) + 12|0);
   $1456 = HEAP32[$1455>>2]|0;
   $1457 = $2;
   _print_latex_node_tree($1453,$1456,$1457);
   $1458 = $0;
   $1459 = $2;
   _pad($1458,1,$1459);
   $1460 = $0;
   _g_string_append_printf($1460,4384,$vararg_buffer293);
   $1461 = $2;
   $1462 = (($1461) + 4|0);
   HEAP32[$1462>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 85:  {
   STACKTOP = sp;return;
   break;
  }
  case 79:  {
   $1734 = $0;
   $1735 = $1;
   $1736 = (($1735) + 4|0);
   $1737 = HEAP32[$1736>>2]|0;
   HEAP32[$vararg_buffer344>>2] = $1737;
   _g_string_append_printf($1734,4720,$vararg_buffer344);
   STACKTOP = sp;return;
   break;
  }
  case 80:  {
   $1738 = $0;
   $1739 = $1;
   $1740 = (($1739) + 4|0);
   $1741 = HEAP32[$1740>>2]|0;
   HEAP32[$vararg_buffer347>>2] = $1741;
   _g_string_append_printf($1738,4744,$vararg_buffer347);
   STACKTOP = sp;return;
   break;
  }
  case 87:  {
   STACKTOP = sp;return;
   break;
  }
  case 86:  {
   $1742 = $0;
   $1743 = $1;
   $1744 = (($1743) + 12|0);
   $1745 = HEAP32[$1744>>2]|0;
   $1746 = $2;
   _print_latex_node_tree($1742,$1745,$1746);
   STACKTOP = sp;return;
   break;
  }
  case 6:  {
   $115 = $0;
   $116 = $2;
   _pad($115,1,$116);
   $117 = $0;
   $118 = $1;
   $119 = (($118) + 12|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = $2;
   _print_latex_node_tree($117,$120,$121);
   $122 = $2;
   $123 = (($122) + 4|0);
   HEAP32[$123>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 62: case 63:  {
   $1724 = $2;
   $1725 = (($1724) + 25|0);
   $1726 = HEAP8[$1725>>0]|0;
   $1727 = $1726&1;
   if ($1727) {
    $1728 = $0;
    $1729 = $1;
    $1730 = (($1729) + 12|0);
    $1731 = HEAP32[$1730>>2]|0;
    $1732 = $2;
    _print_latex_node($1728,$1731,$1732);
   }
   STACKTOP = sp;return;
   break;
  }
  case 8:  {
   $111 = $0;
   $112 = $1;
   $113 = (($112) + 4|0);
   $114 = HEAP32[$113>>2]|0;
   HEAP32[$vararg_buffer10>>2] = $114;
   _g_string_append_printf($111,40832,$vararg_buffer10);
   STACKTOP = sp;return;
   break;
  }
  case 0:  {
   STACKTOP = sp;return;
   break;
  }
  case 60:  {
   $1608 = $0;
   $1609 = $1;
   $1610 = (($1609) + 12|0);
   $1611 = HEAP32[$1610>>2]|0;
   $1612 = $2;
   _print_latex_node_tree($1608,$1611,$1612);
   $1613 = $0;
   _g_string_append_printf($1613,4648,$vararg_buffer326);
   STACKTOP = sp;return;
   break;
  }
  case 59:  {
   $1614 = $0;
   $1615 = $1;
   $1616 = (($1615) + 12|0);
   $1617 = HEAP32[$1616>>2]|0;
   $1618 = $2;
   _print_latex_node_tree($1614,$1617,$1618);
   $1619 = $1;
   $1620 = (($1619) + 16|0);
   $1621 = HEAP32[$1620>>2]|0;
   $1622 = ($1621|0)!=(0|0);
   if ($1622) {
    $1623 = $1;
    $1624 = (($1623) + 16|0);
    $1625 = HEAP32[$1624>>2]|0;
    $1626 = HEAP16[$1625>>1]|0;
    $1627 = $1626 << 16 >> 16;
    $1628 = ($1627|0)==(59);
    if ($1628) {
     $1629 = $0;
     _g_string_append_printf($1629,4664,$vararg_buffer328);
    } else {
     label = 329;
    }
   } else {
    label = 329;
   }
   if ((label|0) == 329) {
    $1630 = $0;
    _g_string_append_printf($1630,4680,$vararg_buffer330);
   }
   STACKTOP = sp;return;
   break;
  }
  case 58:  {
   $1631 = $0;
   $1632 = $1;
   $1633 = (($1632) + 12|0);
   $1634 = HEAP32[$1633>>2]|0;
   $1635 = $2;
   _print_latex_node_tree($1631,$1634,$1635);
   $1636 = $0;
   _g_string_append_printf($1636,3736,$vararg_buffer332);
   $1637 = $2;
   $1638 = (($1637) + 20|0);
   HEAP32[$1638>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 23:  {
   $720 = $1;
   $721 = (($720) + 8|0);
   $722 = HEAP32[$721>>2]|0;
   $723 = ($722|0)==(0|0);
   if ($723) {
    $724 = (_mk_link_data(0,0,0,0)|0);
    $725 = $1;
    $726 = (($725) + 8|0);
    HEAP32[$726>>2] = $724;
   }
   $727 = $1;
   $728 = (($727) + 8|0);
   $729 = HEAP32[$728>>2]|0;
   $730 = HEAP32[$729>>2]|0;
   $731 = ($730|0)==(0|0);
   if ($731) {
    $732 = $1;
    $733 = (($732) + 8|0);
    $734 = HEAP32[$733>>2]|0;
    $735 = (($734) + 4|0);
    $736 = HEAP32[$735>>2]|0;
    $737 = ($736|0)==(0|0);
    if ($737) {
     $738 = (_g_string_new(41432)|0);
     $temp_str = $738;
     $739 = $temp_str;
     $740 = $1;
     $741 = (($740) + 12|0);
     $742 = HEAP32[$741>>2]|0;
     _print_raw_node_tree($739,$742);
     $743 = $1;
     $744 = (($743) + 8|0);
     $745 = HEAP32[$744>>2]|0;
     $746 = HEAP32[$745>>2]|0;
     _free($746);
     $747 = $temp_str;
     $748 = HEAP32[$747>>2]|0;
     $749 = $1;
     $750 = (($749) + 8|0);
     $751 = HEAP32[$750>>2]|0;
     HEAP32[$751>>2] = $748;
     $752 = $temp_str;
     (_g_string_free($752,0)|0);
    }
   }
   $753 = $1;
   $754 = (($753) + 8|0);
   $755 = HEAP32[$754>>2]|0;
   $756 = HEAP32[$755>>2]|0;
   $757 = ($756|0)!=(0|0);
   do {
    if ($757) {
     $758 = $1;
     $759 = (($758) + 8|0);
     $760 = HEAP32[$759>>2]|0;
     $761 = HEAP32[$760>>2]|0;
     $762 = (___strdup($761)|0);
     $temp = $762;
     $763 = $1;
     $764 = (($763) + 8|0);
     $765 = HEAP32[$764>>2]|0;
     _free_link_data($765);
     $766 = $temp;
     $767 = $2;
     $768 = (_extract_link_data($766,$767)|0);
     $769 = $1;
     $770 = (($769) + 8|0);
     HEAP32[$770>>2] = $768;
     $771 = $1;
     $772 = (($771) + 8|0);
     $773 = HEAP32[$772>>2]|0;
     $774 = ($773|0)==(0|0);
     if (!($774)) {
      $808 = $temp;
      _free($808);
      break;
     }
     $775 = $0;
     _g_string_append_printf($775,40808,$vararg_buffer127);
     $776 = $0;
     $777 = $1;
     $778 = (($777) + 12|0);
     $779 = HEAP32[$778>>2]|0;
     $780 = $2;
     _print_latex_node($776,$779,$780);
     $781 = $0;
     _g_string_append_printf($781,39600,$vararg_buffer129);
     $782 = $1;
     $783 = (($782) + 12|0);
     $784 = HEAP32[$783>>2]|0;
     $785 = (($784) + 16|0);
     $786 = HEAP32[$785>>2]|0;
     $787 = ($786|0)!=(0|0);
     if ($787) {
      $788 = $0;
      _g_string_append_printf($788,40808,$vararg_buffer131);
      $789 = $0;
      $790 = $1;
      $791 = (($790) + 12|0);
      $792 = HEAP32[$791>>2]|0;
      $793 = (($792) + 16|0);
      $794 = HEAP32[$793>>2]|0;
      $795 = $2;
      _print_latex_node_tree($789,$794,$795);
      $796 = $0;
      _g_string_append_printf($796,39600,$vararg_buffer133);
     } else {
      $797 = $1;
      $798 = (($797) + 4|0);
      $799 = HEAP32[$798>>2]|0;
      $800 = ($799|0)!=(0|0);
      if ($800) {
       $801 = $0;
       $802 = $1;
       $803 = (($802) + 4|0);
       $804 = HEAP32[$803>>2]|0;
       HEAP32[$vararg_buffer135>>2] = $804;
       _g_string_append_printf($801,40832,$vararg_buffer135);
      } else {
       $805 = $0;
       $806 = $temp;
       HEAP32[$vararg_buffer138>>2] = $806;
       _g_string_append_printf($805,39608,$vararg_buffer138);
      }
     }
     $807 = $temp;
     _free($807);
     STACKTOP = sp;return;
    }
   } while(0);
   $809 = (_g_string_new(41432)|0);
   $temp_str = $809;
   $810 = $temp_str;
   $811 = $1;
   $812 = (($811) + 12|0);
   $813 = HEAP32[$812>>2]|0;
   $814 = $2;
   _print_latex_node_tree($810,$813,$814);
   $815 = (_g_string_new(41432)|0);
   $raw_str = $815;
   $816 = $raw_str;
   $817 = $1;
   $818 = (($817) + 12|0);
   $819 = HEAP32[$818>>2]|0;
   _print_raw_node_tree($816,$819);
   $820 = $1;
   $821 = (($820) + 8|0);
   $822 = HEAP32[$821>>2]|0;
   $823 = (($822) + 4|0);
   $824 = HEAP32[$823>>2]|0;
   $825 = ($824|0)!=(0|0);
   if ($825) {
    $826 = $1;
    $827 = (($826) + 8|0);
    $828 = HEAP32[$827>>2]|0;
    $829 = (($828) + 4|0);
    $830 = HEAP32[$829>>2]|0;
    $831 = HEAP8[$830>>0]|0;
    $832 = $831 << 24 >> 24;
    $833 = ($832|0)==(35);
    if ($833) {
     $834 = $temp_str;
     $835 = HEAP32[$834>>2]|0;
     $836 = (_strlen(($835|0))|0);
     $837 = ($836>>>0)>(0);
     if ($837) {
      $838 = $0;
      $839 = $temp_str;
      $840 = HEAP32[$839>>2]|0;
      HEAP32[$vararg_buffer141>>2] = $840;
      _g_string_append_printf($838,8400,$vararg_buffer141);
     }
     $841 = $1;
     $842 = (($841) + 8|0);
     $843 = HEAP32[$842>>2]|0;
     $844 = HEAP32[$843>>2]|0;
     $845 = ($844|0)==(0|0);
     if ($845) {
      $846 = $1;
      $847 = (($846) + 8|0);
      $848 = HEAP32[$847>>2]|0;
      $849 = (($848) + 4|0);
      $850 = HEAP32[$849>>2]|0;
      $851 = ($850|0)!=(0|0);
      if ($851) {
       $852 = $1;
       $853 = (($852) + 8|0);
       $854 = HEAP32[$853>>2]|0;
       $855 = (($854) + 4|0);
       $856 = HEAP32[$855>>2]|0;
       $857 = (_strncmp($856,46088,1)|0);
       $858 = ($857|0)==(0);
       if ($858) {
        $859 = $0;
        $860 = $1;
        $861 = (($860) + 8|0);
        $862 = HEAP32[$861>>2]|0;
        $863 = (($862) + 4|0);
        $864 = HEAP32[$863>>2]|0;
        $865 = (($864) + 1|0);
        HEAP32[$vararg_buffer144>>2] = $865;
        _g_string_append_printf($859,3784,$vararg_buffer144);
       } else {
        label = 186;
       }
      } else {
       label = 186;
      }
      if ((label|0) == 186) {
       $866 = $0;
       $867 = $1;
       $868 = (($867) + 8|0);
       $869 = HEAP32[$868>>2]|0;
       $870 = (($869) + 4|0);
       $871 = HEAP32[$870>>2]|0;
       HEAP32[$vararg_buffer147>>2] = $871;
       _g_string_append_printf($866,3800,$vararg_buffer147);
      }
     } else {
      $872 = $0;
      $873 = $1;
      $874 = (($873) + 8|0);
      $875 = HEAP32[$874>>2]|0;
      $876 = HEAP32[$875>>2]|0;
      HEAP32[$vararg_buffer150>>2] = $876;
      _g_string_append_printf($872,3784,$vararg_buffer150);
     }
     $877 = $temp_str;
     $878 = HEAP32[$877>>2]|0;
     $879 = (_strlen(($878|0))|0);
     $880 = ($879>>>0)>(0);
     if ($880) {
      $881 = $0;
      $882 = $temp_str;
      $883 = HEAP32[$882>>2]|0;
      HEAP32[$vararg_buffer153>>2] = $883;
      _g_string_append_printf($881,8568,$vararg_buffer153);
     }
    } else {
     label = 192;
    }
   } else {
    label = 192;
   }
   if ((label|0) == 192) {
    $884 = $raw_str;
    $885 = HEAP32[$884>>2]|0;
    $886 = $1;
    $887 = (($886) + 8|0);
    $888 = HEAP32[$887>>2]|0;
    $889 = (($888) + 4|0);
    $890 = HEAP32[$889>>2]|0;
    $891 = (_strcmp($885,$890)|0);
    $892 = ($891|0)==(0);
    if ($892) {
     $893 = $0;
     $894 = $1;
     $895 = (($894) + 8|0);
     $896 = HEAP32[$895>>2]|0;
     $897 = (($896) + 4|0);
     $898 = HEAP32[$897>>2]|0;
     $899 = $temp_str;
     $900 = HEAP32[$899>>2]|0;
     HEAP32[$vararg_buffer156>>2] = $898;
     $vararg_ptr159 = (($vararg_buffer156) + 4|0);
     HEAP32[$vararg_ptr159>>2] = $900;
     _g_string_append_printf($893,3816,$vararg_buffer156);
    } else {
     $901 = $1;
     $902 = (($901) + 8|0);
     $903 = HEAP32[$902>>2]|0;
     $904 = (($903) + 4|0);
     $905 = HEAP32[$904>>2]|0;
     $906 = (_strlen(($905|0))|0);
     $907 = ($906>>>0)>(7);
     if ($907) {
      $908 = $raw_str;
      $909 = HEAP32[$908>>2]|0;
      $910 = $1;
      $911 = (($910) + 8|0);
      $912 = HEAP32[$911>>2]|0;
      $913 = (($912) + 4|0);
      $914 = HEAP32[$913>>2]|0;
      $915 = (($914) + 7|0);
      $916 = (_strcmp($909,$915)|0);
      $917 = ($916|0)==(0);
      if ($917) {
       $918 = $0;
       $919 = $1;
       $920 = (($919) + 8|0);
       $921 = HEAP32[$920>>2]|0;
       $922 = (($921) + 4|0);
       $923 = HEAP32[$922>>2]|0;
       $924 = $temp_str;
       $925 = HEAP32[$924>>2]|0;
       HEAP32[$vararg_buffer160>>2] = $923;
       $vararg_ptr163 = (($vararg_buffer160) + 4|0);
       HEAP32[$vararg_ptr163>>2] = $925;
       _g_string_append_printf($918,3816,$vararg_buffer160);
      } else {
       label = 197;
      }
     } else {
      label = 197;
     }
     if ((label|0) == 197) {
      $926 = $0;
      $927 = $1;
      $928 = (($927) + 8|0);
      $929 = HEAP32[$928>>2]|0;
      $930 = (($929) + 4|0);
      $931 = HEAP32[$930>>2]|0;
      HEAP32[$vararg_buffer164>>2] = $931;
      _g_string_append_printf($926,3832,$vararg_buffer164);
      $932 = $0;
      $933 = $1;
      $934 = (($933) + 12|0);
      $935 = HEAP32[$934>>2]|0;
      $936 = $2;
      _print_latex_node_tree($932,$935,$936);
      $937 = $0;
      _g_string_append_printf($937,39560,$vararg_buffer167);
      $938 = $2;
      $939 = (($938) + 76|0);
      $940 = HEAP8[$939>>0]|0;
      $941 = $940&1;
      $942 = $941&1;
      $943 = ($942|0)==(0);
      if ($943) {
       $944 = $0;
       _g_string_append_printf($944,3848,$vararg_buffer169);
       $945 = $0;
       $946 = $1;
       $947 = (($946) + 8|0);
       $948 = HEAP32[$947>>2]|0;
       $949 = (($948) + 4|0);
       $950 = HEAP32[$949>>2]|0;
       $951 = $2;
       _print_latex_url($945,$950,$951);
       $952 = $0;
       $953 = $1;
       $954 = (($953) + 8|0);
       $955 = HEAP32[$954>>2]|0;
       $956 = (($955) + 4|0);
       $957 = HEAP32[$956>>2]|0;
       HEAP32[$vararg_buffer171>>2] = $957;
       _g_string_append_printf($952,3872,$vararg_buffer171);
       $958 = $0;
       $959 = $1;
       $960 = (($959) + 8|0);
       $961 = HEAP32[$960>>2]|0;
       $962 = (($961) + 4|0);
       $963 = HEAP32[$962>>2]|0;
       $964 = $2;
       _print_latex_string($958,$963,$964);
       $965 = $0;
       _g_string_append_printf($965,39664,$vararg_buffer174);
      }
     }
    }
   }
   $966 = $temp_str;
   (_g_string_free($966,1)|0);
   $967 = $raw_str;
   (_g_string_free($967,1)|0);
   $968 = $1;
   $969 = (($968) + 8|0);
   $970 = HEAP32[$969>>2]|0;
   $971 = (($970) + 12|0);
   HEAP32[$971>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 52:  {
   $1526 = $0;
   $1527 = $2;
   _pad($1526,2,$1527);
   $1528 = $0;
   _g_string_append_printf($1528,4408,$vararg_buffer311);
   $1529 = $0;
   $1530 = $1;
   $1531 = (($1530) + 12|0);
   $1532 = HEAP32[$1531>>2]|0;
   $1533 = $2;
   _print_latex_node_tree($1529,$1532,$1533);
   $1534 = $0;
   _g_string_append_printf($1534,4512,$vararg_buffer313);
   $1535 = $2;
   $1536 = (($1535) + 4|0);
   HEAP32[$1536>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 55:  {
   $1537 = (_g_string_new(41432)|0);
   $temp_str = $1537;
   $i = 0;
   while(1) {
    $1538 = $i;
    $1539 = $1;
    $1540 = (($1539) + 4|0);
    $1541 = HEAP32[$1540>>2]|0;
    $1542 = (($1541) + ($1538)|0);
    $1543 = HEAP8[$1542>>0]|0;
    $1544 = ($1543<<24>>24)!=(0);
    if (!($1544)) {
     break;
    }
    $1545 = $i;
    $1546 = $1;
    $1547 = (($1546) + 4|0);
    $1548 = HEAP32[$1547>>2]|0;
    $1549 = (($1548) + ($1545)|0);
    $1550 = HEAP8[$1549>>0]|0;
    $1551 = $1550 << 24 >> 24;
    $1552 = ($1551|0)!=(104);
    if ($1552) {
     $1553 = $temp_str;
     $1554 = $i;
     $1555 = $1;
     $1556 = (($1555) + 4|0);
     $1557 = HEAP32[$1556>>2]|0;
     $1558 = (($1557) + ($1554)|0);
     $1559 = HEAP8[$1558>>0]|0;
     $1560 = $1559 << 24 >> 24;
     $1561 = (_toupper($1560)|0);
     HEAP32[$vararg_buffer315>>2] = $1561;
     _g_string_append_printf($1553,9768,$vararg_buffer315);
    }
    $1562 = $i;
    $1563 = (($1562) + 1)|0;
    $i = $1563;
   }
   $1564 = $0;
   $1565 = $temp_str;
   $1566 = HEAP32[$1565>>2]|0;
   HEAP32[$vararg_buffer318>>2] = $1566;
   _g_string_append_printf($1564,4560,$vararg_buffer318);
   $1567 = $2;
   $1568 = (($1567) + 16|0);
   $1569 = HEAP32[$1568>>2]|0;
   $1570 = ($1569|0)!=(0|0);
   if ($1570) {
    $1571 = $2;
    $1572 = (($1571) + 16|0);
    $1573 = HEAP32[$1572>>2]|0;
    _free($1573);
   }
   $1574 = $temp_str;
   $1575 = HEAP32[$1574>>2]|0;
   $1576 = $2;
   $1577 = (($1576) + 16|0);
   HEAP32[$1577>>2] = $1575;
   $1578 = $temp_str;
   (_g_string_free($1578,0)|0);
   STACKTOP = sp;return;
   break;
  }
  case 35:  {
   $606 = $0;
   $607 = $2;
   _print_latex_localized_typography($606,5,$607);
   STACKTOP = sp;return;
   break;
  }
  case 72: case 73:  {
   $1255 = $1;
   $1256 = (($1255) + 8|0);
   $1257 = HEAP32[$1256>>2]|0;
   $1258 = ($1257|0)!=(0|0);
   if ($1258) {
    $1259 = $1;
    $1260 = (($1259) + 8|0);
    $1261 = HEAP32[$1260>>2]|0;
    $1262 = HEAP32[$1261>>2]|0;
    $1263 = (_strncmp($1262,45008,2)|0);
    $1264 = ($1263|0)==(0);
    if ($1264) {
     $1265 = $1;
     $1266 = (($1265) + 8|0);
     $1267 = HEAP32[$1266>>2]|0;
     $1268 = HEAP32[$1267>>2]|0;
     $1269 = (_strlen(($1268|0))|0);
     $1270 = (($1269) - 1)|0;
     $1271 = $1;
     $1272 = (($1271) + 8|0);
     $1273 = HEAP32[$1272>>2]|0;
     $1274 = HEAP32[$1273>>2]|0;
     $1275 = (($1274) + ($1270)|0);
     HEAP8[$1275>>0] = 0;
     $1276 = $1;
     $1277 = HEAP16[$1276>>1]|0;
     $1278 = $1277 << 16 >> 16;
     $1279 = ($1278|0)==(73);
     if ($1279) {
      $1280 = $0;
      $1281 = $1;
      $1282 = (($1281) + 4|0);
      $1283 = HEAP32[$1282>>2]|0;
      $1284 = (($1283) + 2|0);
      HEAP32[$vararg_buffer240>>2] = $1284;
      _g_string_append_printf($1280,4264,$vararg_buffer240);
     } else {
      $1285 = $0;
      _g_string_append_printf($1285,9312,$vararg_buffer243);
      $1286 = $0;
      _g_string_append_printf($1286,9352,$vararg_buffer245);
     }
    } else {
     label = 265;
    }
   } else {
    label = 265;
   }
   if ((label|0) == 265) {
    $1287 = $1;
    $1288 = (($1287) + 8|0);
    $1289 = HEAP32[$1288>>2]|0;
    $1290 = HEAP32[$1289>>2]|0;
    $1291 = $2;
    $1292 = (_note_number_for_label($1290,$1291)|0);
    $lev = $1292;
    $1293 = $lev;
    $1294 = ($1293|0)!=(0);
    if ($1294) {
     $1295 = $2;
     $1296 = (($1295) + 48|0);
     $1297 = HEAP32[$1296>>2]|0;
     $1298 = $lev;
     $1299 = (_node_for_count($1297,$1298)|0);
     $temp_node = $1299;
     $1300 = $temp_node;
     HEAP16[$1300>>1] = 63;
     $1301 = $lev;
     $1302 = $2;
     $1303 = (($1302) + 64|0);
     $1304 = HEAP32[$1303>>2]|0;
     $1305 = ($1301|0)>($1304|0);
     if ($1305) {
      $1306 = $lev;
      $1307 = $2;
      $1308 = (($1307) + 64|0);
      HEAP32[$1308>>2] = $1306;
     }
     $1309 = $1;
     $1310 = HEAP16[$1309>>1]|0;
     $1311 = $1310 << 16 >> 16;
     $1312 = ($1311|0)==(73);
     if ($1312) {
      $1313 = $0;
      $1314 = $1;
      $1315 = (($1314) + 8|0);
      $1316 = HEAP32[$1315>>2]|0;
      $1317 = HEAP32[$1316>>2]|0;
      HEAP32[$vararg_buffer247>>2] = $1317;
      _g_string_append_printf($1313,4264,$vararg_buffer247);
     } else {
      $1318 = $1;
      $1319 = (($1318) + 12|0);
      $1320 = HEAP32[$1319>>2]|0;
      $1321 = ($1320|0)!=(0|0);
      if ($1321) {
       $1322 = $0;
       _g_string_append_printf($1322,4280,$vararg_buffer250);
       $1323 = $0;
       $1324 = $1;
       $1325 = (($1324) + 12|0);
       $1326 = HEAP32[$1325>>2]|0;
       $1327 = $2;
       _print_latex_node($1323,$1326,$1327);
       $1328 = $0;
       $1329 = $1;
       $1330 = (($1329) + 8|0);
       $1331 = HEAP32[$1330>>2]|0;
       $1332 = HEAP32[$1331>>2]|0;
       HEAP32[$vararg_buffer252>>2] = $1332;
       _g_string_append_printf($1328,4152,$vararg_buffer252);
      } else {
       $1333 = $0;
       $1334 = $1;
       $1335 = (($1334) + 8|0);
       $1336 = HEAP32[$1335>>2]|0;
       $1337 = HEAP32[$1336>>2]|0;
       HEAP32[$vararg_buffer255>>2] = $1337;
       _g_string_append_printf($1333,4296,$vararg_buffer255);
      }
     }
    } else {
     $1338 = $1;
     $1339 = (($1338) + 8|0);
     $1340 = HEAP32[$1339>>2]|0;
     $1341 = HEAP32[$1340>>2]|0;
     $temp = $1341;
     $1342 = $1;
     $1343 = HEAP16[$1342>>1]|0;
     $1344 = $1343 << 16 >> 16;
     $1345 = ($1344|0)==(73);
     if ($1345) {
      $1346 = $0;
      $1347 = $1;
      $1348 = (($1347) + 8|0);
      $1349 = HEAP32[$1348>>2]|0;
      $1350 = HEAP32[$1349>>2]|0;
      HEAP32[$vararg_buffer258>>2] = $1350;
      _g_string_append_printf($1346,4264,$vararg_buffer258);
     } else {
      $1351 = $1;
      $1352 = (($1351) + 12|0);
      $1353 = HEAP32[$1352>>2]|0;
      $1354 = ($1353|0)!=(0|0);
      if ($1354) {
       $1355 = $temp;
       $1356 = (_strlen(($1355|0))|0);
       $1357 = (($1356) - 1)|0;
       $1358 = $temp;
       $1359 = (($1358) + ($1357)|0);
       $1360 = (_strcmp($1359,9416)|0);
       $1361 = ($1360|0)==(0);
       if ($1361) {
        $1362 = $0;
        _g_string_append_printf($1362,9424,$vararg_buffer261);
        $1363 = $temp;
        $1364 = (_strlen(($1363|0))|0);
        $1365 = (($1364) - 1)|0;
        $1366 = $temp;
        $1367 = (($1366) + ($1365)|0);
        HEAP8[$1367>>0] = 0;
       } else {
        $1368 = $0;
        _g_string_append_printf($1368,4280,$vararg_buffer263);
       }
       $1369 = $0;
       $1370 = $1;
       $1371 = (($1370) + 12|0);
       $1372 = HEAP32[$1371>>2]|0;
       $1373 = $2;
       _print_latex_node($1369,$1372,$1373);
       $1374 = $0;
       $1375 = $temp;
       HEAP32[$vararg_buffer265>>2] = $1375;
       _g_string_append_printf($1374,4152,$vararg_buffer265);
      } else {
       $1376 = $temp;
       $1377 = (_strlen(($1376|0))|0);
       $1378 = (($1377) - 1)|0;
       $1379 = $temp;
       $1380 = (($1379) + ($1378)|0);
       $1381 = (_strcmp($1380,9416)|0);
       $1382 = ($1381|0)==(0);
       if ($1382) {
        $1383 = $temp;
        $1384 = (_strlen(($1383|0))|0);
        $1385 = (($1384) - 1)|0;
        $1386 = $temp;
        $1387 = (($1386) + ($1385)|0);
        HEAP8[$1387>>0] = 0;
        $1388 = $0;
        $1389 = $temp;
        HEAP32[$vararg_buffer268>>2] = $1389;
        _g_string_append_printf($1388,9440,$vararg_buffer268);
       } else {
        $1390 = $0;
        $1391 = $temp;
        HEAP32[$vararg_buffer271>>2] = $1391;
        _g_string_append_printf($1390,4296,$vararg_buffer271);
       }
      }
     }
    }
   }
   STACKTOP = sp;return;
   break;
  }
  case 47:  {
   $133 = $0;
   $134 = $2;
   _pad($133,2,$134);
   $135 = $0;
   _g_string_append_printf($135,3128,$vararg_buffer13);
   $136 = $2;
   $137 = (($136) + 4|0);
   HEAP32[$137>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 5:  {
   $124 = $0;
   $125 = $2;
   _pad($124,2,$125);
   $126 = $0;
   $127 = $1;
   $128 = (($127) + 12|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = $2;
   _print_latex_node_tree($126,$129,$130);
   $131 = $2;
   $132 = (($131) + 4|0);
   HEAP32[$132>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 34:  {
   $608 = $0;
   $609 = $2;
   _print_latex_localized_typography($608,4,$609);
   STACKTOP = sp;return;
   break;
  }
  case 2:  {
   $35 = $0;
   $36 = $1;
   $37 = (($36) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $2;
   _print_latex_string($35,$38,$39);
   STACKTOP = sp;return;
   break;
  }
  case 40:  {
   $1463 = $0;
   _g_string_append_printf($1463,9536,$vararg_buffer295);
   $1464 = $0;
   $1465 = $1;
   $1466 = (($1465) + 4|0);
   $1467 = HEAP32[$1466>>2]|0;
   HEAP32[$vararg_buffer297>>2] = $1467;
   _g_string_append_printf($1464,40832,$vararg_buffer297);
   STACKTOP = sp;return;
   break;
  }
  case 32:  {
   $1468 = $1;
   $1469 = (($1468) + 4|0);
   $1470 = HEAP32[$1469>>2]|0;
   $1471 = (_strncmp($1470,42136,4)|0);
   $1472 = ($1471|0)==(0);
   if ($1472) {
    $1473 = $1;
    $1474 = (($1473) + 4|0);
    $1475 = HEAP32[$1474>>2]|0;
    $1476 = (_strlen(($1475|0))|0);
    $1477 = (($1476) - 3)|0;
    $1478 = $1;
    $1479 = (($1478) + 4|0);
    $1480 = HEAP32[$1479>>2]|0;
    $1481 = (($1480) + ($1477)|0);
    HEAP8[$1481>>0] = 0;
    $1482 = $0;
    $1483 = $1;
    $1484 = (($1483) + 4|0);
    $1485 = HEAP32[$1484>>2]|0;
    $1486 = (($1485) + 4|0);
    HEAP32[$vararg_buffer300>>2] = $1486;
    _g_string_append_printf($1482,40832,$vararg_buffer300);
    $1487 = $2;
    $1488 = (($1487) + 4|0);
    HEAP32[$1488>>2] = 0;
   }
   STACKTOP = sp;return;
   break;
  }
  default: {
   $1747 = HEAP32[_stderr>>2]|0;
   $1748 = $1;
   $1749 = HEAP16[$1748>>1]|0;
   $1750 = $1749 << 16 >> 16;
   HEAP32[$vararg_buffer350>>2] = $1750;
   (_fprintf(($1747|0),(4768|0),($vararg_buffer350|0))|0);
   _exit(1);
   // unreachable;
  }
  }
 } while(0);
 if ((label|0) == 17) {
  $94 = $1;
  $95 = (($94) + 12|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = (($96) + 12|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (_ascii_label_from_node($98)|0);
  $width = $99;
  $100 = $1;
  $101 = (($100) + 12|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (($102) + 4|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = (_ascii_label_from_string($104)|0);
  $temp = $105;
  $106 = $0;
  $107 = $width;
  $108 = $temp;
  HEAP32[$vararg_buffer6>>2] = $107;
  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $108;
  _g_string_append_printf($106,3112,$vararg_buffer6);
  $109 = $temp;
  _free($109);
  $110 = $width;
  _free($110);
  STACKTOP = sp;return;
 }
 $983 = $1;
 $984 = (($983) + 8|0);
 $985 = HEAP32[$984>>2]|0;
 $986 = HEAP32[$985>>2]|0;
 $987 = ($986|0)==(0|0);
 if ($987) {
  $988 = $1;
  $989 = (($988) + 8|0);
  $990 = HEAP32[$989>>2]|0;
  $991 = (($990) + 4|0);
  $992 = HEAP32[$991>>2]|0;
  $993 = ($992|0)==(0|0);
  if ($993) {
   $994 = (_g_string_new(41432)|0);
   $temp_str = $994;
   $995 = $temp_str;
   $996 = $1;
   $997 = (($996) + 12|0);
   $998 = HEAP32[$997>>2]|0;
   _print_raw_node_tree($995,$998);
   $999 = $temp_str;
   $1000 = HEAP32[$999>>2]|0;
   $1001 = $1;
   $1002 = (($1001) + 8|0);
   $1003 = HEAP32[$1002>>2]|0;
   HEAP32[$1003>>2] = $1000;
   $1004 = $temp_str;
   (_g_string_free($1004,0)|0);
  }
 }
 $1005 = $1;
 $1006 = (($1005) + 8|0);
 $1007 = HEAP32[$1006>>2]|0;
 $1008 = HEAP32[$1007>>2]|0;
 $1009 = ($1008|0)!=(0|0);
 do {
  if ($1009) {
   $1010 = $1;
   $1011 = (($1010) + 8|0);
   $1012 = HEAP32[$1011>>2]|0;
   $1013 = HEAP32[$1012>>2]|0;
   $1014 = (___strdup($1013)|0);
   $temp = $1014;
   $1015 = $1;
   $1016 = (($1015) + 8|0);
   $1017 = HEAP32[$1016>>2]|0;
   _free_link_data($1017);
   $1018 = $temp;
   $1019 = $2;
   $1020 = (_extract_link_data($1018,$1019)|0);
   $1021 = $1;
   $1022 = (($1021) + 8|0);
   HEAP32[$1022>>2] = $1020;
   $1023 = $1;
   $1024 = (($1023) + 8|0);
   $1025 = HEAP32[$1024>>2]|0;
   $1026 = ($1025|0)==(0|0);
   if (!($1026)) {
    $1060 = $temp;
    _free($1060);
    break;
   }
   $1027 = $0;
   _g_string_append_printf($1027,13312,$vararg_buffer180);
   $1028 = $0;
   $1029 = $1;
   $1030 = (($1029) + 12|0);
   $1031 = HEAP32[$1030>>2]|0;
   $1032 = $2;
   _print_latex_node($1028,$1031,$1032);
   $1033 = $0;
   _g_string_append_printf($1033,39600,$vararg_buffer182);
   $1034 = $1;
   $1035 = (($1034) + 12|0);
   $1036 = HEAP32[$1035>>2]|0;
   $1037 = (($1036) + 16|0);
   $1038 = HEAP32[$1037>>2]|0;
   $1039 = ($1038|0)!=(0|0);
   if ($1039) {
    $1040 = $0;
    _g_string_append_printf($1040,40808,$vararg_buffer184);
    $1041 = $0;
    $1042 = $1;
    $1043 = (($1042) + 12|0);
    $1044 = HEAP32[$1043>>2]|0;
    $1045 = (($1044) + 16|0);
    $1046 = HEAP32[$1045>>2]|0;
    $1047 = $2;
    _print_latex_node_tree($1041,$1046,$1047);
    $1048 = $0;
    _g_string_append_printf($1048,39600,$vararg_buffer186);
   } else {
    $1049 = $1;
    $1050 = (($1049) + 4|0);
    $1051 = HEAP32[$1050>>2]|0;
    $1052 = ($1051|0)!=(0|0);
    if ($1052) {
     $1053 = $0;
     $1054 = $1;
     $1055 = (($1054) + 4|0);
     $1056 = HEAP32[$1055>>2]|0;
     HEAP32[$vararg_buffer188>>2] = $1056;
     _g_string_append_printf($1053,40832,$vararg_buffer188);
    } else {
     $1057 = $0;
     $1058 = $temp;
     HEAP32[$vararg_buffer191>>2] = $1058;
     _g_string_append_printf($1057,39608,$vararg_buffer191);
    }
   }
   $1059 = $temp;
   _free($1059);
   STACKTOP = sp;return;
  }
 } while(0);
 $1061 = $1;
 $1062 = HEAP16[$1061>>1]|0;
 $1063 = $1062 << 16 >> 16;
 $1064 = ($1063|0)==(29);
 if ($1064) {
  $1065 = $0;
  _g_string_append_printf($1065,3880,$vararg_buffer194);
 }
 $1066 = $0;
 _g_string_append_printf($1066,3920,$vararg_buffer196);
 $1067 = $1;
 $1068 = (($1067) + 8|0);
 $1069 = HEAP32[$1068>>2]|0;
 $1070 = (($1069) + 12|0);
 $1071 = HEAP32[$1070>>2]|0;
 $1072 = ($1071|0)!=(0|0);
 if ($1072) {
  $1073 = $1;
  $1074 = (($1073) + 8|0);
  $1075 = HEAP32[$1074>>2]|0;
  $1076 = (($1075) + 12|0);
  $1077 = HEAP32[$1076>>2]|0;
  $1078 = (_node_for_attribute(13280,$1077)|0);
  $temp_node = $1078;
  $1079 = $temp_node;
  $1080 = ($1079|0)!=(0|0);
  if ($1080) {
   $1081 = $temp_node;
   $1082 = (($1081) + 12|0);
   $1083 = HEAP32[$1082>>2]|0;
   $1084 = (($1083) + 4|0);
   $1085 = HEAP32[$1084>>2]|0;
   $1086 = (_correct_dimension_units($1085)|0);
   $height = $1086;
  }
  $1087 = $1;
  $1088 = (($1087) + 8|0);
  $1089 = HEAP32[$1088>>2]|0;
  $1090 = (($1089) + 12|0);
  $1091 = HEAP32[$1090>>2]|0;
  $1092 = (_node_for_attribute(13288,$1091)|0);
  $temp_node = $1092;
  $1093 = $temp_node;
  $1094 = ($1093|0)!=(0|0);
  if ($1094) {
   $1095 = $temp_node;
   $1096 = (($1095) + 12|0);
   $1097 = HEAP32[$1096>>2]|0;
   $1098 = (($1097) + 4|0);
   $1099 = HEAP32[$1098>>2]|0;
   $1100 = (_correct_dimension_units($1099)|0);
   $width = $1100;
  }
 }
 $1101 = $height;
 $1102 = ($1101|0)==(0|0);
 if ($1102) {
  $1103 = $width;
  $1104 = ($1103|0)==(0|0);
  if ($1104) {
   $1105 = $0;
   _g_string_append_printf($1105,3944,$vararg_buffer198);
  } else {
   label = 230;
  }
 } else {
  label = 230;
 }
 if ((label|0) == 230) {
  $1106 = $height;
  $1107 = ($1106|0)!=(0|0);
  if ($1107) {
   $1108 = $width;
   $1109 = ($1108|0)!=(0|0);
   if (!($1109)) {
    label = 232;
   }
  } else {
   label = 232;
  }
  if ((label|0) == 232) {
   $1110 = $0;
   _g_string_append_printf($1110,4000,$vararg_buffer200);
  }
  $1111 = $width;
  $1112 = ($1111|0)!=(0|0);
  if ($1112) {
   $1113 = $width;
   $1114 = (_strlen(($1113|0))|0);
   $1115 = (($1114) - 1)|0;
   $1116 = $width;
   $1117 = (($1116) + ($1115)|0);
   $1118 = HEAP8[$1117>>0]|0;
   $1119 = $1118 << 24 >> 24;
   $1120 = ($1119|0)==(37);
   if ($1120) {
    $1121 = $width;
    $1122 = (_strlen(($1121|0))|0);
    $1123 = (($1122) - 1)|0;
    $1124 = $width;
    $1125 = (($1124) + ($1123)|0);
    HEAP8[$1125>>0] = 0;
    $1126 = $width;
    $1127 = (+_strtod($1126,0));
    $temp_float = $1127;
    $1128 = $temp_float;
    $1129 = $1128 / 100.0;
    $temp_float = $1129;
    $1130 = $0;
    $1131 = $temp_float;
    HEAPF64[tempDoublePtr>>3]=$1131;HEAP32[$vararg_buffer202>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer202+4>>2]=HEAP32[tempDoublePtr+4>>2];
    _g_string_append_printf($1130,4024,$vararg_buffer202);
   } else {
    $1132 = $0;
    $1133 = $width;
    HEAP32[$vararg_buffer205>>2] = $1133;
    _g_string_append_printf($1132,4048,$vararg_buffer205);
   }
  } else {
   $1134 = $0;
   _g_string_append_printf($1134,4064,$vararg_buffer208);
  }
  $1135 = $height;
  $1136 = ($1135|0)!=(0|0);
  if ($1136) {
   $1137 = $height;
   $1138 = (_strlen(($1137|0))|0);
   $1139 = (($1138) - 1)|0;
   $1140 = $height;
   $1141 = (($1140) + ($1139)|0);
   $1142 = HEAP8[$1141>>0]|0;
   $1143 = $1142 << 24 >> 24;
   $1144 = ($1143|0)==(37);
   if ($1144) {
    $1145 = $height;
    $1146 = (_strlen(($1145|0))|0);
    $1147 = (($1146) - 1)|0;
    $1148 = $height;
    $1149 = (($1148) + ($1147)|0);
    HEAP8[$1149>>0] = 0;
    $1150 = $height;
    $1151 = (+_strtod($1150,0));
    $temp_float = $1151;
    $1152 = $temp_float;
    $1153 = $1152 / 100.0;
    $temp_float = $1153;
    $1154 = $0;
    $1155 = $temp_float;
    HEAPF64[tempDoublePtr>>3]=$1155;HEAP32[$vararg_buffer210>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer210+4>>2]=HEAP32[tempDoublePtr+4>>2];
    _g_string_append_printf($1154,4088,$vararg_buffer210);
   } else {
    $1156 = $0;
    $1157 = $height;
    HEAP32[$vararg_buffer213>>2] = $1157;
    _g_string_append_printf($1156,4112,$vararg_buffer213);
   }
  } else {
   $1158 = $0;
   _g_string_append_printf($1158,4128,$vararg_buffer216);
  }
 }
 $1159 = $0;
 $1160 = $1;
 $1161 = (($1160) + 8|0);
 $1162 = HEAP32[$1161>>2]|0;
 $1163 = (($1162) + 4|0);
 $1164 = HEAP32[$1163>>2]|0;
 HEAP32[$vararg_buffer218>>2] = $1164;
 _g_string_append_printf($1159,4152,$vararg_buffer218);
 $1165 = $1;
 $1166 = HEAP16[$1165>>1]|0;
 $1167 = $1166 << 16 >> 16;
 $1168 = ($1167|0)==(29);
 if ($1168) {
  $1169 = $1;
  $1170 = (($1169) + 12|0);
  $1171 = HEAP32[$1170>>2]|0;
  $1172 = ($1171|0)!=(0|0);
  if ($1172) {
   $1173 = (_g_string_new(41432)|0);
   $temp_str = $1173;
   $1174 = $temp_str;
   $1175 = $1;
   $1176 = (($1175) + 12|0);
   $1177 = HEAP32[$1176>>2]|0;
   $1178 = $2;
   _print_latex_node_tree($1174,$1177,$1178);
   $1179 = $temp_str;
   $1180 = (($1179) + 8|0);
   $1181 = HEAP32[$1180>>2]|0;
   $1182 = ($1181>>>0)>(0);
   if ($1182) {
    $1183 = $0;
    _g_string_append_printf($1183,4160,$vararg_buffer221);
    $1184 = $0;
    $1185 = $temp_str;
    $1186 = HEAP32[$1185>>2]|0;
    _g_string_append($1184,$1186);
    $1187 = $0;
    _g_string_append_printf($1187,39560,$vararg_buffer223);
   }
   $1188 = $temp_str;
   (_g_string_free($1188,1)|0);
  }
  $1189 = $1;
  $1190 = (($1189) + 8|0);
  $1191 = HEAP32[$1190>>2]|0;
  $1192 = HEAP32[$1191>>2]|0;
  $1193 = ($1192|0)!=(0|0);
  if ($1193) {
   $1194 = $1;
   $1195 = (($1194) + 8|0);
   $1196 = HEAP32[$1195>>2]|0;
   $1197 = HEAP32[$1196>>2]|0;
   $1198 = (_label_from_string($1197)|0);
   $temp = $1198;
   $1199 = $0;
   $1200 = $temp;
   HEAP32[$vararg_buffer225>>2] = $1200;
   _g_string_append_printf($1199,4176,$vararg_buffer225);
   $1201 = $temp;
   _free($1201);
  }
  $1202 = $0;
  _g_string_append_printf($1202,4192,$vararg_buffer228);
  $1203 = $2;
  $1204 = (($1203) + 4|0);
  HEAP32[$1204>>2] = 0;
 }
 $1205 = $height;
 _free($1205);
 $1206 = $width;
 _free($1206);
 $1207 = $1;
 $1208 = (($1207) + 8|0);
 $1209 = HEAP32[$1208>>2]|0;
 $1210 = (($1209) + 12|0);
 HEAP32[$1210>>2] = 0;
 STACKTOP = sp;return;
}
function _print_latex_string($out,$str,$scratch) {
 $out = $out|0;
 $str = $str|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $start = 0, $tmp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0;
 var $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer23 = sp + 96|0;
 $vararg_buffer21 = sp + 88|0;
 $vararg_buffer19 = sp + 80|0;
 $vararg_buffer17 = sp + 72|0;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $str;
 $2 = $scratch;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $1;
 $start = $5;
 while(1) {
  $6 = $1;
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = ($8|0)!=(0);
  if (!($9)) {
   break;
  }
  $10 = $1;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  do {
   switch ($12|0) {
   case 62:  {
    $22 = $0;
    _g_string_append_printf($22,5024,$vararg_buffer11);
    break;
   }
   case 124:  {
    $20 = $0;
    _g_string_append_printf($20,5000,$vararg_buffer7);
    break;
   }
   case 60:  {
    $21 = $0;
    _g_string_append_printf($21,5016,$vararg_buffer9);
    break;
   }
   case 45:  {
    $54 = $1;
    $55 = (($54) + 1|0);
    $1 = $55;
    $56 = $1;
    $57 = HEAP8[$56>>0]|0;
    $58 = $57 << 24 >> 24;
    $59 = ($58|0)==(45);
    if ($59) {
     $60 = $0;
     _g_string_append_printf($60,5048,$vararg_buffer23);
     $61 = $1;
     $62 = (($61) + -1|0);
     $1 = $62;
    } else {
     $63 = $1;
     $64 = (($63) + -1|0);
     $1 = $64;
     $65 = $0;
     $66 = $1;
     $67 = HEAP8[$66>>0]|0;
     _g_string_append_c($65,$67);
    }
    break;
   }
   case 94:  {
    $17 = $0;
    _g_string_append_printf($17,4944,$vararg_buffer1);
    break;
   }
   case 47:  {
    $23 = $1;
    $24 = (($23) + 1|0);
    $1 = $24;
    while(1) {
     $25 = $1;
     $26 = HEAP8[$25>>0]|0;
     $27 = $26 << 24 >> 24;
     $28 = ($27|0)==(47);
     if (!($28)) {
      break;
     }
     $29 = $0;
     _g_string_append_printf($29,5032,$vararg_buffer13);
     $30 = $1;
     $31 = (($30) + 1|0);
     $1 = $31;
    }
    $32 = $0;
    _g_string_append_printf($32,5040,$vararg_buffer15);
    $33 = $1;
    $34 = (($33) + -1|0);
    $1 = $34;
    break;
   }
   case 35: case 95: case 38: case 37: case 36: case 125: case 123:  {
    $13 = $0;
    $14 = $1;
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    HEAP32[$vararg_buffer>>2] = $16;
    _g_string_append_printf($13,4936,$vararg_buffer);
    break;
   }
   case 126:  {
    $19 = $0;
    _g_string_append_printf($19,4976,$vararg_buffer5);
    break;
   }
   case 10:  {
    $35 = $1;
    $tmp = $35;
    $36 = $tmp;
    $37 = (($36) + -1|0);
    $tmp = $37;
    $38 = $tmp;
    $39 = $start;
    $40 = ($38>>>0)>($39>>>0);
    if ($40) {
     $41 = $tmp;
     $42 = HEAP8[$41>>0]|0;
     $43 = $42 << 24 >> 24;
     $44 = ($43|0)==(32);
     if ($44) {
      $45 = $tmp;
      $46 = (($45) + -1|0);
      $tmp = $46;
      $47 = $tmp;
      $48 = HEAP8[$47>>0]|0;
      $49 = $48 << 24 >> 24;
      $50 = ($49|0)==(32);
      if ($50) {
       $51 = $0;
       _g_string_append_printf($51,3736,$vararg_buffer17);
      } else {
       $52 = $0;
       _g_string_append_printf($52,42896,$vararg_buffer19);
      }
     } else {
      label = 23;
     }
    } else {
     label = 23;
    }
    if ((label|0) == 23) {
     label = 0;
     $53 = $0;
     _g_string_append_printf($53,42896,$vararg_buffer21);
    }
    break;
   }
   case 92:  {
    $18 = $0;
    _g_string_append_printf($18,4952,$vararg_buffer3);
    break;
   }
   default: {
    $68 = $0;
    $69 = $1;
    $70 = HEAP8[$69>>0]|0;
    _g_string_append_c($68,$70);
   }
   }
  } while(0);
  $71 = $1;
  $72 = (($71) + 1|0);
  $1 = $72;
 }
 STACKTOP = sp;return;
}
function _is_latex_complete_doc($meta) {
 $meta = $meta|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $step = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = $meta;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $step = $4;
 while(1) {
  $5 = $step;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   break;
  }
  $7 = $step;
  $8 = (($7) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $temp = $9;
  $10 = $step;
  $11 = (($10) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_label_from_string($12)|0);
  $14 = $step;
  $15 = (($14) + 4|0);
  HEAP32[$15>>2] = $13;
  $16 = $temp;
  _free($16);
  $17 = $step;
  $18 = (($17) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  $step = $19;
 }
 $20 = $1;
 $21 = (($20) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $step = $22;
 while(1) {
  $23 = $step;
  $24 = ($23|0)!=(0|0);
  if (!($24)) {
   label = 16;
   break;
  }
  $25 = $step;
  $26 = (($25) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (_strcmp($27,38600)|0);
  $29 = ($28|0)!=(0);
  if ($29) {
   $30 = $step;
   $31 = (($30) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (_strcmp($32,4896)|0);
   $34 = ($33|0)!=(0);
   if ($34) {
    $35 = $step;
    $36 = (($35) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (_strcmp($37,12632)|0);
    $39 = ($38|0)!=(0);
    if ($39) {
     $40 = $step;
     $41 = (($40) + 4|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = (_strcmp($42,3352)|0);
     $44 = ($43|0)!=(0);
     if ($44) {
      $45 = $step;
      $46 = (($45) + 4|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = (_strcmp($47,12616)|0);
      $49 = ($48|0)!=(0);
      if ($49) {
       $50 = $step;
       $51 = (($50) + 4|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = (_strcmp($52,12552)|0);
       $54 = ($53|0)!=(0);
       if ($54) {
        $55 = $step;
        $56 = (($55) + 4|0);
        $57 = HEAP32[$56>>2]|0;
        $58 = (_strcmp($57,12568)|0);
        $59 = ($58|0)!=(0);
        if ($59) {
         $60 = $step;
         $61 = (($60) + 4|0);
         $62 = HEAP32[$61>>2]|0;
         $63 = (_strcmp($62,38632)|0);
         $64 = ($63|0)!=(0);
         if ($64) {
          label = 14;
          break;
         }
        }
       }
      }
     }
    }
   }
  }
  $65 = $step;
  $66 = (($65) + 16|0);
  $67 = HEAP32[$66>>2]|0;
  $step = $67;
 }
 if ((label|0) == 14) {
  $$expand_i1_val = 1;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $68 = $$pre_trunc&1;
  STACKTOP = sp;return ($68|0);
 }
 else if ((label|0) == 16) {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $68 = $$pre_trunc&1;
  STACKTOP = sp;return ($68|0);
 }
 return (0)|0;
}
function _print_latex_endnotes($out,$scratch) {
 $out = $out|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $note = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $scratch;
 $2 = $1;
 $3 = (($2) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_reverse_list($4)|0);
 $6 = $1;
 $7 = (($6) + 48|0);
 HEAP32[$7>>2] = $5;
 $8 = $1;
 $9 = (($8) + 25|0);
 HEAP8[$9>>0] = 1;
 $10 = $1;
 $11 = (($10) + 48|0);
 $12 = HEAP32[$11>>2]|0;
 $note = $12;
 $13 = $note;
 $14 = ($13|0)==(0|0);
 do {
  if (!($14)) {
   $15 = $note;
   $16 = HEAP16[$15>>1]|0;
   $17 = $16 << 16 >> 16;
   $18 = ($17|0)==(87);
   if ($18) {
    $19 = $note;
    $20 = (($19) + 16|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==(0|0);
    if ($22) {
     break;
    }
   }
   while(1) {
    $23 = $note;
    $24 = ($23|0)!=(0|0);
    if (!($24)) {
     break;
    }
    $25 = $note;
    $26 = HEAP16[$25>>1]|0;
    $27 = $26 << 16 >> 16;
    $28 = ($27|0)==(63);
    if ($28) {
     label = 8;
     break;
    }
    $29 = $note;
    $30 = (($29) + 16|0);
    $31 = HEAP32[$30>>2]|0;
    $note = $31;
   }
   if ((label|0) == 8) {
   }
   $32 = $note;
   $33 = ($32|0)==(0|0);
   if ($33) {
    STACKTOP = sp;return;
   }
   $34 = $1;
   $35 = (($34) + 48|0);
   $36 = HEAP32[$35>>2]|0;
   $note = $36;
   $37 = $0;
   $38 = $1;
   _pad($37,2,$38);
   $39 = $0;
   _g_string_append_printf($39,4824,$vararg_buffer);
   while(1) {
    $40 = $note;
    $41 = ($40|0)!=(0|0);
    if (!($41)) {
     break;
    }
    $42 = $note;
    $43 = HEAP16[$42>>1]|0;
    $44 = $43 << 16 >> 16;
    $45 = ($44|0)==(87);
    if ($45) {
     $46 = $note;
     $47 = (($46) + 16|0);
     $48 = HEAP32[$47>>2]|0;
     $note = $48;
     continue;
    }
    $49 = $0;
    $50 = $1;
    _pad($49,1,$50);
    $51 = $note;
    $52 = HEAP16[$51>>1]|0;
    $53 = $52 << 16 >> 16;
    $54 = ($53|0)==(63);
    if ($54) {
     $55 = $0;
     $56 = $note;
     $57 = (($56) + 4|0);
     $58 = HEAP32[$57>>2]|0;
     HEAP32[$vararg_buffer1>>2] = $58;
     _g_string_append_printf($55,4856,$vararg_buffer1);
     $59 = $1;
     $60 = (($59) + 4|0);
     HEAP32[$60>>2] = 2;
     $61 = $0;
     $62 = $note;
     $63 = $1;
     _print_latex_node($61,$62,$63);
     $64 = $0;
     $65 = $1;
     _pad($64,1,$65);
     $66 = $1;
     $67 = (($66) + 4|0);
     HEAP32[$67>>2] = 1;
    } else {
    }
    $68 = $note;
    $69 = (($68) + 16|0);
    $70 = HEAP32[$69>>2]|0;
    $note = $70;
   }
   $71 = $0;
   $72 = $1;
   _pad($71,2,$72);
   $73 = $0;
   _g_string_append_printf($73,4872,$vararg_buffer3);
   $74 = $1;
   $75 = (($74) + 4|0);
   HEAP32[$75>>2] = 0;
   STACKTOP = sp;return;
  }
 } while(0);
 STACKTOP = sp;return;
}
function _print_latex_localized_typography($out,$character,$scratch) {
 $out = $out|0;
 $character = $character|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0;
 var $vararg_buffer37 = 0, $vararg_buffer39 = 0, $vararg_buffer41 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer41 = sp + 168|0;
 $vararg_buffer39 = sp + 160|0;
 $vararg_buffer37 = sp + 152|0;
 $vararg_buffer35 = sp + 144|0;
 $vararg_buffer33 = sp + 136|0;
 $vararg_buffer31 = sp + 128|0;
 $vararg_buffer29 = sp + 120|0;
 $vararg_buffer27 = sp + 112|0;
 $vararg_buffer25 = sp + 104|0;
 $vararg_buffer23 = sp + 96|0;
 $vararg_buffer21 = sp + 88|0;
 $vararg_buffer19 = sp + 80|0;
 $vararg_buffer17 = sp + 72|0;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $character;
 $2 = $scratch;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (_extension(16,$4)|0);
 if (!($5)) {
  $6 = $0;
  $7 = $1;
  $8 = $7&255;
  _g_string_append_c($6,$8);
  STACKTOP = sp;return;
 }
 $9 = $1;
 switch ($9|0) {
 case 1:  {
  $18 = $2;
  $19 = (($18) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  if ((($20|0) == 3)) {
   $21 = $0;
   _g_string_append_printf($21,11136,$vararg_buffer9);
  } else if ((($20|0) == 4)) {
   $22 = $0;
   _g_string_append_printf($22,11144,$vararg_buffer11);
  } else {
   $23 = $0;
   _g_string_append_printf($23,9552,$vararg_buffer13);
  }
  STACKTOP = sp;return;
  break;
 }
 case 0:  {
  $10 = $2;
  $11 = (($10) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  if ((($12|0) == 5)) {
   $13 = $0;
   _g_string_append_printf($13,9552,$vararg_buffer);
  } else if ((($12|0) == 2)) {
   $14 = $0;
   _g_string_append_printf($14,9552,$vararg_buffer1);
  } else if ((($12|0) == 3)) {
   $15 = $0;
   _g_string_append_printf($15,11080,$vararg_buffer3);
  } else if ((($12|0) == 4)) {
   $16 = $0;
   _g_string_append_printf($16,11088,$vararg_buffer5);
  } else {
   $17 = $0;
   _g_string_append_printf($17,11136,$vararg_buffer7);
  }
  STACKTOP = sp;return;
  break;
 }
 case 7:  {
  $24 = $0;
  _g_string_append_printf($24,9552,$vararg_buffer15);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $25 = $2;
  $26 = (($25) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  switch ($27|0) {
  case 4:  {
   $29 = $0;
   _g_string_append_printf($29,11200,$vararg_buffer19);
   break;
  }
  case 2:  {
   $30 = $0;
   _g_string_append_printf($30,11208,$vararg_buffer21);
   break;
  }
  case 5:  {
   $31 = $0;
   _g_string_append_printf($31,43072,$vararg_buffer23);
   break;
  }
  case 3: case 1:  {
   $28 = $0;
   _g_string_append_printf($28,11192,$vararg_buffer17);
   break;
  }
  default: {
   $32 = $0;
   _g_string_append_printf($32,43080,$vararg_buffer25);
  }
  }
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $41 = $0;
  _g_string_append_printf($41,44224,$vararg_buffer37);
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $33 = $2;
  $34 = (($33) + 12|0);
  $35 = HEAP32[$34>>2]|0;
  switch ($35|0) {
  case 4:  {
   $38 = $0;
   _g_string_append_printf($38,11208,$vararg_buffer31);
   break;
  }
  case 3:  {
   $37 = $0;
   _g_string_append_printf($37,43080,$vararg_buffer29);
   break;
  }
  case 1: case 5:  {
   $36 = $0;
   _g_string_append_printf($36,43072,$vararg_buffer27);
   break;
  }
  case 2:  {
   $39 = $0;
   _g_string_append_printf($39,11200,$vararg_buffer33);
   break;
  }
  default: {
   $40 = $0;
   _g_string_append_printf($40,43072,$vararg_buffer35);
  }
  }
  STACKTOP = sp;return;
  break;
 }
 case 6:  {
  $43 = $0;
  _g_string_append_printf($43,4920,$vararg_buffer41);
  STACKTOP = sp;return;
  break;
 }
 case 5:  {
  $42 = $0;
  _g_string_append_printf($42,42760,$vararg_buffer39);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _print_latex_url($out,$str,$scratch) {
 $out = $out|0;
 $str = $str|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $str;
 $2 = $scratch;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 while(1) {
  $5 = $1;
  $6 = HEAP8[$5>>0]|0;
  $7 = $6 << 24 >> 24;
  $8 = ($7|0)!=(0);
  if (!($8)) {
   break;
  }
  $9 = $1;
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  switch ($11|0) {
  case 94:  {
   $16 = $0;
   _g_string_append_printf($16,4944,$vararg_buffer1);
   break;
  }
  case 35: case 95: case 38: case 33: case 37: case 36:  {
   $12 = $0;
   $13 = $1;
   $14 = HEAP8[$13>>0]|0;
   $15 = $14 << 24 >> 24;
   HEAP32[$vararg_buffer>>2] = $15;
   _g_string_append_printf($12,4936,$vararg_buffer);
   break;
  }
  default: {
   $17 = $0;
   $18 = $1;
   $19 = HEAP8[$18>>0]|0;
   _g_string_append_c($17,$19);
  }
  }
  $20 = $1;
  $21 = (($20) + 1|0);
  $1 = $21;
 }
 STACKTOP = sp;return;
}
function _correct_dimension_units($original) {
 $original = $original|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $original;
 $1 = $0;
 $2 = (___strdup($1)|0);
 $result = $2;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = $result;
  $5 = (($4) + ($3)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)!=(0);
  if (!($7)) {
   break;
  }
  $8 = $i;
  $9 = $result;
  $10 = (($9) + ($8)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = (_tolower($12)|0);
  $14 = $13&255;
  $15 = $i;
  $16 = $result;
  $17 = (($16) + ($15)|0);
  HEAP8[$17>>0] = $14;
  $18 = $i;
  $19 = (($18) + 1)|0;
  $i = $19;
 }
 $20 = $result;
 $21 = (_strlen(($20|0))|0);
 $22 = (($21) - 2)|0;
 $23 = $result;
 $24 = (($23) + ($22)|0);
 $25 = (_strstr($24,5056)|0);
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  $33 = $result;
  STACKTOP = sp;return ($33|0);
 }
 $27 = $result;
 $28 = (_strlen(($27|0))|0);
 $29 = (($28) - 2)|0;
 $30 = $result;
 $31 = (($30) + ($29)|0);
 HEAP8[$31>>0] = 0;
 $32 = $result;
 (_strcat(($32|0),(5064|0))|0);
 $33 = $result;
 STACKTOP = sp;return ($33|0);
}
function _print_lyxbeamer_node_tree($out,$list,$scratch,$no_newline) {
 $out = $out|0;
 $list = $list|0;
 $scratch = $scratch|0;
 $no_newline = $no_newline|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $list;
 $2 = $scratch;
 $4 = $no_newline&1;
 $3 = $4;
 while(1) {
  $5 = $1;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   break;
  }
  $7 = $0;
  $8 = $1;
  $9 = $2;
  $10 = $3;
  $11 = $10&1;
  _print_lyxbeamer_node($7,$8,$9,$11);
  $12 = $1;
  $13 = (($12) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $1 = $14;
 }
 STACKTOP = sp;return;
}
function _print_lyxbeamer_node($out,$n,$scratch,$no_newline) {
 $out = $out|0;
 $n = $n|0;
 $scratch = $scratch|0;
 $no_newline = $no_newline|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0;
 var $lev = 0, $old_type = 0, $prefixed_label = 0, $temp = 0, $temp_node = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $n;
 $2 = $scratch;
 $4 = $no_newline&1;
 $3 = $4;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 2;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = $10 & 8;
  $12 = ($11|0)!=(0);
  if (!($12)) {
   $13 = $1;
   $14 = HEAP16[$13>>1]|0;
   $15 = $14 << 16 >> 16;
   $16 = ($15|0)==(4);
   if (!($16)) {
    $17 = $1;
    $18 = HEAP16[$17>>1]|0;
    $19 = $18 << 16 >> 16;
    $20 = ($19|0)==(17);
    if (!($20)) {
     $21 = $2;
     $22 = HEAP32[$21>>2]|0;
     $23 = $22 | 8;
     $24 = $2;
     HEAP32[$24>>2] = $23;
    }
   }
  }
 }
 $25 = $1;
 $26 = HEAP16[$25>>1]|0;
 $27 = $26 << 16 >> 16;
 switch ($27|0) {
 case 9:  {
  $119 = $2;
  $120 = (($119) + 113|0);
  $121 = HEAP8[$120>>0]|0;
  $122 = $121&1;
  if ($122) {
   $123 = $0;
   _g_string_append($123,5072);
   $124 = $0;
   _g_string_append($124,5088);
   $125 = $0;
   _g_string_append($125,5120);
  }
  $126 = $2;
  $127 = (($126) + 113|0);
  HEAP8[$127>>0] = 0;
  HEAP8[5168>>0] = 0;
  $128 = $1;
  $129 = (($128) + 12|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (_tree_contains_key($130,41)|0);
  if ($131) {
   HEAP8[5168>>0] = 1;
  }
  $132 = $0;
  $133 = $1;
  $134 = (($133) + 12|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = $2;
  _print_lyxbeamer_node_tree($132,$135,$136,0);
  STACKTOP = sp;return;
  break;
 }
 case 15: case 14: case 13: case 12: case 11: case 10:  {
  $137 = $1;
  $138 = HEAP16[$137>>1]|0;
  $139 = $138 << 16 >> 16;
  $140 = (($139) - 10)|0;
  $141 = $2;
  $142 = (($141) + 8|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = (($140) + ($143))|0;
  $lev = $144;
  $145 = $lev;
  if ((($145|0) == 2)) {
   $147 = $0;
   _g_string_append($147,5200);
  } else if ((($145|0) == 1)) {
   $146 = $0;
   _g_string_append($146,5176);
  } else if ((($145|0) == 4)) {
   $157 = $0;
   _g_string_append($157,8824);
   $158 = $0;
   _g_string_append($158,5312);
   $159 = $0;
   _g_string_append($159,5344);
   $160 = $0;
   _g_string_append($160,10200);
  } else if ((($145|0) == 3)) {
   $148 = HEAP8[5168>>0]|0;
   $149 = $148&1;
   if ($149) {
    $150 = $0;
    _g_string_append($150,5224);
   } else {
    $151 = $0;
    _g_string_append($151,5256);
   }
   $152 = $0;
   _g_string_append($152,5280);
   $153 = $0;
   _g_string_append($153,7336);
   $154 = $0;
   _g_string_append($154,10200);
   $155 = $2;
   $156 = (($155) + 113|0);
   HEAP8[$156>>0] = 1;
  } else {
   $161 = $0;
   _g_string_append($161,8824);
   $162 = $0;
   _g_string_append($162,8368);
  }
  $163 = $2;
  $164 = (($163) + 108|0);
  HEAP8[$164>>0] = 1;
  $165 = $1;
  $166 = (($165) + 12|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = HEAP16[$167>>1]|0;
  $169 = $168 << 16 >> 16;
  $170 = ($169|0)==(27);
  if ($170) {
   $171 = $1;
   $172 = (($171) + 12|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = (($173) + 4|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = (_label_from_string($175)|0);
   $temp = $176;
   $177 = $lev;
   $178 = (($177) - 1)|0;
   $179 = (5472 + ($178<<2)|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = HEAP32[$180>>2]|0;
   $182 = $temp;
   $183 = (_prefix_label($181,$182,0)|0);
   $prefixed_label = $183;
   $184 = $0;
   $185 = $1;
   $186 = (($185) + 12|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = (($187) + 16|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = $2;
   _print_lyx_node_tree($184,$189,$190,0);
   $191 = $0;
   _g_string_append($191,8056);
   $192 = $0;
   _g_string_append($192,8096);
   $193 = $0;
   $194 = $prefixed_label;
   HEAP32[$vararg_buffer1>>2] = $194;
   _g_string_append_printf($193,8120,$vararg_buffer1);
   $195 = $0;
   _g_string_append($195,7176);
   $196 = $prefixed_label;
   _free($196);
   $197 = $temp;
   _free($197);
  } else {
   $198 = $1;
   $199 = (($198) + 12|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = (_label_from_node_tree($200)|0);
   $temp = $201;
   $202 = $lev;
   $203 = (($202) - 1)|0;
   $204 = (5472 + ($203<<2)|0);
   $205 = HEAP32[$204>>2]|0;
   $206 = HEAP32[$205>>2]|0;
   $207 = $temp;
   $208 = (_prefix_label($206,$207,0)|0);
   $prefixed_label = $208;
   $209 = $0;
   $210 = $1;
   $211 = (($210) + 12|0);
   $212 = HEAP32[$211>>2]|0;
   $213 = $2;
   _print_lyx_node_tree($209,$212,$213,0);
   $214 = $0;
   _g_string_append($214,8056);
   $215 = $0;
   _g_string_append($215,8096);
   $216 = $0;
   $217 = $prefixed_label;
   HEAP32[$vararg_buffer3>>2] = $217;
   _g_string_append_printf($216,8120,$vararg_buffer3);
   $218 = $0;
   _g_string_append($218,7176);
   $219 = $prefixed_label;
   _free($219);
   $220 = $temp;
   _free($220);
  }
  $221 = $2;
  $222 = (($221) + 108|0);
  HEAP8[$222>>0] = 0;
  $223 = $lev;
  if ((($223|0) == 3)) {
   $225 = $0;
   _g_string_append($225,6656);
   $226 = $0;
   _g_string_append($226,7176);
   $227 = $0;
   _g_string_append($227,6656);
   $228 = $0;
   _g_string_append($228,7752);
  } else if ((($223|0) == 4)) {
   $229 = $0;
   _g_string_append($229,5120);
   $230 = $0;
   _g_string_append($230,7480);
   $231 = $0;
   _g_string_append($231,5120);
  } else if ((($223|0) == 2) | (($223|0) == 1)) {
   $224 = $0;
   _g_string_append($224,6656);
  } else {
   $232 = $0;
   _g_string_append($232,8384);
   $233 = $0;
   _g_string_append($233,5120);
  }
  STACKTOP = sp;return;
  break;
 }
 case 50:  {
  $82 = $1;
  $83 = (($82) + 12|0);
  $84 = HEAP32[$83>>2]|0;
  $temp_node = $84;
  $85 = $temp_node;
  $86 = HEAP16[$85>>1]|0;
  $87 = $86 << 16 >> 16;
  $88 = ($87|0)!=(1);
  if ($88) {
   $89 = HEAP32[_stderr>>2]|0;
   (_fprintf(($89|0),(5136|0),($vararg_buffer|0))|0);
   _exit(1);
   // unreachable;
  }
  $90 = $temp_node;
  $91 = (($90) + 12|0);
  $92 = HEAP32[$91>>2]|0;
  $temp_node = $92;
  $i = 0;
  while(1) {
   $93 = $temp_node;
   $94 = ($93|0)!=(0|0);
   if (!($94)) {
    break;
   }
   $95 = $i;
   $96 = (($95) + 1)|0;
   $i = $96;
   $97 = $i;
   $98 = ($97|0)==(2);
   if ($98) {
    $99 = $0;
    _g_string_append($99,7752);
    $100 = $2;
    $101 = (($100) + 100|0);
    $102 = HEAP32[$101>>2]|0;
    $old_type = $102;
    $103 = $2;
    $104 = (($103) + 100|0);
    HEAP32[$104>>2] = 5;
   }
   $105 = $0;
   $106 = $temp_node;
   $107 = $2;
   $108 = $3;
   $109 = $108&1;
   _print_lyx_node($105,$106,$107,$109);
   $110 = $temp_node;
   $111 = (($110) + 16|0);
   $112 = HEAP32[$111>>2]|0;
   $temp_node = $112;
  }
  $113 = $i;
  $114 = ($113|0)>(1);
  if ($114) {
   $115 = $old_type;
   $116 = $2;
   $117 = (($116) + 100|0);
   HEAP32[$117>>2] = $115;
   $118 = $0;
   _g_string_append($118,7232);
  }
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $28 = $2;
  $29 = (($28) + 113|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&1;
  if ($31) {
   $32 = $0;
   _g_string_append($32,5072);
   $33 = $0;
   _g_string_append($33,5088);
   $34 = $0;
   _g_string_append($34,5120);
  }
  $35 = $2;
  $36 = (($35) + 113|0);
  HEAP8[$36>>0] = 0;
  $37 = $0;
  $38 = $2;
  _print_lyxbeamer_endnotes($37,$38);
  STACKTOP = sp;return;
  break;
 }
 case 44:  {
  break;
 }
 case 48: case 49:  {
  $39 = $2;
  $40 = (($39) + 114|0);
  HEAP8[$40>>0] = 1;
  break;
 }
 default: {
  $234 = $0;
  $235 = $1;
  $236 = $2;
  $237 = $3;
  $238 = $237&1;
  _print_lyx_node($234,$235,$236,$238);
  STACKTOP = sp;return;
 }
 }
 $41 = $2;
 $42 = (($41) + 100|0);
 $43 = HEAP32[$42>>2]|0;
 $old_type = $43;
 $44 = $1;
 $45 = HEAP16[$44>>1]|0;
 $46 = $45 << 16 >> 16;
 $47 = $2;
 $48 = (($47) + 100|0);
 HEAP32[$48>>2] = $46;
 $49 = $2;
 $50 = (($49) + 104|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($51) + 1)|0;
 HEAP32[$50>>2] = $52;
 $53 = $2;
 $54 = (($53) + 104|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)>(1);
 if ($56) {
  $57 = $0;
  _g_string_append($57,7752);
 }
 $58 = $0;
 $59 = $1;
 $60 = (($59) + 12|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $2;
 _print_lyxbeamer_node_tree($58,$61,$62,0);
 $63 = $2;
 $64 = (($63) + 104|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($65) + -1)|0;
 HEAP32[$64>>2] = $66;
 $67 = $2;
 $68 = (($67) + 104|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ($69|0)>(0);
 if ($70) {
  $71 = $0;
  _g_string_append($71,7232);
 }
 $72 = $old_type;
 $73 = $2;
 $74 = (($73) + 100|0);
 HEAP32[$74>>2] = $72;
 $75 = $2;
 $76 = (($75) + 111|0);
 $77 = HEAP8[$76>>0]|0;
 $78 = $77&1;
 if ($78) {
  $79 = $0;
  _g_string_append($79,7232);
  $80 = $2;
  $81 = (($80) + 111|0);
  HEAP8[$81>>0] = 0;
 }
 STACKTOP = sp;return;
}
function _print_lyxbeamer_endnotes($out,$scratch) {
 $out = $out|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $note = 0, $temp_node = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $scratch;
 $2 = $1;
 $3 = (($2) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_reverse_list($4)|0);
 $6 = $1;
 $7 = (($6) + 48|0);
 HEAP32[$7>>2] = $5;
 $8 = $1;
 $9 = (($8) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 $note = $10;
 $11 = $note;
 $temp_node = $11;
 while(1) {
  $12 = $temp_node;
  $13 = ($12|0)!=(0|0);
  if (!($13)) {
   break;
  }
  $14 = $temp_node;
  $15 = HEAP16[$14>>1]|0;
  $16 = $15 << 16 >> 16;
  $17 = ($16|0)==(69);
  if ($17) {
   label = 4;
   break;
  }
  $28 = $temp_node;
  $29 = (($28) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $temp_node = $30;
 }
 if ((label|0) == 4) {
  $18 = $0;
  _g_string_append($18,5360);
  $19 = $0;
  _g_string_append($19,8824);
  $20 = $0;
  _g_string_append($20,10848);
  $21 = $0;
  _g_string_append($21,10896);
  $22 = $0;
  _g_string_append($22,10928);
  $23 = $0;
  _g_string_append($23,7176);
  $24 = $0;
  _g_string_append($24,6656);
  $25 = $0;
  _g_string_append($25,6656);
  $26 = $0;
  _g_string_append($26,5400);
  $27 = $0;
  _g_string_append($27,5120);
 }
 $31 = $note;
 $32 = ($31|0)==(0|0);
 if ($32) {
  STACKTOP = sp;return;
 }
 $33 = $1;
 $34 = (($33) + 48|0);
 $35 = HEAP32[$34>>2]|0;
 $note = $35;
 $36 = $note;
 $37 = (_tree_contains_key($36,63)|0);
 if ($37) {
  $38 = $0;
  _g_string_append($38,5424);
  $39 = $0;
  _g_string_append($39,5120);
 }
 while(1) {
  $40 = $note;
  $41 = ($40|0)!=(0|0);
  if (!($41)) {
   break;
  }
  $42 = $note;
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 << 16 >> 16;
  $45 = ($44|0)==(87);
  if ($45) {
   $46 = $note;
   $47 = (($46) + 16|0);
   $48 = HEAP32[$47>>2]|0;
   $note = $48;
   continue;
  }
  $49 = $note;
  $50 = HEAP16[$49>>1]|0;
  $51 = $50 << 16 >> 16;
  $52 = ($51|0)==(63);
  if ($52) {
   $53 = $0;
   _g_string_append($53,10952);
   $54 = $0;
   _g_string_append($54,10984);
   $55 = $0;
   _g_string_append($55,11024);
   $56 = $0;
   $57 = $note;
   $58 = (($57) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   HEAP32[$vararg_buffer>>2] = $59;
   _g_string_append_printf($56,11048,$vararg_buffer);
   $60 = $0;
   $61 = $note;
   $62 = (($61) + 4|0);
   $63 = HEAP32[$62>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $63;
   _g_string_append_printf($60,11064,$vararg_buffer1);
   $64 = $0;
   _g_string_append($64,7176);
   $65 = $0;
   $66 = $note;
   $67 = $1;
   _print_lyx_node($65,$66,$67,0);
   $68 = $0;
   _g_string_append($68,6656);
  } else {
  }
  $69 = $note;
  $70 = (($69) + 16|0);
  $71 = HEAP32[$70>>2]|0;
  $note = $71;
 }
 $72 = $0;
 _g_string_append($72,5400);
 $73 = $0;
 _g_string_append($73,5120);
 STACKTOP = sp;return;
}
function _perform_lyx_output($out,$list,$scratch) {
 $out = $out|0;
 $list = $list|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $base_header_level = 0, $cleaned = 0, $hcount = 0, $headings = 0, $i = 0, $isbeamer = 0, $key = 0, $lyx_headings = 0, $token = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $list;
 $2 = $scratch;
 $3 = (_g_string_new(5464)|0);
 HEAP32[5472>>2] = $3;
 $4 = (_g_string_new(5504)|0);
 HEAP32[((5472 + 4|0))>>2] = $4;
 $5 = (_g_string_new(5512)|0);
 HEAP32[((5472 + 8|0))>>2] = $5;
 $6 = (_g_string_new(5520)|0);
 HEAP32[((5472 + 12|0))>>2] = $6;
 $7 = (_g_string_new(5536)|0);
 HEAP32[((5472 + 16|0))>>2] = $7;
 $8 = (_g_string_new(5552)|0);
 HEAP32[((5472 + 20|0))>>2] = $8;
 $9 = (_g_string_new(5568)|0);
 HEAP32[((5472 + 24|0))>>2] = $9;
 $10 = (_g_string_new(41432)|0);
 $lyx_headings = $10;
 $11 = (_g_string_new(41432)|0);
 HEAP32[5584>>2] = $11;
 $hcount = 0;
 $12 = $1;
 $13 = (_tree_contains_key($12,18)|0);
 if ($13) {
  $14 = $1;
  $15 = (_metadata_for_key(5592,$14)|0);
  $headings = $15;
  $16 = $headings;
  $17 = ($16|0)!=(0|0);
  if ($17) {
   $18 = $1;
   $19 = (_metavalue_for_key(5592,$18)|0);
   $key = $19;
   $20 = $lyx_headings;
   $21 = $key;
   _g_string_append($20,$21);
   $22 = $lyx_headings;
   $23 = HEAP32[$22>>2]|0;
   $24 = (_strtok($23,6480)|0);
   $token = $24;
   while(1) {
    $25 = $token;
    $26 = ($25|0)!=(0|0);
    if (!($26)) {
     break;
    }
    $27 = $hcount;
    $28 = (5472 + ($27<<2)|0);
    $29 = HEAP32[$28>>2]|0;
    (_g_string_free($29,1)|0);
    $30 = $token;
    $31 = (_clean_string($30)|0);
    $cleaned = $31;
    $32 = $cleaned;
    $33 = (_g_string_new($32)|0);
    $34 = $hcount;
    $35 = (5472 + ($34<<2)|0);
    HEAP32[$35>>2] = $33;
    $36 = $cleaned;
    _free($36);
    $37 = (_strtok(0,6480)|0);
    $token = $37;
    $38 = $hcount;
    $39 = (($38) + 1)|0;
    $hcount = $39;
    $40 = $hcount;
    $41 = ($40|0)>(6);
    if ($41) {
     label = 6;
     break;
    }
   }
   if ((label|0) == 6) {
   }
   $42 = $key;
   _free($42);
   $43 = $token;
   _free($43);
  }
 }
 $44 = $lyx_headings;
 (_g_string_free($44,1)|0);
 $45 = $2;
 $46 = (($45) + 8|0);
 HEAP32[$46>>2] = 1;
 $47 = $1;
 $48 = (_tree_contains_key($47,18)|0);
 if ($48) {
  $49 = $1;
  $50 = (_metadata_for_key(38600,$49)|0);
  $base_header_level = $50;
  $51 = $base_header_level;
  $52 = ($51|0)!=(0|0);
  if ($52) {
   $53 = $1;
   $54 = (_metavalue_for_key(38600,$53)|0);
   $key = $54;
   $55 = $key;
   $56 = (_atoi($55)|0);
   $57 = $2;
   $58 = (($57) + 8|0);
   HEAP32[$58>>2] = $56;
   $59 = $key;
   _free($59);
  }
 }
 $60 = $1;
 $61 = $1;
 $62 = $2;
 _add_prefixes($60,$61,$62);
 $63 = $0;
 $64 = $1;
 $65 = $2;
 $66 = (_begin_lyx_output($63,$64,$65)|0);
 $67 = $66&1;
 $isbeamer = $67;
 $68 = $isbeamer;
 $69 = $68&1;
 if ($69) {
  $70 = HEAP32[((5472 + 4|0))>>2]|0;
  (_g_string_free($70,1)|0);
  $71 = (_g_string_new(5512)|0);
  HEAP32[((5472 + 4|0))>>2] = $71;
  $72 = HEAP32[((5472 + 8|0))>>2]|0;
  (_g_string_free($72,1)|0);
  $73 = (_g_string_new(5608)|0);
  HEAP32[((5472 + 8|0))>>2] = $73;
  $74 = $0;
  $75 = $1;
  $76 = $2;
  _print_lyxbeamer_node_tree($74,$75,$76,0);
 } else {
  $77 = $0;
  $78 = $1;
  $79 = $2;
  _print_lyx_node_tree($77,$78,$79,0);
 }
 $80 = $0;
 $81 = $1;
 $82 = $2;
 _end_lyx_output($80,$81,$82);
 $i = 0;
 while(1) {
  $83 = $i;
  $84 = ($83|0)<=(6);
  if (!($84)) {
   break;
  }
  $85 = $i;
  $86 = (5472 + ($85<<2)|0);
  $87 = HEAP32[$86>>2]|0;
  (_g_string_free($87,1)|0);
  $88 = $i;
  $89 = (($88) + 1)|0;
  $i = $89;
 }
 $90 = HEAP32[5584>>2]|0;
 (_g_string_free($90,1)|0);
 STACKTOP = sp;return;
}
function _add_prefixes($list,$root,$scratch) {
 $list = $list|0;
 $root = $root|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $label = 0, $lev = 0, $pound_label = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $list;
 $1 = $root;
 $2 = $scratch;
 while(1) {
  $3 = $0;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = HEAP16[$5>>1]|0;
  $7 = $6 << 16 >> 16;
  switch ($7|0) {
  case 52:  {
   $55 = $0;
   $56 = (($55) + 12|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = HEAP16[$57>>1]|0;
   $59 = $58 << 16 >> 16;
   $60 = ($59|0)==(53);
   if ($60) {
    $61 = $0;
    $62 = (($61) + 12|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($63) + 12|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = HEAP16[$65>>1]|0;
    $67 = $66 << 16 >> 16;
    $68 = ($67|0)==(54);
    if ($68) {
     $69 = $0;
     $70 = (($69) + 12|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = (($71) + 12|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = (($73) + 4|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = (_label_from_string($75)|0);
     $label = $76;
    } else {
     $77 = $0;
     $78 = (($77) + 12|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = (($79) + 12|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = (_label_from_node_tree($81)|0);
     $label = $82;
    }
    $83 = (_g_string_new(46088)|0);
    $pound_label = $83;
    $84 = $pound_label;
    $85 = $label;
    _g_string_append($84,$85);
    $86 = $pound_label;
    $87 = HEAP32[$86>>2]|0;
    $88 = $2;
    _update_links($87,11568,$88);
    $89 = $pound_label;
    (_g_string_free($89,1)|0);
    $90 = $label;
    _free($90);
   }
   break;
  }
  case 15: case 14: case 13: case 12: case 11: case 10:  {
   $8 = $0;
   $9 = HEAP16[$8>>1]|0;
   $10 = $9 << 16 >> 16;
   $11 = (($10) - 10)|0;
   $12 = $2;
   $13 = (($12) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($11) + ($14))|0;
   $lev = $15;
   $16 = $lev;
   $17 = ($16|0)>(7);
   if ($17) {
    $lev = 7;
   }
   $18 = $0;
   $19 = (($18) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = HEAP16[$20>>1]|0;
   $22 = $21 << 16 >> 16;
   $23 = ($22|0)!=(27);
   if ($23) {
    $24 = $0;
    $25 = (($24) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (_label_from_node_tree($26)|0);
    $label = $27;
   } else {
    $28 = $0;
    $29 = (($28) + 12|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($30) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (_label_from_string($32)|0);
    $label = $33;
   }
   $34 = (_g_string_new(46088)|0);
   $pound_label = $34;
   $35 = $pound_label;
   $36 = $label;
   _g_string_append($35,$36);
   $37 = $pound_label;
   $38 = HEAP32[$37>>2]|0;
   $39 = $lev;
   $40 = (($39) - 1)|0;
   $41 = (5472 + ($40<<2)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = HEAP32[$42>>2]|0;
   $44 = $1;
   _update_link_source($38,$43,$44);
   $45 = $pound_label;
   $46 = HEAP32[$45>>2]|0;
   $47 = $lev;
   $48 = (($47) - 1)|0;
   $49 = (5472 + ($48<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = HEAP32[$50>>2]|0;
   $52 = $2;
   _update_links($46,$51,$52);
   $53 = $pound_label;
   (_g_string_free($53,1)|0);
   $54 = $label;
   _free($54);
   break;
  }
  case 9:  {
   $113 = $0;
   $114 = (($113) + 12|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = $1;
   $117 = $2;
   _add_prefixes($115,$116,$117);
   break;
  }
  case 29: case 28:  {
   $91 = $0;
   $92 = (($91) + 8|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ($93|0)!=(0|0);
   if ($94) {
    $95 = $0;
    $96 = (($95) + 8|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)!=(0|0);
    if ($99) {
     $100 = $0;
     $101 = (($100) + 8|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = HEAP32[$102>>2]|0;
     $104 = (_label_from_string($103)|0);
     $label = $104;
     $105 = (_g_string_new(46088)|0);
     $pound_label = $105;
     $106 = $pound_label;
     $107 = $label;
     _g_string_append($106,$107);
     $108 = $pound_label;
     $109 = HEAP32[$108>>2]|0;
     $110 = $1;
     _update_link_source($109,11576,$110);
     $111 = $pound_label;
     (_g_string_free($111,1)|0);
     $112 = $label;
     _free($112);
    }
   }
   break;
  }
  default: {
  }
  }
  $118 = $0;
  $119 = (($118) + 16|0);
  $120 = HEAP32[$119>>2]|0;
  $0 = $120;
 }
 STACKTOP = sp;return;
}
function _begin_lyx_output($out,$list,$scratch) {
 $out = $out|0;
 $list = $list|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $class_options = 0, $clean_pdf = 0, $cleaned = 0, $content = 0, $i = 0, $isbeamer = 0, $j = 0, $key = 0, $label = 0, $latex_mode = 0, $lyx_class = 0, $modules = 0, $number_headings = 0, $packages = 0, $quote_language = 0, $short_prefix = 0, $temp = 0, $tmp = 0, $token = 0;
 var $value = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer14 = sp + 40|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $short_prefix = sp + 130|0;
 $0 = $out;
 $1 = $list;
 $2 = $scratch;
 $isbeamer = 0;
 $3 = $2;
 $4 = (($3) + 109|0);
 HEAP8[$4>>0] = 1;
 $5 = $1;
 $6 = (_tree_contains_key($5,18)|0);
 if ($6) {
  $7 = $1;
  $8 = (_metadata_for_key(5624,$7)|0);
  $number_headings = $8;
  $9 = $number_headings;
  $10 = ($9|0)!=(0|0);
  if ($10) {
   $11 = $1;
   $12 = (_metavalue_for_key(5624,$11)|0);
   $key = $12;
   $13 = $key;
   $14 = (_label_from_string($13)|0);
   $label = $14;
   $15 = $label;
   $16 = (_strcmp($15,5640)|0);
   $17 = ($16|0)==(0);
   if ($17) {
    $18 = $2;
    $19 = (($18) + 109|0);
    HEAP8[$19>>0] = 1;
   } else {
    $20 = $label;
    $21 = (_strcmp($20,5648)|0);
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $2;
     $24 = (($23) + 109|0);
     HEAP8[$24>>0] = 0;
    }
   }
   $25 = $label;
   _free($25);
   $26 = $key;
   _free($26);
  }
 }
 $27 = $1;
 $28 = (_tree_contains_key($27,18)|0);
 if ($28) {
  $29 = $1;
  $30 = (_metadata_for_key(38632,$29)|0);
  $quote_language = $30;
  $31 = $quote_language;
  $32 = ($31|0)!=(0|0);
  if ($32) {
   $33 = $1;
   $34 = (_metavalue_for_key(38632,$33)|0);
   $key = $34;
   $35 = $quote_language;
   $36 = (($35) + 12|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (_label_from_node_tree($37)|0);
   $temp = $38;
   $39 = $temp;
   $40 = (_strcmp($39,38648)|0);
   $41 = ($40|0)==(0);
   if ($41) {
    label = 14;
   } else {
    $42 = $temp;
    $43 = (_strcmp($42,38656)|0);
    $44 = ($43|0)==(0);
    if ($44) {
     label = 14;
    } else {
     $47 = $temp;
     $48 = (_strcmp($47,38664)|0);
     $49 = ($48|0)==(0);
     if ($49) {
      label = 17;
     } else {
      $50 = $temp;
      $51 = (_strcmp($50,38672)|0);
      $52 = ($51|0)==(0);
      if ($52) {
       label = 17;
      } else {
       $55 = $temp;
       $56 = (_strcmp($55,38680)|0);
       $57 = ($56|0)==(0);
       if ($57) {
        $58 = $2;
        $59 = (($58) + 12|0);
        HEAP32[$59>>2] = 4;
       } else {
        $60 = $temp;
        $61 = (_strcmp($60,38704)|0);
        $62 = ($61|0)==(0);
        if ($62) {
         label = 22;
        } else {
         $63 = $temp;
         $64 = (_strcmp($63,38712)|0);
         $65 = ($64|0)==(0);
         if ($65) {
          label = 22;
         } else {
          $68 = $temp;
          $69 = (_strcmp($68,38720)|0);
          $70 = ($69|0)==(0);
          if ($70) {
           label = 25;
          } else {
           $71 = $temp;
           $72 = (_strcmp($71,38728)|0);
           $73 = ($72|0)==(0);
           if ($73) {
            label = 25;
           }
          }
          if ((label|0) == 25) {
           $74 = $2;
           $75 = (($74) + 12|0);
           HEAP32[$75>>2] = 5;
          }
         }
        }
        if ((label|0) == 22) {
         $66 = $2;
         $67 = (($66) + 12|0);
         HEAP32[$67>>2] = 2;
        }
       }
      }
     }
     if ((label|0) == 17) {
      $53 = $2;
      $54 = (($53) + 12|0);
      HEAP32[$54>>2] = 3;
     }
    }
   }
   if ((label|0) == 14) {
    $45 = $2;
    $46 = (($45) + 12|0);
    HEAP32[$46>>2] = 1;
   }
   $76 = $temp;
   _free($76);
   $77 = $key;
   _free($77);
  }
 }
 $78 = $0;
 _g_string_append($78,5656);
 $79 = $0;
 _g_string_append($79,5696);
 $80 = $0;
 _g_string_append($80,5712);
 $81 = $0;
 _g_string_append($81,5736);
 $82 = (_g_string_new(41432)|0);
 $lyx_class = $82;
 $83 = $1;
 $84 = (_tree_contains_key($83,18)|0);
 if ($84) {
  $85 = $1;
  $86 = (_metadata_for_key(41256,$85)|0);
  $latex_mode = $86;
  $87 = $latex_mode;
  $88 = ($87|0)!=(0|0);
  if ($88) {
   $89 = $1;
   $90 = (_metavalue_for_key(41256,$89)|0);
   $key = $90;
   $91 = $key;
   $92 = (_label_from_string($91)|0);
   $label = $92;
   $93 = $lyx_class;
   $94 = $label;
   _g_string_append($93,$94);
   $95 = $label;
   $96 = (_strcmp($95,41272)|0);
   $97 = ($96|0)==(0);
   if ($97) {
    $isbeamer = 1;
   }
   $98 = $label;
   _free($98);
   $99 = $key;
   _free($99);
  } else {
   $100 = $lyx_class;
   _g_string_append($100,5752);
  }
 } else {
  $101 = $lyx_class;
  _g_string_append($101,5752);
 }
 $102 = $0;
 _g_string_append($102,5760);
 $103 = $0;
 $104 = $lyx_class;
 $105 = HEAP32[$104>>2]|0;
 HEAP32[$vararg_buffer>>2] = $105;
 _g_string_append_printf($103,40832,$vararg_buffer);
 $106 = $0;
 _g_string_append($106,42896);
 $107 = $0;
 _g_string_append($107,5776);
 $108 = $0;
 _g_string_append($108,5800);
 $109 = $0;
 _g_string_append($109,5824);
 $110 = $0;
 _g_string_append($110,5848);
 $111 = $0;
 _g_string_append($111,5872);
 $112 = $0;
 _g_string_append($112,5896);
 $113 = $0;
 _g_string_append($113,5920);
 $114 = $1;
 $115 = (_tree_contains_key($114,18)|0);
 if ($115) {
  $116 = $1;
  $117 = (_metadata_for_key(5944,$116)|0);
  $packages = $117;
  $118 = $packages;
  $119 = ($118|0)!=(0|0);
  if ($119) {
   $120 = $1;
   $121 = (_metavalue_for_key(5944,$120)|0);
   $key = $121;
   $122 = $key;
   $123 = (___strdup($122)|0);
   $tmp = $123;
   $124 = $tmp;
   $125 = (_strtok($124,5616)|0);
   $token = $125;
   while(1) {
    $126 = $token;
    $127 = ($126|0)!=(0|0);
    if (!($127)) {
     break;
    }
    $128 = $0;
    $129 = $token;
    $130 = (_clean_string($129)|0);
    HEAP32[$vararg_buffer1>>2] = $130;
    _g_string_append_printf($128,5960,$vararg_buffer1);
    $131 = (_strtok(0,5616)|0);
    $token = $131;
   }
   $132 = $key;
   _free($132);
   $133 = $tmp;
   _free($133);
  }
 }
 $134 = $isbeamer;
 $135 = $134&1;
 if ($135) {
  $136 = $1;
  $137 = (_tree_contains_key($136,18)|0);
  if ($137) {
   $138 = $1;
   $139 = (_metadata_for_key(5984,$138)|0);
   $content = $139;
   $140 = $content;
   $141 = ($140|0)!=(0|0);
   if ($141) {
    $142 = $1;
    $143 = (_metavalue_for_key(5984,$142)|0);
    $value = $143;
    $144 = $0;
    $145 = $value;
    HEAP32[$vararg_buffer4>>2] = $145;
    _g_string_append_printf($144,5992,$vararg_buffer4);
    $146 = $value;
    _free($146);
   } else {
    $147 = $0;
    _g_string_append($147,6008);
   }
  } else {
   $148 = $0;
   _g_string_append($148,6008);
  }
  $149 = $0;
  _g_string_append($149,6032);
 }
 $150 = $1;
 $151 = (_tree_contains_key($150,18)|0);
 if ($151) {
  $152 = $1;
  $153 = (_metadata_for_key(6064,$152)|0);
  $content = $153;
  $154 = $content;
  $155 = ($154|0)!=(0|0);
  if ($155) {
   $156 = $1;
   $157 = (_metavalue_for_key(6064,$156)|0);
   $value = $157;
   $158 = $value;
   $159 = (_strcmp($158,6080)|0);
   $160 = ($159|0)==(0);
   if ($160) {
    $161 = $0;
    _g_string_append($161,6104);
   } else {
    $162 = $0;
    _g_string_append($162,6136);
   }
   $163 = $value;
   _free($163);
  } else {
   $164 = $0;
   _g_string_append($164,6136);
  }
 } else {
  $165 = $0;
  _g_string_append($165,6136);
 }
 $166 = $2;
 $167 = (($166) + 109|0);
 $168 = HEAP8[$167>>0]|0;
 $169 = $168&1;
 if ($169) {
  $i = 0;
  while(1) {
   $170 = $i;
   $171 = ($170|0)<(7);
   if (!($171)) {
    break;
   }
   $172 = $i;
   $173 = (5472 + ($172<<2)|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = HEAP32[$174>>2]|0;
   (_strncpy(($short_prefix|0),($175|0),5)|0);
   $176 = (($short_prefix) + 5|0);
   HEAP8[$176>>0] = 0;
   $j = 0;
   while(1) {
    $177 = $j;
    $178 = (($short_prefix) + ($177)|0);
    $179 = HEAP8[$178>>0]|0;
    $180 = ($179<<24>>24)!=(0);
    if (!($180)) {
     break;
    }
    $181 = $j;
    $182 = (($short_prefix) + ($181)|0);
    $183 = HEAP8[$182>>0]|0;
    $184 = $183 << 24 >> 24;
    $185 = (_tolower($184)|0);
    $186 = $185&255;
    $187 = $j;
    $188 = (($short_prefix) + ($187)|0);
    HEAP8[$188>>0] = $186;
    $189 = $j;
    $190 = (($189) + 1)|0;
    $j = $190;
   }
   $191 = $0;
   $192 = $i;
   $193 = (5472 + ($192<<2)|0);
   $194 = HEAP32[$193>>2]|0;
   $195 = HEAP32[$194>>2]|0;
   HEAP32[$vararg_buffer7>>2] = $short_prefix;
   $vararg_ptr10 = (($vararg_buffer7) + 4|0);
   HEAP32[$vararg_ptr10>>2] = $195;
   _g_string_append_printf($191,6168,$vararg_buffer7);
   $196 = $i;
   $197 = (($196) + 1)|0;
   $i = $197;
  }
  $198 = $0;
  _g_string_append($198,6224);
  $199 = $0;
  _g_string_append($199,6280);
 } else {
  $i = 0;
  while(1) {
   $200 = $i;
   $201 = ($200|0)<(7);
   if (!($201)) {
    break;
   }
   $202 = $i;
   $203 = (5472 + ($202<<2)|0);
   $204 = HEAP32[$203>>2]|0;
   $205 = HEAP32[$204>>2]|0;
   (_strncpy(($short_prefix|0),($205|0),5)|0);
   $206 = (($short_prefix) + 5|0);
   HEAP8[$206>>0] = 0;
   $j = 0;
   while(1) {
    $207 = $j;
    $208 = (($short_prefix) + ($207)|0);
    $209 = HEAP8[$208>>0]|0;
    $210 = ($209<<24>>24)!=(0);
    if (!($210)) {
     break;
    }
    $211 = $j;
    $212 = (($short_prefix) + ($211)|0);
    $213 = HEAP8[$212>>0]|0;
    $214 = $213 << 24 >> 24;
    $215 = (_tolower($214)|0);
    $216 = $215&255;
    $217 = $j;
    $218 = (($short_prefix) + ($217)|0);
    HEAP8[$218>>0] = $216;
    $219 = $j;
    $220 = (($219) + 1)|0;
    $j = $220;
   }
   $221 = $0;
   HEAP32[$vararg_buffer11>>2] = $short_prefix;
   _g_string_append_printf($221,6336,$vararg_buffer11);
   $222 = $i;
   $223 = (($222) + 1)|0;
   $i = $223;
  }
  $224 = $0;
  _g_string_append($224,6224);
  $225 = $0;
  _g_string_append($225,6280);
 }
 $226 = $0;
 _g_string_append($226,6392);
 $227 = (_g_string_new(6408)|0);
 $class_options = $227;
 $228 = $1;
 $229 = (_tree_contains_key($228,18)|0);
 if ($229) {
  $230 = $1;
  $231 = (_metadata_for_key(6432,$230)|0);
  $clean_pdf = $231;
  $232 = $clean_pdf;
  $233 = ($232|0)!=(0|0);
  if ($233) {
   $234 = $1;
   $235 = (_metavalue_for_key(6432,$234)|0);
   $key = $235;
   $236 = $key;
   $237 = (_label_from_string($236)|0);
   $label = $237;
   $238 = $label;
   $239 = (_strcmp($238,5640)|0);
   $240 = ($239|0)==(0);
   if ($240) {
    $241 = $class_options;
    _g_string_append($241,6448);
   }
   $242 = $label;
   _free($242);
   $243 = $key;
   _free($243);
  }
 }
 $244 = $1;
 $245 = (_tree_contains_key($244,18)|0);
 if ($245) {
  $246 = $1;
  $247 = (_metadata_for_key(6464,$246)|0);
  $content = $247;
  $248 = $content;
  $249 = ($248|0)!=(0|0);
  if ($249) {
   $250 = $1;
   $251 = (_metavalue_for_key(6464,$250)|0);
   $value = $251;
   $252 = $class_options;
   _g_string_append($252,6480);
   $253 = $class_options;
   $254 = $value;
   _g_string_append($253,$254);
   $255 = $value;
   _free($255);
  }
 }
 $256 = $class_options;
 _g_string_append($256,42896);
 $257 = $0;
 $258 = $class_options;
 $259 = HEAP32[$258>>2]|0;
 _g_string_append($257,$259);
 $260 = $class_options;
 (_g_string_free($260,1)|0);
 $261 = $0;
 _g_string_append($261,6488);
 $262 = $1;
 $263 = (_tree_contains_key($262,18)|0);
 if ($263) {
  $264 = $1;
  $265 = (_metadata_for_key(6504,$264)|0);
  $modules = $265;
  $266 = $modules;
  $267 = ($266|0)!=(0|0);
  if ($267) {
   $268 = $1;
   $269 = (_metavalue_for_key(6504,$268)|0);
   $key = $269;
   $270 = $key;
   $271 = (___strdup($270)|0);
   $tmp = $271;
   $272 = $tmp;
   $273 = (_strtok($272,5616)|0);
   $token = $273;
   while(1) {
    $274 = $token;
    $275 = ($274|0)!=(0|0);
    if (!($275)) {
     break;
    }
    $276 = $token;
    $277 = (_clean_string($276)|0);
    $cleaned = $277;
    $278 = $0;
    $279 = $cleaned;
    HEAP32[$vararg_buffer14>>2] = $279;
    _g_string_append_printf($278,6512,$vararg_buffer14);
    $280 = $cleaned;
    _free($280);
    $281 = (_strtok(0,5616)|0);
    $token = $281;
   }
   $282 = $key;
   _free($282);
   $283 = $tmp;
   _free($283);
   $284 = $token;
   _free($284);
  }
 }
 $285 = $0;
 _g_string_append($285,6520);
 $286 = $0;
 _g_string_append($286,6536);
 $287 = $0;
 _g_string_append($287,6568);
 $288 = $lyx_class;
 (_g_string_free($288,1)|0);
 $289 = $0;
 _g_string_append($289,6600);
 $290 = $0;
 _g_string_append($290,6616);
 $291 = $1;
 $292 = (_tree_contains_key($291,18)|0);
 if ($292) {
  $293 = $1;
  $294 = (_metadata_for_key(38736,$293)|0);
  $content = $294;
  $295 = $content;
  $296 = ($295|0)!=(0|0);
  if ($296) {
   $297 = $0;
   _g_string_append($297,6632);
   $298 = $1;
   $299 = (_metavalue_for_key(38736,$298)|0);
   $value = $299;
   $300 = $0;
   $301 = $value;
   $302 = $2;
   _print_lyx_string($300,$301,$302,0);
   $303 = $value;
   _free($303);
   $304 = $0;
   _g_string_append($304,6656);
  }
 }
 $305 = $isbeamer;
 $306 = $305&1;
 if ($306) {
  $307 = $1;
  $308 = (_tree_contains_key($307,18)|0);
  if ($308) {
   $309 = $1;
   $310 = (_metadata_for_key(6672,$309)|0);
   $content = $310;
   $311 = $content;
   $312 = ($311|0)!=(0|0);
   if ($312) {
    $313 = $0;
    _g_string_append($313,6688);
    $314 = $1;
    $315 = (_metavalue_for_key(6672,$314)|0);
    $value = $315;
    $316 = $0;
    $317 = $value;
    $318 = $2;
    _print_lyx_string($316,$317,$318,0);
    $319 = $value;
    _free($319);
    $320 = $0;
    _g_string_append($320,6656);
   }
  }
 }
 $321 = $1;
 $322 = (_tree_contains_key($321,18)|0);
 if ($322) {
  $323 = $1;
  $324 = (_metadata_for_key(38760,$323)|0);
  $content = $324;
  $325 = $content;
  $326 = ($325|0)!=(0|0);
  if ($326) {
   $327 = $0;
   _g_string_append($327,6720);
   $328 = $1;
   $329 = (_metavalue_for_key(38760,$328)|0);
   $value = $329;
   $330 = $0;
   $331 = $value;
   $332 = $2;
   _print_lyx_string($330,$331,$332,0);
   $333 = $value;
   _free($333);
   $334 = $0;
   _g_string_append($334,6656);
  }
 }
 $335 = $isbeamer;
 $336 = $335&1;
 if ($336) {
  $337 = $1;
  $338 = (_tree_contains_key($337,18)|0);
  if ($338) {
   $339 = $1;
   $340 = (_metadata_for_key(38784,$339)|0);
   $content = $340;
   $341 = $content;
   $342 = ($341|0)!=(0|0);
   if ($342) {
    $343 = $0;
    _g_string_append($343,6744);
    $344 = $1;
    $345 = (_metavalue_for_key(38784,$344)|0);
    $value = $345;
    $346 = $0;
    $347 = $value;
    $348 = $2;
    _print_lyx_string($346,$347,$348,0);
    $349 = $value;
    _free($349);
    $350 = $0;
    _g_string_append($350,6656);
   }
  }
 }
 $351 = $1;
 $352 = (_tree_contains_key($351,18)|0);
 if ($352) {
  $353 = $1;
  $354 = (_metadata_for_key(6776,$353)|0);
  $content = $354;
  $355 = $content;
  $356 = ($355|0)!=(0|0);
  if ($356) {
   $357 = $0;
   _g_string_append($357,6784);
   $358 = $1;
   $359 = (_metavalue_for_key(6776,$358)|0);
   $value = $359;
   $360 = $0;
   $361 = $value;
   $362 = $2;
   _print_lyx_string($360,$361,$362,0);
   $363 = $value;
   _free($363);
   $364 = $0;
   _g_string_append($364,6656);
  }
 }
 $365 = $1;
 $366 = (_tree_contains_key($365,18)|0);
 if (!($366)) {
  $379 = $isbeamer;
  $380 = $379&1;
  STACKTOP = sp;return ($380|0);
 }
 $367 = $1;
 $368 = (_metadata_for_key(6808,$367)|0);
 $content = $368;
 $369 = $content;
 $370 = ($369|0)!=(0|0);
 if ($370) {
  $371 = $0;
  _g_string_append($371,6824);
  $372 = $1;
  $373 = (_metavalue_for_key(6808,$372)|0);
  $value = $373;
  $374 = $0;
  $375 = $value;
  $376 = $2;
  _print_lyx_string($374,$375,$376,0);
  $377 = $value;
  _free($377);
  $378 = $0;
  _g_string_append($378,6656);
 }
 $379 = $isbeamer;
 $380 = $379&1;
 STACKTOP = sp;return ($380|0);
}
function _print_lyx_node_tree($out,$list,$scratch,$no_newline) {
 $out = $out|0;
 $list = $list|0;
 $scratch = $scratch|0;
 $no_newline = $no_newline|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $list;
 $2 = $scratch;
 $4 = $no_newline&1;
 $3 = $4;
 while(1) {
  $5 = $1;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   break;
  }
  $7 = $0;
  $8 = $1;
  $9 = $2;
  $10 = $3;
  $11 = $10&1;
  _print_lyx_node($7,$8,$9,$11);
  $12 = $1;
  $13 = (($12) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $1 = $14;
 }
 STACKTOP = sp;return;
}
function _end_lyx_output($out,$list,$scratch) {
 $out = $out|0;
 $list = $list|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $content = 0, $value = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $list;
 $2 = $scratch;
 $3 = $1;
 $4 = (_tree_contains_key($3,18)|0);
 if (!($4)) {
  $20 = $0;
  _g_string_append($20,7032);
  $21 = $0;
  _g_string_append($21,7048);
  STACKTOP = sp;return;
 }
 $5 = $1;
 $6 = (_metadata_for_key(6856,$5)|0);
 $content = $6;
 $7 = $content;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $0;
  _g_string_append($9,6864);
  $10 = $0;
  _g_string_append($10,6896);
  $11 = $0;
  _g_string_append($11,6936);
  $12 = $1;
  $13 = (_metavalue_for_key(6856,$12)|0);
  $value = $13;
  $14 = $0;
  $15 = $value;
  HEAP32[$vararg_buffer>>2] = $15;
  _g_string_append_printf($14,6960,$vararg_buffer);
  $16 = $value;
  _free($16);
  $17 = $0;
  _g_string_append($17,6976);
  $18 = $0;
  _g_string_append($18,7000);
  $19 = $0;
  _g_string_append($19,7016);
 }
 $20 = $0;
 _g_string_append($20,7032);
 $21 = $0;
 _g_string_append($21,7048);
 STACKTOP = sp;return;
}
function _print_lyx_string($out,$str,$scratch,$environment) {
 $out = $out|0;
 $str = $str|0;
 $scratch = $scratch|0;
 $environment = $environment|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $extended_character = 0, $start = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $str;
 $2 = $scratch;
 $3 = $environment;
 $4 = $1;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $start = $6;
 $7 = $3;
 $8 = $7 << 16 >> 16;
 $9 = ($8|0)==(3);
 if ($9) {
  $10 = $0;
  _g_string_append($10,11320);
 }
 while(1) {
  $11 = $1;
  $12 = HEAP8[$11>>0]|0;
  $13 = $12 << 24 >> 24;
  $14 = ($13|0)!=(0);
  if (!($14)) {
   break;
  }
  $15 = $1;
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = $17 & 192;
  $19 = ($18|0)==(192);
  if ($19) {
   $20 = $1;
   $21 = (($20) + 1|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = $22&255;
   $24 = $23 & 192;
   $25 = ($24|0)==(128);
   if ($25) {
    $26 = $0;
    $27 = $1;
    $28 = HEAP8[$27>>0]|0;
    _g_string_append_c($26,$28);
    $29 = $1;
    $30 = (($29) + 1|0);
    $1 = $30;
    while(1) {
     $31 = $1;
     $32 = HEAP8[$31>>0]|0;
     $33 = $32&255;
     $34 = ($33|0)!=(0);
     if ($34) {
      $35 = $1;
      $36 = HEAP8[$35>>0]|0;
      $37 = $36&255;
      $38 = $37 & 192;
      $39 = ($38|0)==(128);
      $120 = $39;
     } else {
      $120 = 0;
     }
     if (!($120)) {
      break;
     }
     $40 = $0;
     $41 = $1;
     $42 = HEAP8[$41>>0]|0;
     _g_string_append_c($40,$42);
     $43 = $1;
     $44 = (($43) + 1|0);
     $1 = $44;
    }
   } else {
    label = 15;
   }
  } else {
   label = 15;
  }
  if ((label|0) == 15) {
   label = 0;
   $45 = $1;
   $46 = HEAP8[$45>>0]|0;
   $47 = $46&255;
   L23: do {
    switch ($47|0) {
    case 133: case 151: case 150: case 148: case 147: case 146: case 145:  {
     $106 = $1;
     $107 = HEAP8[$106>>0]|0;
     $extended_character = $107;
     $108 = $0;
     $109 = $extended_character;
     $110 = $2;
     _print_lyx_localized_typography($108,$109,$110);
     break;
    }
    case 92:  {
     $48 = $0;
     _g_string_append($48,11352);
     break;
    }
    case 60:  {
     $75 = $3;
     $76 = $75 << 16 >> 16;
     $77 = ($76|0)!=(2);
     if ($77) {
      $78 = $3;
      $79 = $78 << 16 >> 16;
      $80 = ($79|0)!=(3);
      if ($80) {
       $81 = $1;
       $82 = (_strncmp($81,42136,4)|0);
       $83 = ($82|0)==(0);
       if ($83) {
        $84 = $1;
        $85 = (($84) + 4|0);
        $1 = $85;
        $86 = $0;
        _g_string_append($86,11416);
        while(1) {
         $87 = $1;
         $88 = (_strncmp($87,42144,3)|0);
         $89 = ($88|0)!=(0);
         if (!($89)) {
          break;
         }
         $90 = $1;
         $91 = HEAP8[$90>>0]|0;
         $92 = $91 << 24 >> 24;
         if ((($92|0) == 34)) {
          $94 = $0;
          _g_string_append($94,11512);
         } else if ((($92|0) == 92)) {
          $93 = $0;
          _g_string_append($93,11352);
         } else {
          $95 = $0;
          $96 = $1;
          $97 = HEAP8[$96>>0]|0;
          _g_string_append_c($95,$97);
         }
         $98 = $1;
         $99 = (($98) + 1|0);
         $1 = $99;
        }
        $100 = $1;
        $101 = (($100) + 2|0);
        $1 = $101;
        $102 = $0;
        _g_string_append($102,9640);
       } else {
        label = 42;
       }
      } else {
       label = 42;
      }
     } else {
      label = 42;
     }
     if ((label|0) == 42) {
      label = 0;
      $103 = $0;
      $104 = $1;
      $105 = HEAP8[$104>>0]|0;
      _g_string_append_c($103,$105);
     }
     break;
    }
    case 10:  {
     $54 = $3;
     $55 = $54 << 16 >> 16;
     $56 = ($55|0)==(3);
     do {
      if ($56) {
       $57 = $1;
       $58 = (($57) + 1|0);
       $59 = HEAP8[$58>>0]|0;
       $60 = $59 << 24 >> 24;
       $61 = ($60|0)==(0);
       if ($61) {
        break L23;
       } else {
        $62 = $0;
        _g_string_append($62,11368);
        break;
       }
      } else {
       $63 = $1;
       $tmp = $63;
       $64 = $tmp;
       $65 = (($64) + -1|0);
       $tmp = $65;
       $66 = $tmp;
       $67 = $start;
       $68 = ($66>>>0)>($67>>>0);
       if ($68) {
        $69 = $tmp;
        $70 = HEAP8[$69>>0]|0;
        $71 = $70 << 24 >> 24;
        $72 = ($71|0)==(32);
        if ($72) {
         $73 = $0;
         _g_string_append($73,42896);
        } else {
         label = 28;
        }
       } else {
        label = 28;
       }
       if ((label|0) == 28) {
        label = 0;
        $74 = $0;
        _g_string_append($74,7200);
       }
      }
     } while(0);
     break;
    }
    case 34:  {
     $49 = $3;
     $50 = $49 << 16 >> 16;
     $51 = ($50|0)==(3);
     if ($51) {
      $52 = $0;
      _g_string_append($52,33880);
     } else {
      $53 = $0;
      _g_string_append($53,11256);
     }
     break;
    }
    default: {
     $111 = $0;
     $112 = $1;
     $113 = HEAP8[$112>>0]|0;
     _g_string_append_c($111,$113);
    }
    }
   } while(0);
   $114 = $1;
   $115 = (($114) + 1|0);
   $1 = $115;
  }
 }
 $116 = $3;
 $117 = $116 << 16 >> 16;
 $118 = ($117|0)==(3);
 if (!($118)) {
  STACKTOP = sp;return;
 }
 $119 = $0;
 _g_string_append($119,6656);
 STACKTOP = sp;return;
}
function _print_lyx_node($out,$n,$scratch,$no_newline) {
 $out = $out|0;
 $n = $n|0;
 $scratch = $scratch|0;
 $no_newline = $no_newline|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0;
 var $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0;
 var $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0;
 var $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0;
 var $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0;
 var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0;
 var $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0;
 var $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0;
 var $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0;
 var $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0;
 var $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0;
 var $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0;
 var $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0;
 var $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0;
 var $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0;
 var $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0;
 var $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0;
 var $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0;
 var $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0;
 var $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0;
 var $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0;
 var $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0;
 var $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0;
 var $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0;
 var $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0;
 var $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0;
 var $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0;
 var $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0;
 var $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0;
 var $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0;
 var $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0;
 var $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0;
 var $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0;
 var $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $char_temp = 0, $cols = 0, $colwidth = 0, $environment = 0, $height = 0, $i = 0, $lev = 0, $multicol = 0;
 var $old_type = 0, $prefixed_label = 0, $raw_str = 0, $rows = 0, $tcaption = 0, $temp = 0, $temp_node = 0, $temp_str = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer100 = 0, $vararg_buffer103 = 0, $vararg_buffer106 = 0, $vararg_buffer109 = 0, $vararg_buffer112 = 0, $vararg_buffer115 = 0, $vararg_buffer118 = 0, $vararg_buffer121 = 0, $vararg_buffer124 = 0;
 var $vararg_buffer127 = 0, $vararg_buffer13 = 0, $vararg_buffer130 = 0, $vararg_buffer133 = 0, $vararg_buffer136 = 0, $vararg_buffer139 = 0, $vararg_buffer142 = 0, $vararg_buffer145 = 0, $vararg_buffer148 = 0, $vararg_buffer151 = 0, $vararg_buffer153 = 0, $vararg_buffer156 = 0, $vararg_buffer159 = 0, $vararg_buffer163 = 0, $vararg_buffer167 = 0, $vararg_buffer17 = 0, $vararg_buffer170 = 0, $vararg_buffer173 = 0, $vararg_buffer176 = 0, $vararg_buffer178 = 0;
 var $vararg_buffer181 = 0, $vararg_buffer184 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer38 = 0, $vararg_buffer4 = 0, $vararg_buffer41 = 0, $vararg_buffer44 = 0, $vararg_buffer47 = 0, $vararg_buffer50 = 0, $vararg_buffer53 = 0, $vararg_buffer56 = 0, $vararg_buffer58 = 0, $vararg_buffer61 = 0, $vararg_buffer64 = 0, $vararg_buffer66 = 0;
 var $vararg_buffer69 = 0, $vararg_buffer7 = 0, $vararg_buffer72 = 0, $vararg_buffer75 = 0, $vararg_buffer78 = 0, $vararg_buffer81 = 0, $vararg_buffer84 = 0, $vararg_buffer87 = 0, $vararg_buffer90 = 0, $vararg_buffer94 = 0, $vararg_buffer97 = 0, $vararg_ptr16 = 0, $vararg_ptr162 = 0, $vararg_ptr166 = 0, $vararg_ptr93 = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer184 = sp + 496|0;
 $vararg_buffer181 = sp + 488|0;
 $vararg_buffer178 = sp + 480|0;
 $vararg_buffer176 = sp + 472|0;
 $vararg_buffer173 = sp + 464|0;
 $vararg_buffer170 = sp + 456|0;
 $vararg_buffer167 = sp + 448|0;
 $vararg_buffer163 = sp + 440|0;
 $vararg_buffer159 = sp + 432|0;
 $vararg_buffer156 = sp + 424|0;
 $vararg_buffer153 = sp + 416|0;
 $vararg_buffer151 = sp + 408|0;
 $vararg_buffer148 = sp + 400|0;
 $vararg_buffer145 = sp + 392|0;
 $vararg_buffer142 = sp + 384|0;
 $vararg_buffer139 = sp + 376|0;
 $vararg_buffer136 = sp + 368|0;
 $vararg_buffer133 = sp + 360|0;
 $vararg_buffer130 = sp + 352|0;
 $vararg_buffer127 = sp + 344|0;
 $vararg_buffer124 = sp + 336|0;
 $vararg_buffer121 = sp + 328|0;
 $vararg_buffer118 = sp + 320|0;
 $vararg_buffer115 = sp + 312|0;
 $vararg_buffer112 = sp + 304|0;
 $vararg_buffer109 = sp + 296|0;
 $vararg_buffer106 = sp + 288|0;
 $vararg_buffer103 = sp + 280|0;
 $vararg_buffer100 = sp + 272|0;
 $vararg_buffer97 = sp + 264|0;
 $vararg_buffer94 = sp + 256|0;
 $vararg_buffer90 = sp + 248|0;
 $vararg_buffer87 = sp + 240|0;
 $vararg_buffer84 = sp + 232|0;
 $vararg_buffer81 = sp + 224|0;
 $vararg_buffer78 = sp + 216|0;
 $vararg_buffer75 = sp + 208|0;
 $vararg_buffer72 = sp + 200|0;
 $vararg_buffer69 = sp + 192|0;
 $vararg_buffer66 = sp + 184|0;
 $vararg_buffer64 = sp + 176|0;
 $vararg_buffer61 = sp + 168|0;
 $vararg_buffer58 = sp + 160|0;
 $vararg_buffer56 = sp + 152|0;
 $vararg_buffer53 = sp + 144|0;
 $vararg_buffer50 = sp + 136|0;
 $vararg_buffer47 = sp + 128|0;
 $vararg_buffer44 = sp + 120|0;
 $vararg_buffer41 = sp + 112|0;
 $vararg_buffer38 = sp + 104|0;
 $vararg_buffer35 = sp + 96|0;
 $vararg_buffer32 = sp + 88|0;
 $vararg_buffer29 = sp + 80|0;
 $vararg_buffer26 = sp + 72|0;
 $vararg_buffer23 = sp + 64|0;
 $vararg_buffer20 = sp + 56|0;
 $vararg_buffer17 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $rows = sp + 516|0;
 $cols = sp + 512|0;
 $0 = $out;
 $1 = $n;
 $2 = $scratch;
 $4 = $no_newline&1;
 $3 = $4;
 $width = 0;
 $height = 0;
 $5 = $1;
 $6 = ($5|0)==(0|0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 do {
  switch ($9|0) {
  case 83:  {
   break;
  }
  case 36:  {
   $516 = $0;
   $517 = $2;
   _print_lyx_localized_typography($516,0,$517);
   $518 = $0;
   $519 = $1;
   $520 = (($519) + 12|0);
   $521 = HEAP32[$520>>2]|0;
   $522 = $2;
   _print_lyx_node_tree($518,$521,$522,0);
   $523 = $0;
   $524 = $2;
   _print_lyx_localized_typography($523,1,$524);
   STACKTOP = sp;return;
   break;
  }
  case 3:  {
   $508 = $0;
   $509 = $2;
   _print_lyx_localized_typography($508,7,$509);
   STACKTOP = sp;return;
   break;
  }
  case 0:  {
   STACKTOP = sp;return;
   break;
  }
  case 57:  {
   STACKTOP = sp;return;
   break;
  }
  case 69:  {
   STACKTOP = sp;return;
   break;
  }
  case 62:  {
   STACKTOP = sp;return;
   break;
  }
  case 8:  {
   $94 = $1;
   $95 = (($94) + 4|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = (_strncmp($96,42896,1)|0);
   $98 = ($97|0)==(0);
   if ($98) {
    $99 = $3;
    $100 = $99&1;
    if ($100) {
     $101 = $0;
     _g_string_append($101,42624);
    } else {
     $102 = $0;
     $103 = $1;
     $104 = (($103) + 4|0);
     $105 = HEAP32[$104>>2]|0;
     HEAP32[$vararg_buffer7>>2] = $105;
     _g_string_append_printf($102,7192,$vararg_buffer7);
    }
   } else {
    $106 = $0;
    $107 = $1;
    $108 = (($107) + 4|0);
    $109 = HEAP32[$108>>2]|0;
    HEAP32[$vararg_buffer10>>2] = $109;
    _g_string_append_printf($106,40832,$vararg_buffer10);
   }
   STACKTOP = sp;return;
   break;
  }
  case 9:  {
   $415 = $0;
   $416 = $1;
   $417 = (($416) + 12|0);
   $418 = HEAP32[$417>>2]|0;
   $419 = $2;
   _print_lyx_node_tree($415,$418,$419,0);
   STACKTOP = sp;return;
   break;
  }
  case 5: case 6:  {
   $110 = $2;
   $111 = (($110) + 100|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = ($112|0)==(46);
   if ($113) {
    $114 = $2;
    $115 = (($114) + 111|0);
    $116 = HEAP8[$115>>0]|0;
    $117 = $116&1;
    if ($117) {
     $127 = $0;
     _g_string_append($127,7208);
     $128 = $0;
     _g_string_append($128,6864);
     $129 = $0;
     $130 = $1;
     $131 = (($130) + 12|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = $2;
     _print_lyx_node_tree($129,$132,$133,0);
     $134 = $0;
     _g_string_append($134,6656);
     $135 = $0;
     _g_string_append($135,7232);
    } else {
     $118 = $0;
     _g_string_append($118,7200);
     $119 = $0;
     $120 = $1;
     $121 = (($120) + 12|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = $2;
     _print_lyx_node_tree($119,$122,$123,0);
     $124 = $0;
     _g_string_append($124,6656);
     $125 = $2;
     $126 = (($125) + 111|0);
     HEAP8[$126>>0] = 1;
    }
    STACKTOP = sp;return;
   }
   $136 = $2;
   $137 = (($136) + 100|0);
   $138 = HEAP32[$137>>2]|0;
   switch ($138|0) {
   case 49:  {
    $153 = $0;
    _g_string_append($153,7392);
    $154 = $2;
    $155 = (($154) + 114|0);
    $156 = HEAP8[$155>>0]|0;
    $157 = $156&1;
    if ($157) {
     $158 = $0;
     _g_string_append($158,7304);
     $159 = $0;
     _g_string_append($159,7336);
     $160 = $0;
     _g_string_append($160,7352);
     $161 = $0;
     _g_string_append($161,7416);
     $162 = $0;
     _g_string_append($162,6656);
     $163 = $0;
     _g_string_append($163,7176);
     $164 = $2;
     $165 = (($164) + 114|0);
     HEAP8[$165>>0] = 0;
    }
    break;
   }
   case 73: case 72: case 30:  {
    $166 = $0;
    _g_string_append($166,7424);
    $167 = $0;
    _g_string_append($167,7448);
    $168 = $0;
    _g_string_append($168,7352);
    break;
   }
   case 63: case 62:  {
    break;
   }
   case 69:  {
    $169 = $0;
    _g_string_append($169,7160);
    break;
   }
   case 48:  {
    $140 = $0;
    _g_string_append($140,7272);
    $141 = $2;
    $142 = (($141) + 114|0);
    $143 = HEAP8[$142>>0]|0;
    $144 = $143&1;
    if ($144) {
     $145 = $0;
     _g_string_append($145,7304);
     $146 = $0;
     _g_string_append($146,7336);
     $147 = $0;
     _g_string_append($147,7352);
     $148 = $0;
     _g_string_append($148,7384);
     $149 = $0;
     _g_string_append($149,6656);
     $150 = $0;
     _g_string_append($150,7176);
     $151 = $2;
     $152 = (($151) + 114|0);
     HEAP8[$152>>0] = 0;
    }
    break;
   }
   case 38:  {
    $139 = $0;
    _g_string_append($139,7248);
    break;
   }
   default: {
    $170 = $0;
    _g_string_append($170,6864);
   }
   }
   $171 = $0;
   $172 = $1;
   $173 = (($172) + 12|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = $2;
   _print_lyx_node_tree($171,$174,$175,0);
   $176 = $2;
   $177 = (($176) + 100|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = ($178|0)==(69);
   if ($179) {
    $180 = $0;
    _g_string_append($180,7472);
   } else {
    $181 = $2;
    $182 = (($181) + 100|0);
    $183 = HEAP32[$182>>2]|0;
    $184 = ($183|0)!=(62);
    if ($184) {
     $185 = $2;
     $186 = (($185) + 100|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = ($187|0)!=(63);
     if ($188) {
      $189 = $0;
      _g_string_append($189,6656);
     }
    }
   }
   $190 = $2;
   $191 = (($190) + 100|0);
   $192 = HEAP32[$191>>2]|0;
   $193 = ($192|0)==(72);
   if ($193) {
    label = 49;
   } else {
    $194 = $2;
    $195 = (($194) + 100|0);
    $196 = HEAP32[$195>>2]|0;
    $197 = ($196|0)==(73);
    if ($197) {
     label = 49;
    }
   }
   if ((label|0) == 49) {
    $198 = $0;
    _g_string_append($198,6656);
    $199 = $0;
    _g_string_append($199,7480);
   }
   STACKTOP = sp;return;
   break;
  }
  case 82:  {
   STACKTOP = sp;return;
   break;
  }
  case 59:  {
   $1760 = $2;
   $1761 = (($1760) + 120|0);
   HEAP8[$1761>>0] = 1;
   $1762 = $0;
   $1763 = $1;
   $1764 = (($1763) + 12|0);
   $1765 = HEAP32[$1764>>2]|0;
   $1766 = $2;
   _print_lyx_node_tree($1762,$1765,$1766,0);
   STACKTOP = sp;return;
   break;
  }
  case 58:  {
   $1767 = $2;
   $1768 = (($1767) + 112|0);
   $1769 = HEAP8[$1768>>0]|0;
   $1770 = $1769&1;
   if ($1770) {
    $1771 = $0;
    _g_string_append($1771,10400);
   } else {
    $1772 = $0;
    _g_string_append($1772,10448);
   }
   $1773 = $2;
   $1774 = (($1773) + 20|0);
   HEAP32[$1774>>2] = 0;
   $1775 = $0;
   $1776 = $1;
   $1777 = (($1776) + 12|0);
   $1778 = HEAP32[$1777>>2]|0;
   $1779 = $2;
   _print_lyx_node_tree($1775,$1778,$1779,0);
   $1780 = $0;
   _g_string_append($1780,10392);
   $1781 = $2;
   $1782 = (($1781) + 120|0);
   HEAP8[$1782>>0] = 0;
   $1783 = $2;
   $1784 = (($1783) + 96|0);
   $1785 = HEAP32[$1784>>2]|0;
   $1786 = (($1785) + 1)|0;
   HEAP32[$1784>>2] = $1786;
   STACKTOP = sp;return;
   break;
  }
  case 2:  {
   $17 = $0;
   $18 = $1;
   $19 = (($18) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $2;
   _print_lyx_string($17,$20,$21,0);
   STACKTOP = sp;return;
   break;
  }
  case 31:  {
   $1421 = $0;
   _g_string_append($1421,9488);
   $1422 = $0;
   $1423 = $1;
   $1424 = (($1423) + 4|0);
   $1425 = HEAP32[$1424>>2]|0;
   $1426 = $2;
   _print_lyx_string($1422,$1425,$1426,2);
   $1427 = $0;
   _g_string_append($1427,9512);
   STACKTOP = sp;return;
   break;
  }
  case 21:  {
   $657 = $0;
   _g_string_append($657,8328);
   $658 = $0;
   $659 = $1;
   $660 = (($659) + 12|0);
   $661 = HEAP32[$660>>2]|0;
   $662 = $2;
   _print_lyx_node_tree($658,$661,$662,0);
   $663 = $0;
   _g_string_append($663,8344);
   STACKTOP = sp;return;
   break;
  }
  case 61:  {
   STACKTOP = sp;return;
   break;
  }
  case 45:  {
   $1524 = $2;
   $1525 = (($1524) + 111|0);
   HEAP8[$1525>>0] = 0;
   $1526 = $2;
   $1527 = (($1526) + 100|0);
   $1528 = HEAP32[$1527>>2]|0;
   $old_type = $1528;
   $1529 = $1;
   $1530 = HEAP16[$1529>>1]|0;
   $1531 = $1530 << 16 >> 16;
   $1532 = $2;
   $1533 = (($1532) + 100|0);
   HEAP32[$1533>>2] = $1531;
   $1534 = $2;
   $1535 = (($1534) + 110|0);
   $1536 = HEAP8[$1535>>0]|0;
   $1537 = $1536&1;
   if ($1537) {
    $1538 = $0;
    _g_string_append($1538,9672);
    $1539 = $0;
    _g_string_append($1539,9696);
    $1540 = $0;
    _g_string_append($1540,8328);
    $1541 = $2;
    $1542 = (($1541) + 110|0);
    HEAP8[$1542>>0] = 0;
   } else {
    $1543 = $0;
    _g_string_append($1543,6480);
    $1544 = $0;
    _g_string_append($1544,9728);
   }
   $1545 = (_g_string_new(41432)|0);
   $temp_str = $1545;
   $1546 = $temp_str;
   $1547 = $1;
   $1548 = (($1547) + 12|0);
   $1549 = HEAP32[$1548>>2]|0;
   $1550 = $2;
   _print_lyx_node_tree($1546,$1549,$1550,0);
   $1551 = $temp_str;
   $1552 = HEAP32[$1551>>2]|0;
   $temp = $1552;
   while(1) {
    $1553 = $temp;
    $1554 = HEAP8[$1553>>0]|0;
    $1555 = $1554 << 24 >> 24;
    $1556 = ($1555|0)!=(0);
    if (!($1556)) {
     break;
    }
    $1557 = $temp;
    $1558 = HEAP8[$1557>>0]|0;
    $1559 = $1558 << 24 >> 24;
    $1560 = ($1559|0)==(32);
    if ($1560) {
     $1561 = $0;
     _g_string_append($1561,9728);
    } else {
     $1562 = $0;
     $1563 = $temp;
     $1564 = HEAP8[$1563>>0]|0;
     $1565 = $1564 << 24 >> 24;
     HEAP32[$vararg_buffer156>>2] = $1565;
     _g_string_append_printf($1562,9768,$vararg_buffer156);
    }
    $1566 = $temp;
    $1567 = (($1566) + 1|0);
    $temp = $1567;
   }
   $1568 = $temp_str;
   (_g_string_free($1568,1)|0);
   $1569 = $old_type;
   $1570 = $2;
   $1571 = (($1570) + 100|0);
   HEAP32[$1571>>2] = $1569;
   STACKTOP = sp;return;
   break;
  }
  case 40:  {
   $1467 = $0;
   _g_string_append($1467,9536);
   $1468 = $0;
   $1469 = $1;
   $1470 = (($1469) + 4|0);
   $1471 = HEAP32[$1470>>2]|0;
   HEAP32[$vararg_buffer153>>2] = $1471;
   _g_string_append_printf($1468,40832,$vararg_buffer153);
   STACKTOP = sp;return;
   break;
  }
  case 72: case 73:  {
   $1219 = $1;
   $1220 = (($1219) + 8|0);
   $1221 = HEAP32[$1220>>2]|0;
   $1222 = ($1221|0)!=(0|0);
   if ($1222) {
    $1223 = $1;
    $1224 = (($1223) + 8|0);
    $1225 = HEAP32[$1224>>2]|0;
    $1226 = HEAP32[$1225>>2]|0;
    $1227 = (_strncmp($1226,45008,2)|0);
    $1228 = ($1227|0)==(0);
    if ($1228) {
     $1229 = $1;
     $1230 = (($1229) + 8|0);
     $1231 = HEAP32[$1230>>2]|0;
     $1232 = HEAP32[$1231>>2]|0;
     $1233 = (_strlen(($1232|0))|0);
     $1234 = (($1233) - 1)|0;
     $1235 = $1;
     $1236 = (($1235) + 8|0);
     $1237 = HEAP32[$1236>>2]|0;
     $1238 = HEAP32[$1237>>2]|0;
     $1239 = (($1238) + ($1234)|0);
     HEAP8[$1239>>0] = 0;
     $1240 = $1;
     $1241 = HEAP16[$1240>>1]|0;
     $1242 = $1241 << 16 >> 16;
     $1243 = ($1242|0)==(73);
     if ($1243) {
      $1244 = $0;
      _g_string_append($1244,9232);
      $1245 = $0;
      _g_string_append($1245,9272);
      $1246 = $0;
      $1247 = $1;
      $1248 = (($1247) + 4|0);
      $1249 = HEAP32[$1248>>2]|0;
      $1250 = (($1249) + 2|0);
      HEAP32[$vararg_buffer124>>2] = $1250;
      _g_string_append_printf($1246,9296,$vararg_buffer124);
      $1251 = $0;
      _g_string_append($1251,8576);
     } else {
      $1252 = $0;
      _g_string_append($1252,9312);
      $1253 = $0;
      _g_string_append($1253,9352);
     }
    } else {
     label = 233;
    }
   } else {
    label = 233;
   }
   if ((label|0) == 233) {
    $1254 = $1;
    $1255 = (($1254) + 8|0);
    $1256 = HEAP32[$1255>>2]|0;
    $1257 = HEAP32[$1256>>2]|0;
    $1258 = $2;
    $1259 = (_note_number_for_label($1257,$1258)|0);
    $lev = $1259;
    $1260 = $lev;
    $1261 = ($1260|0)!=(0);
    if ($1261) {
     $1262 = $2;
     $1263 = (($1262) + 48|0);
     $1264 = HEAP32[$1263>>2]|0;
     $1265 = $lev;
     $1266 = (_node_for_count($1264,$1265)|0);
     $temp_node = $1266;
     $1267 = $temp_node;
     HEAP16[$1267>>1] = 63;
     $1268 = $lev;
     $1269 = $2;
     $1270 = (($1269) + 64|0);
     $1271 = HEAP32[$1270>>2]|0;
     $1272 = ($1268|0)>($1271|0);
     if ($1272) {
      $1273 = $lev;
      $1274 = $2;
      $1275 = (($1274) + 64|0);
      HEAP32[$1275>>2] = $1273;
     }
     $1276 = $1;
     $1277 = HEAP16[$1276>>1]|0;
     $1278 = $1277 << 16 >> 16;
     $1279 = ($1278|0)==(73);
     if ($1279) {
      $1280 = $0;
      _g_string_append($1280,9232);
      $1281 = $0;
      _g_string_append($1281,9272);
      $1282 = $0;
      $1283 = $1;
      $1284 = (($1283) + 8|0);
      $1285 = HEAP32[$1284>>2]|0;
      $1286 = HEAP32[$1285>>2]|0;
      HEAP32[$vararg_buffer127>>2] = $1286;
      _g_string_append_printf($1282,9296,$vararg_buffer127);
      $1287 = $0;
      _g_string_append($1287,8576);
     } else {
      $1288 = $1;
      $1289 = (($1288) + 12|0);
      $1290 = HEAP32[$1289>>2]|0;
      $1291 = ($1290|0)!=(0|0);
      if ($1291) {
       $1292 = $0;
       _g_string_append($1292,9232);
       $1293 = $0;
       _g_string_append($1293,9360);
       $1294 = $0;
       _g_string_append($1294,9384);
       $1295 = $0;
       $1296 = $1;
       $1297 = (($1296) + 12|0);
       $1298 = HEAP32[$1297>>2]|0;
       $1299 = $2;
       _print_lyx_node($1295,$1298,$1299,0);
       $1300 = $0;
       $1301 = $1;
       $1302 = (($1301) + 8|0);
       $1303 = HEAP32[$1302>>2]|0;
       $1304 = HEAP32[$1303>>2]|0;
       HEAP32[$vararg_buffer130>>2] = $1304;
       _g_string_append_printf($1300,9400,$vararg_buffer130);
       $1305 = $0;
       _g_string_append($1305,8576);
      } else {
       $1306 = $0;
       _g_string_append($1306,9232);
       $1307 = $0;
       _g_string_append($1307,9360);
       $1308 = $0;
       $1309 = $1;
       $1310 = (($1309) + 8|0);
       $1311 = HEAP32[$1310>>2]|0;
       $1312 = HEAP32[$1311>>2]|0;
       HEAP32[$vararg_buffer133>>2] = $1312;
       _g_string_append_printf($1308,9296,$vararg_buffer133);
       $1313 = $0;
       _g_string_append($1313,8576);
      }
     }
    } else {
     $1314 = $1;
     $1315 = (($1314) + 8|0);
     $1316 = HEAP32[$1315>>2]|0;
     $1317 = HEAP32[$1316>>2]|0;
     $temp = $1317;
     $1318 = $1;
     $1319 = HEAP16[$1318>>1]|0;
     $1320 = $1319 << 16 >> 16;
     $1321 = ($1320|0)==(73);
     if ($1321) {
      $1322 = $0;
      _g_string_append($1322,9232);
      $1323 = $0;
      _g_string_append($1323,9272);
      $1324 = $0;
      $1325 = $1;
      $1326 = (($1325) + 8|0);
      $1327 = HEAP32[$1326>>2]|0;
      $1328 = HEAP32[$1327>>2]|0;
      HEAP32[$vararg_buffer136>>2] = $1328;
      _g_string_append_printf($1324,9296,$vararg_buffer136);
      $1329 = $0;
      _g_string_append($1329,8576);
     } else {
      $1330 = $1;
      $1331 = (($1330) + 12|0);
      $1332 = HEAP32[$1331>>2]|0;
      $1333 = ($1332|0)!=(0|0);
      if ($1333) {
       $1334 = $temp;
       $1335 = (_strlen(($1334|0))|0);
       $1336 = (($1335) - 1)|0;
       $1337 = $temp;
       $1338 = (($1337) + ($1336)|0);
       $1339 = (_strcmp($1338,9416)|0);
       $1340 = ($1339|0)==(0);
       if ($1340) {
        $1341 = $0;
        _g_string_append($1341,9424);
        $1342 = $temp;
        $1343 = (_strlen(($1342|0))|0);
        $1344 = (($1343) - 1)|0;
        $1345 = $temp;
        $1346 = (($1345) + ($1344)|0);
        HEAP8[$1346>>0] = 0;
       } else {
        $1347 = $0;
        _g_string_append($1347,9232);
        $1348 = $0;
        _g_string_append($1348,9360);
        $1349 = $0;
        _g_string_append($1349,9384);
       }
       $1350 = $0;
       $1351 = $1;
       $1352 = (($1351) + 12|0);
       $1353 = HEAP32[$1352>>2]|0;
       $1354 = $2;
       _print_lyx_node($1350,$1353,$1354,0);
       $1355 = $0;
       $1356 = $temp;
       HEAP32[$vararg_buffer139>>2] = $1356;
       _g_string_append_printf($1355,9400,$vararg_buffer139);
       $1357 = $0;
       _g_string_append($1357,8576);
      } else {
       $1358 = $temp;
       $1359 = (_strlen(($1358|0))|0);
       $1360 = (($1359) - 1)|0;
       $1361 = $temp;
       $1362 = (($1361) + ($1360)|0);
       $1363 = (_strcmp($1362,9416)|0);
       $1364 = ($1363|0)==(0);
       if ($1364) {
        $1365 = $temp;
        $1366 = (_strlen(($1365|0))|0);
        $1367 = (($1366) - 1)|0;
        $1368 = $temp;
        $1369 = (($1368) + ($1367)|0);
        HEAP8[$1369>>0] = 0;
        $1370 = $0;
        $1371 = $temp;
        HEAP32[$vararg_buffer142>>2] = $1371;
        _g_string_append_printf($1370,9440,$vararg_buffer142);
       } else {
        $1372 = $0;
        _g_string_append($1372,9232);
        $1373 = $0;
        _g_string_append($1373,9360);
        $1374 = $0;
        $1375 = $temp;
        HEAP32[$vararg_buffer145>>2] = $1375;
        _g_string_append_printf($1374,9296,$vararg_buffer145);
        $1376 = $0;
        _g_string_append($1376,8576);
       }
      }
     }
    }
   }
   STACKTOP = sp;return;
   break;
  }
  case 85:  {
   STACKTOP = sp;return;
   break;
  }
  case 28: case 29:  {
   $960 = $1;
   $961 = (($960) + 8|0);
   $962 = HEAP32[$961>>2]|0;
   $963 = HEAP32[$962>>2]|0;
   $964 = ($963|0)==(0|0);
   if ($964) {
    $965 = $1;
    $966 = (($965) + 8|0);
    $967 = HEAP32[$966>>2]|0;
    $968 = (($967) + 4|0);
    $969 = HEAP32[$968>>2]|0;
    $970 = ($969|0)==(0|0);
    if ($970) {
     $971 = (_g_string_new(41432)|0);
     $temp_str = $971;
     $972 = $temp_str;
     $973 = $1;
     $974 = (($973) + 12|0);
     $975 = HEAP32[$974>>2]|0;
     _print_raw_node_tree($972,$975);
     $976 = $temp_str;
     $977 = HEAP32[$976>>2]|0;
     $978 = $1;
     $979 = (($978) + 8|0);
     $980 = HEAP32[$979>>2]|0;
     HEAP32[$980>>2] = $977;
     $981 = $temp_str;
     (_g_string_free($981,0)|0);
    }
   }
   $982 = $1;
   $983 = (($982) + 8|0);
   $984 = HEAP32[$983>>2]|0;
   $985 = HEAP32[$984>>2]|0;
   $986 = ($985|0)!=(0|0);
   do {
    if ($986) {
     $987 = $1;
     $988 = (($987) + 8|0);
     $989 = HEAP32[$988>>2]|0;
     $990 = HEAP32[$989>>2]|0;
     $991 = (___strdup($990)|0);
     $temp = $991;
     $992 = $1;
     $993 = (($992) + 8|0);
     $994 = HEAP32[$993>>2]|0;
     _free_link_data($994);
     $995 = $temp;
     $996 = $2;
     $997 = (_extract_link_data($995,$996)|0);
     $998 = $1;
     $999 = (($998) + 8|0);
     HEAP32[$999>>2] = $997;
     $1000 = $1;
     $1001 = (($1000) + 8|0);
     $1002 = HEAP32[$1001>>2]|0;
     $1003 = ($1002|0)==(0|0);
     if (!($1003)) {
      $1037 = $temp;
      _free($1037);
      break;
     }
     $1004 = $0;
     _g_string_append($1004,13312);
     $1005 = $0;
     $1006 = $1;
     $1007 = (($1006) + 12|0);
     $1008 = HEAP32[$1007>>2]|0;
     $1009 = $2;
     _print_lyx_node($1005,$1008,$1009,0);
     $1010 = $0;
     _g_string_append($1010,39600);
     $1011 = $1;
     $1012 = (($1011) + 12|0);
     $1013 = HEAP32[$1012>>2]|0;
     $1014 = (($1013) + 16|0);
     $1015 = HEAP32[$1014>>2]|0;
     $1016 = ($1015|0)!=(0|0);
     if ($1016) {
      $1017 = $0;
      _g_string_append($1017,40808);
      $1018 = $0;
      $1019 = $1;
      $1020 = (($1019) + 12|0);
      $1021 = HEAP32[$1020>>2]|0;
      $1022 = (($1021) + 16|0);
      $1023 = HEAP32[$1022>>2]|0;
      $1024 = $2;
      _print_lyx_node_tree($1018,$1023,$1024,0);
      $1025 = $0;
      _g_string_append($1025,39600);
     } else {
      $1026 = $1;
      $1027 = (($1026) + 4|0);
      $1028 = HEAP32[$1027>>2]|0;
      $1029 = ($1028|0)!=(0|0);
      if ($1029) {
       $1030 = $0;
       $1031 = $1;
       $1032 = (($1031) + 4|0);
       $1033 = HEAP32[$1032>>2]|0;
       HEAP32[$vararg_buffer94>>2] = $1033;
       _g_string_append_printf($1030,40832,$vararg_buffer94);
      } else {
       $1034 = $0;
       $1035 = $temp;
       HEAP32[$vararg_buffer97>>2] = $1035;
       _g_string_append_printf($1034,39608,$vararg_buffer97);
      }
     }
     $1036 = $temp;
     _free($1036);
     STACKTOP = sp;return;
    }
   } while(0);
   $1038 = $1;
   $1039 = HEAP16[$1038>>1]|0;
   $1040 = $1039 << 16 >> 16;
   $1041 = ($1040|0)==(29);
   if ($1041) {
    $1042 = $0;
    _g_string_append($1042,8824);
    $1043 = $0;
    _g_string_append($1043,8848);
    $1044 = $0;
    _g_string_append($1044,8880);
    $1045 = $0;
    _g_string_append($1045,8896);
    $1046 = $0;
    _g_string_append($1046,8912);
    $1047 = $0;
    _g_string_append($1047,8936);
   }
   $1048 = $0;
   _g_string_append($1048,8968);
   $1049 = $0;
   $1050 = $1;
   $1051 = (($1050) + 8|0);
   $1052 = HEAP32[$1051>>2]|0;
   $1053 = (($1052) + 4|0);
   $1054 = HEAP32[$1053>>2]|0;
   HEAP32[$vararg_buffer100>>2] = $1054;
   _g_string_append_printf($1049,8992,$vararg_buffer100);
   $1055 = $1;
   $1056 = (($1055) + 8|0);
   $1057 = HEAP32[$1056>>2]|0;
   $1058 = (($1057) + 12|0);
   $1059 = HEAP32[$1058>>2]|0;
   $1060 = ($1059|0)!=(0|0);
   if ($1060) {
    $1061 = $1;
    $1062 = (($1061) + 8|0);
    $1063 = HEAP32[$1062>>2]|0;
    $1064 = (($1063) + 12|0);
    $1065 = HEAP32[$1064>>2]|0;
    $1066 = (_node_for_attribute(13280,$1065)|0);
    $temp_node = $1066;
    $1067 = $temp_node;
    $1068 = ($1067|0)!=(0|0);
    if ($1068) {
     $1069 = $temp_node;
     $1070 = (($1069) + 12|0);
     $1071 = HEAP32[$1070>>2]|0;
     $1072 = (($1071) + 4|0);
     $1073 = HEAP32[$1072>>2]|0;
     $1074 = (_correct_dimension_units($1073)|0);
     $height = $1074;
    }
    $1075 = $1;
    $1076 = (($1075) + 8|0);
    $1077 = HEAP32[$1076>>2]|0;
    $1078 = (($1077) + 12|0);
    $1079 = HEAP32[$1078>>2]|0;
    $1080 = (_node_for_attribute(13288,$1079)|0);
    $temp_node = $1080;
    $1081 = $temp_node;
    $1082 = ($1081|0)!=(0|0);
    if ($1082) {
     $1083 = $temp_node;
     $1084 = (($1083) + 12|0);
     $1085 = HEAP32[$1084>>2]|0;
     $1086 = (($1085) + 4|0);
     $1087 = HEAP32[$1086>>2]|0;
     $1088 = (_correct_dimension_units($1087)|0);
     $width = $1088;
    }
   }
   $1089 = $width;
   $1090 = ($1089|0)!=(0|0);
   if ($1090) {
    $1091 = $width;
    $1092 = (_strlen(($1091|0))|0);
    $1093 = (($1092) - 1)|0;
    $1094 = $width;
    $1095 = (($1094) + ($1093)|0);
    $1096 = HEAP8[$1095>>0]|0;
    $1097 = $1096 << 24 >> 24;
    $1098 = ($1097|0)==(37);
    if ($1098) {
     $1099 = $width;
     $1100 = (_strlen(($1099|0))|0);
     $1101 = (($1100) - 1)|0;
     $1102 = $width;
     $1103 = (($1102) + ($1101)|0);
     HEAP8[$1103>>0] = 0;
     $1104 = $0;
     $1105 = $width;
     HEAP32[$vararg_buffer103>>2] = $1105;
     _g_string_append_printf($1104,9008,$vararg_buffer103);
     $1106 = $0;
     $1107 = $width;
     HEAP32[$vararg_buffer106>>2] = $1107;
     _g_string_append_printf($1106,9024,$vararg_buffer106);
    } else {
     $1108 = $0;
     $1109 = $width;
     HEAP32[$vararg_buffer109>>2] = $1109;
     _g_string_append_printf($1108,9040,$vararg_buffer109);
    }
   }
   $1110 = $height;
   $1111 = ($1110|0)!=(0|0);
   if ($1111) {
    $1112 = $height;
    $1113 = (_strlen(($1112|0))|0);
    $1114 = (($1113) - 1)|0;
    $1115 = $height;
    $1116 = (($1115) + ($1114)|0);
    $1117 = HEAP8[$1116>>0]|0;
    $1118 = $1117 << 24 >> 24;
    $1119 = ($1118|0)==(37);
    if ($1119) {
     $1120 = $height;
     $1121 = (_strlen(($1120|0))|0);
     $1122 = (($1121) - 1)|0;
     $1123 = $height;
     $1124 = (($1123) + ($1122)|0);
     HEAP8[$1124>>0] = 0;
     $1125 = $0;
     $1126 = $height;
     HEAP32[$vararg_buffer112>>2] = $1126;
     _g_string_append_printf($1125,9008,$vararg_buffer112);
     $1127 = $0;
     $1128 = $height;
     HEAP32[$vararg_buffer115>>2] = $1128;
     _g_string_append_printf($1127,9024,$vararg_buffer115);
    } else {
     $1129 = $0;
     $1130 = $height;
     HEAP32[$vararg_buffer118>>2] = $1130;
     _g_string_append_printf($1129,9056,$vararg_buffer118);
    }
   }
   $1131 = $0;
   _g_string_append($1131,7176);
   $1132 = $1;
   $1133 = HEAP16[$1132>>1]|0;
   $1134 = $1133 << 16 >> 16;
   $1135 = ($1134|0)==(29);
   if ($1135) {
    $1136 = $0;
    _g_string_append($1136,7016);
    $1137 = $1;
    $1138 = (($1137) + 12|0);
    $1139 = HEAP32[$1138>>2]|0;
    $1140 = ($1139|0)!=(0|0);
    if ($1140) {
     $1141 = $0;
     _g_string_append($1141,7352);
     $1142 = $0;
     _g_string_append($1142,9072);
     $1143 = $0;
     _g_string_append($1143,9096);
     $1144 = $0;
     $1145 = $1;
     $1146 = (($1145) + 12|0);
     $1147 = HEAP32[$1146>>2]|0;
     $1148 = $2;
     _print_lyx_node_tree($1144,$1147,$1148,0);
     $1149 = $0;
     _g_string_append($1149,6656);
     $1150 = $0;
     _g_string_append($1150,7480);
     $1151 = $1;
     $1152 = (($1151) + 8|0);
     $1153 = HEAP32[$1152>>2]|0;
     $1154 = HEAP32[$1153>>2]|0;
     $1155 = ($1154|0)!=(0|0);
     if ($1155) {
      $1156 = $0;
      _g_string_append($1156,9128);
      $1157 = $0;
      _g_string_append($1157,9168);
      $1158 = $1;
      $1159 = (($1158) + 8|0);
      $1160 = HEAP32[$1159>>2]|0;
      $1161 = HEAP32[$1160>>2]|0;
      $1162 = (_label_from_string($1161)|0);
      $temp = $1162;
      $1163 = $0;
      $1164 = $temp;
      HEAP32[$vararg_buffer121>>2] = $1164;
      _g_string_append_printf($1163,9192,$vararg_buffer121);
      $1165 = $0;
      _g_string_append($1165,7480);
      $1166 = $temp;
      _free($1166);
     }
     $1167 = $0;
     _g_string_append($1167,6656);
     $1168 = $0;
     _g_string_append($1168,7176);
    }
    $1169 = $0;
    _g_string_append($1169,6656);
   }
   $1170 = $height;
   _free($1170);
   $1171 = $width;
   _free($1171);
   $1172 = $1;
   $1173 = (($1172) + 8|0);
   $1174 = HEAP32[$1173>>2]|0;
   $1175 = (($1174) + 12|0);
   HEAP32[$1175>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 68:  {
   $951 = $0;
   $952 = $1;
   $953 = (($952) + 4|0);
   $954 = HEAP32[$953>>2]|0;
   $955 = $1;
   $956 = (($955) + 12|0);
   $957 = HEAP32[$956>>2]|0;
   $958 = (($957) + 4|0);
   $959 = HEAP32[$958>>2]|0;
   HEAP32[$vararg_buffer90>>2] = $954;
   $vararg_ptr93 = (($vararg_buffer90) + 4|0);
   HEAP32[$vararg_ptr93>>2] = $959;
   _g_string_append_printf($951,8808,$vararg_buffer90);
   STACKTOP = sp;return;
   break;
  }
  case 25: case 24: case 26:  {
   STACKTOP = sp;return;
   break;
  }
  case 70:  {
   STACKTOP = sp;return;
   break;
  }
  case 47:  {
   $200 = $0;
   _g_string_append($200,6864);
   $201 = $0;
   _g_string_append($201,7496);
   $202 = $0;
   _g_string_append($202,7536);
   $203 = $0;
   _g_string_append($203,7560);
   $204 = $0;
   _g_string_append($204,7576);
   $205 = $0;
   _g_string_append($205,7600);
   $206 = $0;
   _g_string_append($206,7176);
   $207 = $0;
   _g_string_append($207,6656);
   STACKTOP = sp;return;
   break;
  }
  case 39:  {
   $1428 = $0;
   $1429 = $1;
   $1430 = (($1429) + 12|0);
   $1431 = HEAP32[$1430>>2]|0;
   $1432 = $2;
   _print_lyx_node_tree($1428,$1431,$1432,0);
   STACKTOP = sp;return;
   break;
  }
  case 44: case 48: case 49:  {
   $300 = $1;
   $301 = HEAP16[$300>>1]|0;
   $302 = $301 << 16 >> 16;
   $303 = ($302|0)==(44);
   if ($303) {
    $304 = $2;
    $305 = (($304) + 110|0);
    HEAP8[$305>>0] = 1;
    $306 = $2;
    $307 = (($306) + 111|0);
    HEAP8[$307>>0] = 0;
   }
   $308 = $2;
   $309 = (($308) + 100|0);
   $310 = HEAP32[$309>>2]|0;
   $old_type = $310;
   $311 = $1;
   $312 = HEAP16[$311>>1]|0;
   $313 = $312 << 16 >> 16;
   $314 = $2;
   $315 = (($314) + 100|0);
   HEAP32[$315>>2] = $313;
   $316 = $2;
   $317 = (($316) + 104|0);
   $318 = HEAP32[$317>>2]|0;
   $319 = (($318) + 1)|0;
   HEAP32[$317>>2] = $319;
   $320 = $2;
   $321 = (($320) + 104|0);
   $322 = HEAP32[$321>>2]|0;
   $323 = ($322|0)>(1);
   if ($323) {
    $324 = $0;
    _g_string_append($324,7752);
   }
   $325 = $0;
   $326 = $1;
   $327 = (($326) + 12|0);
   $328 = HEAP32[$327>>2]|0;
   $329 = $2;
   _print_lyx_node_tree($325,$328,$329,0);
   $330 = $2;
   $331 = (($330) + 104|0);
   $332 = HEAP32[$331>>2]|0;
   $333 = (($332) + -1)|0;
   HEAP32[$331>>2] = $333;
   $334 = $2;
   $335 = (($334) + 104|0);
   $336 = HEAP32[$335>>2]|0;
   $337 = ($336|0)>(0);
   if ($337) {
    $338 = $0;
    _g_string_append($338,7232);
   }
   $339 = $old_type;
   $340 = $2;
   $341 = (($340) + 100|0);
   HEAP32[$341>>2] = $339;
   $342 = $2;
   $343 = (($342) + 111|0);
   HEAP8[$343>>0] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 4:  {
   $413 = $0;
   $414 = $2;
   _print_lyx_endnotes($413,$414);
   STACKTOP = sp;return;
   break;
  }
  case 22:  {
   $664 = $0;
   _g_string_append($664,8368);
   $665 = $0;
   $666 = $1;
   $667 = (($666) + 12|0);
   $668 = HEAP32[$667>>2]|0;
   $669 = $2;
   _print_lyx_node_tree($665,$668,$669,0);
   $670 = $0;
   _g_string_append($670,8384);
   STACKTOP = sp;return;
   break;
  }
  case 43: case 41:  {
   $230 = $2;
   $231 = (($230) + 100|0);
   $232 = HEAP32[$231>>2]|0;
   $old_type = $232;
   $233 = $2;
   $234 = (($233) + 100|0);
   HEAP32[$234>>2] = 41;
   $235 = $2;
   $236 = (($235) + 104|0);
   $237 = HEAP32[$236>>2]|0;
   $238 = (($237) + 1)|0;
   HEAP32[$236>>2] = $238;
   $239 = $2;
   $240 = (($239) + 104|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = ($241|0)>(1);
   if ($242) {
    $243 = $0;
    _g_string_append($243,7752);
   }
   $244 = $0;
   _g_string_append($244,7768);
   $245 = $0;
   _g_string_append($245,7792);
   $246 = $1;
   $247 = (($246) + 12|0);
   $248 = HEAP32[$247>>2]|0;
   $249 = ($248|0)!=(0|0);
   if ($249) {
    $250 = $1;
    $251 = (($250) + 12|0);
    $252 = HEAP32[$251>>2]|0;
    $253 = HEAP16[$252>>1]|0;
    $254 = $253 << 16 >> 16;
    $255 = ($254|0)==(42);
    if ($255) {
     $256 = $1;
     $257 = (($256) + 12|0);
     $258 = HEAP32[$257>>2]|0;
     $259 = (($258) + 4|0);
     $260 = HEAP32[$259>>2]|0;
     _trim_trailing_whitespace($260);
     $261 = $1;
     $262 = (($261) + 12|0);
     $263 = HEAP32[$262>>2]|0;
     $264 = (($263) + 4|0);
     $265 = HEAP32[$264>>2]|0;
     $266 = (_strlen(($265|0))|0);
     $267 = ($266>>>0)>(0);
     if ($267) {
      $268 = $0;
      $269 = $1;
      $270 = (($269) + 12|0);
      $271 = HEAP32[$270>>2]|0;
      $272 = (($271) + 4|0);
      $273 = HEAP32[$272>>2]|0;
      $274 = $1;
      $275 = (($274) + 4|0);
      $276 = HEAP32[$275>>2]|0;
      HEAP32[$vararg_buffer13>>2] = $273;
      $vararg_ptr16 = (($vararg_buffer13) + 4|0);
      HEAP32[$vararg_ptr16>>2] = $276;
      _g_string_append_printf($268,7816,$vararg_buffer13);
     } else {
      $277 = $0;
      _g_string_append($277,7880);
     }
    } else {
     label = 63;
    }
   } else {
    label = 63;
   }
   if ((label|0) == 63) {
    $278 = $0;
    _g_string_append($278,7880);
   }
   $279 = $0;
   _g_string_append($279,7936);
   $280 = $0;
   _g_string_append($280,7952);
   $281 = $0;
   $282 = $1;
   $283 = (($282) + 4|0);
   $284 = HEAP32[$283>>2]|0;
   $285 = $2;
   _print_lyx_string($281,$284,$285,3);
   $286 = $0;
   _g_string_append($286,7176);
   $287 = $0;
   _g_string_append($287,7976);
   $288 = $2;
   $289 = (($288) + 104|0);
   $290 = HEAP32[$289>>2]|0;
   $291 = (($290) + -1)|0;
   HEAP32[$289>>2] = $291;
   $292 = $2;
   $293 = (($292) + 104|0);
   $294 = HEAP32[$293>>2]|0;
   $295 = ($294|0)>(0);
   if ($295) {
    $296 = $0;
    _g_string_append($296,7232);
   }
   $297 = $old_type;
   $298 = $2;
   $299 = (($298) + 100|0);
   HEAP32[$299>>2] = $297;
   STACKTOP = sp;return;
   break;
  }
  case 30:  {
   $1176 = $1;
   $1177 = $2;
   $1178 = (_note_number_for_node($1176,$1177)|0);
   $lev = $1178;
   $1179 = $2;
   $1180 = (($1179) + 48|0);
   $1181 = HEAP32[$1180>>2]|0;
   $1182 = $lev;
   $1183 = (_node_for_count($1181,$1182)|0);
   $temp_node = $1183;
   $1184 = $temp_node;
   $1185 = HEAP16[$1184>>1]|0;
   $1186 = $1185 << 16 >> 16;
   $1187 = ($1186|0)==(69);
   if ($1187) {
    $1188 = $0;
    _g_string_append($1188,7072);
    $1189 = $0;
    _g_string_append($1189,7112);
    $1190 = $temp_node;
    $1191 = HEAP16[$1190>>1]|0;
    $1192 = $1191 << 16 >> 16;
    $1193 = $2;
    $1194 = (($1193) + 100|0);
    HEAP32[$1194>>2] = $1192;
    $1195 = $0;
    $1196 = $temp_node;
    $1197 = (($1196) + 12|0);
    $1198 = HEAP32[$1197>>2]|0;
    $1199 = $2;
    _print_lyx_node_tree($1195,$1198,$1199,0);
    $1200 = $2;
    $1201 = (($1200) + 100|0);
    HEAP32[$1201>>2] = 0;
    $1202 = $0;
    _g_string_append($1202,7176);
   } else {
    $1203 = $0;
    _g_string_append($1203,7424);
    $1204 = $0;
    _g_string_append($1204,9208);
    $1205 = $2;
    $1206 = (($1205) + 100|0);
    $1207 = HEAP32[$1206>>2]|0;
    $old_type = $1207;
    $1208 = $2;
    $1209 = (($1208) + 100|0);
    HEAP32[$1209>>2] = 5;
    $1210 = $0;
    $1211 = $temp_node;
    $1212 = (($1211) + 12|0);
    $1213 = HEAP32[$1212>>2]|0;
    $1214 = $2;
    _print_lyx_node_tree($1210,$1213,$1214,0);
    $1215 = $old_type;
    $1216 = $2;
    $1217 = (($1216) + 100|0);
    HEAP32[$1217>>2] = $1215;
    $1218 = $0;
    _g_string_append($1218,8576);
   }
   STACKTOP = sp;return;
   break;
  }
  case 15: case 14: case 13: case 12: case 11: case 10:  {
   $420 = $1;
   $421 = HEAP16[$420>>1]|0;
   $422 = $421 << 16 >> 16;
   $423 = (($422) - 10)|0;
   $424 = $2;
   $425 = (($424) + 8|0);
   $426 = HEAP32[$425>>2]|0;
   $427 = (($423) + ($426))|0;
   $lev = $427;
   $428 = $lev;
   $429 = ($428|0)>(7);
   if ($429) {
    $lev = 7;
   }
   $430 = (_g_string_new(8032)|0);
   $environment = $430;
   $431 = $environment;
   $432 = $lev;
   $433 = (($432) - 1)|0;
   $434 = (5472 + ($433<<2)|0);
   $435 = HEAP32[$434>>2]|0;
   $436 = HEAP32[$435>>2]|0;
   _g_string_append($431,$436);
   $437 = $2;
   $438 = (($437) + 109|0);
   $439 = HEAP8[$438>>0]|0;
   $440 = $439&1;
   if ($440) {
    $442 = $environment;
    _g_string_append($442,42896);
   } else {
    $441 = $environment;
    _g_string_append($441,8048);
   }
   $443 = $0;
   $444 = $environment;
   $445 = HEAP32[$444>>2]|0;
   HEAP32[$vararg_buffer17>>2] = $445;
   _g_string_append_printf($443,40832,$vararg_buffer17);
   $446 = $environment;
   (_g_string_free($446,1)|0);
   $447 = $2;
   $448 = (($447) + 108|0);
   HEAP8[$448>>0] = 1;
   $449 = $1;
   $450 = (($449) + 12|0);
   $451 = HEAP32[$450>>2]|0;
   $452 = HEAP16[$451>>1]|0;
   $453 = $452 << 16 >> 16;
   $454 = ($453|0)==(27);
   if ($454) {
    $455 = $1;
    $456 = (($455) + 12|0);
    $457 = HEAP32[$456>>2]|0;
    $458 = (($457) + 4|0);
    $459 = HEAP32[$458>>2]|0;
    $460 = (_label_from_string($459)|0);
    $temp = $460;
    $461 = $lev;
    $462 = (($461) - 1)|0;
    $463 = (5472 + ($462<<2)|0);
    $464 = HEAP32[$463>>2]|0;
    $465 = HEAP32[$464>>2]|0;
    $466 = $temp;
    $467 = (_prefix_label($465,$466,0)|0);
    $prefixed_label = $467;
    $468 = $0;
    $469 = $1;
    $470 = (($469) + 12|0);
    $471 = HEAP32[$470>>2]|0;
    $472 = (($471) + 16|0);
    $473 = HEAP32[$472>>2]|0;
    $474 = $2;
    _print_lyx_node_tree($468,$473,$474,0);
    $475 = $0;
    _g_string_append($475,8056);
    $476 = $0;
    _g_string_append($476,8096);
    $477 = $0;
    $478 = $prefixed_label;
    HEAP32[$vararg_buffer20>>2] = $478;
    _g_string_append_printf($477,8120,$vararg_buffer20);
    $479 = $0;
    _g_string_append($479,7176);
    $480 = $prefixed_label;
    _free($480);
    $481 = $temp;
    _free($481);
   } else {
    $482 = $1;
    $483 = (($482) + 12|0);
    $484 = HEAP32[$483>>2]|0;
    $485 = (_label_from_node_tree($484)|0);
    $temp = $485;
    $486 = $lev;
    $487 = (($486) - 1)|0;
    $488 = (5472 + ($487<<2)|0);
    $489 = HEAP32[$488>>2]|0;
    $490 = HEAP32[$489>>2]|0;
    $491 = $temp;
    $492 = (_prefix_label($490,$491,0)|0);
    $prefixed_label = $492;
    $493 = $0;
    $494 = $1;
    $495 = (($494) + 12|0);
    $496 = HEAP32[$495>>2]|0;
    $497 = $2;
    _print_lyx_node_tree($493,$496,$497,0);
    $498 = $0;
    _g_string_append($498,8056);
    $499 = $0;
    _g_string_append($499,8096);
    $500 = $0;
    $501 = $prefixed_label;
    HEAP32[$vararg_buffer23>>2] = $501;
    _g_string_append_printf($500,8120,$vararg_buffer23);
    $502 = $0;
    _g_string_append($502,7176);
    $503 = $prefixed_label;
    _free($503);
    $504 = $temp;
    _free($504);
   }
   $505 = $2;
   $506 = (($505) + 108|0);
   HEAP8[$506>>0] = 0;
   $507 = $0;
   _g_string_append($507,6656);
   STACKTOP = sp;return;
   break;
  }
  case 79:  {
   $1874 = $0;
   $1875 = $1;
   $1876 = (($1875) + 4|0);
   $1877 = HEAP32[$1876>>2]|0;
   HEAP32[$vararg_buffer178>>2] = $1877;
   _g_string_append_printf($1874,10608,$vararg_buffer178);
   STACKTOP = sp;return;
   break;
  }
  case 80:  {
   $1878 = $0;
   $1879 = $1;
   $1880 = (($1879) + 4|0);
   $1881 = HEAP32[$1880>>2]|0;
   HEAP32[$vararg_buffer181>>2] = $1881;
   _g_string_append_printf($1878,10704,$vararg_buffer181);
   STACKTOP = sp;return;
   break;
  }
  case 87:  {
   STACKTOP = sp;return;
   break;
  }
  case 86:  {
   $1882 = $0;
   $1883 = $1;
   $1884 = (($1883) + 12|0);
   $1885 = HEAP32[$1884>>2]|0;
   $1886 = $2;
   _print_lyx_node_tree($1882,$1885,$1886,0);
   STACKTOP = sp;return;
   break;
  }
  case 33:  {
   $510 = $0;
   $511 = $2;
   _print_lyx_localized_typography($510,6,$511);
   STACKTOP = sp;return;
   break;
  }
  case 46:  {
   $1572 = $2;
   $1573 = (($1572) + 110|0);
   $1574 = HEAP8[$1573>>0]|0;
   $1575 = $1574&1;
   if (!($1575)) {
    $1576 = $0;
    _g_string_append($1576,8344);
   }
   $1577 = $2;
   $1578 = (($1577) + 110|0);
   HEAP8[$1578>>0] = 1;
   $1579 = $2;
   $1580 = (($1579) + 100|0);
   $1581 = HEAP32[$1580>>2]|0;
   $old_type = $1581;
   $1582 = $1;
   $1583 = HEAP16[$1582>>1]|0;
   $1584 = $1583 << 16 >> 16;
   $1585 = $2;
   $1586 = (($1585) + 100|0);
   HEAP32[$1586>>2] = $1584;
   $1587 = $0;
   $1588 = $1;
   $1589 = (($1588) + 12|0);
   $1590 = HEAP32[$1589>>2]|0;
   $1591 = $2;
   _print_lyx_node_tree($1587,$1590,$1591,0);
   $1592 = $old_type;
   $1593 = $2;
   $1594 = (($1593) + 100|0);
   HEAP32[$1594>>2] = $1592;
   STACKTOP = sp;return;
   break;
  }
  case 51:  {
   $208 = $1;
   $209 = (($208) + 4|0);
   $210 = HEAP32[$209>>2]|0;
   $211 = (_strncmp($210,42136,4)|0);
   $212 = ($211|0)==(0);
   if ($212) {
    $213 = $1;
    $214 = (($213) + 4|0);
    $215 = HEAP32[$214>>2]|0;
    $216 = (_strlen(($215|0))|0);
    $217 = (($216) - 3)|0;
    $218 = $1;
    $219 = (($218) + 4|0);
    $220 = HEAP32[$219>>2]|0;
    $221 = (($220) + ($217)|0);
    HEAP8[$221>>0] = 0;
    $222 = $0;
    _g_string_append($222,7616);
    $223 = $0;
    $224 = $1;
    $225 = (($224) + 4|0);
    $226 = HEAP32[$225>>2]|0;
    $227 = (($226) + 4|0);
    $228 = $2;
    _print_latex_string($223,$227,$228);
    $229 = $0;
    _g_string_append($229,7712);
   }
   STACKTOP = sp;return;
   break;
  }
  case 71:  {
   $1393 = $1;
   $1394 = (($1393) + 16|0);
   $1395 = HEAP32[$1394>>2]|0;
   $1396 = ($1395|0)!=(0|0);
   if ($1396) {
    $1397 = $1;
    $1398 = (($1397) + 16|0);
    $1399 = HEAP32[$1398>>2]|0;
    $1400 = HEAP16[$1399>>1]|0;
    $1401 = $1400 << 16 >> 16;
    $1402 = ($1401|0)==(70);
    if ($1402) {
     $1403 = $0;
     _g_string_append($1403,9456);
     $1404 = $0;
     $1405 = $1;
     $1406 = (($1405) + 16|0);
     $1407 = HEAP32[$1406>>2]|0;
     $1408 = (($1407) + 4|0);
     $1409 = HEAP32[$1408>>2]|0;
     $1410 = $2;
     _print_lyx_string($1404,$1409,$1410,0);
     $1411 = $0;
     _g_string_append($1411,33880);
    }
   }
   $1412 = $0;
   _g_string_append($1412,9472);
   $1413 = $0;
   $1414 = $1;
   $1415 = (($1414) + 12|0);
   $1416 = HEAP32[$1415>>2]|0;
   $1417 = (($1416) + 4|0);
   $1418 = HEAP32[$1417>>2]|0;
   $1419 = $2;
   _print_latex_string($1413,$1418,$1419);
   $1420 = $0;
   _g_string_append($1420,33880);
   STACKTOP = sp;return;
   break;
  }
  case 53:  {
   STACKTOP = sp;return;
   break;
  }
  case 54:  {
   STACKTOP = sp;return;
   break;
  }
  case 32:  {
   $1472 = $1;
   $1473 = (($1472) + 4|0);
   $1474 = HEAP32[$1473>>2]|0;
   $1475 = (_strncmp($1474,33984,6)|0);
   $1476 = ($1475|0)==(0);
   if ($1476) {
    $1477 = $0;
    _g_string_append($1477,33880);
    STACKTOP = sp;return;
   }
   $1478 = $1;
   $1479 = (($1478) + 4|0);
   $1480 = HEAP32[$1479>>2]|0;
   $1481 = (_strncmp($1480,9544,6)|0);
   $1482 = ($1481|0)==(0);
   if ($1482) {
    $1483 = $0;
    _g_string_append($1483,9552);
    STACKTOP = sp;return;
   }
   $1484 = $1;
   $1485 = (($1484) + 4|0);
   $1486 = HEAP32[$1485>>2]|0;
   $1487 = (_strncmp($1486,33960,5)|0);
   $1488 = ($1487|0)==(0);
   if ($1488) {
    $1489 = $0;
    _g_string_append($1489,9560);
    STACKTOP = sp;return;
   }
   $1490 = $1;
   $1491 = (($1490) + 4|0);
   $1492 = HEAP32[$1491>>2]|0;
   $1493 = (_strncmp($1492,33968,4)|0);
   $1494 = ($1493|0)==(0);
   if ($1494) {
    $1495 = $0;
    _g_string_append($1495,42664);
    STACKTOP = sp;return;
   }
   $1496 = $1;
   $1497 = (($1496) + 4|0);
   $1498 = HEAP32[$1497>>2]|0;
   $1499 = (_strncmp($1498,33976,4)|0);
   $1500 = ($1499|0)==(0);
   if ($1500) {
    $1501 = $0;
    _g_string_append($1501,42616);
    STACKTOP = sp;return;
   }
   $1502 = $1;
   $1503 = (($1502) + 4|0);
   $1504 = HEAP32[$1503>>2]|0;
   $1505 = (_strncmp($1504,42136,4)|0);
   $1506 = ($1505|0)==(0);
   if ($1506) {
    $1507 = $1;
    $1508 = (($1507) + 4|0);
    $1509 = HEAP32[$1508>>2]|0;
    $1510 = (_strlen(($1509|0))|0);
    $1511 = (($1510) - 3)|0;
    $1512 = $1;
    $1513 = (($1512) + 4|0);
    $1514 = HEAP32[$1513>>2]|0;
    $1515 = (($1514) + ($1511)|0);
    HEAP8[$1515>>0] = 0;
    $1516 = $0;
    _g_string_append($1516,9568);
    $1517 = $0;
    $1518 = $1;
    $1519 = (($1518) + 4|0);
    $1520 = HEAP32[$1519>>2]|0;
    $1521 = (($1520) + 4|0);
    $1522 = $2;
    _print_lyx_string($1517,$1521,$1522,0);
    $1523 = $0;
    _g_string_append($1523,9640);
   }
   STACKTOP = sp;return;
   break;
  }
  case 52:  {
   $1595 = $2;
   $1596 = (($1595) + 132|0);
   HEAP32[$1596>>2] = 0;
   $1597 = $1;
   $1598 = (($1597) + 12|0);
   $1599 = HEAP32[$1598>>2]|0;
   $tcaption = $1599;
   $1600 = $tcaption;
   $1601 = HEAP16[$1600>>1]|0;
   $1602 = $1601 << 16 >> 16;
   $1603 = ($1602|0)==(53);
   if ($1603) {
    $1604 = $tcaption;
    $1605 = $2;
    $1606 = (($1605) + 132|0);
    HEAP32[$1606>>2] = $1604;
   }
   $1607 = $2;
   $1608 = (($1607) + 96|0);
   HEAP32[$1608>>2] = 0;
   $1609 = $2;
   $1610 = (($1609) + 20|0);
   HEAP32[$1610>>2] = 0;
   $1611 = $1;
   $1612 = (($1611) + 12|0);
   $1613 = HEAP32[$1612>>2]|0;
   $1614 = $2;
   _lyx_get_table_dimensions($1613,$rows,$cols,$1614);
   $1615 = HEAP32[$rows>>2]|0;
   $1616 = $2;
   $1617 = (($1616) + 124|0);
   HEAP32[$1617>>2] = $1615;
   $1618 = $2;
   $1619 = (($1618) + 132|0);
   $1620 = HEAP32[$1619>>2]|0;
   $1621 = ($1620|0)!=(0|0);
   if ($1621) {
    $1622 = HEAP32[$rows>>2]|0;
    $1623 = (($1622) + 1)|0;
    HEAP32[$rows>>2] = $1623;
   }
   $1624 = HEAP32[$cols>>2]|0;
   $1625 = $2;
   $1626 = (($1625) + 128|0);
   HEAP32[$1626>>2] = $1624;
   $1627 = $0;
   _g_string_append($1627,8824);
   $1628 = $0;
   _g_string_append($1628,9776);
   $1629 = $0;
   $1630 = HEAP32[$rows>>2]|0;
   $1631 = HEAP32[$cols>>2]|0;
   HEAP32[$vararg_buffer159>>2] = $1630;
   $vararg_ptr162 = (($vararg_buffer159) + 4|0);
   HEAP32[$vararg_ptr162>>2] = $1631;
   _g_string_append_printf($1629,9800,$vararg_buffer159);
   $1632 = $0;
   _g_string_append($1632,9856);
   $1633 = $0;
   $1634 = $1;
   $1635 = (($1634) + 12|0);
   $1636 = HEAP32[$1635>>2]|0;
   $1637 = $2;
   _print_lyx_node_tree($1633,$1636,$1637,0);
   $1638 = $0;
   _g_string_append($1638,9960);
   $1639 = $0;
   _g_string_append($1639,7480);
   $1640 = $0;
   _g_string_append($1640,6656);
   $1641 = $2;
   $1642 = (($1641) + 132|0);
   HEAP32[$1642>>2] = 0;
   $1643 = $2;
   $1644 = (($1643) + 16|0);
   HEAP32[$1644>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 81:  {
   $1377 = $1;
   $1378 = (($1377) + 4|0);
   $1379 = HEAP32[$1378>>2]|0;
   $1380 = $2;
   $1381 = (($1380) + 52|0);
   $1382 = HEAP32[$1381>>2]|0;
   $1383 = (_metavalue_for_key($1379,$1382)|0);
   $temp = $1383;
   $1384 = $temp;
   $1385 = ($1384|0)==(0|0);
   if ($1385) {
    $1386 = $0;
    $1387 = $1;
    $1388 = (($1387) + 4|0);
    $1389 = HEAP32[$1388>>2]|0;
    HEAP32[$vararg_buffer148>>2] = $1389;
    _g_string_append_printf($1386,39936,$vararg_buffer148);
   } else {
    $1390 = $0;
    $1391 = $temp;
    _g_string_append_printf($1390,$1391,$vararg_buffer151);
    $1392 = $temp;
    _free($1392);
   }
   STACKTOP = sp;return;
   break;
  }
  case 63:  {
   $1863 = $1;
   $1864 = HEAP16[$1863>>1]|0;
   $1865 = $1864 << 16 >> 16;
   $1866 = $2;
   $1867 = (($1866) + 100|0);
   HEAP32[$1867>>2] = $1865;
   $1868 = $0;
   $1869 = $1;
   $1870 = (($1869) + 12|0);
   $1871 = HEAP32[$1870>>2]|0;
   $1872 = $2;
   _print_lyx_node($1868,$1871,$1872,0);
   STACKTOP = sp;return;
   break;
  }
  case 64:  {
   $1873 = HEAP32[_stderr>>2]|0;
   (_fprintf(($1873|0),(15240|0),($vararg_buffer176|0))|0);
   STACKTOP = sp;return;
   break;
  }
  case 66: case 65:  {
   STACKTOP = sp;return;
   break;
  }
  case 84:  {
   $22 = $1;
   $23 = (($22) + 16|0);
   $24 = HEAP32[$23>>2]|0;
   $temp_node = $24;
   while(1) {
    $25 = $temp_node;
    $26 = HEAP16[$25>>1]|0;
    $27 = $26 << 16 >> 16;
    $28 = ($27|0)!=(85);
    if (!($28)) {
     break;
    }
    $29 = $temp_node;
    $30 = (($29) + 16|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $1;
    $33 = (($32) + 16|0);
    HEAP32[$33>>2] = $31;
    $34 = $temp_node;
    $35 = (($34) + 16|0);
    HEAP32[$35>>2] = 0;
    $36 = $temp_node;
    _free_node($36);
    $37 = $1;
    $38 = (($37) + 16|0);
    $39 = HEAP32[$38>>2]|0;
    $temp_node = $39;
   }
   $40 = $temp_node;
   $41 = (($40) + 16|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $1;
   $44 = (($43) + 16|0);
   HEAP32[$44>>2] = $42;
   $45 = $temp_node;
   $46 = (($45) + 16|0);
   HEAP32[$46>>2] = 0;
   $47 = $temp_node;
   _free_node($47);
   break;
  }
  case 38:  {
   $1433 = $2;
   $1434 = (($1433) + 100|0);
   $1435 = HEAP32[$1434>>2]|0;
   $old_type = $1435;
   $1436 = $1;
   $1437 = HEAP16[$1436>>1]|0;
   $1438 = $1437 << 16 >> 16;
   $1439 = $2;
   $1440 = (($1439) + 100|0);
   HEAP32[$1440>>2] = $1438;
   $1441 = $2;
   $1442 = (($1441) + 104|0);
   $1443 = HEAP32[$1442>>2]|0;
   $1444 = (($1443) + 1)|0;
   HEAP32[$1442>>2] = $1444;
   $1445 = $2;
   $1446 = (($1445) + 104|0);
   $1447 = HEAP32[$1446>>2]|0;
   $1448 = ($1447|0)>(1);
   if ($1448) {
    $1449 = $0;
    _g_string_append($1449,7752);
   }
   $1450 = $0;
   $1451 = $1;
   $1452 = (($1451) + 12|0);
   $1453 = HEAP32[$1452>>2]|0;
   $1454 = $2;
   _print_lyx_node_tree($1450,$1453,$1454,0);
   $1455 = $2;
   $1456 = (($1455) + 104|0);
   $1457 = HEAP32[$1456>>2]|0;
   $1458 = (($1457) + -1)|0;
   HEAP32[$1456>>2] = $1458;
   $1459 = $2;
   $1460 = (($1459) + 104|0);
   $1461 = HEAP32[$1460>>2]|0;
   $1462 = ($1461|0)>(0);
   if ($1462) {
    $1463 = $0;
    _g_string_append($1463,7232);
   }
   $1464 = $old_type;
   $1465 = $2;
   $1466 = (($1465) + 100|0);
   HEAP32[$1466>>2] = $1464;
   STACKTOP = sp;return;
   break;
  }
  case 56:  {
   $1787 = (_g_string_new(41432)|0);
   $temp_str = $1787;
   $1788 = $2;
   $1789 = (($1788) + 20|0);
   $1790 = HEAP32[$1789>>2]|0;
   $1791 = $2;
   $1792 = (($1791) + 16|0);
   $1793 = HEAP32[$1792>>2]|0;
   $1794 = (($1793) + ($1790)|0);
   $1795 = HEAP8[$1794>>0]|0;
   $char_temp = $1795;
   $1796 = $char_temp;
   $1797 = $1796 << 24 >> 24;
   switch ($1797|0) {
   case 67: case 99:  {
    $1798 = $temp_str;
    _g_string_append($1798,41536);
    break;
   }
   case 82: case 114:  {
    $1799 = $temp_str;
    _g_string_append($1799,9976);
    break;
   }
   case 76: case 108:  {
    $1800 = $temp_str;
    _g_string_append($1800,9984);
    break;
   }
   default: {
   }
   }
   $multicol = 1;
   $1801 = $1;
   $1802 = (($1801) + 12|0);
   $1803 = HEAP32[$1802>>2]|0;
   $1804 = ($1803|0)!=(0|0);
   if ($1804) {
    $1805 = $1;
    $1806 = (($1805) + 12|0);
    $1807 = HEAP32[$1806>>2]|0;
    $1808 = HEAP16[$1807>>1]|0;
    $1809 = $1808 << 16 >> 16;
    $1810 = ($1809|0)==(57);
    if ($1810) {
     $1811 = $1;
     $1812 = (($1811) + 12|0);
     $1813 = HEAP32[$1812>>2]|0;
     $1814 = (($1813) + 4|0);
     $1815 = HEAP32[$1814>>2]|0;
     $1816 = (_strlen(($1815|0))|0);
     $1817 = (($1816) + 1)|0;
     $multicol = $1817;
    }
   }
   $i = 1;
   while(1) {
    $1818 = $i;
    $1819 = $multicol;
    $1820 = ($1818|0)<=($1819|0);
    if (!($1820)) {
     break;
    }
    $1821 = $0;
    _g_string_append($1821,10456);
    $1822 = $multicol;
    $1823 = ($1822|0)>(1);
    if ($1823) {
     $1824 = $0;
     $1825 = $i;
     HEAP32[$vararg_buffer170>>2] = $1825;
     _g_string_append_printf($1824,10464,$vararg_buffer170);
    }
    $1826 = $0;
    $1827 = $temp_str;
    $1828 = HEAP32[$1827>>2]|0;
    HEAP32[$vararg_buffer173>>2] = $1828;
    _g_string_append_printf($1826,10488,$vararg_buffer173);
    $1829 = $0;
    _g_string_append($1829,10504);
    $1830 = $2;
    $1831 = (($1830) + 120|0);
    $1832 = HEAP8[$1831>>0]|0;
    $1833 = $1832&1;
    if ($1833) {
     $1834 = $0;
     _g_string_append($1834,10528);
    }
    $1835 = $2;
    $1836 = (($1835) + 96|0);
    $1837 = HEAP32[$1836>>2]|0;
    $1838 = $2;
    $1839 = (($1838) + 124|0);
    $1840 = HEAP32[$1839>>2]|0;
    $1841 = (($1840) - 1)|0;
    $1842 = ($1837|0)>=($1841|0);
    if ($1842) {
     $1843 = $0;
     _g_string_append($1843,10544);
    }
    $1844 = $0;
    _g_string_append($1844,10568);
    $1845 = $0;
    _g_string_append($1845,42616);
    $1846 = $0;
    _g_string_append($1846,10584);
    $1847 = $0;
    _g_string_append($1847,9096);
    $1848 = $0;
    $1849 = $1;
    $1850 = (($1849) + 12|0);
    $1851 = HEAP32[$1850>>2]|0;
    $1852 = $2;
    _print_lyx_node_tree($1848,$1851,$1852,0);
    $1853 = $0;
    _g_string_append($1853,6656);
    $1854 = $0;
    _g_string_append($1854,7000);
    $1855 = $0;
    _g_string_append($1855,10248);
    $1856 = $i;
    $1857 = (($1856) + 1)|0;
    $i = $1857;
   }
   $1858 = $temp_str;
   (_g_string_free($1858,1)|0);
   $1859 = $2;
   $1860 = (($1859) + 20|0);
   $1861 = HEAP32[$1860>>2]|0;
   $1862 = (($1861) + 1)|0;
   HEAP32[$1860>>2] = $1862;
   STACKTOP = sp;return;
   break;
  }
  case 1:  {
   $10 = $0;
   $11 = $1;
   $12 = (($11) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $2;
   $15 = $3;
   $16 = $15&1;
   _print_lyx_node_tree($10,$13,$14,$16);
   STACKTOP = sp;return;
   break;
  }
  case 60:  {
   $1678 = $2;
   $1679 = (($1678) + 132|0);
   $1680 = HEAP32[$1679>>2]|0;
   $1681 = ($1680|0)!=(0|0);
   if ($1681) {
    $1682 = $0;
    _g_string_append($1682,10056);
    $1683 = $0;
    _g_string_append($1683,10080);
    $1684 = $0;
    _g_string_append($1684,10152);
    $1685 = $0;
    _g_string_append($1685,7352);
    $1686 = $0;
    _g_string_append($1686,10176);
    $1687 = $0;
    _g_string_append($1687,10200);
    $1688 = $0;
    $1689 = $2;
    $1690 = (($1689) + 132|0);
    $1691 = HEAP32[$1690>>2]|0;
    $1692 = (($1691) + 12|0);
    $1693 = HEAP32[$1692>>2]|0;
    $1694 = $2;
    _print_lyx_node_tree($1688,$1693,$1694,0);
    $1695 = $2;
    $1696 = (($1695) + 132|0);
    $1697 = HEAP32[$1696>>2]|0;
    $1698 = (($1697) + 12|0);
    $1699 = HEAP32[$1698>>2]|0;
    $1700 = ($1699|0)!=(0|0);
    if ($1700) {
     $1701 = $2;
     $1702 = (($1701) + 132|0);
     $1703 = HEAP32[$1702>>2]|0;
     $1704 = (($1703) + 12|0);
     $1705 = HEAP32[$1704>>2]|0;
     $1706 = HEAP16[$1705>>1]|0;
     $1707 = $1706 << 16 >> 16;
     $1708 = ($1707|0)==(54);
     if ($1708) {
      $1709 = $2;
      $1710 = (($1709) + 132|0);
      $1711 = HEAP32[$1710>>2]|0;
      $1712 = (($1711) + 12|0);
      $1713 = HEAP32[$1712>>2]|0;
      $1714 = (($1713) + 4|0);
      $1715 = HEAP32[$1714>>2]|0;
      $1716 = (_label_from_string($1715)|0);
      $temp = $1716;
     } else {
      label = 325;
     }
    } else {
     label = 325;
    }
    if ((label|0) == 325) {
     $1717 = $2;
     $1718 = (($1717) + 132|0);
     $1719 = HEAP32[$1718>>2]|0;
     $1720 = (($1719) + 12|0);
     $1721 = HEAP32[$1720>>2]|0;
     $1722 = (_label_from_node_tree($1721)|0);
     $temp = $1722;
    }
    $1723 = $0;
    _g_string_append($1723,6656);
    $1724 = $0;
    _g_string_append($1724,7480);
    $1725 = $0;
    _g_string_append($1725,9128);
    $1726 = $0;
    _g_string_append($1726,9168);
    $1727 = $0;
    $1728 = $temp;
    HEAP32[$vararg_buffer167>>2] = $1728;
    _g_string_append_printf($1727,10232,$vararg_buffer167);
    $1729 = $0;
    _g_string_append($1729,7480);
    $1730 = $0;
    _g_string_append($1730,6656);
    $1731 = $0;
    _g_string_append($1731,7176);
    $1732 = $0;
    _g_string_append($1732,10248);
    $i = 0;
    while(1) {
     $1733 = $i;
     $1734 = $2;
     $1735 = (($1734) + 128|0);
     $1736 = HEAP32[$1735>>2]|0;
     $1737 = (($1736) - 1)|0;
     $1738 = ($1733|0)<($1737|0);
     if (!($1738)) {
      break;
     }
     $1739 = $0;
     _g_string_append($1739,10264);
     $1740 = $0;
     _g_string_append($1740,10152);
     $1741 = $0;
     _g_string_append($1741,10200);
     $1742 = $0;
     _g_string_append($1742,6656);
     $1743 = $0;
     _g_string_append($1743,7480);
     $1744 = $0;
     _g_string_append($1744,10248);
     $1745 = $i;
     $1746 = (($1745) + 1)|0;
     $i = $1746;
    }
    $1747 = $0;
    _g_string_append($1747,10392);
    $1748 = $temp;
    _free($1748);
   }
   $1749 = $2;
   $1750 = (($1749) + 120|0);
   HEAP8[$1750>>0] = 1;
   $1751 = $2;
   $1752 = (($1751) + 112|0);
   HEAP8[$1752>>0] = 1;
   $1753 = $0;
   $1754 = $1;
   $1755 = (($1754) + 12|0);
   $1756 = HEAP32[$1755>>2]|0;
   $1757 = $2;
   _print_lyx_node_tree($1753,$1756,$1757,0);
   $1758 = $2;
   $1759 = (($1758) + 112|0);
   HEAP8[$1759>>0] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 18:  {
   STACKTOP = sp;return;
   break;
  }
  case 23:  {
   $671 = $1;
   $672 = (($671) + 8|0);
   $673 = HEAP32[$672>>2]|0;
   $674 = ($673|0)==(0|0);
   if ($674) {
    $675 = (_mk_link_data(0,0,0,0)|0);
    $676 = $1;
    $677 = (($676) + 8|0);
    HEAP32[$677>>2] = $675;
   }
   $678 = $1;
   $679 = (($678) + 8|0);
   $680 = HEAP32[$679>>2]|0;
   $681 = HEAP32[$680>>2]|0;
   $682 = ($681|0)==(0|0);
   if ($682) {
    $683 = $1;
    $684 = (($683) + 8|0);
    $685 = HEAP32[$684>>2]|0;
    $686 = (($685) + 4|0);
    $687 = HEAP32[$686>>2]|0;
    $688 = ($687|0)==(0|0);
    if ($688) {
     $689 = (_g_string_new(41432)|0);
     $temp_str = $689;
     $690 = $temp_str;
     $691 = $1;
     $692 = (($691) + 12|0);
     $693 = HEAP32[$692>>2]|0;
     _print_raw_node_tree($690,$693);
     $694 = $temp_str;
     $695 = HEAP32[$694>>2]|0;
     $temp = $695;
     while(1) {
      $696 = $temp;
      $697 = HEAP8[$696>>0]|0;
      $698 = $697 << 24 >> 24;
      $699 = ($698|0)!=(0);
      if (!($699)) {
       break;
      }
      $700 = $temp;
      $701 = HEAP8[$700>>0]|0;
      $702 = $701 << 24 >> 24;
      $703 = ($702|0)==(10);
      if ($703) {
       $704 = $temp;
       HEAP8[$704>>0] = 32;
      }
      $705 = $temp;
      $706 = (($705) + 1|0);
      $temp = $706;
     }
     $707 = $1;
     $708 = (($707) + 8|0);
     $709 = HEAP32[$708>>2]|0;
     $710 = HEAP32[$709>>2]|0;
     _free($710);
     $711 = $temp_str;
     $712 = HEAP32[$711>>2]|0;
     $713 = $1;
     $714 = (($713) + 8|0);
     $715 = HEAP32[$714>>2]|0;
     HEAP32[$715>>2] = $712;
     $716 = $temp_str;
     (_g_string_free($716,0)|0);
    }
   }
   $717 = $1;
   $718 = (($717) + 8|0);
   $719 = HEAP32[$718>>2]|0;
   $720 = HEAP32[$719>>2]|0;
   $721 = ($720|0)!=(0|0);
   do {
    if ($721) {
     $722 = $1;
     $723 = (($722) + 8|0);
     $724 = HEAP32[$723>>2]|0;
     $725 = HEAP32[$724>>2]|0;
     $726 = (___strdup($725)|0);
     $temp = $726;
     $727 = $1;
     $728 = (($727) + 8|0);
     $729 = HEAP32[$728>>2]|0;
     _free_link_data($729);
     $730 = $temp;
     $731 = $2;
     $732 = (_extract_link_data($730,$731)|0);
     $733 = $1;
     $734 = (($733) + 8|0);
     HEAP32[$734>>2] = $732;
     $735 = $1;
     $736 = (($735) + 8|0);
     $737 = HEAP32[$736>>2]|0;
     $738 = ($737|0)==(0|0);
     if (!($738)) {
      $772 = $temp;
      _free($772);
      break;
     }
     $739 = $0;
     _g_string_append($739,40808);
     $740 = $0;
     $741 = $1;
     $742 = (($741) + 12|0);
     $743 = HEAP32[$742>>2]|0;
     $744 = $2;
     _print_lyx_node($740,$743,$744,0);
     $745 = $0;
     _g_string_append($745,39600);
     $746 = $1;
     $747 = (($746) + 12|0);
     $748 = HEAP32[$747>>2]|0;
     $749 = (($748) + 16|0);
     $750 = HEAP32[$749>>2]|0;
     $751 = ($750|0)!=(0|0);
     if ($751) {
      $752 = $0;
      _g_string_append($752,40808);
      $753 = $0;
      $754 = $1;
      $755 = (($754) + 12|0);
      $756 = HEAP32[$755>>2]|0;
      $757 = (($756) + 16|0);
      $758 = HEAP32[$757>>2]|0;
      $759 = $2;
      _print_lyx_node_tree($753,$758,$759,0);
      $760 = $0;
      _g_string_append($760,39600);
     } else {
      $761 = $1;
      $762 = (($761) + 4|0);
      $763 = HEAP32[$762>>2]|0;
      $764 = ($763|0)!=(0|0);
      if ($764) {
       $765 = $0;
       $766 = $1;
       $767 = (($766) + 4|0);
       $768 = HEAP32[$767>>2]|0;
       HEAP32[$vararg_buffer47>>2] = $768;
       _g_string_append_printf($765,40832,$vararg_buffer47);
      } else {
       $769 = $0;
       $770 = $temp;
       HEAP32[$vararg_buffer50>>2] = $770;
       _g_string_append_printf($769,39608,$vararg_buffer50);
      }
     }
     $771 = $temp;
     _free($771);
     STACKTOP = sp;return;
    }
   } while(0);
   $773 = (_g_string_new(41432)|0);
   $temp_str = $773;
   $774 = $temp_str;
   $775 = $1;
   $776 = (($775) + 12|0);
   $777 = HEAP32[$776>>2]|0;
   $778 = $2;
   _print_lyx_node_tree($774,$777,$778,1);
   $779 = (_g_string_new(41432)|0);
   $raw_str = $779;
   $780 = $raw_str;
   $781 = $1;
   $782 = (($781) + 12|0);
   $783 = HEAP32[$782>>2]|0;
   _print_raw_node_tree($780,$783);
   $784 = $raw_str;
   $785 = HEAP32[$784>>2]|0;
   $temp = $785;
   while(1) {
    $786 = $temp;
    $787 = HEAP8[$786>>0]|0;
    $788 = $787 << 24 >> 24;
    $789 = ($788|0)!=(0);
    if (!($789)) {
     break;
    }
    $790 = $temp;
    $791 = HEAP8[$790>>0]|0;
    $792 = $791 << 24 >> 24;
    $793 = ($792|0)==(10);
    if ($793) {
     $794 = $temp;
     HEAP8[$794>>0] = 32;
    }
    $795 = $temp;
    $796 = (($795) + 1|0);
    $temp = $796;
   }
   $797 = $1;
   $798 = (($797) + 8|0);
   $799 = HEAP32[$798>>2]|0;
   $800 = (($799) + 4|0);
   $801 = HEAP32[$800>>2]|0;
   $802 = ($801|0)!=(0|0);
   if ($802) {
    $803 = $1;
    $804 = (($803) + 8|0);
    $805 = HEAP32[$804>>2]|0;
    $806 = (($805) + 4|0);
    $807 = HEAP32[$806>>2]|0;
    $808 = HEAP8[$807>>0]|0;
    $809 = $808 << 24 >> 24;
    $810 = ($809|0)==(35);
    if ($810) {
     $811 = $temp_str;
     $812 = HEAP32[$811>>2]|0;
     $813 = (_strlen(($812|0))|0);
     $814 = ($813>>>0)>(0);
     if ($814) {
      $815 = $0;
      $816 = $temp_str;
      $817 = HEAP32[$816>>2]|0;
      HEAP32[$vararg_buffer53>>2] = $817;
      _g_string_append_printf($815,8400,$vararg_buffer53);
     }
     $818 = $1;
     $819 = (($818) + 8|0);
     $820 = HEAP32[$819>>2]|0;
     $821 = HEAP32[$820>>2]|0;
     $822 = ($821|0)==(0|0);
     if ($822) {
      $823 = $1;
      $824 = (($823) + 8|0);
      $825 = HEAP32[$824>>2]|0;
      $826 = (($825) + 4|0);
      $827 = HEAP32[$826>>2]|0;
      $828 = ($827|0)!=(0|0);
      if ($828) {
       $829 = $1;
       $830 = (($829) + 8|0);
       $831 = HEAP32[$830>>2]|0;
       $832 = (($831) + 4|0);
       $833 = HEAP32[$832>>2]|0;
       $834 = HEAP8[$833>>0]|0;
       $835 = $834 << 24 >> 24;
       $836 = ($835|0)==(35);
       if ($836) {
        $837 = $0;
        _g_string_append($837,8408);
        $838 = $0;
        _g_string_append_printf($838,8440,$vararg_buffer56);
        $839 = $0;
        $840 = $1;
        $841 = (($840) + 8|0);
        $842 = HEAP32[$841>>2]|0;
        $843 = (($842) + 4|0);
        $844 = HEAP32[$843>>2]|0;
        $845 = (($844) + 1|0);
        HEAP32[$vararg_buffer58>>2] = $845;
        _g_string_append_printf($839,8464,$vararg_buffer58);
        $846 = $0;
        _g_string_append($846,7176);
       } else {
        label = 167;
       }
      } else {
       label = 167;
      }
      if ((label|0) == 167) {
       $847 = $0;
       $848 = $1;
       $849 = (($848) + 8|0);
       $850 = HEAP32[$849>>2]|0;
       $851 = (($850) + 4|0);
       $852 = HEAP32[$851>>2]|0;
       HEAP32[$vararg_buffer61>>2] = $852;
       _g_string_append_printf($847,8488,$vararg_buffer61);
       $853 = $0;
       _g_string_append($853,8552);
      }
     } else {
      $854 = $0;
      _g_string_append($854,8408);
      $855 = $0;
      _g_string_append_printf($855,8440,$vararg_buffer64);
      $856 = $0;
      $857 = $1;
      $858 = (($857) + 8|0);
      $859 = HEAP32[$858>>2]|0;
      $860 = (($859) + 4|0);
      $861 = HEAP32[$860>>2]|0;
      $862 = (($861) + 1|0);
      HEAP32[$vararg_buffer66>>2] = $862;
      _g_string_append_printf($856,8464,$vararg_buffer66);
      $863 = $0;
      _g_string_append($863,7176);
     }
     $864 = $temp_str;
     $865 = HEAP32[$864>>2]|0;
     $866 = (_strlen(($865|0))|0);
     $867 = ($866>>>0)>(0);
     if ($867) {
      $868 = $0;
      _g_string_append($868,8568);
     }
    } else {
     label = 173;
    }
   } else {
    label = 173;
   }
   if ((label|0) == 173) {
    $869 = $raw_str;
    $870 = HEAP32[$869>>2]|0;
    $871 = $1;
    $872 = (($871) + 8|0);
    $873 = HEAP32[$872>>2]|0;
    $874 = (($873) + 4|0);
    $875 = HEAP32[$874>>2]|0;
    $876 = (_strcmp($870,$875)|0);
    $877 = ($876|0)==(0);
    if ($877) {
     $878 = $0;
     $879 = $1;
     $880 = (($879) + 8|0);
     $881 = HEAP32[$880>>2]|0;
     $882 = (($881) + 4|0);
     $883 = HEAP32[$882>>2]|0;
     HEAP32[$vararg_buffer69>>2] = $883;
     _g_string_append_printf($878,8488,$vararg_buffer69);
     $884 = $0;
     $885 = $temp_str;
     $886 = HEAP32[$885>>2]|0;
     HEAP32[$vararg_buffer72>>2] = $886;
     _g_string_append_printf($884,8120,$vararg_buffer72);
     $887 = $0;
     _g_string_append($887,8576);
    } else {
     $888 = $raw_str;
     $889 = HEAP32[$888>>2]|0;
     $890 = $1;
     $891 = (($890) + 8|0);
     $892 = HEAP32[$891>>2]|0;
     $893 = (($892) + 4|0);
     $894 = HEAP32[$893>>2]|0;
     $895 = (($894) + 7|0);
     $896 = (_strcmp($889,$895)|0);
     $897 = ($896|0)==(0);
     if ($897) {
      $898 = $0;
      $899 = $1;
      $900 = (($899) + 8|0);
      $901 = HEAP32[$900>>2]|0;
      $902 = (($901) + 4|0);
      $903 = HEAP32[$902>>2]|0;
      HEAP32[$vararg_buffer75>>2] = $903;
      _g_string_append_printf($898,8488,$vararg_buffer75);
      $904 = $0;
      $905 = $temp_str;
      $906 = HEAP32[$905>>2]|0;
      HEAP32[$vararg_buffer78>>2] = $906;
      _g_string_append_printf($904,8120,$vararg_buffer78);
      $907 = $0;
      _g_string_append($907,8592);
      $908 = $0;
      _g_string_append($908,8576);
     } else {
      $909 = $0;
      $910 = $1;
      $911 = (($910) + 8|0);
      $912 = HEAP32[$911>>2]|0;
      $913 = (($912) + 4|0);
      $914 = HEAP32[$913>>2]|0;
      HEAP32[$vararg_buffer81>>2] = $914;
      _g_string_append_printf($909,8488,$vararg_buffer81);
      $915 = $0;
      _g_string_append($915,8608);
      $916 = $temp_str;
      (_g_string_free($916,1)|0);
      $917 = (_g_string_new(41432)|0);
      $temp_str = $917;
      $918 = $0;
      $919 = $1;
      $920 = (($919) + 12|0);
      $921 = HEAP32[$920>>2]|0;
      _print_escaped_node_tree($918,$921);
      $922 = $0;
      _g_string_append($922,8552);
      $923 = $2;
      $924 = (($923) + 108|0);
      $925 = HEAP8[$924>>0]|0;
      $926 = $925&1;
      $927 = $926&1;
      $928 = ($927|0)==(0);
      if ($928) {
       $929 = $0;
       _g_string_append($929,8616);
       $930 = $0;
       _g_string_append($930,8688);
       $931 = $0;
       $932 = $1;
       $933 = (($932) + 8|0);
       $934 = HEAP32[$933>>2]|0;
       $935 = (($934) + 4|0);
       $936 = HEAP32[$935>>2]|0;
       HEAP32[$vararg_buffer84>>2] = $936;
       _g_string_append_printf($931,8744,$vararg_buffer84);
       $937 = $0;
       $938 = $1;
       $939 = (($938) + 8|0);
       $940 = HEAP32[$939>>2]|0;
       $941 = (($940) + 4|0);
       $942 = HEAP32[$941>>2]|0;
       HEAP32[$vararg_buffer87>>2] = $942;
       _g_string_append_printf($937,8760,$vararg_buffer87);
       $943 = $0;
       _g_string_append($943,7000);
       $944 = $0;
       _g_string_append($944,8776);
      }
     }
    }
   }
   $945 = $temp_str;
   (_g_string_free($945,1)|0);
   $946 = $raw_str;
   (_g_string_free($946,1)|0);
   $947 = $1;
   $948 = (($947) + 8|0);
   $949 = HEAP32[$948>>2]|0;
   $950 = (($949) + 12|0);
   HEAP32[$950>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 19:  {
   STACKTOP = sp;return;
   break;
  }
  case 17:  {
   STACKTOP = sp;return;
   break;
  }
  case 50:  {
   $344 = $2;
   $345 = (($344) + 100|0);
   $346 = HEAP32[$345>>2]|0;
   $old_type = $346;
   $347 = $1;
   $348 = (($347) + 12|0);
   $349 = HEAP32[$348>>2]|0;
   $temp_node = $349;
   $350 = $temp_node;
   $351 = (($350) + 12|0);
   $352 = HEAP32[$351>>2]|0;
   $353 = ($352|0)==(0|0);
   if ($353) {
    $354 = $0;
    _g_string_append($354,7992);
   } else {
    $i = 0;
    $355 = $temp_node;
    $356 = (($355) + 12|0);
    $357 = HEAP32[$356>>2]|0;
    $temp_node = $357;
    $358 = $0;
    $359 = $temp_node;
    $360 = $2;
    $361 = $3;
    $362 = $361&1;
    _print_lyx_node($358,$359,$360,$362);
    $363 = $temp_node;
    $364 = (($363) + 16|0);
    $365 = HEAP32[$364>>2]|0;
    $temp_node = $365;
    while(1) {
     $366 = $temp_node;
     $367 = ($366|0)!=(0|0);
     if ($367) {
      $368 = $temp_node;
      $369 = HEAP16[$368>>1]|0;
      $370 = $369 << 16 >> 16;
      $371 = ($370|0)!=(49);
      if ($371) {
       $372 = $temp_node;
       $373 = HEAP16[$372>>1]|0;
       $374 = $373 << 16 >> 16;
       $375 = ($374|0)!=(48);
       if ($375) {
        $376 = $temp_node;
        $377 = HEAP16[$376>>1]|0;
        $378 = $377 << 16 >> 16;
        $379 = ($378|0)!=(44);
        $1891 = $379;
       } else {
        $1891 = 0;
       }
      } else {
       $1891 = 0;
      }
     } else {
      $1891 = 0;
     }
     if (!($1891)) {
      break;
     }
     $380 = $i;
     $381 = (($380) + 1)|0;
     $i = $381;
     $382 = $i;
     $383 = ($382|0)==(1);
     if ($383) {
      $384 = $0;
      _g_string_append($384,7752);
      $385 = $2;
      $386 = (($385) + 100|0);
      $387 = HEAP32[$386>>2]|0;
      $old_type = $387;
      $388 = $2;
      $389 = (($388) + 100|0);
      HEAP32[$389>>2] = 5;
     }
     $390 = $0;
     $391 = $temp_node;
     $392 = $2;
     $393 = $3;
     $394 = $393&1;
     _print_lyx_node($390,$391,$392,$394);
     $395 = $temp_node;
     $396 = (($395) + 16|0);
     $397 = HEAP32[$396>>2]|0;
     $temp_node = $397;
    }
    $398 = $i;
    $399 = ($398|0)>(0);
    if ($399) {
     $400 = $i;
     $401 = (($400) + -1)|0;
     $i = $401;
     $402 = $old_type;
     $403 = $2;
     $404 = (($403) + 100|0);
     HEAP32[$404>>2] = $402;
     $405 = $0;
     _g_string_append($405,7232);
    }
    $406 = $temp_node;
    $407 = ($406|0)!=(0|0);
    if ($407) {
     $408 = $0;
     $409 = $temp_node;
     $410 = $2;
     $411 = $3;
     $412 = $411&1;
     _print_lyx_node($408,$409,$410,$412);
    }
   }
   STACKTOP = sp;return;
   break;
  }
  case 35:  {
   $512 = $0;
   $513 = $2;
   _print_lyx_localized_typography($512,5,$513);
   STACKTOP = sp;return;
   break;
  }
  case 34:  {
   $514 = $0;
   $515 = $2;
   _print_lyx_localized_typography($514,4,$515);
   STACKTOP = sp;return;
   break;
  }
  case 20:  {
   $535 = $1;
   $536 = (($535) + 4|0);
   $537 = HEAP32[$536>>2]|0;
   $538 = HEAP8[$537>>0]|0;
   $539 = $538 << 24 >> 24;
   $540 = ($539|0)==(36);
   if ($540) {
    $541 = $1;
    $542 = (($541) + 4|0);
    $543 = HEAP32[$542>>2]|0;
    $544 = (($543) + 1|0);
    $545 = HEAP8[$544>>0]|0;
    $546 = $545 << 24 >> 24;
    $547 = ($546|0)==(36);
    if ($547) {
     $548 = $1;
     $549 = (($548) + 4|0);
     $550 = HEAP32[$549>>2]|0;
     $551 = (($550) + 2|0);
     $552 = (_strncmp($551,8184,5)|0);
     $553 = ($552|0)==(0);
     if ($553) {
      $554 = $1;
      $555 = (($554) + 4|0);
      $556 = HEAP32[$555>>2]|0;
      $557 = (_strlen(($556|0))|0);
      $558 = (($557) - 2)|0;
      $559 = $1;
      $560 = (($559) + 4|0);
      $561 = HEAP32[$560>>2]|0;
      $562 = (($561) + ($558)|0);
      HEAP8[$562>>0] = 0;
      $563 = $0;
      $564 = $1;
      $565 = (($564) + 4|0);
      $566 = HEAP32[$565>>2]|0;
      $567 = (($566) + 1|0);
      HEAP32[$vararg_buffer26>>2] = $567;
      _g_string_append_printf($563,8192,$vararg_buffer26);
     } else {
      $568 = $0;
      $569 = $1;
      $570 = (($569) + 4|0);
      $571 = HEAP32[$570>>2]|0;
      HEAP32[$vararg_buffer29>>2] = $571;
      _g_string_append_printf($568,8192,$vararg_buffer29);
     }
    } else {
     $572 = $1;
     $573 = (($572) + 4|0);
     $574 = HEAP32[$573>>2]|0;
     $575 = (($574) + 1|0);
     $576 = (_strncmp($575,8184,5)|0);
     $577 = ($576|0)==(0);
     if ($577) {
      $578 = $1;
      $579 = (($578) + 4|0);
      $580 = HEAP32[$579>>2]|0;
      $581 = (_strlen(($580|0))|0);
      $582 = (($581) - 1)|0;
      $583 = $1;
      $584 = (($583) + 4|0);
      $585 = HEAP32[$584>>2]|0;
      $586 = (($585) + ($582)|0);
      HEAP8[$586>>0] = 0;
      $587 = $0;
      $588 = $1;
      $589 = (($588) + 4|0);
      $590 = HEAP32[$589>>2]|0;
      $591 = (($590) + 1|0);
      HEAP32[$vararg_buffer32>>2] = $591;
      _g_string_append_printf($587,8192,$vararg_buffer32);
     } else {
      $592 = $0;
      $593 = $1;
      $594 = (($593) + 4|0);
      $595 = HEAP32[$594>>2]|0;
      HEAP32[$vararg_buffer35>>2] = $595;
      _g_string_append_printf($592,8192,$vararg_buffer35);
     }
    }
   } else {
    $596 = $1;
    $597 = (($596) + 4|0);
    $598 = HEAP32[$597>>2]|0;
    $599 = (($598) + 2|0);
    $600 = (_strncmp($599,8184,5)|0);
    $601 = ($600|0)==(0);
    if ($601) {
     $602 = $1;
     $603 = (($602) + 4|0);
     $604 = HEAP32[$603>>2]|0;
     $605 = (_strlen(($604|0))|0);
     $606 = (($605) - 3)|0;
     $607 = $1;
     $608 = (($607) + 4|0);
     $609 = HEAP32[$608>>2]|0;
     $610 = (($609) + ($606)|0);
     HEAP8[$610>>0] = 0;
     $611 = $0;
     $612 = $1;
     $613 = (($612) + 4|0);
     $614 = HEAP32[$613>>2]|0;
     $615 = (($614) + 2|0);
     HEAP32[$vararg_buffer38>>2] = $615;
     _g_string_append_printf($611,8192,$vararg_buffer38);
    } else {
     $616 = $1;
     $617 = (($616) + 4|0);
     $618 = HEAP32[$617>>2]|0;
     $619 = (_strlen(($618|0))|0);
     $620 = (($619) - 1)|0;
     $621 = $1;
     $622 = (($621) + 4|0);
     $623 = HEAP32[$622>>2]|0;
     $624 = (($623) + ($620)|0);
     $625 = HEAP8[$624>>0]|0;
     $626 = $625 << 24 >> 24;
     $627 = ($626|0)==(93);
     if ($627) {
      $628 = $1;
      $629 = (($628) + 4|0);
      $630 = HEAP32[$629>>2]|0;
      $631 = (_strlen(($630|0))|0);
      $632 = (($631) - 3)|0;
      $633 = $1;
      $634 = (($633) + 4|0);
      $635 = HEAP32[$634>>2]|0;
      $636 = (($635) + ($632)|0);
      HEAP8[$636>>0] = 0;
      $637 = $0;
      _g_string_append($637,8232);
      $638 = $0;
      $639 = $1;
      $640 = (($639) + 4|0);
      $641 = HEAP32[$640>>2]|0;
      $642 = (($641) + 2|0);
      HEAP32[$vararg_buffer41>>2] = $642;
      _g_string_append_printf($638,8264,$vararg_buffer41);
     } else {
      $643 = $1;
      $644 = (($643) + 4|0);
      $645 = HEAP32[$644>>2]|0;
      $646 = (_strlen(($645|0))|0);
      $647 = (($646) - 3)|0;
      $648 = $1;
      $649 = (($648) + 4|0);
      $650 = HEAP32[$649>>2]|0;
      $651 = (($650) + ($647)|0);
      HEAP8[$651>>0] = 0;
      $652 = $0;
      $653 = $1;
      $654 = (($653) + 4|0);
      $655 = HEAP32[$654>>2]|0;
      $656 = (($655) + 2|0);
      HEAP32[$vararg_buffer44>>2] = $656;
      _g_string_append_printf($652,8288,$vararg_buffer44);
     }
    }
   }
   STACKTOP = sp;return;
   break;
  }
  case 7:  {
   $534 = $0;
   _g_string_append($534,8136);
   STACKTOP = sp;return;
   break;
  }
  case 37:  {
   $525 = $0;
   $526 = $2;
   _print_lyx_localized_typography($525,2,$526);
   $527 = $0;
   $528 = $1;
   $529 = (($528) + 12|0);
   $530 = HEAP32[$529>>2]|0;
   $531 = $2;
   _print_lyx_node_tree($527,$530,$531,0);
   $532 = $0;
   $533 = $2;
   _print_lyx_localized_typography($532,3,$533);
   STACKTOP = sp;return;
   break;
  }
  case 55:  {
   $1645 = $2;
   $1646 = (($1645) + 128|0);
   $1647 = HEAP32[$1646>>2]|0;
   $1648 = (100 / ($1647|0))&-1;
   $colwidth = $1648;
   $1649 = $1;
   $1650 = (($1649) + 4|0);
   $1651 = HEAP32[$1650>>2]|0;
   $1652 = $2;
   $1653 = (($1652) + 16|0);
   HEAP32[$1653>>2] = $1651;
   $i = 0;
   while(1) {
    $1654 = $i;
    $1655 = $2;
    $1656 = (($1655) + 128|0);
    $1657 = HEAP32[$1656>>2]|0;
    $1658 = ($1654|0)<($1657|0);
    if (!($1658)) {
     break;
    }
    $1659 = (_g_string_new(41432)|0);
    $temp_str = $1659;
    $1660 = $i;
    $1661 = $2;
    $1662 = (($1661) + 16|0);
    $1663 = HEAP32[$1662>>2]|0;
    $1664 = (($1663) + ($1660)|0);
    $1665 = HEAP8[$1664>>0]|0;
    $char_temp = $1665;
    $1666 = $char_temp;
    $1667 = $1666 << 24 >> 24;
    switch ($1667|0) {
    case 67: case 99:  {
     $1668 = $temp_str;
     _g_string_append($1668,41536);
     break;
    }
    case 82: case 114:  {
     $1669 = $temp_str;
     _g_string_append($1669,9976);
     break;
    }
    case 76: case 108:  {
     $1670 = $temp_str;
     _g_string_append($1670,9984);
     break;
    }
    default: {
    }
    }
    $1671 = $0;
    $1672 = $temp_str;
    $1673 = HEAP32[$1672>>2]|0;
    $1674 = $colwidth;
    HEAP32[$vararg_buffer163>>2] = $1673;
    $vararg_ptr166 = (($vararg_buffer163) + 4|0);
    HEAP32[$vararg_ptr166>>2] = $1674;
    _g_string_append_printf($1671,9992,$vararg_buffer163);
    $1675 = $temp_str;
    (_g_string_free($1675,1)|0);
    $1676 = $i;
    $1677 = (($1676) + 1)|0;
    $i = $1677;
   }
   STACKTOP = sp;return;
   break;
  }
  default: {
   $1887 = HEAP32[_stderr>>2]|0;
   $1888 = $1;
   $1889 = HEAP16[$1888>>1]|0;
   $1890 = $1889 << 16 >> 16;
   HEAP32[$vararg_buffer184>>2] = $1890;
   (_fprintf(($1887|0),(10792|0),($vararg_buffer184|0))|0);
   _exit(1);
   // unreachable;
  }
  }
 } while(0);
 $48 = $1;
 $49 = (($48) + 12|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($50) + 12|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (_string_from_node_tree($52)|0);
 $width = $53;
 $54 = (_g_string_new(41432)|0);
 $temp_str = $54;
 $55 = $temp_str;
 $56 = $width;
 HEAP32[$vararg_buffer>>2] = $56;
 _g_string_append_printf($55,39608,$vararg_buffer);
 $57 = HEAP32[5584>>2]|0;
 $58 = HEAP32[$57>>2]|0;
 $59 = $temp_str;
 $60 = HEAP32[$59>>2]|0;
 $61 = (_strstr($58,$60)|0);
 $62 = ($61|0)!=(0|0);
 if ($62) {
  $63 = $0;
  $64 = $width;
  _g_string_append($63,$64);
 } else {
  $65 = HEAP32[5584>>2]|0;
  $66 = $temp_str;
  $67 = HEAP32[$66>>2]|0;
  _g_string_append($65,$67);
  $68 = $0;
  $69 = $1;
  $70 = (($69) + 12|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + 4|0);
  $73 = HEAP32[$72>>2]|0;
  _g_string_append($68,$73);
  $74 = $0;
  $75 = $width;
  HEAP32[$vararg_buffer1>>2] = $75;
  _g_string_append_printf($74,7064,$vararg_buffer1);
  $76 = $0;
  _g_string_append($76,7072);
  $77 = $0;
  _g_string_append($77,7112);
  $78 = $0;
  $79 = $width;
  HEAP32[$vararg_buffer4>>2] = $79;
  _g_string_append_printf($78,7144,$vararg_buffer4);
  $80 = $0;
  _g_string_append($80,7160);
  $81 = $1;
  $82 = (($81) + 12|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (($83) + 4|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (_escape_string($85)|0);
  $temp = $86;
  $87 = $0;
  $88 = $temp;
  _g_string_append($87,$88);
  $89 = $0;
  _g_string_append($89,33880);
  $90 = $0;
  _g_string_append($90,7176);
  $91 = $temp;
  _free($91);
 }
 $92 = $temp_str;
 (_g_string_free($92,1)|0);
 $93 = $width;
 _free($93);
 STACKTOP = sp;return;
}
function _escape_string($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $clean = 0, $out = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $str;
 $1 = (_g_string_new(41432)|0);
 $out = $1;
 while(1) {
  $2 = $0;
  $3 = HEAP8[$2>>0]|0;
  $4 = $3 << 24 >> 24;
  $5 = ($4|0)!=(0);
  if (!($5)) {
   break;
  }
  $6 = $0;
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = ($8|0)==(34);
  if ($9) {
   $10 = $out;
   _g_string_append($10,11592);
  } else {
   $11 = $out;
   $12 = $0;
   $13 = HEAP8[$12>>0]|0;
   _g_string_append_c($11,$13);
  }
  $14 = $0;
  $15 = (($14) + 1|0);
  $0 = $15;
 }
 $16 = $out;
 $17 = HEAP32[$16>>2]|0;
 $clean = $17;
 $18 = $out;
 (_g_string_free($18,0)|0);
 $19 = $clean;
 STACKTOP = sp;return ($19|0);
}
function _print_lyx_endnotes($out,$scratch) {
 $out = $out|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $do_nomenclature = 0, $note = 0, $temp_node = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $scratch;
 $2 = $1;
 $3 = (($2) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_reverse_list($4)|0);
 $6 = $1;
 $7 = (($6) + 48|0);
 HEAP32[$7>>2] = $5;
 $8 = $1;
 $9 = (($8) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 $note = $10;
 $do_nomenclature = 0;
 $11 = HEAP32[5584>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = (_strcmp($12,41432)|0);
 $14 = ($13|0)!=(0);
 if ($14) {
  $do_nomenclature = 1;
 } else {
  $15 = $note;
  $temp_node = $15;
  while(1) {
   $16 = $temp_node;
   $17 = ($16|0)!=(0|0);
   if (!($17)) {
    break;
   }
   $18 = $temp_node;
   $19 = HEAP16[$18>>1]|0;
   $20 = $19 << 16 >> 16;
   $21 = ($20|0)==(69);
   if ($21) {
    label = 6;
    break;
   }
   $22 = $temp_node;
   $23 = (($22) + 16|0);
   $24 = HEAP32[$23>>2]|0;
   $temp_node = $24;
  }
  if ((label|0) == 6) {
   $do_nomenclature = 1;
  }
 }
 $25 = $do_nomenclature;
 $26 = $25&1;
 if ($26) {
  $27 = $0;
  _g_string_append($27,8824);
  $28 = $0;
  _g_string_append($28,10848);
  $29 = $0;
  _g_string_append($29,10896);
  $30 = $0;
  _g_string_append($30,10928);
  $31 = $0;
  _g_string_append($31,7176);
  $32 = $0;
  _g_string_append($32,6656);
 }
 $33 = $note;
 $34 = ($33|0)==(0|0);
 if ($34) {
  STACKTOP = sp;return;
 }
 $35 = $1;
 $36 = (($35) + 48|0);
 $37 = HEAP32[$36>>2]|0;
 $note = $37;
 while(1) {
  $38 = $note;
  $39 = ($38|0)!=(0|0);
  if (!($39)) {
   break;
  }
  $40 = $note;
  $41 = HEAP16[$40>>1]|0;
  $42 = $41 << 16 >> 16;
  $43 = ($42|0)==(87);
  if ($43) {
   $44 = $note;
   $45 = (($44) + 16|0);
   $46 = HEAP32[$45>>2]|0;
   $note = $46;
   continue;
  }
  $47 = $note;
  $48 = HEAP16[$47>>1]|0;
  $49 = $48 << 16 >> 16;
  $50 = ($49|0)==(63);
  if ($50) {
   $51 = $0;
   _g_string_append($51,10952);
   $52 = $0;
   _g_string_append($52,10984);
   $53 = $0;
   _g_string_append($53,11024);
   $54 = $0;
   $55 = $note;
   $56 = (($55) + 4|0);
   $57 = HEAP32[$56>>2]|0;
   HEAP32[$vararg_buffer>>2] = $57;
   _g_string_append_printf($54,11048,$vararg_buffer);
   $58 = $0;
   $59 = $note;
   $60 = (($59) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $61;
   _g_string_append_printf($58,11064,$vararg_buffer1);
   $62 = $0;
   _g_string_append($62,7176);
   $63 = $0;
   $64 = $note;
   $65 = $1;
   _print_lyx_node($63,$64,$65,0);
   $66 = $0;
   _g_string_append($66,6656);
  } else {
  }
  $67 = $note;
  $68 = (($67) + 16|0);
  $69 = HEAP32[$68>>2]|0;
  $note = $69;
 }
 STACKTOP = sp;return;
}
function _prefix_label($prefix,$label,$pound) {
 $prefix = $prefix|0;
 $label = $label|0;
 $pound = $pound|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $function_result = 0;
 var $i = 0, $result = 0, $short_prefix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $short_prefix = sp + 20|0;
 $0 = $prefix;
 $1 = $label;
 $3 = $pound&1;
 $2 = $3;
 $4 = $0;
 (_strncpy(($short_prefix|0),($4|0),5)|0);
 $5 = (($short_prefix) + 5|0);
 HEAP8[$5>>0] = 0;
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = (($short_prefix) + ($6)|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = ($8<<24>>24)!=(0);
  if (!($9)) {
   break;
  }
  $10 = $i;
  $11 = (($short_prefix) + ($10)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12 << 24 >> 24;
  $14 = (_tolower($13)|0);
  $15 = $14&255;
  $16 = $i;
  $17 = (($short_prefix) + ($16)|0);
  HEAP8[$17>>0] = $15;
  $18 = $i;
  $19 = (($18) + 1)|0;
  $i = $19;
 }
 $20 = (_g_string_new(41432)|0);
 $result = $20;
 $21 = $1;
 $22 = HEAP8[$21>>0]|0;
 $23 = $22 << 24 >> 24;
 $24 = ($23|0)==(35);
 if ($24) {
  $25 = $result;
  $26 = $1;
  $27 = (($26) + 1|0);
  _g_string_append($25,$27);
 } else {
  $28 = $result;
  $29 = $1;
  _g_string_append($28,$29);
 }
 $30 = $result;
 _g_string_prepend($30,11584);
 $31 = $result;
 _g_string_prepend($31,$short_prefix);
 $32 = $2;
 $33 = $32&1;
 if (!($33)) {
  $35 = $result;
  $36 = HEAP32[$35>>2]|0;
  $function_result = $36;
  $37 = $result;
  (_g_string_free($37,0)|0);
  $38 = $function_result;
  STACKTOP = sp;return ($38|0);
 }
 $34 = $result;
 _g_string_prepend($34,46088);
 $35 = $result;
 $36 = HEAP32[$35>>2]|0;
 $function_result = $36;
 $37 = $result;
 (_g_string_free($37,0)|0);
 $38 = $function_result;
 STACKTOP = sp;return ($38|0);
}
function _print_lyx_localized_typography($out,$character,$scratch) {
 $out = $out|0;
 $character = $character|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $character;
 $2 = $scratch;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (_extension(16,$4)|0);
 if (!($5)) {
  $6 = $0;
  $7 = $1;
  _g_string_append_c($6,$7);
  STACKTOP = sp;return;
 }
 $8 = $1;
 $9 = $8&255;
 switch ($9|0) {
 case 133: case 6:  {
  $43 = $2;
  $44 = (($43) + 100|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)!=(69);
  if ($46) {
   $47 = $0;
   _g_string_append($47,11296);
  } else {
   $48 = $0;
   _g_string_append($48,42768);
  }
  STACKTOP = sp;return;
  break;
 }
 case 147: case 2:  {
  $25 = $2;
  $26 = (($25) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  switch ($27|0) {
  case 5:  {
   $31 = $0;
   _g_string_append($31,43072);
   break;
  }
  case 2:  {
   $30 = $0;
   _g_string_append($30,11208);
   break;
  }
  case 3: case 1:  {
   $28 = $0;
   _g_string_append($28,11192);
   break;
  }
  case 4:  {
   $29 = $0;
   _g_string_append($29,11200);
   break;
  }
  default: {
   $32 = $0;
   _g_string_append($32,11216);
  }
  }
  STACKTOP = sp;return;
  break;
 }
 case 7:  {
  $24 = $0;
  _g_string_append($24,9552);
  STACKTOP = sp;return;
  break;
 }
 case 145: case 0:  {
  $10 = $2;
  $11 = (($10) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  if ((($12|0) == 2)) {
   $14 = $0;
   _g_string_append($14,9552);
  } else if ((($12|0) == 4)) {
   $16 = $0;
   _g_string_append($16,11088);
  } else if ((($12|0) == 3)) {
   $15 = $0;
   _g_string_append($15,11080);
  } else if ((($12|0) == 5)) {
   $13 = $0;
   _g_string_append($13,9552);
  } else {
   $17 = $0;
   _g_string_append($17,11096);
  }
  STACKTOP = sp;return;
  break;
 }
 case 150: case 4:  {
  $41 = $0;
  _g_string_append($41,44224);
  STACKTOP = sp;return;
  break;
 }
 case 148: case 3:  {
  $33 = $2;
  $34 = (($33) + 12|0);
  $35 = HEAP32[$34>>2]|0;
  switch ($35|0) {
  case 1: case 5:  {
   $36 = $0;
   _g_string_append($36,43072);
   break;
  }
  case 3:  {
   $37 = $0;
   _g_string_append($37,43080);
   break;
  }
  case 4:  {
   $38 = $0;
   _g_string_append($38,11208);
   break;
  }
  case 2:  {
   $39 = $0;
   _g_string_append($39,11200);
   break;
  }
  default: {
   $40 = $0;
   _g_string_append($40,11256);
  }
  }
  STACKTOP = sp;return;
  break;
 }
 case 146: case 1:  {
  $18 = $2;
  $19 = (($18) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  if ((($20|0) == 4)) {
   $22 = $0;
   _g_string_append($22,11144);
  } else if ((($20|0) == 3)) {
   $21 = $0;
   _g_string_append($21,11136);
  } else {
   $23 = $0;
   _g_string_append($23,11152);
  }
  STACKTOP = sp;return;
  break;
 }
 case 151: case 5:  {
  $42 = $0;
  _g_string_append($42,42760);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _print_escaped_node_tree($out,$n) {
 $out = $out|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $n;
 while(1) {
  $2 = $1;
  $3 = ($2|0)!=(0|0);
  if (!($3)) {
   break;
  }
  $4 = $0;
  $5 = $1;
  _print_escaped_node($4,$5);
  $6 = $1;
  $7 = (($6) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $1 = $8;
 }
 STACKTOP = sp;return;
}
function _lyx_get_table_dimensions($list,$rows,$cols,$scratch) {
 $list = $list|0;
 $rows = $rows|0;
 $cols = $cols|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmp_cols = 0, $tmp_rows = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp_rows = sp + 4|0;
 $tmp_cols = sp;
 $0 = $list;
 $1 = $rows;
 $2 = $cols;
 $3 = $scratch;
 $4 = $1;
 HEAP32[$4>>2] = 0;
 $5 = $2;
 HEAP32[$5>>2] = 0;
 HEAP32[$tmp_rows>>2] = 0;
 HEAP32[$tmp_cols>>2] = 0;
 while(1) {
  $6 = $0;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $0;
  $9 = HEAP16[$8>>1]|0;
  $10 = $9 << 16 >> 16;
  if ((($10|0) == 56)) {
   $38 = $2;
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) + 1)|0;
   HEAP32[$38>>2] = $40;
  } else if ((($10|0) == 58)) {
   $25 = $1;
   $26 = HEAP32[$25>>2]|0;
   $27 = (($26) + 1)|0;
   HEAP32[$25>>2] = $27;
   $28 = $0;
   $29 = (($28) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $3;
   _lyx_get_table_dimensions($30,$tmp_rows,$tmp_cols,$31);
   $32 = HEAP32[$tmp_cols>>2]|0;
   $33 = $2;
   $34 = HEAP32[$33>>2]|0;
   $35 = ($32|0)>($34|0);
   if ($35) {
    $36 = HEAP32[$tmp_cols>>2]|0;
    $37 = $2;
    HEAP32[$37>>2] = $36;
   }
  } else if ((($10|0) == 59) | (($10|0) == 60)) {
   $11 = $0;
   $12 = (($11) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $3;
   _lyx_get_table_dimensions($13,$tmp_rows,$tmp_cols,$14);
   $15 = HEAP32[$tmp_rows>>2]|0;
   $16 = $1;
   $17 = HEAP32[$16>>2]|0;
   $18 = (($17) + ($15))|0;
   HEAP32[$16>>2] = $18;
   $19 = HEAP32[$tmp_cols>>2]|0;
   $20 = $2;
   $21 = HEAP32[$20>>2]|0;
   $22 = ($19|0)>($21|0);
   if ($22) {
    $23 = HEAP32[$tmp_cols>>2]|0;
    $24 = $2;
    HEAP32[$24>>2] = $23;
   }
  }
  $41 = $0;
  $42 = (($41) + 16|0);
  $43 = HEAP32[$42>>2]|0;
  $0 = $43;
 }
 STACKTOP = sp;return;
}
function _update_link_source($source,$prefix,$n) {
 $source = $source|0;
 $prefix = $prefix|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l = 0, $new_source = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $prefix;
 $2 = $n;
 while(1) {
  $3 = $2;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $2;
  $6 = HEAP16[$5>>1]|0;
  $7 = $6 << 16 >> 16;
  $8 = ($7|0)==(23);
  if ($8) {
   $9 = $2;
   $10 = (($9) + 8|0);
   $11 = HEAP32[$10>>2]|0;
   $l = $11;
   $12 = $l;
   $13 = ($12|0)!=(0|0);
   if ($13) {
    $14 = $l;
    $15 = (($14) + 4|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)!=(0|0);
    if ($17) {
     $18 = $l;
     $19 = (($18) + 4|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = $0;
     $22 = (_strcmp($20,$21)|0);
     $23 = ($22|0)==(0);
     if ($23) {
      $24 = $1;
      $25 = $l;
      $26 = (($25) + 4|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = (_prefix_label($24,$27,1)|0);
      $new_source = $28;
      $29 = $l;
      $30 = (($29) + 4|0);
      $31 = HEAP32[$30>>2]|0;
      _free($31);
      $32 = $new_source;
      $33 = (___strdup($32)|0);
      $34 = $l;
      $35 = (($34) + 4|0);
      HEAP32[$35>>2] = $33;
      $36 = $new_source;
      _free($36);
     }
    }
   }
  }
  $37 = $2;
  $38 = (($37) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)!=(0|0);
  if ($40) {
   $41 = $0;
   $42 = $1;
   $43 = $2;
   $44 = (($43) + 12|0);
   $45 = HEAP32[$44>>2]|0;
   _update_link_source($41,$42,$45);
  }
  $46 = $2;
  $47 = (($46) + 16|0);
  $48 = HEAP32[$47>>2]|0;
  $2 = $48;
 }
 STACKTOP = sp;return;
}
function _update_links($source,$prefix,$scratch) {
 $source = $source|0;
 $prefix = $prefix|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l = 0;
 var $n = 0, $new_source = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $prefix;
 $2 = $scratch;
 $3 = $2;
 $4 = (($3) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $n = $5;
 while(1) {
  $6 = $n;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $n;
  $9 = (($8) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $l = $10;
  $11 = $l;
  $12 = ($11|0)!=(0|0);
  if ($12) {
   $13 = $l;
   $14 = (($13) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)!=(0|0);
   if ($16) {
    $17 = $l;
    $18 = (($17) + 4|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = $0;
    $21 = (_strcmp($19,$20)|0);
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $1;
     $24 = $l;
     $25 = (($24) + 4|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = (_prefix_label($23,$26,1)|0);
     $new_source = $27;
     $28 = $l;
     $29 = (($28) + 4|0);
     $30 = HEAP32[$29>>2]|0;
     _free($30);
     $31 = $new_source;
     $32 = (___strdup($31)|0);
     $33 = $l;
     $34 = (($33) + 4|0);
     HEAP32[$34>>2] = $32;
     $35 = $new_source;
     _free($35);
    }
   }
  }
  $36 = $n;
  $37 = (($36) + 16|0);
  $38 = HEAP32[$37>>2]|0;
  $n = $38;
 }
 STACKTOP = sp;return;
}
function _print_escaped_node($out,$n) {
 $out = $out|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $n;
 $2 = $1;
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 << 16 >> 16;
 switch ($4|0) {
 case 34:  {
  $24 = $0;
  _g_string_append($24,44224);
  break;
 }
 case 8:  {
  $9 = $0;
  _g_string_append($9,42624);
  break;
 }
 case 33:  {
  $23 = $0;
  _g_string_append($23,42768);
  break;
 }
 case 3:  {
  $10 = $0;
  _g_string_append($10,9552);
  break;
 }
 case 2:  {
  $5 = $0;
  $6 = $1;
  $7 = (($6) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  _g_string_append($5,$8);
  break;
 }
 case 37:  {
  $17 = $0;
  _g_string_append($17,33880);
  $18 = $0;
  $19 = $1;
  $20 = (($19) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  _print_escaped_node_tree($18,$21);
  $22 = $0;
  _g_string_append($22,33880);
  STACKTOP = sp;return;
  break;
 }
 case 36:  {
  $11 = $0;
  _g_string_append($11,9552);
  $12 = $0;
  $13 = $1;
  $14 = (($13) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  _print_escaped_node_tree($12,$15);
  $16 = $0;
  _g_string_append($16,9552);
  STACKTOP = sp;return;
  break;
 }
 case 35:  {
  $25 = $0;
  _g_string_append($25,42760);
  label = 10;
  break;
 }
 default: {
  label = 10;
 }
 }
 if ((label|0) == 10) {
 }
 $26 = $0;
 $27 = $1;
 $28 = (($27) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 _print_escaped_node_tree($26,$29);
 STACKTOP = sp;return;
}
function _print_memoir_node_tree($out,$list,$scratch) {
 $out = $out|0;
 $list = $list|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $list;
 $2 = $scratch;
 while(1) {
  $3 = $1;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = $1;
  $7 = $2;
  _print_memoir_node($5,$6,$7);
  $8 = $1;
  $9 = (($8) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $1 = $10;
 }
 STACKTOP = sp;return;
}
function _print_memoir_node($out,$n,$scratch) {
 $out = $out|0;
 $n = $n|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $n;
 $2 = $scratch;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 2;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $2;
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 8;
  $10 = ($9|0)!=(0);
  if (!($10)) {
   $11 = $1;
   $12 = HEAP16[$11>>1]|0;
   $13 = $12 << 16 >> 16;
   $14 = ($13|0)==(4);
   if (!($14)) {
    $15 = $1;
    $16 = HEAP16[$15>>1]|0;
    $17 = $16 << 16 >> 16;
    $18 = ($17|0)==(17);
    if (!($18)) {
     $19 = $0;
     $20 = $2;
     _pad($19,2,$20);
     $21 = $2;
     $22 = HEAP32[$21>>2]|0;
     $23 = $22 | 8;
     $24 = $2;
     HEAP32[$24>>2] = $23;
    }
   }
  }
 }
 $25 = $1;
 $26 = HEAP16[$25>>1]|0;
 $27 = $26 << 16 >> 16;
 switch ($27|0) {
 case 9:  {
  $69 = $0;
  $70 = $1;
  $71 = (($70) + 12|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $2;
  _print_memoir_node_tree($69,$72,$73);
  STACKTOP = sp;return;
  break;
 }
 case 46:  {
  $89 = $0;
  $90 = $2;
  _pad($89,2,$90);
  $91 = $2;
  $92 = (($91) + 4|0);
  HEAP32[$92>>2] = 2;
  $93 = $0;
  $94 = $1;
  $95 = (($94) + 12|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = $2;
  _print_memoir_node_tree($93,$96,$97);
  $98 = $2;
  $99 = (($98) + 4|0);
  HEAP32[$99>>2] = 0;
  STACKTOP = sp;return;
  break;
 }
 case 44:  {
  $74 = $0;
  $75 = $2;
  _pad($74,2,$75);
  $76 = $0;
  _g_string_append_printf($76,11808,$vararg_buffer7);
  $77 = $2;
  $78 = (($77) + 4|0);
  HEAP32[$78>>2] = 0;
  $79 = $0;
  $80 = $1;
  $81 = (($80) + 12|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = $2;
  _print_memoir_node_tree($79,$82,$83);
  $84 = $0;
  $85 = $2;
  _pad($84,1,$85);
  $86 = $0;
  _g_string_append_printf($86,11832,$vararg_buffer9);
  $87 = $2;
  $88 = (($87) + 4|0);
  HEAP32[$88>>2] = 0;
  STACKTOP = sp;return;
  break;
 }
 case 43: case 41:  {
  $28 = $0;
  $29 = $2;
  _pad($28,2,$29);
  $30 = $1;
  $31 = (($30) + 12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)!=(0|0);
  do {
   if ($33) {
    $34 = $1;
    $35 = (($34) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = HEAP16[$36>>1]|0;
    $38 = $37 << 16 >> 16;
    $39 = ($38|0)==(42);
    if ($39) {
     $40 = $1;
     $41 = (($40) + 12|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = (($42) + 4|0);
     $44 = HEAP32[$43>>2]|0;
     _trim_trailing_whitespace($44);
     $45 = $1;
     $46 = (($45) + 12|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = (($47) + 4|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = (_strlen(($49|0))|0);
     $51 = ($50>>>0)>(0);
     if (!($51)) {
      break;
     }
     $52 = $0;
     $53 = $1;
     $54 = (($53) + 12|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = (($55) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     HEAP32[$vararg_buffer>>2] = $57;
     _g_string_append_printf($52,11600,$vararg_buffer);
     $58 = $0;
     $59 = $1;
     _print_raw_node($58,$59);
     $60 = $0;
     _g_string_append_printf($60,11672,$vararg_buffer1);
     $61 = $2;
     $62 = (($61) + 4|0);
     HEAP32[$62>>2] = 0;
     STACKTOP = sp;return;
    }
   }
  } while(0);
  $63 = $0;
  _g_string_append_printf($63,11712,$vararg_buffer3);
  $64 = $0;
  $65 = $1;
  _print_raw_node($64,$65);
  $66 = $0;
  _g_string_append_printf($66,11768,$vararg_buffer5);
  $67 = $2;
  $68 = (($67) + 4|0);
  HEAP32[$68>>2] = 0;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $100 = $0;
  $101 = $1;
  $102 = $2;
  _print_latex_node($100,$101,$102);
  STACKTOP = sp;return;
 }
 }
}
function _begin_odf_output($out,$list,$scratch) {
 $out = $out|0;
 $list = $list|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $list;
 $2 = $scratch;
 $3 = $0;
 _print_odf_header($3);
 $4 = $1;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 _g_string_append_printf($6,11856,$vararg_buffer);
 STACKTOP = sp;return;
}
function _print_odf_header($out) {
 $out = $out|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $0;
 _g_string_append_printf($1,15424,$vararg_buffer);
 $2 = $0;
 _g_string_append_printf($2,17616,$vararg_buffer1);
 $3 = $0;
 _g_string_append_printf($3,17904,$vararg_buffer3);
 $4 = $0;
 _g_string_append_printf($4,22344,$vararg_buffer5);
 STACKTOP = sp;return;
}
function _end_odf_output($out,$list,$scratch) {
 $out = $out|0;
 $list = $list|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $list;
 $2 = $scratch;
 $3 = $0;
 _print_odf_footer($3);
 STACKTOP = sp;return;
}
function _print_odf_footer($out) {
 $out = $out|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $0;
 _g_string_append_printf($1,33544,$vararg_buffer);
 STACKTOP = sp;return;
}
function _print_odf_node_tree($out,$list,$scratch) {
 $out = $out|0;
 $list = $list|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $list;
 $2 = $scratch;
 while(1) {
  $3 = $1;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = $1;
  $7 = $2;
  _print_odf_node($5,$6,$7);
  $8 = $1;
  $9 = (($8) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $1 = $10;
 }
 STACKTOP = sp;return;
}
function _print_odf_node($out,$n,$scratch) {
 $out = $out|0;
 $n = $n|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
 var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
 var $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
 var $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0;
 var $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0;
 var $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0;
 var $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0;
 var $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0;
 var $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0;
 var $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0;
 var $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0;
 var $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0;
 var $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0;
 var $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0;
 var $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0;
 var $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0;
 var $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0;
 var $996 = 0, $997 = 0, $998 = 0, $999 = 0, $height = 0, $i = 0, $lev = 0, $old_type = 0, $temp = 0, $temp_link_data = 0, $temp_node = 0, $temp_str = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer100 = 0, $vararg_buffer102 = 0, $vararg_buffer104 = 0, $vararg_buffer106 = 0, $vararg_buffer108 = 0, $vararg_buffer11 = 0;
 var $vararg_buffer110 = 0, $vararg_buffer112 = 0, $vararg_buffer115 = 0, $vararg_buffer118 = 0, $vararg_buffer120 = 0, $vararg_buffer122 = 0, $vararg_buffer124 = 0, $vararg_buffer126 = 0, $vararg_buffer128 = 0, $vararg_buffer13 = 0, $vararg_buffer130 = 0, $vararg_buffer132 = 0, $vararg_buffer134 = 0, $vararg_buffer136 = 0, $vararg_buffer139 = 0, $vararg_buffer141 = 0, $vararg_buffer144 = 0, $vararg_buffer146 = 0, $vararg_buffer148 = 0, $vararg_buffer15 = 0;
 var $vararg_buffer151 = 0, $vararg_buffer154 = 0, $vararg_buffer157 = 0, $vararg_buffer159 = 0, $vararg_buffer161 = 0, $vararg_buffer163 = 0, $vararg_buffer165 = 0, $vararg_buffer167 = 0, $vararg_buffer169 = 0, $vararg_buffer17 = 0, $vararg_buffer171 = 0, $vararg_buffer173 = 0, $vararg_buffer175 = 0, $vararg_buffer178 = 0, $vararg_buffer181 = 0, $vararg_buffer183 = 0, $vararg_buffer187 = 0, $vararg_buffer19 = 0, $vararg_buffer190 = 0, $vararg_buffer192 = 0;
 var $vararg_buffer194 = 0, $vararg_buffer197 = 0, $vararg_buffer199 = 0, $vararg_buffer202 = 0, $vararg_buffer204 = 0, $vararg_buffer206 = 0, $vararg_buffer208 = 0, $vararg_buffer21 = 0, $vararg_buffer210 = 0, $vararg_buffer212 = 0, $vararg_buffer215 = 0, $vararg_buffer217 = 0, $vararg_buffer219 = 0, $vararg_buffer221 = 0, $vararg_buffer223 = 0, $vararg_buffer225 = 0, $vararg_buffer227 = 0, $vararg_buffer23 = 0, $vararg_buffer230 = 0, $vararg_buffer233 = 0;
 var $vararg_buffer235 = 0, $vararg_buffer237 = 0, $vararg_buffer239 = 0, $vararg_buffer241 = 0, $vararg_buffer244 = 0, $vararg_buffer246 = 0, $vararg_buffer248 = 0, $vararg_buffer250 = 0, $vararg_buffer252 = 0, $vararg_buffer254 = 0, $vararg_buffer256 = 0, $vararg_buffer258 = 0, $vararg_buffer26 = 0, $vararg_buffer260 = 0, $vararg_buffer263 = 0, $vararg_buffer265 = 0, $vararg_buffer267 = 0, $vararg_buffer269 = 0, $vararg_buffer271 = 0, $vararg_buffer273 = 0;
 var $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer30 = 0, $vararg_buffer32 = 0, $vararg_buffer34 = 0, $vararg_buffer36 = 0, $vararg_buffer38 = 0, $vararg_buffer40 = 0, $vararg_buffer42 = 0, $vararg_buffer44 = 0, $vararg_buffer46 = 0, $vararg_buffer48 = 0, $vararg_buffer5 = 0, $vararg_buffer50 = 0, $vararg_buffer52 = 0, $vararg_buffer54 = 0, $vararg_buffer56 = 0, $vararg_buffer58 = 0, $vararg_buffer60 = 0, $vararg_buffer62 = 0;
 var $vararg_buffer64 = 0, $vararg_buffer66 = 0, $vararg_buffer68 = 0, $vararg_buffer7 = 0, $vararg_buffer71 = 0, $vararg_buffer74 = 0, $vararg_buffer77 = 0, $vararg_buffer80 = 0, $vararg_buffer83 = 0, $vararg_buffer85 = 0, $vararg_buffer87 = 0, $vararg_buffer9 = 0, $vararg_buffer90 = 0, $vararg_buffer93 = 0, $vararg_buffer96 = 0, $vararg_buffer98 = 0, $vararg_ptr186 = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer273 = sp + 984|0;
 $vararg_buffer271 = sp + 976|0;
 $vararg_buffer269 = sp + 968|0;
 $vararg_buffer267 = sp + 960|0;
 $vararg_buffer265 = sp + 952|0;
 $vararg_buffer263 = sp + 944|0;
 $vararg_buffer260 = sp + 936|0;
 $vararg_buffer258 = sp + 928|0;
 $vararg_buffer256 = sp + 920|0;
 $vararg_buffer254 = sp + 912|0;
 $vararg_buffer252 = sp + 904|0;
 $vararg_buffer250 = sp + 896|0;
 $vararg_buffer248 = sp + 888|0;
 $vararg_buffer246 = sp + 880|0;
 $vararg_buffer244 = sp + 872|0;
 $vararg_buffer241 = sp + 864|0;
 $vararg_buffer239 = sp + 856|0;
 $vararg_buffer237 = sp + 848|0;
 $vararg_buffer235 = sp + 840|0;
 $vararg_buffer233 = sp + 832|0;
 $vararg_buffer230 = sp + 824|0;
 $vararg_buffer227 = sp + 816|0;
 $vararg_buffer225 = sp + 808|0;
 $vararg_buffer223 = sp + 800|0;
 $vararg_buffer221 = sp + 792|0;
 $vararg_buffer219 = sp + 784|0;
 $vararg_buffer217 = sp + 776|0;
 $vararg_buffer215 = sp + 768|0;
 $vararg_buffer212 = sp + 760|0;
 $vararg_buffer210 = sp + 752|0;
 $vararg_buffer208 = sp + 744|0;
 $vararg_buffer206 = sp + 736|0;
 $vararg_buffer204 = sp + 728|0;
 $vararg_buffer202 = sp + 720|0;
 $vararg_buffer199 = sp + 712|0;
 $vararg_buffer197 = sp + 704|0;
 $vararg_buffer194 = sp + 696|0;
 $vararg_buffer192 = sp + 688|0;
 $vararg_buffer190 = sp + 680|0;
 $vararg_buffer187 = sp + 672|0;
 $vararg_buffer183 = sp + 664|0;
 $vararg_buffer181 = sp + 656|0;
 $vararg_buffer178 = sp + 648|0;
 $vararg_buffer175 = sp + 640|0;
 $vararg_buffer173 = sp + 632|0;
 $vararg_buffer171 = sp + 624|0;
 $vararg_buffer169 = sp + 616|0;
 $vararg_buffer167 = sp + 608|0;
 $vararg_buffer165 = sp + 600|0;
 $vararg_buffer163 = sp + 592|0;
 $vararg_buffer161 = sp + 584|0;
 $vararg_buffer159 = sp + 576|0;
 $vararg_buffer157 = sp + 568|0;
 $vararg_buffer154 = sp + 560|0;
 $vararg_buffer151 = sp + 552|0;
 $vararg_buffer148 = sp + 544|0;
 $vararg_buffer146 = sp + 536|0;
 $vararg_buffer144 = sp + 528|0;
 $vararg_buffer141 = sp + 520|0;
 $vararg_buffer139 = sp + 512|0;
 $vararg_buffer136 = sp + 504|0;
 $vararg_buffer134 = sp + 496|0;
 $vararg_buffer132 = sp + 488|0;
 $vararg_buffer130 = sp + 480|0;
 $vararg_buffer128 = sp + 472|0;
 $vararg_buffer126 = sp + 464|0;
 $vararg_buffer124 = sp + 456|0;
 $vararg_buffer122 = sp + 448|0;
 $vararg_buffer120 = sp + 440|0;
 $vararg_buffer118 = sp + 432|0;
 $vararg_buffer115 = sp + 424|0;
 $vararg_buffer112 = sp + 416|0;
 $vararg_buffer110 = sp + 408|0;
 $vararg_buffer108 = sp + 400|0;
 $vararg_buffer106 = sp + 392|0;
 $vararg_buffer104 = sp + 384|0;
 $vararg_buffer102 = sp + 376|0;
 $vararg_buffer100 = sp + 368|0;
 $vararg_buffer98 = sp + 360|0;
 $vararg_buffer96 = sp + 352|0;
 $vararg_buffer93 = sp + 344|0;
 $vararg_buffer90 = sp + 336|0;
 $vararg_buffer87 = sp + 328|0;
 $vararg_buffer85 = sp + 320|0;
 $vararg_buffer83 = sp + 312|0;
 $vararg_buffer80 = sp + 304|0;
 $vararg_buffer77 = sp + 296|0;
 $vararg_buffer74 = sp + 288|0;
 $vararg_buffer71 = sp + 280|0;
 $vararg_buffer68 = sp + 272|0;
 $vararg_buffer66 = sp + 264|0;
 $vararg_buffer64 = sp + 256|0;
 $vararg_buffer62 = sp + 248|0;
 $vararg_buffer60 = sp + 240|0;
 $vararg_buffer58 = sp + 232|0;
 $vararg_buffer56 = sp + 224|0;
 $vararg_buffer54 = sp + 216|0;
 $vararg_buffer52 = sp + 208|0;
 $vararg_buffer50 = sp + 200|0;
 $vararg_buffer48 = sp + 192|0;
 $vararg_buffer46 = sp + 184|0;
 $vararg_buffer44 = sp + 176|0;
 $vararg_buffer42 = sp + 168|0;
 $vararg_buffer40 = sp + 160|0;
 $vararg_buffer38 = sp + 152|0;
 $vararg_buffer36 = sp + 144|0;
 $vararg_buffer34 = sp + 136|0;
 $vararg_buffer32 = sp + 128|0;
 $vararg_buffer30 = sp + 120|0;
 $vararg_buffer28 = sp + 112|0;
 $vararg_buffer26 = sp + 104|0;
 $vararg_buffer23 = sp + 96|0;
 $vararg_buffer21 = sp + 88|0;
 $vararg_buffer19 = sp + 80|0;
 $vararg_buffer17 = sp + 72|0;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $n;
 $2 = $scratch;
 $temp_link_data = 0;
 $width = 0;
 $height = 0;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)!=(0);
 if (!($8)) {
  $9 = $1;
  $10 = HEAP16[$9>>1]|0;
  $11 = $10 << 16 >> 16;
  $12 = ($11|0)==(4);
  if (!($12)) {
   $13 = $1;
   $14 = HEAP16[$13>>1]|0;
   $15 = $14 << 16 >> 16;
   $16 = ($15|0)==(17);
   if (!($16)) {
    $17 = $0;
    _g_string_append_printf($17,11856,$vararg_buffer);
    $18 = $2;
    $19 = HEAP32[$18>>2]|0;
    $20 = $19 | 8;
    $21 = $2;
    HEAP32[$21>>2] = $20;
   }
  }
 }
 $22 = $1;
 $23 = HEAP16[$22>>1]|0;
 $24 = $23 << 16 >> 16;
 do {
  switch ($24|0) {
  case 22:  {
   $509 = $0;
   _g_string_append_printf($509,13152,$vararg_buffer100);
   $510 = $0;
   $511 = $1;
   $512 = (($511) + 12|0);
   $513 = HEAP32[$512>>2]|0;
   $514 = $2;
   _print_odf_node_tree($510,$513,$514);
   $515 = $0;
   _g_string_append_printf($515,13136,$vararg_buffer102);
   STACKTOP = sp;return;
   break;
  }
  case 21:  {
   $502 = $0;
   _g_string_append_printf($502,13096,$vararg_buffer96);
   $503 = $0;
   $504 = $1;
   $505 = (($504) + 12|0);
   $506 = HEAP32[$505>>2]|0;
   $507 = $2;
   _print_odf_node_tree($503,$506,$507);
   $508 = $0;
   _g_string_append_printf($508,13136,$vararg_buffer98);
   STACKTOP = sp;return;
   break;
  }
  case 36:  {
   $450 = $0;
   $451 = $2;
   _print_html_localized_typography($450,0,$451);
   $452 = $0;
   $453 = $1;
   $454 = (($453) + 12|0);
   $455 = HEAP32[$454>>2]|0;
   $456 = $2;
   _print_odf_node_tree($452,$455,$456);
   $457 = $0;
   $458 = $2;
   _print_html_localized_typography($457,1,$458);
   STACKTOP = sp;return;
   break;
  }
  case 79:  {
   $1381 = $0;
   _g_string_append_printf($1381,15256,$vararg_buffer265);
   $1382 = $0;
   $1383 = $1;
   $1384 = (($1383) + 4|0);
   $1385 = HEAP32[$1384>>2]|0;
   $1386 = $2;
   _print_html_string($1382,$1385,$1386);
   $1387 = $0;
   _g_string_append_printf($1387,13136,$vararg_buffer267);
   STACKTOP = sp;return;
   break;
  }
  case 3:  {
   $442 = $0;
   $443 = $2;
   _print_html_localized_typography($442,7,$443);
   STACKTOP = sp;return;
   break;
  }
  case 82: case 0:  {
   STACKTOP = sp;return;
   break;
  }
  case 62: case 63:  {
   $1371 = $2;
   $1372 = (($1371) + 25|0);
   $1373 = HEAP8[$1372>>0]|0;
   $1374 = $1373&1;
   if ($1374) {
    $1375 = $0;
    $1376 = $1;
    $1377 = (($1376) + 12|0);
    $1378 = HEAP32[$1377>>2]|0;
    $1379 = $2;
    _print_odf_node($1375,$1378,$1379);
   }
   STACKTOP = sp;return;
   break;
  }
  case 30:  {
   $898 = $2;
   $899 = (($898) + 80|0);
   $900 = HEAP32[$899>>2]|0;
   $old_type = $900;
   $901 = $2;
   $902 = (($901) + 80|0);
   HEAP32[$902>>2] = 30;
   $903 = $1;
   $904 = $2;
   $905 = (_note_number_for_node($903,$904)|0);
   $lev = $905;
   $906 = $2;
   $907 = (($906) + 48|0);
   $908 = HEAP32[$907>>2]|0;
   $909 = $lev;
   $910 = (_node_for_count($908,$909)|0);
   $temp_node = $910;
   $911 = $2;
   $912 = (($911) + 4|0);
   HEAP32[$912>>2] = 2;
   $913 = $2;
   $914 = (($913) + 25|0);
   HEAP8[$914>>0] = 1;
   $915 = $temp_node;
   $916 = HEAP16[$915>>1]|0;
   $917 = $916 << 16 >> 16;
   $918 = ($917|0)==(69);
   if ($918) {
    $919 = $0;
    _g_string_append_printf($919,13960,$vararg_buffer167);
    $920 = $0;
    $921 = $temp_node;
    $922 = (($921) + 12|0);
    $923 = HEAP32[$922>>2]|0;
    $924 = $2;
    _print_odf_node_tree($920,$923,$924);
    $925 = $0;
    _g_string_append_printf($925,14032,$vararg_buffer169);
   } else {
    $926 = $0;
    _g_string_append_printf($926,14064,$vararg_buffer171);
    $927 = $0;
    $928 = $temp_node;
    $929 = (($928) + 12|0);
    $930 = HEAP32[$929>>2]|0;
    $931 = $2;
    _print_odf_node_tree($927,$930,$931);
    $932 = $0;
    _g_string_append_printf($932,14032,$vararg_buffer173);
   }
   $933 = $2;
   $934 = (($933) + 25|0);
   HEAP8[$934>>0] = 0;
   $935 = $2;
   $936 = (($935) + 4|0);
   HEAP32[$936>>2] = 1;
   $937 = $old_type;
   $938 = $2;
   $939 = (($938) + 80|0);
   HEAP32[$939>>2] = $937;
   STACKTOP = sp;return;
   break;
  }
  case 58:  {
   $1258 = $0;
   _g_string_append_printf($1258,14928,$vararg_buffer235);
   $1259 = $2;
   $1260 = (($1259) + 20|0);
   HEAP32[$1260>>2] = 0;
   $1261 = $0;
   $1262 = $1;
   $1263 = (($1262) + 12|0);
   $1264 = HEAP32[$1263>>2]|0;
   $1265 = $2;
   _print_odf_node_tree($1261,$1264,$1265);
   $1266 = $0;
   _g_string_append_printf($1266,14952,$vararg_buffer237);
   STACKTOP = sp;return;
   break;
  }
  case 29:  {
   $708 = $0;
   $709 = $2;
   _pad($708,2,$709);
   break;
  }
  case 23:  {
   $516 = $1;
   $517 = (($516) + 8|0);
   $518 = HEAP32[$517>>2]|0;
   $519 = ($518|0)!=(0|0);
   if ($519) {
    $520 = $1;
    $521 = (($520) + 8|0);
    $522 = HEAP32[$521>>2]|0;
    $523 = HEAP32[$522>>2]|0;
    $524 = $1;
    $525 = (($524) + 8|0);
    $526 = HEAP32[$525>>2]|0;
    $527 = (($526) + 4|0);
    $528 = HEAP32[$527>>2]|0;
    $529 = $1;
    $530 = (($529) + 8|0);
    $531 = HEAP32[$530>>2]|0;
    $532 = (($531) + 8|0);
    $533 = HEAP32[$532>>2]|0;
    $534 = $1;
    $535 = (($534) + 8|0);
    $536 = HEAP32[$535>>2]|0;
    $537 = (($536) + 12|0);
    $538 = HEAP32[$537>>2]|0;
    $539 = (_mk_link_data($523,$528,$533,$538)|0);
    $temp_link_data = $539;
   }
   $540 = $1;
   $541 = (($540) + 8|0);
   $542 = HEAP32[$541>>2]|0;
   $543 = ($542|0)==(0|0);
   if ($543) {
    $544 = (_mk_link_data(0,0,0,0)|0);
    $545 = $1;
    $546 = (($545) + 8|0);
    HEAP32[$546>>2] = $544;
   }
   $547 = $1;
   $548 = (($547) + 8|0);
   $549 = HEAP32[$548>>2]|0;
   $550 = HEAP32[$549>>2]|0;
   $551 = ($550|0)==(0|0);
   if ($551) {
    $552 = $1;
    $553 = (($552) + 8|0);
    $554 = HEAP32[$553>>2]|0;
    $555 = (($554) + 4|0);
    $556 = HEAP32[$555>>2]|0;
    $557 = ($556|0)==(0|0);
    if ($557) {
     $558 = (_g_string_new(41432)|0);
     $temp_str = $558;
     $559 = $temp_str;
     $560 = $1;
     $561 = (($560) + 12|0);
     $562 = HEAP32[$561>>2]|0;
     _print_raw_node_tree($559,$562);
     $563 = $1;
     $564 = (($563) + 8|0);
     $565 = HEAP32[$564>>2]|0;
     $566 = HEAP32[$565>>2]|0;
     _free($566);
     $567 = $temp_str;
     $568 = HEAP32[$567>>2]|0;
     $569 = $1;
     $570 = (($569) + 8|0);
     $571 = HEAP32[$570>>2]|0;
     HEAP32[$571>>2] = $568;
     $572 = $temp_str;
     (_g_string_free($572,0)|0);
    }
   }
   $573 = $1;
   $574 = (($573) + 8|0);
   $575 = HEAP32[$574>>2]|0;
   $576 = HEAP32[$575>>2]|0;
   $577 = ($576|0)!=(0|0);
   do {
    if ($577) {
     $578 = $1;
     $579 = (($578) + 8|0);
     $580 = HEAP32[$579>>2]|0;
     $581 = HEAP32[$580>>2]|0;
     $582 = (___strdup($581)|0);
     $temp = $582;
     $583 = $1;
     $584 = (($583) + 8|0);
     $585 = HEAP32[$584>>2]|0;
     _free_link_data($585);
     $586 = $temp;
     $587 = $2;
     $588 = (_extract_link_data($586,$587)|0);
     $589 = $1;
     $590 = (($589) + 8|0);
     HEAP32[$590>>2] = $588;
     $591 = $1;
     $592 = (($591) + 8|0);
     $593 = HEAP32[$592>>2]|0;
     $594 = ($593|0)==(0|0);
     if (!($594)) {
      $631 = $temp;
      _free($631);
      break;
     }
     $595 = $0;
     _g_string_append_printf($595,40808,$vararg_buffer104);
     $596 = $0;
     $597 = $1;
     $598 = (($597) + 12|0);
     $599 = HEAP32[$598>>2]|0;
     $600 = $2;
     _print_odf_node($596,$599,$600);
     $601 = $0;
     _g_string_append_printf($601,39600,$vararg_buffer106);
     $602 = $1;
     $603 = (($602) + 12|0);
     $604 = HEAP32[$603>>2]|0;
     $605 = (($604) + 16|0);
     $606 = HEAP32[$605>>2]|0;
     $607 = ($606|0)!=(0|0);
     if ($607) {
      $608 = $0;
      _g_string_append_printf($608,40808,$vararg_buffer108);
      $609 = $0;
      $610 = $1;
      $611 = (($610) + 12|0);
      $612 = HEAP32[$611>>2]|0;
      $613 = (($612) + 16|0);
      $614 = HEAP32[$613>>2]|0;
      $615 = $2;
      _print_odf_node_tree($609,$614,$615);
      $616 = $0;
      _g_string_append_printf($616,39600,$vararg_buffer110);
     } else {
      $617 = $1;
      $618 = (($617) + 4|0);
      $619 = HEAP32[$618>>2]|0;
      $620 = ($619|0)!=(0|0);
      if ($620) {
       $621 = $0;
       $622 = $1;
       $623 = (($622) + 4|0);
       $624 = HEAP32[$623>>2]|0;
       HEAP32[$vararg_buffer112>>2] = $624;
       _g_string_append_printf($621,40832,$vararg_buffer112);
      } else {
       $625 = $0;
       $626 = $temp;
       HEAP32[$vararg_buffer115>>2] = $626;
       _g_string_append_printf($625,39608,$vararg_buffer115);
      }
     }
     $627 = $temp;
     _free($627);
     $628 = $temp_link_data;
     $629 = $1;
     $630 = (($629) + 8|0);
     HEAP32[$630>>2] = $628;
     STACKTOP = sp;return;
    }
   } while(0);
   $632 = $0;
   _g_string_append_printf($632,13200,$vararg_buffer118);
   $633 = $1;
   $634 = (($633) + 8|0);
   $635 = HEAP32[$634>>2]|0;
   $636 = (($635) + 4|0);
   $637 = HEAP32[$636>>2]|0;
   $638 = ($637|0)!=(0|0);
   if ($638) {
    $639 = $0;
    _g_string_append_printf($639,13232,$vararg_buffer120);
    $640 = $0;
    $641 = $1;
    $642 = (($641) + 8|0);
    $643 = HEAP32[$642>>2]|0;
    $644 = (($643) + 4|0);
    $645 = HEAP32[$644>>2]|0;
    $646 = $2;
    _print_html_string($640,$645,$646);
    $647 = $0;
    _g_string_append_printf($647,33880,$vararg_buffer122);
   }
   $648 = $1;
   $649 = (($648) + 8|0);
   $650 = HEAP32[$649>>2]|0;
   $651 = (($650) + 8|0);
   $652 = HEAP32[$651>>2]|0;
   $653 = ($652|0)!=(0|0);
   if ($653) {
    $654 = $1;
    $655 = (($654) + 8|0);
    $656 = HEAP32[$655>>2]|0;
    $657 = (($656) + 8|0);
    $658 = HEAP32[$657>>2]|0;
    $659 = (_strlen(($658|0))|0);
    $660 = ($659>>>0)>(0);
    if ($660) {
     $661 = $0;
     _g_string_append_printf($661,13248,$vararg_buffer124);
     $662 = $0;
     $663 = $1;
     $664 = (($663) + 8|0);
     $665 = HEAP32[$664>>2]|0;
     $666 = (($665) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = $2;
     _print_html_string($662,$667,$668);
     $669 = $0;
     _g_string_append_printf($669,33880,$vararg_buffer126);
    }
   }
   $670 = $0;
   $671 = $1;
   $672 = (($671) + 8|0);
   $673 = HEAP32[$672>>2]|0;
   $674 = (($673) + 12|0);
   $675 = HEAP32[$674>>2]|0;
   $676 = $2;
   _print_odf_node_tree($670,$675,$676);
   $677 = $0;
   _g_string_append_printf($677,42616,$vararg_buffer128);
   $678 = $1;
   $679 = (($678) + 12|0);
   $680 = HEAP32[$679>>2]|0;
   $681 = ($680|0)!=(0|0);
   if ($681) {
    $682 = $0;
    $683 = $1;
    $684 = (($683) + 12|0);
    $685 = HEAP32[$684>>2]|0;
    $686 = $2;
    _print_odf_node_tree($682,$685,$686);
   }
   $687 = $0;
   _g_string_append_printf($687,13264,$vararg_buffer130);
   $688 = $1;
   $689 = (($688) + 8|0);
   $690 = HEAP32[$689>>2]|0;
   $691 = (($690) + 12|0);
   HEAP32[$691>>2] = 0;
   $692 = $1;
   $693 = (($692) + 8|0);
   $694 = HEAP32[$693>>2]|0;
   _free_link_data($694);
   $695 = $temp_link_data;
   $696 = $1;
   $697 = (($696) + 8|0);
   HEAP32[$697>>2] = $695;
   STACKTOP = sp;return;
   break;
  }
  case 87:  {
   STACKTOP = sp;return;
   break;
  }
  case 80:  {
   $1388 = $0;
   _g_string_append_printf($1388,15304,$vararg_buffer269);
   $1389 = $0;
   $1390 = $1;
   $1391 = (($1390) + 4|0);
   $1392 = HEAP32[$1391>>2]|0;
   $1393 = $2;
   _print_html_string($1389,$1392,$1393);
   $1394 = $0;
   _g_string_append_printf($1394,13136,$vararg_buffer271);
   STACKTOP = sp;return;
   break;
  }
  case 8:  {
   $35 = $0;
   $36 = $1;
   $37 = (($36) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $38;
   _g_string_append_printf($35,40832,$vararg_buffer1);
   STACKTOP = sp;return;
   break;
  }
  case 71:  {
   $1076 = $0;
   _g_string_append_printf($1076,14384,$vararg_buffer204);
   $1077 = $0;
   $1078 = $1;
   $1079 = (($1078) + 12|0);
   $1080 = HEAP32[$1079>>2]|0;
   $1081 = (($1080) + 4|0);
   $1082 = HEAP32[$1081>>2]|0;
   _print_odf_string($1077,$1082);
   $1083 = $0;
   _g_string_append_printf($1083,14424,$vararg_buffer206);
   STACKTOP = sp;return;
   break;
  }
  case 70:  {
   STACKTOP = sp;return;
   break;
  }
  case 85: case 84: case 83: case 2:  {
   $30 = $0;
   $31 = $1;
   $32 = (($31) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $2;
   _print_html_string($30,$33,$34);
   STACKTOP = sp;return;
   break;
  }
  case 81:  {
   $1060 = $1;
   $1061 = (($1060) + 4|0);
   $1062 = HEAP32[$1061>>2]|0;
   $1063 = $2;
   $1064 = (($1063) + 52|0);
   $1065 = HEAP32[$1064>>2]|0;
   $1066 = (_metavalue_for_key($1062,$1065)|0);
   $temp = $1066;
   $1067 = $temp;
   $1068 = ($1067|0)==(0|0);
   if ($1068) {
    $1069 = $0;
    $1070 = $1;
    $1071 = (($1070) + 4|0);
    $1072 = HEAP32[$1071>>2]|0;
    HEAP32[$vararg_buffer199>>2] = $1072;
    _g_string_append_printf($1069,39936,$vararg_buffer199);
   } else {
    $1073 = $0;
    $1074 = $temp;
    _g_string_append_printf($1073,$1074,$vararg_buffer202);
    $1075 = $temp;
    _free($1075);
   }
   STACKTOP = sp;return;
   break;
  }
  case 25: case 24: case 26:  {
   STACKTOP = sp;return;
   break;
  }
  case 61:  {
   STACKTOP = sp;return;
   break;
  }
  case 17:  {
   $219 = $0;
   _g_string_append_printf($219,12464,$vararg_buffer48);
   $220 = $2;
   $221 = HEAP32[$220>>2]|0;
   $222 = $221 | 8;
   $223 = $2;
   HEAP32[$223>>2] = $222;
   $224 = $0;
   $225 = $1;
   $226 = (($225) + 12|0);
   $227 = HEAP32[$226>>2]|0;
   $228 = $2;
   _print_odf_node_tree($224,$227,$228);
   $229 = $0;
   _g_string_append_printf($229,12480,$vararg_buffer50);
   $230 = $1;
   $231 = (_metadata_for_key(12496,$230)|0);
   $temp_node = $231;
   $232 = $temp_node;
   $233 = ($232|0)!=(0|0);
   if ($233) {
    $234 = $0;
    $235 = $temp_node;
    $236 = (($235) + 12|0);
    $237 = HEAP32[$236>>2]|0;
    _print_raw_node($234,$237);
   }
   $238 = $0;
   _g_string_append_printf($238,11856,$vararg_buffer52);
   STACKTOP = sp;return;
   break;
  }
  case 56:  {
   $1267 = $2;
   $1268 = (($1267) + 16|0);
   $1269 = HEAP32[$1268>>2]|0;
   $temp = $1269;
   $1270 = $2;
   $1271 = (($1270) + 20|0);
   $1272 = HEAP32[$1271>>2]|0;
   $1273 = $temp;
   $1274 = (($1273) + ($1272)|0);
   $1275 = (_strncmp($1274,47240,1)|0);
   $1276 = ($1275|0)==(0);
   if ($1276) {
    $1277 = $2;
    $1278 = (($1277) + 20|0);
    $1279 = HEAP32[$1278>>2]|0;
    $1280 = (($1279) + 1)|0;
    HEAP32[$1278>>2] = $1280;
   }
   $1281 = $2;
   $1282 = (($1281) + 20|0);
   $1283 = HEAP32[$1282>>2]|0;
   $lev = $1283;
   $1284 = $0;
   _g_string_append_printf($1284,14976,$vararg_buffer239);
   $1285 = $1;
   $1286 = (($1285) + 12|0);
   $1287 = HEAP32[$1286>>2]|0;
   $1288 = ($1287|0)!=(0|0);
   if ($1288) {
    $1289 = $1;
    $1290 = (($1289) + 12|0);
    $1291 = HEAP32[$1290>>2]|0;
    $1292 = HEAP16[$1291>>1]|0;
    $1293 = $1292 << 16 >> 16;
    $1294 = ($1293|0)==(57);
    if ($1294) {
     $1295 = $0;
     $1296 = $1;
     $1297 = (($1296) + 12|0);
     $1298 = HEAP32[$1297>>2]|0;
     $1299 = (($1298) + 4|0);
     $1300 = HEAP32[$1299>>2]|0;
     $1301 = (_strlen(($1300|0))|0);
     $1302 = (($1301) + 1)|0;
     HEAP32[$vararg_buffer241>>2] = $1302;
     _g_string_append_printf($1295,15000,$vararg_buffer241);
     $1303 = $1;
     $1304 = (($1303) + 12|0);
     $1305 = HEAP32[$1304>>2]|0;
     $1306 = (($1305) + 4|0);
     $1307 = HEAP32[$1306>>2]|0;
     $1308 = (_strlen(($1307|0))|0);
     $1309 = $2;
     $1310 = (($1309) + 20|0);
     $1311 = HEAP32[$1310>>2]|0;
     $1312 = (($1311) + ($1308))|0;
     HEAP32[$1310>>2] = $1312;
    }
   }
   $1313 = $0;
   _g_string_append_printf($1313,15040,$vararg_buffer244);
   $1314 = $2;
   $1315 = (($1314) + 24|0);
   $1316 = HEAP8[$1315>>0]|0;
   $1317 = $1316 << 24 >> 24;
   $1318 = ($1317|0)==(104);
   if ($1318) {
    $1319 = $0;
    _g_string_append_printf($1319,15056,$vararg_buffer246);
   } else {
    $1320 = $lev;
    $1321 = $temp;
    $1322 = (($1321) + ($1320)|0);
    $1323 = (_strncmp($1322,47264,1)|0);
    $1324 = ($1323|0)==(0);
    if ($1324) {
     $1325 = $0;
     _g_string_append_printf($1325,15096,$vararg_buffer248);
    } else {
     $1326 = $lev;
     $1327 = $temp;
     $1328 = (($1327) + ($1326)|0);
     $1329 = (_strncmp($1328,47352,1)|0);
     $1330 = ($1329|0)==(0);
     if ($1330) {
      $1331 = $0;
      _g_string_append_printf($1331,15096,$vararg_buffer250);
     } else {
      $1332 = $lev;
      $1333 = $temp;
      $1334 = (($1333) + ($1332)|0);
      $1335 = (_strncmp($1334,47296,1)|0);
      $1336 = ($1335|0)==(0);
      if ($1336) {
       $1337 = $0;
       _g_string_append_printf($1337,15136,$vararg_buffer252);
      } else {
       $1338 = $lev;
       $1339 = $temp;
       $1340 = (($1339) + ($1338)|0);
       $1341 = (_strncmp($1340,47384,1)|0);
       $1342 = ($1341|0)==(0);
       if ($1342) {
        $1343 = $0;
        _g_string_append_printf($1343,15136,$vararg_buffer254);
       } else {
        $1344 = $0;
        _g_string_append_printf($1344,15176,$vararg_buffer256);
       }
      }
     }
    }
   }
   $1345 = $0;
   _g_string_append_printf($1345,42616,$vararg_buffer258);
   $1346 = $2;
   $1347 = (($1346) + 4|0);
   HEAP32[$1347>>2] = 2;
   $1348 = $0;
   $1349 = $1;
   $1350 = (($1349) + 12|0);
   $1351 = HEAP32[$1350>>2]|0;
   $1352 = $2;
   _print_odf_node_tree($1348,$1351,$1352);
   $1353 = $0;
   $1354 = $2;
   $1355 = (($1354) + 24|0);
   $1356 = HEAP8[$1355>>0]|0;
   $1357 = $1356 << 24 >> 24;
   HEAP32[$vararg_buffer260>>2] = $1357;
   _g_string_append_printf($1353,15208,$vararg_buffer260);
   $1358 = $2;
   $1359 = (($1358) + 20|0);
   $1360 = HEAP32[$1359>>2]|0;
   $1361 = (($1360) + 1)|0;
   HEAP32[$1359>>2] = $1361;
   STACKTOP = sp;return;
   break;
  }
  case 43: case 41:  {
   $97 = $2;
   $98 = (($97) + 80|0);
   $99 = HEAP32[$98>>2]|0;
   $old_type = $99;
   $100 = $2;
   $101 = (($100) + 80|0);
   HEAP32[$101>>2] = 41;
   $102 = $0;
   $103 = $2;
   _pad($102,2,$103);
   $104 = $0;
   _g_string_append_printf($104,12192,$vararg_buffer26);
   $105 = $0;
   $106 = $1;
   $107 = (($106) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   _print_odf_code_string($105,$108);
   $109 = $0;
   _g_string_append_printf($109,12080,$vararg_buffer28);
   $110 = $2;
   $111 = (($110) + 4|0);
   HEAP32[$111>>2] = 0;
   $112 = $old_type;
   $113 = $2;
   $114 = (($113) + 80|0);
   HEAP32[$114>>2] = $112;
   STACKTOP = sp;return;
   break;
  }
  case 28:  {
   break;
  }
  case 66: case 65:  {
   STACKTOP = sp;return;
   break;
  }
  case 64:  {
   $1380 = HEAP32[_stderr>>2]|0;
   (_fprintf(($1380|0),(15240|0),($vararg_buffer263|0))|0);
   STACKTOP = sp;return;
   break;
  }
  case 4:  {
   STACKTOP = sp;return;
   break;
  }
  case 19:  {
   $377 = $1;
   $378 = (($377) + 4|0);
   $379 = HEAP32[$378>>2]|0;
   _trim_trailing_whitespace($379);
   $380 = $0;
   $381 = $1;
   $382 = (($381) + 4|0);
   $383 = HEAP32[$382>>2]|0;
   _print_odf_string($380,$383);
   STACKTOP = sp;return;
   break;
  }
  case 52:  {
   $1173 = $0;
   $1174 = $2;
   _pad($1173,2,$1174);
   $1175 = $0;
   _g_string_append_printf($1175,14640,$vararg_buffer223);
   $1176 = $0;
   $1177 = $1;
   $1178 = (($1177) + 12|0);
   $1179 = HEAP32[$1178>>2]|0;
   $1180 = $2;
   _print_odf_node_tree($1176,$1179,$1180);
   $1181 = $0;
   _g_string_append_printf($1181,14656,$vararg_buffer225);
   $1182 = $1;
   $1183 = (($1182) + 12|0);
   $1184 = HEAP32[$1183>>2]|0;
   $1185 = ($1184|0)!=(0|0);
   if ($1185) {
    $1186 = $1;
    $1187 = (($1186) + 12|0);
    $1188 = HEAP32[$1187>>2]|0;
    $1189 = HEAP16[$1188>>1]|0;
    $1190 = $1189 << 16 >> 16;
    $1191 = ($1190|0)==(53);
    if ($1191) {
     $1192 = $1;
     $1193 = (($1192) + 12|0);
     $1194 = HEAP32[$1193>>2]|0;
     $1195 = (($1194) + 12|0);
     $1196 = HEAP32[$1195>>2]|0;
     $1197 = HEAP16[$1196>>1]|0;
     $1198 = $1197 << 16 >> 16;
     $1199 = ($1198|0)==(54);
     if ($1199) {
      $1200 = $1;
      $1201 = (($1200) + 12|0);
      $1202 = HEAP32[$1201>>2]|0;
      $1203 = (($1202) + 12|0);
      $1204 = HEAP32[$1203>>2]|0;
      $1205 = (($1204) + 4|0);
      $1206 = HEAP32[$1205>>2]|0;
      $1207 = (_label_from_string($1206)|0);
      $temp = $1207;
     } else {
      $1208 = $1;
      $1209 = (($1208) + 12|0);
      $1210 = HEAP32[$1209>>2]|0;
      $1211 = (($1210) + 12|0);
      $1212 = HEAP32[$1211>>2]|0;
      $1213 = (_label_from_node_tree($1212)|0);
      $temp = $1213;
     }
     $1214 = $0;
     $1215 = $temp;
     HEAP32[$vararg_buffer227>>2] = $1215;
     _g_string_append_printf($1214,14672,$vararg_buffer227);
     $1216 = $0;
     $1217 = $1;
     $1218 = (($1217) + 12|0);
     $1219 = HEAP32[$1218>>2]|0;
     $1220 = (($1219) + 12|0);
     $1221 = HEAP32[$1220>>2]|0;
     $1222 = $2;
     _print_odf_node_tree($1216,$1221,$1222);
     $1223 = $0;
     $1224 = $temp;
     HEAP32[$vararg_buffer230>>2] = $1224;
     _g_string_append_printf($1223,14856,$vararg_buffer230);
     $1225 = $temp;
     _free($1225);
    }
   }
   $1226 = $2;
   $1227 = (($1226) + 4|0);
   HEAP32[$1227>>2] = 1;
   $1228 = $2;
   $1229 = (($1228) + 16|0);
   HEAP32[$1229>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 46:  {
   $1152 = $2;
   $1153 = (($1152) + 80|0);
   $1154 = HEAP32[$1153>>2]|0;
   $old_type = $1154;
   $1155 = $2;
   $1156 = (($1155) + 80|0);
   HEAP32[$1156>>2] = 46;
   $1157 = $0;
   $1158 = $2;
   _pad($1157,1,$1158);
   $1159 = $2;
   $1160 = (($1159) + 4|0);
   HEAP32[$1160>>2] = 1;
   $1161 = $0;
   _g_string_append_printf($1161,14600,$vararg_buffer219);
   $1162 = $0;
   $1163 = $1;
   $1164 = (($1163) + 12|0);
   $1165 = HEAP32[$1164>>2]|0;
   $1166 = $2;
   _print_odf_node_tree($1162,$1165,$1166);
   $1167 = $0;
   _g_string_append_printf($1167,12080,$vararg_buffer221);
   $1168 = $2;
   $1169 = (($1168) + 4|0);
   HEAP32[$1169>>2] = 0;
   $1170 = $old_type;
   $1171 = $2;
   $1172 = (($1171) + 80|0);
   HEAP32[$1172>>2] = $1170;
   STACKTOP = sp;return;
   break;
  }
  case 38:  {
   $1096 = $0;
   $1097 = $2;
   _pad($1096,2,$1097);
   $1098 = $2;
   $1099 = (($1098) + 4|0);
   HEAP32[$1099>>2] = 2;
   $1100 = $2;
   $1101 = (($1100) + 80|0);
   $1102 = HEAP32[$1101>>2]|0;
   $old_type = $1102;
   $1103 = $2;
   $1104 = (($1103) + 80|0);
   HEAP32[$1104>>2] = 38;
   $1105 = $0;
   $1106 = $1;
   $1107 = (($1106) + 12|0);
   $1108 = HEAP32[$1107>>2]|0;
   $1109 = $2;
   _print_odf_node_tree($1105,$1108,$1109);
   $1110 = $old_type;
   $1111 = $2;
   $1112 = (($1111) + 80|0);
   HEAP32[$1112>>2] = $1110;
   STACKTOP = sp;return;
   break;
  }
  case 45:  {
   $1141 = $0;
   $1142 = $2;
   _pad($1141,1,$1142);
   $1143 = $0;
   _g_string_append_printf($1143,14528,$vararg_buffer215);
   $1144 = $0;
   $1145 = $1;
   $1146 = (($1145) + 12|0);
   $1147 = HEAP32[$1146>>2]|0;
   $1148 = $2;
   _print_odf_node_tree($1144,$1147,$1148);
   $1149 = $0;
   _g_string_append_printf($1149,14576,$vararg_buffer217);
   $1150 = $2;
   $1151 = (($1150) + 4|0);
   HEAP32[$1151>>2] = 1;
   STACKTOP = sp;return;
   break;
  }
  case 44:  {
   $1136 = $0;
   $1137 = $1;
   $1138 = (($1137) + 12|0);
   $1139 = HEAP32[$1138>>2]|0;
   $1140 = $2;
   _print_odf_node_tree($1136,$1139,$1140);
   STACKTOP = sp;return;
   break;
  }
  case 72: case 73:  {
   $940 = $1;
   $941 = (($940) + 8|0);
   $942 = HEAP32[$941>>2]|0;
   $943 = ($942|0)!=(0|0);
   if ($943) {
    $944 = $1;
    $945 = (($944) + 8|0);
    $946 = HEAP32[$945>>2]|0;
    $947 = HEAP32[$946>>2]|0;
    $948 = (_strncmp($947,45008,2)|0);
    $949 = ($948|0)==(0);
    if ($949) {
     $950 = $0;
     $951 = $1;
     $952 = (($951) + 8|0);
     $953 = HEAP32[$952>>2]|0;
     $954 = HEAP32[$953>>2]|0;
     HEAP32[$vararg_buffer175>>2] = $954;
     _g_string_append_printf($950,40832,$vararg_buffer175);
    } else {
     label = 209;
    }
   } else {
    label = 209;
   }
   if ((label|0) == 209) {
    $955 = $2;
    $956 = (($955) + 25|0);
    HEAP8[$956>>0] = 1;
    $lev = 0;
    $957 = $1;
    $958 = (($957) + 8|0);
    $959 = HEAP32[$958>>2]|0;
    $960 = ($959|0)!=(0|0);
    if ($960) {
     $961 = $1;
     $962 = (($961) + 8|0);
     $963 = HEAP32[$962>>2]|0;
     $964 = HEAP32[$963>>2]|0;
     $965 = $2;
     $966 = (_note_number_for_label($964,$965)|0);
     $lev = $966;
    }
    $967 = $lev;
    $968 = ($967|0)!=(0);
    if ($968) {
     $969 = $2;
     $970 = (($969) + 48|0);
     $971 = HEAP32[$970>>2]|0;
     $972 = $lev;
     $973 = (_node_for_count($971,$972)|0);
     $temp_node = $973;
     $974 = $temp_node;
     HEAP16[$974>>1] = 63;
     $975 = $lev;
     $976 = $2;
     $977 = (($976) + 64|0);
     $978 = HEAP32[$977>>2]|0;
     $979 = ($975|0)>($978|0);
     if ($979) {
      $980 = $lev;
      $981 = $2;
      $982 = (($981) + 64|0);
      HEAP32[$982>>2] = $980;
      $983 = $2;
      $984 = (($983) + 80|0);
      $985 = HEAP32[$984>>2]|0;
      $old_type = $985;
      $986 = $2;
      $987 = (($986) + 80|0);
      HEAP32[$987>>2] = 72;
      $988 = $temp_node;
      $989 = (_cite_count_node_from_end($988)|0);
      $lev = $989;
      $990 = $0;
      $991 = $lev;
      HEAP32[$vararg_buffer178>>2] = $991;
      _g_string_append_printf($990,14136,$vararg_buffer178);
      $992 = $2;
      $993 = (($992) + 4|0);
      HEAP32[$993>>2] = 2;
      $994 = $temp_node;
      $995 = (($994) + 12|0);
      $996 = HEAP32[$995>>2]|0;
      $997 = ($996|0)!=(0|0);
      if ($997) {
       $998 = $0;
       $999 = $temp_node;
       $1000 = (($999) + 12|0);
       $1001 = HEAP32[$1000>>2]|0;
       $1002 = $2;
       _print_odf_node($998,$1001,$1002);
      }
      $1003 = $0;
      $1004 = $2;
      _pad($1003,1,$1004);
      $1005 = $0;
      _g_string_append_printf($1005,14032,$vararg_buffer181);
      $1006 = $old_type;
      $1007 = $2;
      $1008 = (($1007) + 80|0);
      HEAP32[$1008>>2] = $1006;
     } else {
      $1009 = $temp_node;
      $1010 = (_cite_count_node_from_end($1009)|0);
      $lev = $1010;
      $1011 = $0;
      $1012 = $lev;
      $1013 = $lev;
      HEAP32[$vararg_buffer183>>2] = $1012;
      $vararg_ptr186 = (($vararg_buffer183) + 4|0);
      HEAP32[$vararg_ptr186>>2] = $1013;
      _g_string_append_printf($1011,14208,$vararg_buffer183);
     }
    } else {
     $1014 = $1;
     $1015 = (($1014) + 8|0);
     $1016 = HEAP32[$1015>>2]|0;
     $1017 = ($1016|0)!=(0|0);
     if ($1017) {
      $1018 = $1;
      $1019 = HEAP16[$1018>>1]|0;
      $1020 = $1019 << 16 >> 16;
      $1021 = ($1020|0)==(73);
      if ($1021) {
       $1022 = $0;
       $1023 = $1;
       $1024 = (($1023) + 8|0);
       $1025 = HEAP32[$1024>>2]|0;
       $1026 = HEAP32[$1025>>2]|0;
       HEAP32[$vararg_buffer187>>2] = $1026;
       _g_string_append_printf($1022,40832,$vararg_buffer187);
      } else {
       label = 221;
      }
     } else {
      label = 221;
     }
     if ((label|0) == 221) {
      $1027 = $1;
      $1028 = (($1027) + 8|0);
      $1029 = HEAP32[$1028>>2]|0;
      $1030 = ($1029|0)!=(0|0);
      if ($1030) {
       $1031 = $0;
       _g_string_append_printf($1031,40808,$vararg_buffer190);
       $1032 = $1;
       $1033 = (($1032) + 12|0);
       $1034 = HEAP32[$1033>>2]|0;
       $1035 = ($1034|0)!=(0|0);
       if ($1035) {
        $1036 = $0;
        $1037 = $1;
        $1038 = (($1037) + 12|0);
        $1039 = HEAP32[$1038>>2]|0;
        $1040 = $2;
        _print_odf_node($1036,$1039,$1040);
        $1041 = $0;
        _g_string_append_printf($1041,39840,$vararg_buffer192);
       }
       $1042 = $0;
       $1043 = $1;
       $1044 = (($1043) + 8|0);
       $1045 = HEAP32[$1044>>2]|0;
       $1046 = HEAP32[$1045>>2]|0;
       HEAP32[$vararg_buffer194>>2] = $1046;
       _g_string_append_printf($1042,39848,$vararg_buffer194);
      }
     }
    }
   }
   $1047 = $2;
   $1048 = (($1047) + 25|0);
   HEAP8[$1048>>0] = 0;
   $1049 = $1;
   $1050 = (($1049) + 16|0);
   $1051 = HEAP32[$1050>>2]|0;
   $1052 = ($1051|0)!=(0|0);
   if ($1052) {
    $1053 = $1;
    $1054 = (($1053) + 16|0);
    $1055 = HEAP32[$1054>>2]|0;
    $1056 = HEAP16[$1055>>1]|0;
    $1057 = $1056 << 16 >> 16;
    $1058 = ($1057|0)==(72);
    if ($1058) {
     $1059 = $0;
     _g_string_append_printf($1059,42624,$vararg_buffer197);
    }
   }
   STACKTOP = sp;return;
   break;
  }
  case 32:  {
   $1117 = $1;
   $1118 = (($1117) + 4|0);
   $1119 = HEAP32[$1118>>2]|0;
   $1120 = (_strncmp($1119,42136,4)|0);
   $1121 = ($1120|0)==(0);
   if ($1121) {
    $1122 = $1;
    $1123 = (($1122) + 4|0);
    $1124 = HEAP32[$1123>>2]|0;
    $1125 = (_strlen(($1124|0))|0);
    $1126 = (($1125) - 3)|0;
    $1127 = $1;
    $1128 = (($1127) + 4|0);
    $1129 = HEAP32[$1128>>2]|0;
    $1130 = (($1129) + ($1126)|0);
    HEAP8[$1130>>0] = 0;
    $1131 = $0;
    $1132 = $1;
    $1133 = (($1132) + 4|0);
    $1134 = HEAP32[$1133>>2]|0;
    $1135 = (($1134) + 4|0);
    HEAP32[$vararg_buffer212>>2] = $1135;
    _g_string_append_printf($1131,40832,$vararg_buffer212);
   }
   STACKTOP = sp;return;
   break;
  }
  case 9:  {
   $384 = $0;
   $385 = $1;
   $386 = (($385) + 12|0);
   $387 = HEAP32[$386>>2]|0;
   $388 = $2;
   _print_odf_node_tree($384,$387,$388);
   STACKTOP = sp;return;
   break;
  }
  case 39:  {
   $1091 = $0;
   $1092 = $1;
   $1093 = (($1092) + 12|0);
   $1094 = HEAP32[$1093>>2]|0;
   $1095 = $2;
   _print_odf_node_tree($1091,$1094,$1095);
   STACKTOP = sp;return;
   break;
  }
  case 40:  {
   $1113 = $1;
   $1114 = HEAP16[$1113>>1]|0;
   $1115 = $1114 << 16 >> 16;
   $1116 = ($1115|0)!=(40);
   if (!($1116)) {
    ___assert_fail((14488|0),(14504|0),692,(14512|0));
    // unreachable;
   }
   STACKTOP = sp;return;
   break;
  }
  case 31:  {
   $1084 = $0;
   _g_string_append_printf($1084,14440,$vararg_buffer208);
   $1085 = $0;
   $1086 = $1;
   $1087 = (($1086) + 4|0);
   $1088 = HEAP32[$1087>>2]|0;
   $1089 = $2;
   _print_html_string($1085,$1088,$1089);
   $1090 = $0;
   _g_string_append_printf($1090,13136,$vararg_buffer210);
   STACKTOP = sp;return;
   break;
  }
  case 15: case 14: case 13: case 12: case 11: case 10:  {
   $389 = $1;
   $390 = HEAP16[$389>>1]|0;
   $391 = $390 << 16 >> 16;
   $392 = (($391) - 10)|0;
   $393 = $2;
   $394 = (($393) + 8|0);
   $395 = HEAP32[$394>>2]|0;
   $396 = (($392) + ($395))|0;
   $lev = $396;
   $397 = $0;
   $398 = $2;
   _pad($397,2,$398);
   $399 = $0;
   $400 = $lev;
   HEAP32[$vararg_buffer68>>2] = $400;
   _g_string_append_printf($399,12776,$vararg_buffer68);
   $401 = $1;
   $402 = (($401) + 12|0);
   $403 = HEAP32[$402>>2]|0;
   $404 = HEAP16[$403>>1]|0;
   $405 = $404 << 16 >> 16;
   $406 = ($405|0)==(27);
   if ($406) {
    $407 = $1;
    $408 = (($407) + 12|0);
    $409 = HEAP32[$408>>2]|0;
    $410 = (($409) + 4|0);
    $411 = HEAP32[$410>>2]|0;
    $412 = (_label_from_string($411)|0);
    $temp = $412;
    $413 = $0;
    $414 = $temp;
    HEAP32[$vararg_buffer71>>2] = $414;
    _g_string_append_printf($413,12816,$vararg_buffer71);
    $415 = $0;
    $416 = $1;
    $417 = (($416) + 12|0);
    $418 = HEAP32[$417>>2]|0;
    $419 = (($418) + 16|0);
    $420 = HEAP32[$419>>2]|0;
    $421 = $2;
    _print_odf_node_tree($415,$420,$421);
    $422 = $0;
    $423 = $temp;
    HEAP32[$vararg_buffer74>>2] = $423;
    _g_string_append_printf($422,12848,$vararg_buffer74);
    $424 = $temp;
    _free($424);
   } else {
    $425 = $1;
    $426 = (($425) + 12|0);
    $427 = HEAP32[$426>>2]|0;
    $428 = (_label_from_node_tree($427)|0);
    $temp = $428;
    $429 = $0;
    $430 = $temp;
    HEAP32[$vararg_buffer77>>2] = $430;
    _g_string_append_printf($429,12816,$vararg_buffer77);
    $431 = $0;
    $432 = $1;
    $433 = (($432) + 12|0);
    $434 = HEAP32[$433>>2]|0;
    $435 = $2;
    _print_odf_node_tree($431,$434,$435);
    $436 = $0;
    $437 = $temp;
    HEAP32[$vararg_buffer80>>2] = $437;
    _g_string_append_printf($436,12848,$vararg_buffer80);
    $438 = $temp;
    _free($438);
   }
   $439 = $0;
   _g_string_append_printf($439,12888,$vararg_buffer83);
   $440 = $2;
   $441 = (($440) + 4|0);
   HEAP32[$441>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 55:  {
   $1230 = $1;
   $1231 = (($1230) + 4|0);
   $1232 = HEAP32[$1231>>2]|0;
   $1233 = $2;
   $1234 = (($1233) + 16|0);
   HEAP32[$1234>>2] = $1232;
   STACKTOP = sp;return;
   break;
  }
  case 53:  {
   STACKTOP = sp;return;
   break;
  }
  case 34:  {
   $448 = $0;
   $449 = $2;
   _print_html_localized_typography($448,4,$449);
   STACKTOP = sp;return;
   break;
  }
  case 57:  {
   STACKTOP = sp;return;
   break;
  }
  case 18:  {
   $239 = $1;
   $240 = (($239) + 4|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = (_label_from_string($241)|0);
   $temp = $242;
   $243 = $temp;
   $244 = (_strcmp($243,38736)|0);
   $245 = ($244|0)==(0);
   if ($245) {
    $246 = $0;
    _g_string_append_printf($246,12512,$vararg_buffer54);
    $247 = $0;
    $248 = $1;
    $249 = (($248) + 12|0);
    $250 = HEAP32[$249>>2]|0;
    $251 = $2;
    _print_odf_node($247,$250,$251);
    $252 = $0;
    _g_string_append_printf($252,12528,$vararg_buffer56);
   } else {
    $253 = $temp;
    $254 = (_strcmp($253,12544)|0);
    $255 = ($254|0)==(0);
    if ($255) {
    } else {
     $256 = $temp;
     $257 = (_strcmp($256,12552)|0);
     $258 = ($257|0)==(0);
     if ($258) {
     } else {
      $259 = $temp;
      $260 = (_strcmp($259,12568)|0);
      $261 = ($260|0)==(0);
      if ($261) {
      } else {
       $262 = $1;
       $263 = (($262) + 4|0);
       $264 = HEAP32[$263>>2]|0;
       $265 = (_strcmp($264,12584)|0);
       $266 = ($265|0)==(0);
       if ($266) {
       } else {
        $267 = $1;
        $268 = (($267) + 4|0);
        $269 = HEAP32[$268>>2]|0;
        $270 = (_strcmp($269,12600)|0);
        $271 = ($270|0)==(0);
        if ($271) {
        } else {
         $272 = $temp;
         $273 = (_strcmp($272,38600)|0);
         $274 = ($273|0)==(0);
         if ($274) {
          $275 = $1;
          $276 = (($275) + 12|0);
          $277 = HEAP32[$276>>2]|0;
          $278 = (($277) + 4|0);
          $279 = HEAP32[$278>>2]|0;
          $280 = (_atoi($279)|0);
          $281 = $2;
          $282 = (($281) + 8|0);
          HEAP32[$282>>2] = $280;
         } else {
          $283 = $temp;
          $284 = (_strcmp($283,12616)|0);
          $285 = ($284|0)==(0);
          if ($285) {
           $286 = $1;
           $287 = (($286) + 12|0);
           $288 = HEAP32[$287>>2]|0;
           $289 = (($288) + 4|0);
           $290 = HEAP32[$289>>2]|0;
           $291 = (_atoi($290)|0);
           $292 = $2;
           $293 = (($292) + 8|0);
           HEAP32[$293>>2] = $291;
          } else {
           $294 = $temp;
           $295 = (_strcmp($294,12632)|0);
           $296 = ($295|0)==(0);
           if ($296) {
           } else {
            $297 = $temp;
            $298 = (_strcmp($297,12648)|0);
            $299 = ($298|0)==(0);
            if ($299) {
            } else {
             $300 = $temp;
             $301 = (_strcmp($300,12664)|0);
             $302 = ($301|0)==(0);
             if ($302) {
             } else {
              $303 = $temp;
              $304 = (_strcmp($303,41256)|0);
              $305 = ($304|0)==(0);
              if ($305) {
              } else {
               $306 = $temp;
               $307 = (_strcmp($306,38824)|0);
               $308 = ($307|0)==(0);
               if ($308) {
                $309 = $0;
                _g_string_append_printf($309,12680,$vararg_buffer58);
                $310 = $0;
                $311 = $1;
                $312 = (($311) + 12|0);
                $313 = HEAP32[$312>>2]|0;
                $314 = $2;
                _print_odf_node($310,$313,$314);
                $315 = $0;
                _g_string_append_printf($315,12696,$vararg_buffer60);
               } else {
                $316 = $temp;
                $317 = (_strcmp($316,38632)|0);
                $318 = ($317|0)==(0);
                if ($318) {
                 $319 = $temp;
                 _free($319);
                 $320 = $1;
                 $321 = (($320) + 12|0);
                 $322 = HEAP32[$321>>2]|0;
                 $323 = (_label_from_node_tree($322)|0);
                 $temp = $323;
                 $324 = $temp;
                 $325 = (_strcmp($324,38648)|0);
                 $326 = ($325|0)==(0);
                 do {
                  if ($326) {
                   label = 79;
                  } else {
                   $327 = $temp;
                   $328 = (_strcmp($327,38656)|0);
                   $329 = ($328|0)==(0);
                   if ($329) {
                    label = 79;
                    break;
                   }
                   $332 = $temp;
                   $333 = (_strcmp($332,38664)|0);
                   $334 = ($333|0)==(0);
                   do {
                    if ($334) {
                     label = 82;
                    } else {
                     $335 = $temp;
                     $336 = (_strcmp($335,38672)|0);
                     $337 = ($336|0)==(0);
                     if ($337) {
                      label = 82;
                      break;
                     }
                     $340 = $temp;
                     $341 = (_strcmp($340,38680)|0);
                     $342 = ($341|0)==(0);
                     if ($342) {
                      $343 = $2;
                      $344 = (($343) + 12|0);
                      HEAP32[$344>>2] = 4;
                     } else {
                      $345 = $temp;
                      $346 = (_strcmp($345,38704)|0);
                      $347 = ($346|0)==(0);
                      do {
                       if ($347) {
                        label = 87;
                       } else {
                        $348 = $temp;
                        $349 = (_strcmp($348,38712)|0);
                        $350 = ($349|0)==(0);
                        if ($350) {
                         label = 87;
                         break;
                        }
                        $353 = $temp;
                        $354 = (_strcmp($353,38720)|0);
                        $355 = ($354|0)==(0);
                        if ($355) {
                         label = 90;
                        } else {
                         $356 = $temp;
                         $357 = (_strcmp($356,38728)|0);
                         $358 = ($357|0)==(0);
                         if ($358) {
                          label = 90;
                         }
                        }
                        if ((label|0) == 90) {
                         $359 = $2;
                         $360 = (($359) + 12|0);
                         HEAP32[$360>>2] = 5;
                        }
                       }
                      } while(0);
                      if ((label|0) == 87) {
                       $351 = $2;
                       $352 = (($351) + 12|0);
                       HEAP32[$352>>2] = 2;
                      }
                     }
                    }
                   } while(0);
                   if ((label|0) == 82) {
                    $338 = $2;
                    $339 = (($338) + 12|0);
                    HEAP32[$339>>2] = 3;
                   }
                  }
                 } while(0);
                 if ((label|0) == 79) {
                  $330 = $2;
                  $331 = (($330) + 12|0);
                  HEAP32[$331>>2] = 1;
                 }
                } else {
                 $361 = $temp;
                 $362 = (_strcmp($361,40904)|0);
                 $363 = ($362|0)==(0);
                 if ($363) {
                 } else {
                  $364 = $0;
                  _g_string_append_printf($364,12720,$vararg_buffer62);
                  $365 = $0;
                  $366 = $1;
                  $367 = (($366) + 4|0);
                  $368 = HEAP32[$367>>2]|0;
                  _print_odf_string($365,$368);
                  $369 = $0;
                  _g_string_append_printf($369,33864,$vararg_buffer64);
                  $370 = $0;
                  $371 = $1;
                  $372 = (($371) + 12|0);
                  $373 = HEAP32[$372>>2]|0;
                  $374 = $2;
                  _print_odf_node($370,$373,$374);
                  $375 = $0;
                  _g_string_append_printf($375,12752,$vararg_buffer66);
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
   $376 = $temp;
   _free($376);
   STACKTOP = sp;return;
   break;
  }
  case 69:  {
   $1362 = $2;
   $1363 = (($1362) + 25|0);
   $1364 = HEAP8[$1363>>0]|0;
   $1365 = $1364&1;
   if ($1365) {
    $1366 = $0;
    $1367 = $1;
    $1368 = (($1367) + 12|0);
    $1369 = HEAP32[$1368>>2]|0;
    $1370 = $2;
    _print_odf_node_tree($1366,$1369,$1370);
   }
   STACKTOP = sp;return;
   break;
  }
  case 51:  {
   $74 = $1;
   $75 = (($74) + 4|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = (_strncmp($76,42136,4)|0);
   $78 = ($77|0)==(0);
   if ($78) {
    $79 = $0;
    $80 = $2;
    _pad($79,2,$80);
    $81 = $1;
    $82 = (($81) + 4|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = (_strlen(($83|0))|0);
    $85 = (($84) - 3)|0;
    $86 = $1;
    $87 = (($86) + 4|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = (($88) + ($85)|0);
    HEAP8[$89>>0] = 0;
    $90 = $0;
    $91 = $1;
    $92 = (($91) + 4|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = (($93) + 4|0);
    HEAP32[$vararg_buffer23>>2] = $94;
    _g_string_append_printf($90,12144,$vararg_buffer23);
    $95 = $2;
    $96 = (($95) + 4|0);
    HEAP32[$96>>2] = 0;
   }
   STACKTOP = sp;return;
   break;
  }
  case 86:  {
   $1395 = $0;
   $1396 = $1;
   $1397 = (($1396) + 12|0);
   $1398 = HEAP32[$1397>>2]|0;
   $1399 = $2;
   _print_odf_node_tree($1395,$1398,$1399);
   STACKTOP = sp;return;
   break;
  }
  case 6:  {
   $39 = $0;
   $40 = $2;
   _pad($39,1,$40);
   $41 = $0;
   $42 = $1;
   $43 = (($42) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $2;
   _print_odf_node_tree($41,$44,$45);
   $46 = $2;
   $47 = (($46) + 4|0);
   HEAP32[$47>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 59:  {
   $1253 = $0;
   $1254 = $1;
   $1255 = (($1254) + 12|0);
   $1256 = HEAP32[$1255>>2]|0;
   $1257 = $2;
   _print_odf_node_tree($1253,$1256,$1257);
   STACKTOP = sp;return;
   break;
  }
  case 50:  {
   $152 = $0;
   $153 = $2;
   _pad($152,1,$153);
   $154 = $0;
   _g_string_append_printf($154,12352,$vararg_buffer38);
   $155 = $1;
   $156 = (($155) + 12|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = ($157|0)!=(0|0);
   if ($158) {
    $159 = $1;
    $160 = (($159) + 12|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = (($161) + 12|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)!=(0|0);
    if ($164) {
     $165 = $1;
     $166 = (($165) + 12|0);
     $167 = HEAP32[$166>>2]|0;
     $168 = (($167) + 12|0);
     $169 = HEAP32[$168>>2]|0;
     $170 = HEAP16[$169>>1]|0;
     $171 = $170 << 16 >> 16;
     $172 = ($171|0)!=(5);
     if ($172) {
      $173 = $2;
      $174 = (($173) + 80|0);
      $175 = HEAP32[$174>>2]|0;
      if ((($175|0) == 48)) {
       $177 = $0;
       _g_string_append_printf($177,12408,$vararg_buffer42);
      } else if ((($175|0) == 49)) {
       $176 = $0;
       _g_string_append_printf($176,12376,$vararg_buffer40);
      }
      $178 = $2;
      $179 = (($178) + 84|0);
      HEAP8[$179>>0] = 1;
     }
    }
   }
   $180 = $2;
   $181 = (($180) + 4|0);
   HEAP32[$181>>2] = 2;
   $182 = $0;
   $183 = $1;
   $184 = (($183) + 12|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = $2;
   _print_odf_node_tree($182,$185,$186);
   $187 = $2;
   $188 = (($187) + 84|0);
   HEAP8[$188>>0] = 0;
   $189 = $1;
   $190 = (($189) + 12|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = (_tree_contains_key($191,49)|0);
   if (!($192)) {
    $193 = $1;
    $194 = (($193) + 12|0);
    $195 = HEAP32[$194>>2]|0;
    $196 = (_tree_contains_key($195,48)|0);
    if (!($196)) {
     $197 = $1;
     $198 = (($197) + 12|0);
     $199 = HEAP32[$198>>2]|0;
     $200 = ($199|0)!=(0|0);
     if ($200) {
      $201 = $1;
      $202 = (($201) + 12|0);
      $203 = HEAP32[$202>>2]|0;
      $204 = (($203) + 12|0);
      $205 = HEAP32[$204>>2]|0;
      $206 = ($205|0)!=(0|0);
      if ($206) {
       $207 = $1;
       $208 = (($207) + 12|0);
       $209 = HEAP32[$208>>2]|0;
       $210 = (($209) + 12|0);
       $211 = HEAP32[$210>>2]|0;
       $212 = HEAP16[$211>>1]|0;
       $213 = $212 << 16 >> 16;
       $214 = ($213|0)!=(5);
       if ($214) {
        $215 = $0;
        _g_string_append_printf($215,12240,$vararg_buffer44);
       }
      }
     }
    }
   }
   $216 = $0;
   _g_string_append_printf($216,12440,$vararg_buffer46);
   $217 = $2;
   $218 = (($217) + 4|0);
   HEAP32[$218>>2] = 1;
   STACKTOP = sp;return;
   break;
  }
  case 5:  {
   $48 = $0;
   $49 = $2;
   _pad($48,2,$49);
   $50 = $0;
   _g_string_append_printf($50,11888,$vararg_buffer3);
   $51 = $2;
   $52 = (($51) + 80|0);
   $53 = HEAP32[$52>>2]|0;
   switch ($53|0) {
   case 73: case 72: case 62: case 30:  {
    $58 = $0;
    _g_string_append_printf($58,12016,$vararg_buffer13);
    break;
   }
   case 48:  {
    $56 = $0;
    _g_string_append_printf($56,11968,$vararg_buffer9);
    break;
   }
   case 43: case 41: case 31:  {
    $55 = $0;
    _g_string_append_printf($55,11928,$vararg_buffer7);
    break;
   }
   case 49:  {
    $57 = $0;
    _g_string_append_printf($57,11992,$vararg_buffer11);
    break;
   }
   case 38: case 46:  {
    $54 = $0;
    _g_string_append_printf($54,11896,$vararg_buffer5);
    break;
   }
   default: {
    $59 = $0;
    _g_string_append_printf($59,12048,$vararg_buffer15);
   }
   }
   $60 = $0;
   _g_string_append_printf($60,42616,$vararg_buffer17);
   $61 = $0;
   $62 = $1;
   $63 = (($62) + 12|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $2;
   _print_odf_node_tree($61,$64,$65);
   $66 = $0;
   _g_string_append_printf($66,12080,$vararg_buffer19);
   $67 = $2;
   $68 = (($67) + 4|0);
   HEAP32[$68>>2] = 1;
   STACKTOP = sp;return;
   break;
  }
  case 48: case 49:  {
   $115 = $2;
   $116 = (($115) + 80|0);
   $117 = HEAP32[$116>>2]|0;
   $old_type = $117;
   $118 = $1;
   $119 = HEAP16[$118>>1]|0;
   $120 = $119 << 16 >> 16;
   $121 = $2;
   $122 = (($121) + 80|0);
   HEAP32[$122>>2] = $120;
   $123 = $2;
   $124 = (($123) + 84|0);
   $125 = HEAP8[$124>>0]|0;
   $126 = $125&1;
   if ($126) {
    $127 = $0;
    _g_string_append_printf($127,12240,$vararg_buffer30);
    $128 = $2;
    $129 = (($128) + 84|0);
    HEAP8[$129>>0] = 0;
   }
   $130 = $0;
   $131 = $2;
   _pad($130,2,$131);
   $132 = $1;
   $133 = HEAP16[$132>>1]|0;
   $134 = $133 << 16 >> 16;
   if ((($134|0) == 49)) {
    $135 = $0;
    _g_string_append_printf($135,12256,$vararg_buffer32);
   } else if ((($134|0) == 48)) {
    $136 = $0;
    _g_string_append_printf($136,12296,$vararg_buffer34);
   }
   $137 = $2;
   $138 = (($137) + 4|0);
   HEAP32[$138>>2] = 1;
   $139 = $0;
   $140 = $1;
   $141 = (($140) + 12|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = $2;
   _print_odf_node_tree($139,$142,$143);
   $144 = $0;
   $145 = $2;
   _pad($144,1,$145);
   $146 = $0;
   _g_string_append_printf($146,12336,$vararg_buffer36);
   $147 = $2;
   $148 = (($147) + 4|0);
   HEAP32[$148>>2] = 0;
   $149 = $old_type;
   $150 = $2;
   $151 = (($150) + 80|0);
   HEAP32[$151>>2] = $149;
   STACKTOP = sp;return;
   break;
  }
  case 1:  {
   $25 = $0;
   $26 = $1;
   $27 = (($26) + 12|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $2;
   _print_odf_node_tree($25,$28,$29);
   STACKTOP = sp;return;
   break;
  }
  case 68:  {
   $698 = $1;
   $699 = (($698) + 4|0);
   $700 = HEAP32[$699>>2]|0;
   $701 = (_strcmp($700,13280)|0);
   $702 = ($701|0)==(0);
   if ($702) {
    label = 165;
   } else {
    $703 = $1;
    $704 = (($703) + 4|0);
    $705 = HEAP32[$704>>2]|0;
    $706 = (_strcmp($705,13288)|0);
    $707 = ($706|0)==(0);
    if ($707) {
     label = 165;
    }
   }
   if ((label|0) == 165) {
   }
   STACKTOP = sp;return;
   break;
  }
  case 33:  {
   $444 = $0;
   $445 = $2;
   _print_html_localized_typography($444,6,$445);
   STACKTOP = sp;return;
   break;
  }
  case 47:  {
   $69 = $0;
   $70 = $2;
   _pad($69,2,$70);
   $71 = $0;
   _g_string_append_printf($71,12096,$vararg_buffer21);
   $72 = $2;
   $73 = (($72) + 4|0);
   HEAP32[$73>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 20:  {
   $469 = $1;
   $470 = (($469) + 4|0);
   $471 = HEAP32[$470>>2]|0;
   $472 = (___strdup($471)|0);
   $temp = $472;
   $473 = $temp;
   $474 = HEAP8[$473>>0]|0;
   $475 = $474 << 24 >> 24;
   $476 = ($475|0)==(36);
   if ($476) {
    $477 = $0;
    $478 = $temp;
    HEAP32[$vararg_buffer87>>2] = $478;
    _g_string_append_printf($477,12928,$vararg_buffer87);
   } else {
    $479 = $temp;
    $480 = (_strlen(($479|0))|0);
    $481 = (($480) - 1)|0;
    $482 = $temp;
    $483 = (($482) + ($481)|0);
    $484 = HEAP8[$483>>0]|0;
    $485 = $484 << 24 >> 24;
    $486 = ($485|0)==(93);
    if ($486) {
     $487 = $temp;
     $488 = (_strlen(($487|0))|0);
     $489 = (($488) - 3)|0;
     $490 = $temp;
     $491 = (($490) + ($489)|0);
     HEAP8[$491>>0] = 0;
     $492 = $0;
     $493 = $temp;
     HEAP32[$vararg_buffer90>>2] = $493;
     _g_string_append_printf($492,12984,$vararg_buffer90);
    } else {
     $494 = $temp;
     $495 = (_strlen(($494|0))|0);
     $496 = (($495) - 3)|0;
     $497 = $temp;
     $498 = (($497) + ($496)|0);
     HEAP8[$498>>0] = 0;
     $499 = $0;
     $500 = $temp;
     HEAP32[$vararg_buffer93>>2] = $500;
     _g_string_append_printf($499,13040,$vararg_buffer93);
    }
   }
   $501 = $temp;
   _free($501);
   STACKTOP = sp;return;
   break;
  }
  case 37:  {
   $459 = $0;
   $460 = $2;
   _print_html_localized_typography($459,2,$460);
   $461 = $0;
   $462 = $1;
   $463 = (($462) + 12|0);
   $464 = HEAP32[$463>>2]|0;
   $465 = $2;
   _print_odf_node_tree($461,$464,$465);
   $466 = $0;
   $467 = $2;
   _print_html_localized_typography($466,3,$467);
   STACKTOP = sp;return;
   break;
  }
  case 7:  {
   $468 = $0;
   _g_string_append_printf($468,12904,$vararg_buffer85);
   STACKTOP = sp;return;
   break;
  }
  case 35:  {
   $446 = $0;
   $447 = $2;
   _print_html_localized_typography($446,5,$447);
   STACKTOP = sp;return;
   break;
  }
  case 54:  {
   STACKTOP = sp;return;
   break;
  }
  case 60:  {
   $i = 0;
   while(1) {
    $1235 = $i;
    $1236 = $2;
    $1237 = (($1236) + 16|0);
    $1238 = HEAP32[$1237>>2]|0;
    $1239 = (_strlen(($1238|0))|0);
    $1240 = ($1235>>>0)<($1239>>>0);
    if (!($1240)) {
     break;
    }
    $1241 = $0;
    _g_string_append_printf($1241,14904,$vararg_buffer233);
    $1242 = $i;
    $1243 = (($1242) + 1)|0;
    $i = $1243;
   }
   $1244 = $2;
   $1245 = (($1244) + 24|0);
   HEAP8[$1245>>0] = 104;
   $1246 = $0;
   $1247 = $1;
   $1248 = (($1247) + 12|0);
   $1249 = HEAP32[$1248>>2]|0;
   $1250 = $2;
   _print_odf_node_tree($1246,$1249,$1250);
   $1251 = $2;
   $1252 = (($1251) + 24|0);
   HEAP8[$1252>>0] = 100;
   STACKTOP = sp;return;
   break;
  }
  default: {
   $1400 = HEAP32[_stderr>>2]|0;
   $1401 = $1;
   $1402 = HEAP16[$1401>>1]|0;
   $1403 = $1402 << 16 >> 16;
   HEAP32[$vararg_buffer273>>2] = $1403;
   (_fprintf(($1400|0),(15352|0),($vararg_buffer273|0))|0);
   _exit(1);
   // unreachable;
  }
  }
 } while(0);
 $710 = $1;
 $711 = (($710) + 8|0);
 $712 = HEAP32[$711>>2]|0;
 $713 = ($712|0)!=(0|0);
 if ($713) {
  $714 = $1;
  $715 = (($714) + 8|0);
  $716 = HEAP32[$715>>2]|0;
  $717 = HEAP32[$716>>2]|0;
  $718 = $1;
  $719 = (($718) + 8|0);
  $720 = HEAP32[$719>>2]|0;
  $721 = (($720) + 4|0);
  $722 = HEAP32[$721>>2]|0;
  $723 = $1;
  $724 = (($723) + 8|0);
  $725 = HEAP32[$724>>2]|0;
  $726 = (($725) + 8|0);
  $727 = HEAP32[$726>>2]|0;
  $728 = $1;
  $729 = (($728) + 8|0);
  $730 = HEAP32[$729>>2]|0;
  $731 = (($730) + 12|0);
  $732 = HEAP32[$731>>2]|0;
  $733 = (_mk_link_data($717,$722,$727,$732)|0);
  $temp_link_data = $733;
 }
 $734 = $1;
 $735 = HEAP16[$734>>1]|0;
 $736 = $735 << 16 >> 16;
 $737 = ($736|0)==(29);
 if ($737) {
  $738 = $0;
  _g_string_append_printf($738,13296,$vararg_buffer132);
 }
 $739 = $1;
 $740 = (($739) + 8|0);
 $741 = HEAP32[$740>>2]|0;
 $742 = HEAP32[$741>>2]|0;
 $743 = ($742|0)==(0|0);
 if ($743) {
  $744 = $1;
  $745 = (($744) + 8|0);
  $746 = HEAP32[$745>>2]|0;
  $747 = (($746) + 4|0);
  $748 = HEAP32[$747>>2]|0;
  $749 = ($748|0)==(0|0);
  if ($749) {
   $750 = (_g_string_new(41432)|0);
   $temp_str = $750;
   $751 = $temp_str;
   $752 = $1;
   $753 = (($752) + 12|0);
   $754 = HEAP32[$753>>2]|0;
   _print_raw_node_tree($751,$754);
   $755 = $temp_str;
   $756 = HEAP32[$755>>2]|0;
   $757 = $1;
   $758 = (($757) + 8|0);
   $759 = HEAP32[$758>>2]|0;
   HEAP32[$759>>2] = $756;
   $760 = $temp_str;
   (_g_string_free($760,0)|0);
  }
 }
 $761 = $1;
 $762 = (($761) + 8|0);
 $763 = HEAP32[$762>>2]|0;
 $764 = HEAP32[$763>>2]|0;
 $765 = ($764|0)!=(0|0);
 do {
  if ($765) {
   $766 = $1;
   $767 = (($766) + 8|0);
   $768 = HEAP32[$767>>2]|0;
   $769 = HEAP32[$768>>2]|0;
   $770 = (___strdup($769)|0);
   $temp = $770;
   $771 = $1;
   $772 = (($771) + 8|0);
   $773 = HEAP32[$772>>2]|0;
   _free_link_data($773);
   $774 = $temp;
   $775 = $2;
   $776 = (_extract_link_data($774,$775)|0);
   $777 = $1;
   $778 = (($777) + 8|0);
   HEAP32[$778>>2] = $776;
   $779 = $1;
   $780 = (($779) + 8|0);
   $781 = HEAP32[$780>>2]|0;
   $782 = ($781|0)==(0|0);
   if (!($782)) {
    $795 = $temp;
    _free($795);
    break;
   }
   $783 = $0;
   _g_string_append_printf($783,13312,$vararg_buffer134);
   $784 = $0;
   $785 = $1;
   $786 = (($785) + 12|0);
   $787 = HEAP32[$786>>2]|0;
   $788 = $2;
   _print_html_node_tree($784,$787,$788);
   $789 = $0;
   $790 = $temp;
   HEAP32[$vararg_buffer136>>2] = $790;
   _g_string_append_printf($789,13320,$vararg_buffer136);
   $791 = $temp_link_data;
   $792 = $1;
   $793 = (($792) + 8|0);
   HEAP32[$793>>2] = $791;
   $794 = $temp;
   _free($794);
   STACKTOP = sp;return;
  }
 } while(0);
 $796 = $0;
 _g_string_append_printf($796,13328,$vararg_buffer139);
 $797 = $1;
 $798 = (($797) + 8|0);
 $799 = HEAP32[$798>>2]|0;
 $800 = (($799) + 12|0);
 $801 = HEAP32[$800>>2]|0;
 $802 = ($801|0)!=(0|0);
 if ($802) {
  $803 = $1;
  $804 = (($803) + 8|0);
  $805 = HEAP32[$804>>2]|0;
  $806 = (($805) + 12|0);
  $807 = HEAP32[$806>>2]|0;
  $808 = (_node_for_attribute(13280,$807)|0);
  $temp_node = $808;
  $809 = $temp_node;
  $810 = ($809|0)!=(0|0);
  if ($810) {
   $811 = $temp_node;
   $812 = (($811) + 12|0);
   $813 = HEAP32[$812>>2]|0;
   $814 = (($813) + 4|0);
   $815 = HEAP32[$814>>2]|0;
   $816 = (_correct_dimension_units($815)|0);
   $height = $816;
  }
  $817 = $1;
  $818 = (($817) + 8|0);
  $819 = HEAP32[$818>>2]|0;
  $820 = (($819) + 12|0);
  $821 = HEAP32[$820>>2]|0;
  $822 = (_node_for_attribute(13288,$821)|0);
  $temp_node = $822;
  $823 = $temp_node;
  $824 = ($823|0)!=(0|0);
  if ($824) {
   $825 = $temp_node;
   $826 = (($825) + 12|0);
   $827 = HEAP32[$826>>2]|0;
   $828 = (($827) + 4|0);
   $829 = HEAP32[$828>>2]|0;
   $830 = (_correct_dimension_units($829)|0);
   $width = $830;
  }
 }
 $831 = $width;
 $832 = ($831|0)!=(0|0);
 if ($832) {
  $833 = $0;
  $834 = $width;
  HEAP32[$vararg_buffer141>>2] = $834;
  _g_string_append_printf($833,13408,$vararg_buffer141);
 } else {
  $835 = $0;
  _g_string_append_printf($835,13424,$vararg_buffer144);
 }
 $836 = $0;
 _g_string_append_printf($836,13448,$vararg_buffer146);
 $837 = $height;
 $838 = ($837|0)!=(0|0);
 if ($838) {
  $839 = $width;
  $840 = ($839|0)!=(0|0);
  if ($840) {
   $841 = $0;
   $842 = $height;
   HEAP32[$vararg_buffer148>>2] = $842;
   _g_string_append_printf($841,13536,$vararg_buffer148);
   $843 = $0;
   $844 = $width;
   HEAP32[$vararg_buffer151>>2] = $844;
   _g_string_append_printf($843,13408,$vararg_buffer151);
  }
 }
 $845 = $1;
 $846 = (($845) + 8|0);
 $847 = HEAP32[$846>>2]|0;
 $848 = (($847) + 4|0);
 $849 = HEAP32[$848>>2]|0;
 $850 = ($849|0)!=(0|0);
 if ($850) {
  $851 = $0;
  $852 = $1;
  $853 = (($852) + 8|0);
  $854 = HEAP32[$853>>2]|0;
  $855 = (($854) + 4|0);
  $856 = HEAP32[$855>>2]|0;
  HEAP32[$vararg_buffer154>>2] = $856;
  _g_string_append_printf($851,13560,$vararg_buffer154);
 }
 $857 = $0;
 _g_string_append_printf($857,13592,$vararg_buffer157);
 $858 = $1;
 $859 = HEAP16[$858>>1]|0;
 $860 = $859 << 16 >> 16;
 $861 = ($860|0)==(29);
 if ($861) {
  $862 = $1;
  $863 = (($862) + 12|0);
  $864 = HEAP32[$863>>2]|0;
  $865 = ($864|0)!=(0|0);
  if ($865) {
   $866 = (_g_string_new(41432)|0);
   $temp_str = $866;
   $867 = $temp_str;
   $868 = $1;
   $869 = (($868) + 12|0);
   $870 = HEAP32[$869>>2]|0;
   $871 = $2;
   _print_odf_node_tree($867,$870,$871);
   $872 = $temp_str;
   $873 = (($872) + 8|0);
   $874 = HEAP32[$873>>2]|0;
   $875 = ($874>>>0)>(0);
   if ($875) {
    $876 = $0;
    _g_string_append_printf($876,13720,$vararg_buffer159);
    $877 = $0;
    $878 = $temp_str;
    $879 = HEAP32[$878>>2]|0;
    _g_string_append($877,$879);
    $880 = $0;
    _g_string_append_printf($880,12240,$vararg_buffer161);
   }
   $881 = $temp_str;
   (_g_string_free($881,1)|0);
  }
  $882 = $0;
  _g_string_append_printf($882,13880,$vararg_buffer163);
 } else {
  $883 = $0;
  _g_string_append_printf($883,13928,$vararg_buffer165);
 }
 $884 = $2;
 $885 = (($884) + 4|0);
 HEAP32[$885>>2] = 1;
 $886 = $1;
 $887 = (($886) + 8|0);
 $888 = HEAP32[$887>>2]|0;
 $889 = (($888) + 12|0);
 HEAP32[$889>>2] = 0;
 $890 = $1;
 $891 = (($890) + 8|0);
 $892 = HEAP32[$891>>2]|0;
 _free_link_data($892);
 $893 = $temp_link_data;
 $894 = $1;
 $895 = (($894) + 8|0);
 HEAP32[$895>>2] = $893;
 $896 = $height;
 _free($896);
 $897 = $width;
 _free($897);
 STACKTOP = sp;return;
}
function _print_odf_code_string($out,$str) {
 $out = $out|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $tmp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $str;
 while(1) {
  $2 = $1;
  $3 = HEAP8[$2>>0]|0;
  $4 = $3 << 24 >> 24;
  $5 = ($4|0)!=(0);
  if (!($5)) {
   break;
  }
  $6 = $1;
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  switch ($8|0) {
  case 10:  {
   $13 = $0;
   _g_string_append_printf($13,12904,$vararg_buffer7);
   break;
  }
  case 34:  {
   $12 = $0;
   _g_string_append_printf($12,33984,$vararg_buffer5);
   break;
  }
  case 38:  {
   $9 = $0;
   _g_string_append_printf($9,33960,$vararg_buffer);
   break;
  }
  case 62:  {
   $11 = $0;
   _g_string_append_printf($11,33976,$vararg_buffer3);
   break;
  }
  case 60:  {
   $10 = $0;
   _g_string_append_printf($10,33968,$vararg_buffer1);
   break;
  }
  case 32:  {
   $14 = $1;
   $tmp = $14;
   $15 = $tmp;
   $16 = (($15) + 1|0);
   $tmp = $16;
   $17 = $tmp;
   $18 = HEAP8[$17>>0]|0;
   $19 = $18 << 24 >> 24;
   $20 = ($19|0)==(32);
   if ($20) {
    $21 = $tmp;
    $22 = (($21) + 1|0);
    $tmp = $22;
    $23 = $tmp;
    $24 = HEAP8[$23>>0]|0;
    $25 = $24 << 24 >> 24;
    $26 = ($25|0)==(32);
    if ($26) {
     $27 = $tmp;
     $28 = (($27) + 1|0);
     $tmp = $28;
     $29 = $tmp;
     $30 = HEAP8[$29>>0]|0;
     $31 = $30 << 24 >> 24;
     $32 = ($31|0)==(32);
     if ($32) {
      $33 = $0;
      _g_string_append_printf($33,15408,$vararg_buffer9);
      $34 = $tmp;
      $1 = $34;
     } else {
      $35 = $0;
      _g_string_append_printf($35,42624,$vararg_buffer11);
     }
    } else {
     $36 = $0;
     _g_string_append_printf($36,42624,$vararg_buffer13);
    }
   } else {
    $37 = $0;
    _g_string_append_printf($37,42624,$vararg_buffer15);
   }
   break;
  }
  default: {
   $38 = $0;
   $39 = $1;
   $40 = HEAP8[$39>>0]|0;
   _g_string_append_c($38,$40);
  }
  }
  $41 = $1;
  $42 = (($41) + 1|0);
  $1 = $42;
 }
 STACKTOP = sp;return;
}
function _print_odf_string($out,$str) {
 $out = $out|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmp = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer19 = sp + 80|0;
 $vararg_buffer17 = sp + 72|0;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $str;
 while(1) {
  $2 = $1;
  $3 = HEAP8[$2>>0]|0;
  $4 = $3 << 24 >> 24;
  $5 = ($4|0)!=(0);
  if (!($5)) {
   break;
  }
  $6 = $1;
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  switch ($8|0) {
  case 62:  {
   $11 = $0;
   _g_string_append_printf($11,33976,$vararg_buffer3);
   break;
  }
  case 32:  {
   $29 = $1;
   $tmp = $29;
   $30 = $tmp;
   $31 = (($30) + 1|0);
   $tmp = $31;
   $32 = $tmp;
   $33 = HEAP8[$32>>0]|0;
   $34 = $33 << 24 >> 24;
   $35 = ($34|0)==(32);
   if ($35) {
    $36 = $tmp;
    $37 = (($36) + 1|0);
    $tmp = $37;
    $38 = $tmp;
    $39 = HEAP8[$38>>0]|0;
    $40 = $39 << 24 >> 24;
    $41 = ($40|0)==(32);
    if ($41) {
     $42 = $tmp;
     $43 = (($42) + 1|0);
     $tmp = $43;
     $44 = $tmp;
     $45 = HEAP8[$44>>0]|0;
     $46 = $45 << 24 >> 24;
     $47 = ($46|0)==(32);
     if ($47) {
      $48 = $0;
      _g_string_append_printf($48,15408,$vararg_buffer13);
      $49 = $tmp;
      $1 = $49;
     } else {
      $50 = $0;
      _g_string_append_printf($50,42624,$vararg_buffer15);
     }
    } else {
     $51 = $0;
     _g_string_append_printf($51,42624,$vararg_buffer17);
    }
   } else {
    $52 = $0;
    _g_string_append_printf($52,42624,$vararg_buffer19);
   }
   break;
  }
  case 13: case 10:  {
   $13 = $1;
   $tmp = $13;
   $14 = $tmp;
   $15 = (($14) + -1|0);
   $tmp = $15;
   $16 = $tmp;
   $17 = HEAP8[$16>>0]|0;
   $18 = $17 << 24 >> 24;
   $19 = ($18|0)==(32);
   if ($19) {
    $20 = $tmp;
    $21 = (($20) + -1|0);
    $tmp = $21;
    $22 = $tmp;
    $23 = HEAP8[$22>>0]|0;
    $24 = $23 << 24 >> 24;
    $25 = ($24|0)==(32);
    if ($25) {
     $26 = $0;
     _g_string_append_printf($26,12904,$vararg_buffer7);
    } else {
     $27 = $0;
     _g_string_append_printf($27,42896,$vararg_buffer9);
    }
   } else {
    $28 = $0;
    _g_string_append_printf($28,42896,$vararg_buffer11);
   }
   break;
  }
  case 38:  {
   $9 = $0;
   _g_string_append_printf($9,33960,$vararg_buffer);
   break;
  }
  case 60:  {
   $10 = $0;
   _g_string_append_printf($10,33968,$vararg_buffer1);
   break;
  }
  case 34:  {
   $12 = $0;
   _g_string_append_printf($12,33984,$vararg_buffer5);
   break;
  }
  default: {
   $53 = $0;
   $54 = $1;
   $55 = HEAP8[$54>>0]|0;
   _g_string_append_c($53,$55);
  }
  }
  $56 = $1;
  $57 = (($56) + 1|0);
  $1 = $57;
 }
 STACKTOP = sp;return;
}
function _begin_opml_output($out,$list,$scratch) {
 $out = $out|0;
 $list = $list|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $temp = 0, $temp_str = 0, $title = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $list;
 $2 = $scratch;
 $3 = $0;
 _g_string_append_printf($3,33600,$vararg_buffer);
 $4 = $1;
 $5 = (_tree_contains_key($4,18)|0);
 if (!($5)) {
  $26 = $0;
  _g_string_append_printf($26,33704,$vararg_buffer5);
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = (_metadata_for_key(38736,$6)|0);
 $title = $7;
 $8 = $title;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = (_g_string_new(41432)|0);
  $temp = $10;
  $11 = $0;
  _g_string_append_printf($11,33664,$vararg_buffer1);
  $12 = $temp;
  $13 = $title;
  $14 = (($13) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  _print_raw_node_tree($12,$15);
  $16 = $temp;
  $17 = HEAP32[$16>>2]|0;
  $18 = (___strdup($17)|0);
  $temp_str = $18;
  $19 = $temp_str;
  _trim_trailing_whitespace($19);
  $20 = $0;
  $21 = $temp_str;
  _print_opml_string($20,$21);
  $22 = $0;
  $23 = $temp_str;
  HEAP32[$vararg_buffer3>>2] = $23;
  _g_string_append_printf($22,33680,$vararg_buffer3);
  $24 = $temp_str;
  _free($24);
  $25 = $temp;
  (_g_string_free($25,1)|0);
 }
 $26 = $0;
 _g_string_append_printf($26,33704,$vararg_buffer5);
 STACKTOP = sp;return;
}
function _print_opml_string($out,$str) {
 $out = $out|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $str;
 while(1) {
  $2 = $1;
  $3 = HEAP8[$2>>0]|0;
  $4 = $3 << 24 >> 24;
  $5 = ($4|0)!=(0);
  if (!($5)) {
   break;
  }
  $6 = $1;
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  switch ($8|0) {
  case 13: case 10:  {
   $13 = $0;
   _g_string_append_printf($13,33896,$vararg_buffer7);
   break;
  }
  case 34:  {
   $12 = $0;
   _g_string_append_printf($12,33984,$vararg_buffer5);
   break;
  }
  case 38:  {
   $9 = $0;
   _g_string_append_printf($9,33960,$vararg_buffer);
   break;
  }
  case 62:  {
   $11 = $0;
   _g_string_append_printf($11,33976,$vararg_buffer3);
   break;
  }
  case 60:  {
   $10 = $0;
   _g_string_append_printf($10,33968,$vararg_buffer1);
   break;
  }
  default: {
   $14 = $0;
   $15 = $1;
   $16 = HEAP8[$15>>0]|0;
   _g_string_append_c($14,$16);
  }
  }
  $17 = $1;
  $18 = (($17) + 1|0);
  $1 = $18;
 }
 STACKTOP = sp;return;
}
function _end_opml_output($out,$list,$scratch) {
 $out = $out|0;
 $list = $list|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $list;
 $2 = $scratch;
 $3 = $1;
 $4 = (_tree_contains_key($3,18)|0);
 if (!($4)) {
  $12 = $0;
  _g_string_append_printf($12,33760,$vararg_buffer3);
  STACKTOP = sp;return;
 }
 $5 = $0;
 _g_string_append_printf($5,33712,$vararg_buffer);
 $6 = $0;
 $7 = $1;
 $8 = (($7) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $2;
 _print_opml_node_tree($6,$9,$10);
 $11 = $0;
 _g_string_append_printf($11,33744,$vararg_buffer1);
 $12 = $0;
 _g_string_append_printf($12,33760,$vararg_buffer3);
 STACKTOP = sp;return;
}
function _print_opml_node_tree($out,$list,$scratch) {
 $out = $out|0;
 $list = $list|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $list;
 $2 = $scratch;
 while(1) {
  $3 = $1;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $1;
  $6 = HEAP16[$5>>1]|0;
  $7 = $6 << 16 >> 16;
  $8 = ($7|0)==(9);
  if ($8) {
   $9 = $1;
   $10 = (($9) + 12|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = HEAP16[$11>>1]|0;
   $13 = $12 << 16 >> 16;
   $lev = $13;
   $14 = $0;
   $15 = $1;
   $16 = $2;
   _print_opml_section_and_children($14,$15,$16);
   while(1) {
    $17 = $1;
    $18 = (($17) + 16|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)!=(0|0);
    if ($20) {
     $21 = $1;
     $22 = (($21) + 16|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = HEAP16[$23>>1]|0;
     $25 = $24 << 16 >> 16;
     $26 = ($25|0)==(9);
     if ($26) {
      $27 = $1;
      $28 = (($27) + 16|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($29) + 12|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = HEAP16[$31>>1]|0;
      $33 = $32 << 16 >> 16;
      $34 = $lev;
      $35 = ($33|0)>($34|0);
      $45 = $35;
     } else {
      $45 = 0;
     }
    } else {
     $45 = 0;
    }
    if (!($45)) {
     break;
    }
    $36 = $1;
    $37 = (($36) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $1 = $38;
   }
  } else {
   $39 = $0;
   $40 = $1;
   $41 = $2;
   _print_opml_node($39,$40,$41);
  }
  $42 = $1;
  $43 = (($42) + 16|0);
  $44 = HEAP32[$43>>2]|0;
  $1 = $44;
 }
 STACKTOP = sp;return;
}
function _print_opml_section_and_children($out,$list,$scratch) {
 $out = $out|0;
 $list = $list|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lev = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $list;
 $2 = $scratch;
 $3 = $1;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 << 16 >> 16;
 $lev = $7;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 _print_opml_node($8,$9,$10);
 while(1) {
  $11 = $1;
  $12 = (($11) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(0|0);
  if ($14) {
   $15 = $1;
   $16 = (($15) + 16|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = HEAP16[$17>>1]|0;
   $19 = $18 << 16 >> 16;
   $20 = ($19|0)==(9);
   if ($20) {
    $21 = $1;
    $22 = (($21) + 16|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (($23) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = HEAP16[$25>>1]|0;
    $27 = $26 << 16 >> 16;
    $28 = $lev;
    $29 = ($27|0)>($28|0);
    $49 = $29;
   } else {
    $49 = 0;
   }
  } else {
   $49 = 0;
  }
  if (!($49)) {
   break;
  }
  $30 = $1;
  $31 = (($30) + 16|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + 12|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = HEAP16[$34>>1]|0;
  $36 = $35 << 16 >> 16;
  $37 = $lev;
  $38 = (($36) - ($37))|0;
  $39 = ($38|0)==(1);
  if ($39) {
   $40 = $0;
   $41 = $1;
   $42 = (($41) + 16|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $2;
   _print_opml_section_and_children($40,$43,$44);
  }
  $45 = $1;
  $46 = (($45) + 16|0);
  $47 = HEAP32[$46>>2]|0;
  $1 = $47;
 }
 $48 = $0;
 _g_string_append_printf($48,33776,$vararg_buffer);
 STACKTOP = sp;return;
}
function _print_opml_node($out,$n,$scratch) {
 $out = $out|0;
 $n = $n|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer19 = sp + 80|0;
 $vararg_buffer17 = sp + 72|0;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $n;
 $2 = $scratch;
 $3 = $1;
 $4 = HEAP16[$3>>1]|0;
 $5 = $4 << 16 >> 16;
 do {
  switch ($5|0) {
  case 18:  {
   $6 = $0;
   _g_string_append_printf($6,33792,$vararg_buffer);
   $7 = $0;
   $8 = $1;
   $9 = (($8) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   _print_opml_string($7,$10);
   $11 = $0;
   _g_string_append_printf($11,33808,$vararg_buffer1);
   $12 = $1;
   $13 = (($12) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   _trim_trailing_newlines($16);
   $17 = $0;
   $18 = $1;
   $19 = (($18) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($20) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   _print_opml_string($17,$22);
   $23 = $0;
   _g_string_append_printf($23,33824,$vararg_buffer3);
   STACKTOP = sp;return;
   break;
  }
  case 2:  {
   $53 = $0;
   $54 = $1;
   $55 = (($54) + 4|0);
   $56 = HEAP32[$55>>2]|0;
   _print_opml_string($53,$56);
   STACKTOP = sp;return;
   break;
  }
  case 6:  {
   $58 = $0;
   $59 = $1;
   $60 = (($59) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $2;
   _print_opml_node_tree($58,$61,$62);
   $63 = $1;
   $64 = (($63) + 16|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ($65|0)!=(0|0);
   if ($66) {
    $67 = $1;
    $68 = (($67) + 16|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = HEAP16[$69>>1]|0;
    $71 = $70 << 16 >> 16;
    $72 = ($71|0)==(6);
    if ($72) {
     $73 = $0;
     _g_string_append_printf($73,33896,$vararg_buffer17);
    }
   }
   STACKTOP = sp;return;
   break;
  }
  case 43: case 41:  {
   $45 = $0;
   $46 = $1;
   $47 = (($46) + 4|0);
   $48 = HEAP32[$47>>2]|0;
   _print_opml_string($45,$48);
   STACKTOP = sp;return;
   break;
  }
  case 15: case 14: case 13: case 12: case 11: case 10:  {
   $39 = $0;
   _g_string_append_printf($39,33872,$vararg_buffer11);
   $40 = $0;
   $41 = $1;
   $42 = (($41) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   _print_opml_string($40,$43);
   $44 = $0;
   _g_string_append_printf($44,33880,$vararg_buffer13);
   STACKTOP = sp;return;
   break;
  }
  case 8:  {
   $49 = $0;
   $50 = $1;
   $51 = (($50) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   _print_opml_string($49,$52);
   STACKTOP = sp;return;
   break;
  }
  case 7:  {
   $57 = $0;
   _g_string_append_printf($57,33888,$vararg_buffer15);
   STACKTOP = sp;return;
   break;
  }
  case 9:  {
   $24 = $0;
   _g_string_append_printf($24,33832,$vararg_buffer5);
   $25 = $0;
   $26 = $1;
   $27 = (($26) + 12|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $2;
   _print_opml_node($25,$28,$29);
   $30 = $0;
   _g_string_append_printf($30,33848,$vararg_buffer7);
   $31 = $0;
   $32 = $1;
   $33 = (($32) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($34) + 16|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $2;
   _print_opml_node_tree($31,$36,$37);
   $38 = $0;
   _g_string_append_printf($38,33864,$vararg_buffer9);
   STACKTOP = sp;return;
   break;
  }
  case 17:  {
   STACKTOP = sp;return;
   break;
  }
  default: {
   $74 = HEAP32[_stderr>>2]|0;
   $75 = $1;
   $76 = HEAP16[$75>>1]|0;
   $77 = $76 << 16 >> 16;
   HEAP32[$vararg_buffer19>>2] = $77;
   (_fprintf(($74|0),(33904|0),($vararg_buffer19|0))|0);
   _exit(1);
   // unreachable;
  }
  }
 } while(0);
}
function _mk_node($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $key;
 $1 = (_malloc(20)|0);
 $result = $1;
 $2 = $0;
 $3 = $2&65535;
 $4 = $result;
 HEAP16[$4>>1] = $3;
 $5 = $result;
 $6 = (($5) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = $result;
 $8 = (($7) + 12|0);
 HEAP32[$8>>2] = 0;
 $9 = $result;
 $10 = (($9) + 16|0);
 HEAP32[$10>>2] = 0;
 $11 = $result;
 $12 = (($11) + 8|0);
 HEAP32[$12>>2] = 0;
 $13 = $result;
 STACKTOP = sp;return ($13|0);
}
function _mk_str($string) {
 $string = $string|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $string;
 $1 = (_mk_node(2)|0);
 $result = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = (___strdup($4)|0);
  $6 = $result;
  $7 = (($6) + 4|0);
  HEAP32[$7>>2] = $5;
  $8 = $result;
  STACKTOP = sp;return ($8|0);
 } else {
  ___assert_fail((33992|0),(34008|0),41,(34032|0));
  // unreachable;
 }
 return (0)|0;
}
function _mk_str_from_list($list,$extra_newline) {
 $list = $list|0;
 $extra_newline = $extra_newline|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $result = 0, $rev = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $list;
 $2 = $extra_newline&1;
 $1 = $2;
 $3 = (_mk_node(2)|0);
 $result = $3;
 $4 = $0;
 $5 = (_reverse_list($4)|0);
 $rev = $5;
 $6 = $rev;
 $7 = (_concat_string_list($6)|0);
 $c = $7;
 $8 = $1;
 $9 = $8&1;
 if ($9) {
  $10 = $c;
  _g_string_append($10,42896);
 }
 $11 = $c;
 $12 = HEAP32[$11>>2]|0;
 $13 = $result;
 $14 = (($13) + 4|0);
 HEAP32[$14>>2] = $12;
 $15 = $c;
 (_g_string_free($15,0)|0);
 $16 = $result;
 STACKTOP = sp;return ($16|0);
}
function _reverse_list($list) {
 $list = $list|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new = 0, $next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $list;
 $new = 0;
 $next = 0;
 while(1) {
  $1 = $0;
  $2 = ($1|0)!=(0|0);
  if (!($2)) {
   break;
  }
  $3 = $0;
  $4 = (($3) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  $next = $5;
  $6 = $0;
  $7 = (($6) + 16|0);
  HEAP32[$7>>2] = 0;
  $8 = $0;
  $9 = $new;
  $10 = (_cons($8,$9)|0);
  $new = $10;
  $11 = $next;
  $0 = $11;
 }
 $12 = $new;
 STACKTOP = sp;return ($12|0);
}
function _concat_string_list($list) {
 $list = $list|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $next = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $list;
 $1 = (_g_string_new(41432)|0);
 $result = $1;
 while(1) {
  $2 = $0;
  $3 = ($2|0)!=(0|0);
  if (!($3)) {
   label = 8;
   break;
  }
  $4 = $0;
  $5 = HEAP16[$4>>1]|0;
  $6 = $5 << 16 >> 16;
  $7 = ($6|0)==(2);
  if (!($7)) {
   label = 4;
   break;
  }
  $8 = $0;
  $9 = (($8) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(0|0);
  if (!($11)) {
   label = 6;
   break;
  }
  $12 = $result;
  $13 = $0;
  $14 = (($13) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  _g_string_append($12,$15);
  $16 = $0;
  $17 = (($16) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $next = $18;
  $19 = $0;
  _free_node($19);
  $20 = $next;
  $0 = $20;
 }
 if ((label|0) == 4) {
  ___assert_fail((34040|0),(34008|0),88,(34064|0));
  // unreachable;
 }
 else if ((label|0) == 6) {
  ___assert_fail((34088|0),(34008|0),89,(34064|0));
  // unreachable;
 }
 else if ((label|0) == 8) {
  $21 = $result;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _mk_link($text,$label,$source,$title,$attr) {
 $text = $text|0;
 $label = $label|0;
 $source = $source|0;
 $title = $title|0;
 $attr = $attr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $text;
 $1 = $label;
 $2 = $source;
 $3 = $title;
 $4 = $attr;
 $5 = (_mk_node(23)|0);
 $result = $5;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = (_mk_link_data($6,$7,$8,$9)|0);
 $11 = $result;
 $12 = (($11) + 8|0);
 HEAP32[$12>>2] = $10;
 $13 = $0;
 $14 = $result;
 $15 = (($14) + 12|0);
 HEAP32[$15>>2] = $13;
 $16 = $result;
 STACKTOP = sp;return ($16|0);
}
function _mk_link_data($label,$source,$title,$attr) {
 $label = $label|0;
 $source = $source|0;
 $title = $title|0;
 $attr = $attr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $label;
 $1 = $source;
 $2 = $title;
 $3 = $attr;
 $4 = (_malloc(16)|0);
 $result = $4;
 $5 = $0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $0;
  $8 = (___strdup($7)|0);
  $9 = $result;
  HEAP32[$9>>2] = $8;
 } else {
  $10 = $result;
  HEAP32[$10>>2] = 0;
 }
 $11 = $1;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $1;
  $14 = (___strdup($13)|0);
  $15 = $result;
  $16 = (($15) + 4|0);
  HEAP32[$16>>2] = $14;
 } else {
  $17 = $result;
  $18 = (($17) + 4|0);
  HEAP32[$18>>2] = 0;
 }
 $19 = $2;
 $20 = ($19|0)!=(0|0);
 if ($20) {
  $21 = $2;
  $22 = (___strdup($21)|0);
  $23 = $result;
  $24 = (($23) + 8|0);
  HEAP32[$24>>2] = $22;
  $27 = $3;
  $28 = $result;
  $29 = (($28) + 12|0);
  HEAP32[$29>>2] = $27;
  $30 = $result;
  STACKTOP = sp;return ($30|0);
 } else {
  $25 = $result;
  $26 = (($25) + 8|0);
  HEAP32[$26>>2] = 0;
  $27 = $3;
  $28 = $result;
  $29 = (($28) + 12|0);
  HEAP32[$29>>2] = $27;
  $30 = $result;
  STACKTOP = sp;return ($30|0);
 }
 return (0)|0;
}
function _mk_autolink($text) {
 $text = $text|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $anchor = 0, $label = 0, $result = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $text;
 $1 = $0;
 $2 = (_label_from_string($1)|0);
 $label = $2;
 $3 = $label;
 $4 = (_g_string_new($3)|0);
 $anchor = $4;
 $5 = $anchor;
 _g_string_prepend($5,46088);
 $6 = (_mk_node(23)|0);
 $result = $6;
 $7 = $label;
 $8 = $anchor;
 $9 = HEAP32[$8>>2]|0;
 $10 = (_mk_link_data($7,$9,0,0)|0);
 $11 = $result;
 $12 = (($11) + 8|0);
 HEAP32[$12>>2] = $10;
 $13 = $anchor;
 (_g_string_free($13,1)|0);
 $14 = $label;
 _free($14);
 $15 = $result;
 STACKTOP = sp;return ($15|0);
}
function _label_from_string($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $label = 0, $next_char = 0, $out = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $str;
 $1 = (_g_string_new(41432)|0);
 $out = $1;
 while(1) {
  $2 = $0;
  $3 = HEAP8[$2>>0]|0;
  $4 = $3 << 24 >> 24;
  $5 = ($4|0)!=(0);
  if (!($5)) {
   break;
  }
  $6 = $0;
  $next_char = $6;
  $7 = $next_char;
  $8 = (($7) + 1|0);
  $next_char = $8;
  $9 = $next_char;
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  $12 = $11 & 192;
  $13 = ($12|0)==(128);
  if ($13) {
   $14 = $out;
   $15 = $0;
   $16 = HEAP8[$15>>0]|0;
   _g_string_append_c($14,$16);
   while(1) {
    $17 = $next_char;
    $18 = HEAP8[$17>>0]|0;
    $19 = $18 << 24 >> 24;
    $20 = $19 & 192;
    $21 = ($20|0)==(128);
    if (!($21)) {
     break;
    }
    $22 = $0;
    $23 = (($22) + 1|0);
    $0 = $23;
    $24 = $out;
    $25 = $0;
    $26 = HEAP8[$25>>0]|0;
    _g_string_append_c($24,$26);
    $27 = $next_char;
    $28 = (($27) + 1|0);
    $next_char = $28;
   }
  } else {
   $29 = $0;
   $30 = HEAP8[$29>>0]|0;
   $31 = $30 << 24 >> 24;
   $32 = ($31|0)>=(48);
   if ($32) {
    $33 = $0;
    $34 = HEAP8[$33>>0]|0;
    $35 = $34 << 24 >> 24;
    $36 = ($35|0)<=(57);
    if ($36) {
     label = 18;
    } else {
     label = 10;
    }
   } else {
    label = 10;
   }
   do {
    if ((label|0) == 10) {
     label = 0;
     $37 = $0;
     $38 = HEAP8[$37>>0]|0;
     $39 = $38 << 24 >> 24;
     $40 = ($39|0)>=(65);
     if ($40) {
      $41 = $0;
      $42 = HEAP8[$41>>0]|0;
      $43 = $42 << 24 >> 24;
      $44 = ($43|0)<=(90);
      if ($44) {
       label = 18;
       break;
      }
     }
     $45 = $0;
     $46 = HEAP8[$45>>0]|0;
     $47 = $46 << 24 >> 24;
     $48 = ($47|0)>=(97);
     if ($48) {
      $49 = $0;
      $50 = HEAP8[$49>>0]|0;
      $51 = $50 << 24 >> 24;
      $52 = ($51|0)<=(122);
      if ($52) {
       label = 18;
       break;
      }
     }
     $53 = $0;
     $54 = HEAP8[$53>>0]|0;
     $55 = $54 << 24 >> 24;
     $56 = ($55|0)==(46);
     if ($56) {
      label = 18;
     } else {
      $57 = $0;
      $58 = HEAP8[$57>>0]|0;
      $59 = $58 << 24 >> 24;
      $60 = ($59|0)==(95);
      if ($60) {
       label = 18;
      } else {
       $61 = $0;
       $62 = HEAP8[$61>>0]|0;
       $63 = $62 << 24 >> 24;
       $64 = ($63|0)==(45);
       if ($64) {
        label = 18;
       } else {
        $65 = $0;
        $66 = HEAP8[$65>>0]|0;
        $67 = $66 << 24 >> 24;
        $68 = ($67|0)==(58);
        if ($68) {
         label = 18;
        }
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 18) {
    label = 0;
    $69 = $out;
    $70 = $0;
    $71 = HEAP8[$70>>0]|0;
    $72 = $71 << 24 >> 24;
    $73 = (_tolower($72)|0);
    $74 = $73&255;
    _g_string_append_c($69,$74);
   }
  }
  $75 = $0;
  $76 = (($75) + 1|0);
  $0 = $76;
 }
 $77 = $out;
 $78 = HEAP32[$77>>2]|0;
 $label = $78;
 $79 = $out;
 (_g_string_free($79,0)|0);
 $80 = $label;
 STACKTOP = sp;return ($80|0);
}
function _free_node($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $n;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $0;
  $8 = (($7) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  _free($9);
 }
 $10 = $0;
 $11 = (($10) + 4|0);
 HEAP32[$11>>2] = 0;
 $12 = $0;
 $13 = (($12) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 _free_link_data($14);
 $15 = $0;
 $16 = (($15) + 8|0);
 HEAP32[$16>>2] = 0;
 $17 = $0;
 $18 = (($17) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if ($20) {
  $21 = $0;
  $22 = (($21) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  _free_node_tree($23);
  $24 = $0;
  $25 = (($24) + 12|0);
  HEAP32[$25>>2] = 0;
 }
 $26 = $0;
 $27 = (($26) + 16|0);
 HEAP32[$27>>2] = 0;
 $28 = $0;
 _free($28);
 STACKTOP = sp;return;
}
function _mk_list($key,$list) {
 $key = $key|0;
 $list = $list|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $key;
 $1 = $list;
 $2 = $0;
 $3 = (_mk_node($2)|0);
 $result = $3;
 $4 = $1;
 $5 = (_reverse_list($4)|0);
 $6 = $result;
 $7 = (($6) + 12|0);
 HEAP32[$7>>2] = $5;
 $8 = $result;
 STACKTOP = sp;return ($8|0);
}
function _mk_pos_node($key,$string,$start,$stop) {
 $key = $key|0;
 $string = $string|0;
 $start = $start|0;
 $stop = $stop|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $key;
 $1 = $string;
 $2 = $start;
 $3 = $stop;
 $4 = $0;
 $5 = (_mk_node($4)|0);
 $result = $5;
 $6 = $1;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  $12 = $result;
  STACKTOP = sp;return ($12|0);
 }
 $8 = $1;
 $9 = (___strdup($8)|0);
 $10 = $result;
 $11 = (($10) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = $result;
 STACKTOP = sp;return ($12|0);
}
function _mk_pos_str($string,$start,$stop) {
 $string = $string|0;
 $start = $start|0;
 $stop = $stop|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $string;
 $1 = $start;
 $2 = $stop;
 $3 = $0;
 $4 = (_mk_str($3)|0);
 $result = $4;
 $5 = $result;
 STACKTOP = sp;return ($5|0);
}
function _mk_pos_list($key,$list,$start,$stop) {
 $key = $key|0;
 $list = $list|0;
 $start = $start|0;
 $stop = $stop|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $key;
 $1 = $list;
 $2 = $start;
 $3 = $stop;
 $4 = $0;
 $5 = $1;
 $6 = (_mk_list($4,$5)|0);
 $result = $6;
 $7 = $result;
 STACKTOP = sp;return ($7|0);
}
function _free_link_data($l) {
 $l = $l|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $l;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  $3 = $0;
  $4 = HEAP32[$3>>2]|0;
  _free($4);
  $5 = $0;
  HEAP32[$5>>2] = 0;
  $6 = $0;
  $7 = (($6) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  _free($8);
  $9 = $0;
  $10 = (($9) + 4|0);
  HEAP32[$10>>2] = 0;
  $11 = $0;
  $12 = (($11) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  _free($13);
  $14 = $0;
  $15 = (($14) + 8|0);
  HEAP32[$15>>2] = 0;
  $16 = $0;
  $17 = (($16) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  _free_node_tree($18);
  $19 = $0;
  $20 = (($19) + 12|0);
  HEAP32[$20>>2] = 0;
  $21 = $0;
  _free($21);
  STACKTOP = sp;return;
 }
}
function _free_node_tree($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $n;
 $next = 0;
 while(1) {
  $1 = $0;
  $2 = ($1|0)!=(0|0);
  if (!($2)) {
   break;
  }
  $3 = $0;
  $4 = (($3) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  $next = $5;
  $6 = $0;
  _free_node($6);
  $7 = $next;
  $0 = $7;
 }
 STACKTOP = sp;return;
}
function _cons($new,$list) {
 $new = $new|0;
 $list = $list|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $new;
 $2 = $list;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $2;
  $6 = $1;
  $7 = (($6) + 16|0);
  HEAP32[$7>>2] = $5;
  $8 = $1;
  $0 = $8;
 } else {
  $9 = $2;
  $0 = $9;
 }
 $10 = $0;
 STACKTOP = sp;return ($10|0);
}
function _append_list($new,$list) {
 $new = $new|0;
 $list = $list|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $step = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $new;
 $1 = $list;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = $0;
  $1 = $4;
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $step = $7;
 while(1) {
  $8 = $step;
  $9 = (($8) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(0|0);
  if (!($11)) {
   break;
  }
  $12 = $step;
  $13 = (($12) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $step = $14;
 }
 $15 = $0;
 $16 = $step;
 $17 = (($16) + 16|0);
 HEAP32[$17>>2] = $15;
 STACKTOP = sp;return;
}
function _mk_parser_data($charbuf,$extensions) {
 $charbuf = $charbuf|0;
 $extensions = $extensions|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $result = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $charbuf;
 $1 = $extensions;
 $2 = (_clock()|0);
 $start = $2;
 $3 = (_malloc(28)|0);
 $result = $3;
 $4 = $1;
 $5 = $result;
 $6 = (($5) + 12|0);
 HEAP32[$6>>2] = $4;
 $7 = $0;
 $8 = $result;
 HEAP32[$8>>2] = $7;
 $9 = $0;
 $10 = $result;
 $11 = (($10) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = $result;
 $13 = (($12) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = $result;
 $15 = (($14) + 8|0);
 HEAP32[$15>>2] = 0;
 $16 = $result;
 $17 = (($16) + 20|0);
 HEAP8[$17>>0] = 0;
 $18 = $start;
 $19 = (($18) + 3000000)|0;
 $20 = $result;
 $21 = (($20) + 24|0);
 HEAP32[$21>>2] = $19;
 $22 = $result;
 STACKTOP = sp;return ($22|0);
}
function _free_parser_data($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $2 = (($1) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 _free_node_tree($3);
 $4 = $0;
 $5 = (($4) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 _free_node_tree($6);
 $7 = $0;
 $8 = (($7) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = $0;
 HEAP32[$9>>2] = 0;
 $10 = $0;
 _free($10);
 STACKTOP = sp;return;
}
function _mk_scratch_pad($extensions) {
 $extensions = $extensions|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $extensions;
 $1 = (_malloc(140)|0);
 $result = $1;
 $2 = $0;
 $3 = $result;
 HEAP32[$3>>2] = $2;
 $4 = $result;
 $5 = (($4) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = $result;
 $7 = (($6) + 8|0);
 HEAP32[$7>>2] = 1;
 $8 = $result;
 $9 = (($8) + 25|0);
 HEAP8[$9>>0] = 0;
 $10 = (_mk_node(87)|0);
 $11 = $result;
 $12 = (($11) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_mk_node(87)|0);
 $14 = $result;
 $15 = (($14) + 48|0);
 HEAP32[$15>>2] = $13;
 $16 = (_mk_node(87)|0);
 $17 = $result;
 $18 = (($17) + 32|0);
 HEAP32[$18>>2] = $16;
 $19 = (_mk_node(87)|0);
 $20 = $result;
 $21 = (($20) + 36|0);
 HEAP32[$21>>2] = $19;
 $22 = (_mk_node(87)|0);
 $23 = $result;
 $24 = (($23) + 40|0);
 HEAP32[$24>>2] = $22;
 $25 = (_mk_node(87)|0);
 $26 = $result;
 $27 = (($26) + 44|0);
 HEAP32[$27>>2] = $25;
 $28 = $result;
 $29 = (($28) + 52|0);
 HEAP32[$29>>2] = 0;
 $30 = $result;
 $31 = (($30) + 4|0);
 HEAP32[$31>>2] = 2;
 $32 = $result;
 $33 = (($32) + 56|0);
 HEAP32[$33>>2] = 0;
 $34 = $result;
 $35 = (($34) + 60|0);
 HEAP32[$35>>2] = 0;
 $36 = $result;
 $37 = (($36) + 64|0);
 HEAP32[$37>>2] = 0;
 $38 = $result;
 $39 = (($38) + 68|0);
 HEAP8[$39>>0] = 0;
 $40 = $result;
 $41 = (($40) + 76|0);
 HEAP8[$41>>0] = 0;
 $42 = $result;
 $43 = (($42) + 72|0);
 HEAP32[$43>>2] = 0;
 $44 = $result;
 $45 = (($44) + 84|0);
 HEAP8[$45>>0] = 0;
 $46 = $result;
 $47 = (($46) + 80|0);
 HEAP32[$47>>2] = 5;
 $48 = $result;
 $49 = (($48) + 24|0);
 HEAP8[$49>>0] = 0;
 $50 = $result;
 $51 = (($50) + 16|0);
 HEAP32[$51>>2] = 0;
 $52 = $result;
 $53 = (($52) + 20|0);
 HEAP32[$53>>2] = 0;
 $54 = $0;
 $55 = $54 & 32768;
 $56 = ($55|0)!=(0);
 if ($56) {
  $57 = (_time((0|0))|0);
  _srand($57);
  $58 = (_rand()|0);
  $59 = (($58|0) % 32000)&-1;
  $60 = $result;
  $61 = (($60) + 88|0);
  HEAP32[$61>>2] = $59;
 } else {
  _srand(1);
  $62 = $result;
  $63 = (($62) + 88|0);
  HEAP32[$63>>2] = 0;
 }
 _ran_start(310952);
 $64 = $result;
 $65 = (($64) + 100|0);
 HEAP32[$65>>2] = 5;
 $66 = $result;
 $67 = (($66) + 104|0);
 HEAP32[$67>>2] = 0;
 $68 = $result;
 $69 = (($68) + 108|0);
 HEAP8[$69>>0] = 0;
 $70 = $result;
 $71 = (($70) + 109|0);
 HEAP8[$71>>0] = 0;
 $72 = $result;
 $73 = (($72) + 116|0);
 HEAP32[$73>>2] = 0;
 $74 = (_g_string_new(41432)|0);
 $75 = $result;
 $76 = (($75) + 136|0);
 HEAP32[$76>>2] = $74;
 $77 = $result;
 $78 = (($77) + 110|0);
 HEAP8[$78>>0] = 1;
 $79 = $result;
 $80 = (($79) + 111|0);
 HEAP8[$80>>0] = 0;
 $81 = $result;
 $82 = (($81) + 113|0);
 HEAP8[$82>>0] = 0;
 $83 = $result;
 $84 = (($83) + 114|0);
 HEAP8[$84>>0] = 0;
 $85 = $result;
 $86 = (($85) + 116|0);
 HEAP32[$86>>2] = 0;
 $87 = $result;
 $88 = (($87) + 120|0);
 HEAP8[$88>>0] = 0;
 $89 = $result;
 $90 = (($89) + 124|0);
 HEAP32[$90>>2] = 0;
 $91 = $result;
 $92 = (($91) + 128|0);
 HEAP32[$92>>2] = 0;
 $93 = $result;
 STACKTOP = sp;return ($93|0);
}
function _free_scratch_pad($scratch) {
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $scratch;
 $1 = $0;
 $2 = (($1) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 _free_node_tree($3);
 $4 = $0;
 $5 = (($4) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 _free_node_tree($6);
 $7 = $0;
 $8 = (($7) + 32|0);
 $9 = HEAP32[$8>>2]|0;
 _free_node_tree($9);
 $10 = $0;
 $11 = (($10) + 36|0);
 $12 = HEAP32[$11>>2]|0;
 _free_node_tree($12);
 $13 = $0;
 $14 = (($13) + 40|0);
 $15 = HEAP32[$14>>2]|0;
 _free_node_tree($15);
 $16 = $0;
 $17 = (($16) + 44|0);
 $18 = HEAP32[$17>>2]|0;
 _free_node_tree($18);
 $19 = $0;
 $20 = (($19) + 136|0);
 $21 = HEAP32[$20>>2]|0;
 (_g_string_free($21,1)|0);
 $22 = $0;
 $23 = (($22) + 72|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if ($25) {
  $26 = $0;
  $27 = (($26) + 72|0);
  $28 = HEAP32[$27>>2]|0;
  _free($28);
 }
 $29 = $0;
 $30 = (($29) + 16|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  $36 = $0;
  _free($36);
  STACKTOP = sp;return;
 }
 $33 = $0;
 $34 = (($33) + 16|0);
 $35 = HEAP32[$34>>2]|0;
 _free($35);
 $36 = $0;
 _free($36);
 STACKTOP = sp;return;
}
function _extension($ext,$extensions) {
 $ext = $ext|0;
 $extensions = $extensions|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ext;
 $1 = $extensions;
 $2 = $1;
 $3 = $0;
 $4 = $2 & $3;
 $5 = ($4|0)!=(0);
 STACKTOP = sp;return ($5|0);
}
function _ascii_label_from_string($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $label = 0, $next_char = 0, $out = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $str;
 $1 = (_g_string_new(41432)|0);
 $out = $1;
 while(1) {
  $2 = $0;
  $3 = HEAP8[$2>>0]|0;
  $4 = $3 << 24 >> 24;
  $5 = ($4|0)!=(0);
  if (!($5)) {
   break;
  }
  $6 = $0;
  $next_char = $6;
  $7 = $next_char;
  $8 = (($7) + 1|0);
  $next_char = $8;
  $9 = $next_char;
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  $12 = $11 & 192;
  $13 = ($12|0)==(128);
  if ($13) {
   while(1) {
    $14 = $next_char;
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = $16 & 192;
    $18 = ($17|0)==(128);
    if (!($18)) {
     break;
    }
    $19 = $0;
    $20 = (($19) + 1|0);
    $0 = $20;
    $21 = $next_char;
    $22 = (($21) + 1|0);
    $next_char = $22;
   }
  } else {
   $23 = $0;
   $24 = HEAP8[$23>>0]|0;
   $25 = $24 << 24 >> 24;
   $26 = ($25|0)>=(48);
   if ($26) {
    $27 = $0;
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = ($29|0)<=(57);
    if ($30) {
     label = 18;
    } else {
     label = 10;
    }
   } else {
    label = 10;
   }
   do {
    if ((label|0) == 10) {
     label = 0;
     $31 = $0;
     $32 = HEAP8[$31>>0]|0;
     $33 = $32 << 24 >> 24;
     $34 = ($33|0)>=(65);
     if ($34) {
      $35 = $0;
      $36 = HEAP8[$35>>0]|0;
      $37 = $36 << 24 >> 24;
      $38 = ($37|0)<=(90);
      if ($38) {
       label = 18;
       break;
      }
     }
     $39 = $0;
     $40 = HEAP8[$39>>0]|0;
     $41 = $40 << 24 >> 24;
     $42 = ($41|0)>=(97);
     if ($42) {
      $43 = $0;
      $44 = HEAP8[$43>>0]|0;
      $45 = $44 << 24 >> 24;
      $46 = ($45|0)<=(122);
      if ($46) {
       label = 18;
       break;
      }
     }
     $47 = $0;
     $48 = HEAP8[$47>>0]|0;
     $49 = $48 << 24 >> 24;
     $50 = ($49|0)==(46);
     if ($50) {
      label = 18;
     } else {
      $51 = $0;
      $52 = HEAP8[$51>>0]|0;
      $53 = $52 << 24 >> 24;
      $54 = ($53|0)==(95);
      if ($54) {
       label = 18;
      } else {
       $55 = $0;
       $56 = HEAP8[$55>>0]|0;
       $57 = $56 << 24 >> 24;
       $58 = ($57|0)==(45);
       if ($58) {
        label = 18;
       } else {
        $59 = $0;
        $60 = HEAP8[$59>>0]|0;
        $61 = $60 << 24 >> 24;
        $62 = ($61|0)==(58);
        if ($62) {
         label = 18;
        }
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 18) {
    label = 0;
    $63 = $out;
    $64 = $0;
    $65 = HEAP8[$64>>0]|0;
    $66 = $65 << 24 >> 24;
    $67 = (_tolower($66)|0);
    $68 = $67&255;
    _g_string_append_c($63,$68);
   }
  }
  $69 = $0;
  $70 = (($69) + 1|0);
  $0 = $70;
 }
 $71 = $out;
 $72 = HEAP32[$71>>2]|0;
 $label = $72;
 $73 = $out;
 (_g_string_free($73,0)|0);
 $74 = $label;
 STACKTOP = sp;return ($74|0);
}
function _clean_string($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $block_whitespace = 0, $clean = 0, $out = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $str;
 $1 = (_g_string_new(41432)|0);
 $out = $1;
 $block_whitespace = 1;
 while(1) {
  $2 = $0;
  $3 = HEAP8[$2>>0]|0;
  $4 = $3 << 24 >> 24;
  $5 = ($4|0)!=(0);
  if (!($5)) {
   break;
  }
  $6 = $0;
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = ($8|0)==(9);
  if ($9) {
   label = 7;
  } else {
   $10 = $0;
   $11 = HEAP8[$10>>0]|0;
   $12 = $11 << 24 >> 24;
   $13 = ($12|0)==(32);
   if ($13) {
    label = 7;
   } else {
    $14 = $0;
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($16|0)==(10);
    if ($17) {
     label = 7;
    } else {
     $18 = $0;
     $19 = HEAP8[$18>>0]|0;
     $20 = $19 << 24 >> 24;
     $21 = ($20|0)==(13);
     if ($21) {
      label = 7;
     } else {
      $25 = $out;
      $26 = $0;
      $27 = HEAP8[$26>>0]|0;
      _g_string_append_c($25,$27);
      $block_whitespace = 0;
     }
    }
   }
  }
  if ((label|0) == 7) {
   label = 0;
   $22 = $block_whitespace;
   $23 = $22&1;
   if (!($23)) {
    $24 = $out;
    _g_string_append_c($24,32);
    $block_whitespace = 1;
   }
  }
  $28 = $0;
  $29 = (($28) + 1|0);
  $0 = $29;
 }
 $30 = $out;
 $31 = HEAP32[$30>>2]|0;
 $clean = $31;
 $32 = $out;
 (_g_string_free($32,0)|0);
 $33 = $clean;
 STACKTOP = sp;return ($33|0);
}
function _string_from_node_tree($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $raw = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $n;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $0 = 0;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 } else {
  $4 = (_g_string_new(41432)|0);
  $raw = $4;
  $5 = $raw;
  $6 = $1;
  _print_raw_node_tree($5,$6);
  $7 = $raw;
  $8 = HEAP32[$7>>2]|0;
  $result = $8;
  $9 = $raw;
  (_g_string_free($9,0)|0);
  $10 = $result;
  $0 = $10;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function _print_raw_node_tree($out,$n) {
 $out = $out|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $n;
 while(1) {
  $2 = $1;
  $3 = ($2|0)!=(0|0);
  if (!($3)) {
   break;
  }
  $4 = $0;
  $5 = $1;
  _print_raw_node($4,$5);
  $6 = $1;
  $7 = (($6) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $1 = $8;
 }
 STACKTOP = sp;return;
}
function _label_from_node_tree($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $label = 0, $raw = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $n;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $4 = (_g_string_new(41432)|0);
  $raw = $4;
  $5 = $raw;
  $6 = $1;
  _print_raw_node_tree($5,$6);
  $7 = $raw;
  $8 = HEAP32[$7>>2]|0;
  $9 = (_label_from_string($8)|0);
  $label = $9;
  $10 = $raw;
  (_g_string_free($10,1)|0);
  $11 = $label;
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _label_from_node($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $label = 0, $label2 = 0, $raw = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $n;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $0 = 0;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 } else {
  $4 = (_g_string_new(41432)|0);
  $raw = $4;
  $5 = $raw;
  $6 = $1;
  _print_raw_node($5,$6);
  $7 = $raw;
  $8 = HEAP32[$7>>2]|0;
  $9 = (_label_from_string($8)|0);
  $label = $9;
  $10 = $label;
  $11 = (___strdup($10)|0);
  $label2 = $11;
  $12 = $label;
  _free($12);
  $13 = $raw;
  (_g_string_free($13,1)|0);
  $14 = $label2;
  $0 = $14;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function _print_raw_node($out,$n) {
 $out = $out|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $n;
 $2 = $1;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $0;
  $7 = $1;
  $8 = (($7) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  _g_string_append_printf($6,40832,$vararg_buffer);
  STACKTOP = sp;return;
 }
 $10 = $1;
 $11 = HEAP16[$10>>1]|0;
 $12 = $11 << 16 >> 16;
 $13 = ($12|0)==(23);
 if ($13) {
  $14 = $0;
  $15 = $1;
  $16 = (($15) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  _print_raw_node_tree($14,$17);
  $18 = $1;
  $19 = (($18) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)!=(0|0);
  if ($21) {
   $22 = $1;
   $23 = (($22) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)!=(0|0);
   if ($26) {
    $27 = $0;
    $28 = $1;
    $29 = (($28) + 8|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = HEAP32[$30>>2]|0;
    HEAP32[$vararg_buffer1>>2] = $31;
    _g_string_append_printf($27,40832,$vararg_buffer1);
   }
  }
 } else {
  $32 = $0;
  $33 = $1;
  $34 = (($33) + 12|0);
  $35 = HEAP32[$34>>2]|0;
  _print_raw_node_tree($32,$35);
 }
 STACKTOP = sp;return;
}
function _ascii_label_from_node($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $label = 0, $label2 = 0, $raw = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $n;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $0 = 0;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 } else {
  $4 = (_g_string_new(41432)|0);
  $raw = $4;
  $5 = $raw;
  $6 = $1;
  _print_raw_node($5,$6);
  $7 = $raw;
  $8 = HEAP32[$7>>2]|0;
  $9 = (_ascii_label_from_string($8)|0);
  $label = $9;
  $10 = $label;
  $11 = (___strdup($10)|0);
  $label2 = $11;
  $12 = $label;
  _free($12);
  $13 = $raw;
  (_g_string_free($13,1)|0);
  $14 = $label2;
  $0 = $14;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function _preformat_text($text) {
 $text = $text|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $charstotab = 0, $len = 0, $next_char = 0, $out = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $text;
 $len = 0;
 $1 = (_g_string_new(41432)|0);
 $buf = $1;
 $charstotab = 4;
 while(1) {
  $2 = $0;
  $3 = (($2) + 1|0);
  $0 = $3;
  $4 = HEAP8[$2>>0]|0;
  $next_char = $4;
  $5 = $4 << 24 >> 24;
  $6 = ($5|0)!=(0);
  if (!($6)) {
   break;
  }
  $7 = $next_char;
  $8 = $7 << 24 >> 24;
  if ((($8|0) == 10)) {
   $16 = $buf;
   _g_string_append_c($16,10);
   $17 = $len;
   $18 = (($17) + 1)|0;
   $len = $18;
   $charstotab = 4;
  } else if ((($8|0) == 9)) {
   while(1) {
    $9 = $charstotab;
    $10 = ($9|0)>(0);
    if (!($10)) {
     break;
    }
    $11 = $buf;
    _g_string_append_c($11,32);
    $12 = $len;
    $13 = (($12) + 1)|0;
    $len = $13;
    $14 = $charstotab;
    $15 = (($14) + -1)|0;
    $charstotab = $15;
   }
  } else {
   $19 = $buf;
   $20 = $next_char;
   _g_string_append_c($19,$20);
   $21 = $len;
   $22 = (($21) + 1)|0;
   $len = $22;
   $23 = $charstotab;
   $24 = (($23) + -1)|0;
   $charstotab = $24;
  }
  $25 = $charstotab;
  $26 = ($25|0)==(0);
  if ($26) {
   $charstotab = 4;
  }
 }
 $27 = $buf;
 _g_string_append_printf($27,47712,$vararg_buffer);
 $28 = $buf;
 $29 = HEAP32[$28>>2]|0;
 $out = $29;
 $30 = $buf;
 (_g_string_free($30,0)|0);
 $31 = $out;
 STACKTOP = sp;return ($31|0);
}
function _tree_contains_key($list,$key) {
 $list = $list|0;
 $key = $key|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $step = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = $list;
 $2 = $key;
 $step = 0;
 $3 = $1;
 $step = $3;
 while(1) {
  $4 = $step;
  $5 = ($4|0)!=(0|0);
  if (!($5)) {
   label = 10;
   break;
  }
  $6 = $step;
  $7 = HEAP16[$6>>1]|0;
  $8 = $7 << 16 >> 16;
  $9 = $2;
  $10 = ($8|0)==($9|0);
  if ($10) {
   label = 4;
   break;
  }
  $11 = $step;
  $12 = (($11) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(0|0);
  if ($14) {
   $15 = $step;
   $16 = (($15) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $2;
   $19 = (_tree_contains_key($17,$18)|0);
   if ($19) {
    label = 7;
    break;
   }
  }
  $20 = $step;
  $21 = (($20) + 16|0);
  $22 = HEAP32[$21>>2]|0;
  $step = $22;
 }
 if ((label|0) == 4) {
  $$expand_i1_val = 1;
  HEAP8[$0>>0] = $$expand_i1_val;
 }
 else if ((label|0) == 7) {
  $$expand_i1_val2 = 1;
  HEAP8[$0>>0] = $$expand_i1_val2;
 }
 else if ((label|0) == 10) {
  $$expand_i1_val4 = 0;
  HEAP8[$0>>0] = $$expand_i1_val4;
 }
 $$pre_trunc = HEAP8[$0>>0]|0;
 $23 = $$pre_trunc&1;
 STACKTOP = sp;return ($23|0);
}
function _tree_contains_key_count($list,$key) {
 $list = $list|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $counter = 0, $step = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $list;
 $1 = $key;
 $step = 0;
 $counter = 0;
 $2 = $0;
 $step = $2;
 while(1) {
  $3 = $step;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $step;
  $6 = HEAP16[$5>>1]|0;
  $7 = $6 << 16 >> 16;
  $8 = $1;
  $9 = ($7|0)==($8|0);
  if ($9) {
   $10 = $counter;
   $11 = (($10) + 1)|0;
   $counter = $11;
  }
  $12 = $step;
  $13 = (($12) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)!=(0|0);
  if ($15) {
   $16 = $step;
   $17 = (($16) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $1;
   $20 = (_tree_contains_key_count($18,$19)|0);
   $21 = $counter;
   $22 = (($21) + ($20))|0;
   $counter = $22;
  }
  $23 = $step;
  $24 = (($23) + 16|0);
  $25 = HEAP32[$24>>2]|0;
  $step = $25;
 }
 $26 = $counter;
 STACKTOP = sp;return ($26|0);
}
function _metadata_for_key($key,$list) {
 $key = $key|0;
 $list = $list|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $label = 0, $step = 0;
 var $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $key;
 $2 = $list;
 $step = 0;
 $3 = $2;
 $step = $3;
 $4 = $1;
 $5 = (_label_from_string($4)|0);
 $label = $5;
 while(1) {
  $6 = $step;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 11;
   break;
  }
  $8 = $step;
  $9 = HEAP16[$8>>1]|0;
  $10 = $9 << 16 >> 16;
  $11 = ($10|0)==(17);
  if ($11) {
   break;
  }
  $33 = $step;
  $34 = (($33) + 16|0);
  $35 = HEAP32[$34>>2]|0;
  $step = $35;
 }
 if ((label|0) == 11) {
  $36 = $label;
  _free($36);
  $0 = 0;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 $12 = $step;
 $13 = (($12) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $step = $14;
 while(1) {
  $15 = $step;
  $16 = ($15|0)!=(0|0);
  if (!($16)) {
   label = 9;
   break;
  }
  $17 = $step;
  $18 = (($17) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_label_from_string($19)|0);
  $temp = $20;
  $21 = $temp;
  $22 = $label;
  $23 = (_strcmp($21,$22)|0);
  $24 = ($23|0)==(0);
  if ($24) {
   label = 7;
   break;
  }
  $28 = $temp;
  _free($28);
  $29 = $step;
  $30 = (($29) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $step = $31;
 }
 if ((label|0) == 7) {
  $25 = $temp;
  _free($25);
  $26 = $label;
  _free($26);
  $27 = $step;
  $0 = $27;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 else if ((label|0) == 9) {
  $32 = $label;
  _free($32);
  $0 = 0;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 return (0)|0;
}
function _metavalue_for_key($key,$list) {
 $key = $key|0;
 $list = $list|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $key;
 $2 = $list;
 $3 = $1;
 $4 = $2;
 $5 = (_metadata_for_key($3,$4)|0);
 $2 = $5;
 $6 = $2;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $0 = 0;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 } else {
  $8 = $2;
  $9 = (($8) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (___strdup($12)|0);
  $result = $13;
  $14 = $result;
  _trim_trailing_whitespace($14);
  $15 = $result;
  $0 = $15;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _trim_trailing_whitespace($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $str;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = (_strlen(($3|0))|0);
 $l = $4;
 $5 = $l;
 $6 = ($5>>>0)<(1);
 if ($6) {
  STACKTOP = sp;return;
 }
 while(1) {
  $7 = $l;
  $8 = ($7>>>0)>(0);
  if ($8) {
   $9 = $l;
   $10 = (($9) - 1)|0;
   $11 = $0;
   $12 = (($11) + ($10)|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = ($14|0)==(32);
   if ($15) {
    $44 = 1;
   } else {
    $16 = $l;
    $17 = (($16) - 1)|0;
    $18 = $0;
    $19 = (($18) + ($17)|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = $20 << 24 >> 24;
    $22 = ($21|0)==(10);
    if ($22) {
     $44 = 1;
    } else {
     $23 = $l;
     $24 = (($23) - 1)|0;
     $25 = $0;
     $26 = (($25) + ($24)|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = $27 << 24 >> 24;
     $29 = ($28|0)==(13);
     if ($29) {
      $44 = 1;
     } else {
      $30 = $l;
      $31 = (($30) - 1)|0;
      $32 = $0;
      $33 = (($32) + ($31)|0);
      $34 = HEAP8[$33>>0]|0;
      $35 = $34 << 24 >> 24;
      $36 = ($35|0)==(9);
      $44 = $36;
     }
    }
   }
   $43 = $44;
  } else {
   $43 = 0;
  }
  if (!($43)) {
   break;
  }
  $37 = $l;
  $38 = (($37) - 1)|0;
  $39 = $0;
  $40 = (($39) + ($38)|0);
  HEAP8[$40>>0] = 0;
  $41 = $0;
  $42 = (_strlen(($41|0))|0);
  $l = $42;
 }
 STACKTOP = sp;return;
}
function _trim_trailing_newlines($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $str;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = (_strlen(($3|0))|0);
 $l = $4;
 $5 = $l;
 $6 = ($5>>>0)<(1);
 if ($6) {
  STACKTOP = sp;return;
 }
 while(1) {
  $7 = $l;
  $8 = ($7>>>0)>(0);
  if ($8) {
   $9 = $l;
   $10 = (($9) - 1)|0;
   $11 = $0;
   $12 = (($11) + ($10)|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = ($14|0)==(10);
   if ($15) {
    $30 = 1;
   } else {
    $16 = $l;
    $17 = (($16) - 1)|0;
    $18 = $0;
    $19 = (($18) + ($17)|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = $20 << 24 >> 24;
    $22 = ($21|0)==(13);
    $30 = $22;
   }
   $29 = $30;
  } else {
   $29 = 0;
  }
  if (!($29)) {
   break;
  }
  $23 = $l;
  $24 = (($23) - 1)|0;
  $25 = $0;
  $26 = (($25) + ($24)|0);
  HEAP8[$26>>0] = 0;
  $27 = $0;
  $28 = (_strlen(($27|0))|0);
  $l = $28;
 }
 STACKTOP = sp;return;
}
function _mmd_version() {
 var $0 = 0, $1 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = (___strdup(34112)|0);
 $result = $0;
 $1 = $result;
 STACKTOP = sp;return ($1|0);
}
function _copy_node($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $n;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $0 = 0;
  $55 = $0;
  STACKTOP = sp;return ($55|0);
 }
 $4 = (_malloc(20)|0);
 $m = $4;
 $5 = $m;
 $6 = $1;
 ;HEAP32[$5+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[$6+12>>2]|0;HEAP32[$5+16>>2]=HEAP32[$6+16>>2]|0;
 $7 = $1;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $1;
  $12 = (($11) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (___strdup($13)|0);
  $15 = $m;
  $16 = (($15) + 4|0);
  HEAP32[$16>>2] = $14;
 }
 $17 = $1;
 $18 = (($17) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if ($20) {
  $21 = $1;
  $22 = (($21) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP32[$23>>2]|0;
  $25 = $1;
  $26 = (($25) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $1;
  $31 = (($30) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $1;
  $36 = (($35) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (_copy_node_tree($39)|0);
  $41 = (_mk_link_data($24,$29,$34,$40)|0);
  $42 = $m;
  $43 = (($42) + 8|0);
  HEAP32[$43>>2] = $41;
 }
 $44 = $1;
 $45 = (($44) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)!=(0|0);
 if ($47) {
  $48 = $1;
  $49 = (($48) + 12|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (_copy_node_tree($50)|0);
  $52 = $m;
  $53 = (($52) + 12|0);
  HEAP32[$53>>2] = $51;
 }
 $54 = $m;
 $0 = $54;
 $55 = $0;
 STACKTOP = sp;return ($55|0);
}
function _copy_node_tree($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $n;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $0 = 0;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 $4 = $1;
 $5 = (_copy_node($4)|0);
 $m = $5;
 $6 = $1;
 $7 = (($6) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $1;
  $11 = (($10) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_copy_node_tree($12)|0);
  $14 = $m;
  $15 = (($14) + 16|0);
  HEAP32[$15>>2] = $13;
 }
 $16 = $m;
 $0 = $16;
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _ran_array($aa,$n) {
 $aa = $aa|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $aa;
 $1 = $n;
 $j = 0;
 while(1) {
  $2 = $j;
  $3 = ($2|0)<(100);
  if (!($3)) {
   break;
  }
  $4 = $j;
  $5 = (34120 + ($4<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $j;
  $8 = $0;
  $9 = (($8) + ($7<<2)|0);
  HEAP32[$9>>2] = $6;
  $10 = $j;
  $11 = (($10) + 1)|0;
  $j = $11;
 }
 while(1) {
  $12 = $j;
  $13 = $1;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $j;
  $16 = (($15) - 100)|0;
  $17 = $0;
  $18 = (($17) + ($16<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $j;
  $21 = (($20) - 37)|0;
  $22 = $0;
  $23 = (($22) + ($21<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($19) - ($24))|0;
  $26 = $25 & 1073741823;
  $27 = $j;
  $28 = $0;
  $29 = (($28) + ($27<<2)|0);
  HEAP32[$29>>2] = $26;
  $30 = $j;
  $31 = (($30) + 1)|0;
  $j = $31;
 }
 $i = 0;
 while(1) {
  $32 = $i;
  $33 = ($32|0)<(37);
  if (!($33)) {
   break;
  }
  $34 = $j;
  $35 = (($34) - 100)|0;
  $36 = $0;
  $37 = (($36) + ($35<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $j;
  $40 = (($39) - 37)|0;
  $41 = $0;
  $42 = (($41) + ($40<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($38) - ($43))|0;
  $45 = $44 & 1073741823;
  $46 = $i;
  $47 = (34120 + ($46<<2)|0);
  HEAP32[$47>>2] = $45;
  $48 = $i;
  $49 = (($48) + 1)|0;
  $i = $49;
  $50 = $j;
  $51 = (($50) + 1)|0;
  $j = $51;
 }
 while(1) {
  $52 = $i;
  $53 = ($52|0)<(100);
  if (!($53)) {
   break;
  }
  $54 = $j;
  $55 = (($54) - 100)|0;
  $56 = $0;
  $57 = (($56) + ($55<<2)|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $i;
  $60 = (($59) - 37)|0;
  $61 = (34120 + ($60<<2)|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (($58) - ($62))|0;
  $64 = $63 & 1073741823;
  $65 = $i;
  $66 = (34120 + ($65<<2)|0);
  HEAP32[$66>>2] = $64;
  $67 = $i;
  $68 = (($67) + 1)|0;
  $i = $68;
  $69 = $j;
  $70 = (($69) + 1)|0;
  $j = $70;
 }
 STACKTOP = sp;return;
}
function _ran_start($seed) {
 $seed = $seed|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $j = 0, $ss = 0, $t = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 816|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x = sp + 4|0;
 $0 = $seed;
 $1 = $0;
 $2 = (($1) + 2)|0;
 $3 = $2 & 1073741822;
 $ss = $3;
 $j = 0;
 while(1) {
  $4 = $j;
  $5 = ($4|0)<(100);
  if (!($5)) {
   break;
  }
  $6 = $ss;
  $7 = $j;
  $8 = (($x) + ($7<<2)|0);
  HEAP32[$8>>2] = $6;
  $9 = $ss;
  $10 = $9 << 1;
  $ss = $10;
  $11 = $ss;
  $12 = ($11|0)>=(1073741824);
  if ($12) {
   $13 = $ss;
   $14 = (($13) - 1073741822)|0;
   $ss = $14;
  }
  $15 = $j;
  $16 = (($15) + 1)|0;
  $j = $16;
 }
 $17 = (($x) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + 1)|0;
 HEAP32[$17>>2] = $19;
 $20 = $0;
 $21 = $20 & 1073741823;
 $ss = $21;
 $t = 69;
 while(1) {
  $22 = $t;
  $23 = ($22|0)!=(0);
  if (!($23)) {
   break;
  }
  $j = 99;
  while(1) {
   $24 = $j;
   $25 = ($24|0)>(0);
   if (!($25)) {
    break;
   }
   $26 = $j;
   $27 = (($x) + ($26<<2)|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $j;
   $30 = $j;
   $31 = (($29) + ($30))|0;
   $32 = (($x) + ($31<<2)|0);
   HEAP32[$32>>2] = $28;
   $33 = $j;
   $34 = $j;
   $35 = (($33) + ($34))|0;
   $36 = (($35) - 1)|0;
   $37 = (($x) + ($36<<2)|0);
   HEAP32[$37>>2] = 0;
   $38 = $j;
   $39 = (($38) + -1)|0;
   $j = $39;
  }
  $j = 198;
  while(1) {
   $40 = $j;
   $41 = ($40|0)>=(100);
   if (!($41)) {
    break;
   }
   $42 = $j;
   $43 = (($42) - 63)|0;
   $44 = (($x) + ($43<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $j;
   $47 = (($x) + ($46<<2)|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($45) - ($48))|0;
   $50 = $49 & 1073741823;
   $51 = $j;
   $52 = (($51) - 63)|0;
   $53 = (($x) + ($52<<2)|0);
   HEAP32[$53>>2] = $50;
   $54 = $j;
   $55 = (($54) - 100)|0;
   $56 = (($x) + ($55<<2)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $j;
   $59 = (($x) + ($58<<2)|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($57) - ($60))|0;
   $62 = $61 & 1073741823;
   $63 = $j;
   $64 = (($63) - 100)|0;
   $65 = (($x) + ($64<<2)|0);
   HEAP32[$65>>2] = $62;
   $66 = $j;
   $67 = (($66) + -1)|0;
   $j = $67;
  }
  $68 = $ss;
  $69 = $68 & 1;
  $70 = ($69|0)!=(0);
  if ($70) {
   $j = 100;
   while(1) {
    $71 = $j;
    $72 = ($71|0)>(0);
    if (!($72)) {
     break;
    }
    $73 = $j;
    $74 = (($73) - 1)|0;
    $75 = (($x) + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $j;
    $78 = (($x) + ($77<<2)|0);
    HEAP32[$78>>2] = $76;
    $79 = $j;
    $80 = (($79) + -1)|0;
    $j = $80;
   }
   $81 = (($x) + 400|0);
   $82 = HEAP32[$81>>2]|0;
   HEAP32[$x>>2] = $82;
   $83 = (($x) + 148|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (($x) + 400|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (($84) - ($86))|0;
   $88 = $87 & 1073741823;
   $89 = (($x) + 148|0);
   HEAP32[$89>>2] = $88;
  }
  $90 = $ss;
  $91 = ($90|0)!=(0);
  if ($91) {
   $92 = $ss;
   $93 = $92 >> 1;
   $ss = $93;
  } else {
   $94 = $t;
   $95 = (($94) + -1)|0;
   $t = $95;
  }
 }
 $j = 0;
 while(1) {
  $96 = $j;
  $97 = ($96|0)<(37);
  if (!($97)) {
   break;
  }
  $98 = $j;
  $99 = (($x) + ($98<<2)|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $j;
  $102 = (($101) + 100)|0;
  $103 = (($102) - 37)|0;
  $104 = (34120 + ($103<<2)|0);
  HEAP32[$104>>2] = $100;
  $105 = $j;
  $106 = (($105) + 1)|0;
  $j = $106;
 }
 while(1) {
  $107 = $j;
  $108 = ($107|0)<(100);
  if (!($108)) {
   break;
  }
  $109 = $j;
  $110 = (($x) + ($109<<2)|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = $j;
  $113 = (($112) - 37)|0;
  $114 = (34120 + ($113<<2)|0);
  HEAP32[$114>>2] = $111;
  $115 = $j;
  $116 = (($115) + 1)|0;
  $j = $116;
 }
 $j = 0;
 while(1) {
  $117 = $j;
  $118 = ($117|0)<(10);
  if (!($118)) {
   break;
  }
  _ran_array($x,199);
  $119 = $j;
  $120 = (($119) + 1)|0;
  $j = $120;
 }
 HEAP32[34536>>2] = 34528;
 STACKTOP = sp;return;
}
function _ran_arr_cycle() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[34536>>2]|0;
 $1 = ($0|0)==(34520|0);
 if ($1) {
  _ran_start(314159);
 }
 _ran_array(34544,1009);
 HEAP32[((34544 + 400|0))>>2] = -1;
 HEAP32[34536>>2] = ((34544 + 4|0));
 $2 = HEAP32[34544>>2]|0;
 return ($2|0);
}
function _ran_num_next() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[34536>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>=(0);
 if ($2) {
  $3 = HEAP32[34536>>2]|0;
  $4 = (($3) + 4|0);
  HEAP32[34536>>2] = $4;
  $5 = HEAP32[$3>>2]|0;
  $7 = $5;
  return ($7|0);
 } else {
  $6 = (_ran_arr_cycle()|0);
  $7 = $6;
  return ($7|0);
 }
 return (0)|0;
}
function _print_rtf_node_tree($out,$list,$scratch) {
 $out = $out|0;
 $list = $list|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $list;
 $2 = $scratch;
 while(1) {
  $3 = $1;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = $1;
  $7 = $2;
  _print_rtf_node($5,$6,$7);
  $8 = $1;
  $9 = (($8) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $1 = $10;
 }
 STACKTOP = sp;return;
}
function _print_rtf_node($out,$n,$scratch) {
 $out = $out|0;
 $n = $n|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $lev = 0, $old_type = 0, $temp = 0, $temp_link_data = 0, $temp_node = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer101 = 0, $vararg_buffer103 = 0, $vararg_buffer105 = 0, $vararg_buffer107 = 0, $vararg_buffer109 = 0, $vararg_buffer11 = 0;
 var $vararg_buffer111 = 0, $vararg_buffer113 = 0, $vararg_buffer115 = 0, $vararg_buffer117 = 0, $vararg_buffer119 = 0, $vararg_buffer121 = 0, $vararg_buffer123 = 0, $vararg_buffer125 = 0, $vararg_buffer128 = 0, $vararg_buffer13 = 0, $vararg_buffer131 = 0, $vararg_buffer133 = 0, $vararg_buffer135 = 0, $vararg_buffer137 = 0, $vararg_buffer139 = 0, $vararg_buffer141 = 0, $vararg_buffer143 = 0, $vararg_buffer145 = 0, $vararg_buffer147 = 0, $vararg_buffer15 = 0;
 var $vararg_buffer150 = 0, $vararg_buffer152 = 0, $vararg_buffer154 = 0, $vararg_buffer156 = 0, $vararg_buffer159 = 0, $vararg_buffer161 = 0, $vararg_buffer163 = 0, $vararg_buffer166 = 0, $vararg_buffer168 = 0, $vararg_buffer17 = 0, $vararg_buffer170 = 0, $vararg_buffer172 = 0, $vararg_buffer175 = 0, $vararg_buffer177 = 0, $vararg_buffer180 = 0, $vararg_buffer183 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0;
 var $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0, $vararg_buffer37 = 0, $vararg_buffer39 = 0, $vararg_buffer41 = 0, $vararg_buffer43 = 0, $vararg_buffer45 = 0, $vararg_buffer47 = 0, $vararg_buffer49 = 0, $vararg_buffer5 = 0, $vararg_buffer51 = 0, $vararg_buffer53 = 0, $vararg_buffer55 = 0, $vararg_buffer57 = 0, $vararg_buffer59 = 0, $vararg_buffer61 = 0;
 var $vararg_buffer64 = 0, $vararg_buffer68 = 0, $vararg_buffer7 = 0, $vararg_buffer70 = 0, $vararg_buffer74 = 0, $vararg_buffer76 = 0, $vararg_buffer78 = 0, $vararg_buffer80 = 0, $vararg_buffer82 = 0, $vararg_buffer85 = 0, $vararg_buffer87 = 0, $vararg_buffer89 = 0, $vararg_buffer9 = 0, $vararg_buffer91 = 0, $vararg_buffer93 = 0, $vararg_buffer95 = 0, $vararg_buffer97 = 0, $vararg_buffer99 = 0, $vararg_ptr63 = 0, $vararg_ptr67 = 0;
 var $vararg_ptr73 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 720|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer183 = sp + 680|0;
 $vararg_buffer180 = sp + 672|0;
 $vararg_buffer177 = sp + 664|0;
 $vararg_buffer175 = sp + 656|0;
 $vararg_buffer172 = sp + 648|0;
 $vararg_buffer170 = sp + 640|0;
 $vararg_buffer168 = sp + 632|0;
 $vararg_buffer166 = sp + 624|0;
 $vararg_buffer163 = sp + 616|0;
 $vararg_buffer161 = sp + 608|0;
 $vararg_buffer159 = sp + 600|0;
 $vararg_buffer156 = sp + 592|0;
 $vararg_buffer154 = sp + 584|0;
 $vararg_buffer152 = sp + 576|0;
 $vararg_buffer150 = sp + 568|0;
 $vararg_buffer147 = sp + 560|0;
 $vararg_buffer145 = sp + 552|0;
 $vararg_buffer143 = sp + 544|0;
 $vararg_buffer141 = sp + 536|0;
 $vararg_buffer139 = sp + 528|0;
 $vararg_buffer137 = sp + 520|0;
 $vararg_buffer135 = sp + 512|0;
 $vararg_buffer133 = sp + 504|0;
 $vararg_buffer131 = sp + 496|0;
 $vararg_buffer128 = sp + 488|0;
 $vararg_buffer125 = sp + 480|0;
 $vararg_buffer123 = sp + 472|0;
 $vararg_buffer121 = sp + 464|0;
 $vararg_buffer119 = sp + 456|0;
 $vararg_buffer117 = sp + 448|0;
 $vararg_buffer115 = sp + 440|0;
 $vararg_buffer113 = sp + 432|0;
 $vararg_buffer111 = sp + 424|0;
 $vararg_buffer109 = sp + 416|0;
 $vararg_buffer107 = sp + 408|0;
 $vararg_buffer105 = sp + 400|0;
 $vararg_buffer103 = sp + 392|0;
 $vararg_buffer101 = sp + 384|0;
 $vararg_buffer99 = sp + 376|0;
 $vararg_buffer97 = sp + 368|0;
 $vararg_buffer95 = sp + 360|0;
 $vararg_buffer93 = sp + 352|0;
 $vararg_buffer91 = sp + 344|0;
 $vararg_buffer89 = sp + 336|0;
 $vararg_buffer87 = sp + 328|0;
 $vararg_buffer85 = sp + 320|0;
 $vararg_buffer82 = sp + 312|0;
 $vararg_buffer80 = sp + 304|0;
 $vararg_buffer78 = sp + 296|0;
 $vararg_buffer76 = sp + 288|0;
 $vararg_buffer74 = sp + 280|0;
 $vararg_buffer70 = sp + 272|0;
 $vararg_buffer68 = sp + 264|0;
 $vararg_buffer64 = sp + 256|0;
 $vararg_buffer61 = sp + 248|0;
 $vararg_buffer59 = sp + 240|0;
 $vararg_buffer57 = sp + 232|0;
 $vararg_buffer55 = sp + 224|0;
 $vararg_buffer53 = sp + 216|0;
 $vararg_buffer51 = sp + 208|0;
 $vararg_buffer49 = sp + 200|0;
 $vararg_buffer47 = sp + 192|0;
 $vararg_buffer45 = sp + 184|0;
 $vararg_buffer43 = sp + 176|0;
 $vararg_buffer41 = sp + 168|0;
 $vararg_buffer39 = sp + 160|0;
 $vararg_buffer37 = sp + 152|0;
 $vararg_buffer35 = sp + 144|0;
 $vararg_buffer33 = sp + 136|0;
 $vararg_buffer31 = sp + 128|0;
 $vararg_buffer29 = sp + 120|0;
 $vararg_buffer27 = sp + 112|0;
 $vararg_buffer25 = sp + 104|0;
 $vararg_buffer23 = sp + 96|0;
 $vararg_buffer21 = sp + 88|0;
 $vararg_buffer19 = sp + 80|0;
 $vararg_buffer17 = sp + 72|0;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $n;
 $2 = $scratch;
 $3 = $1;
 $4 = HEAP16[$3>>1]|0;
 $5 = $4 << 16 >> 16;
 do {
  switch ($5|0) {
  case 22:  {
   $495 = $0;
   _g_string_append_printf($495,39584,$vararg_buffer111);
   $496 = $0;
   $497 = $1;
   $498 = (($497) + 12|0);
   $499 = HEAP32[$498>>2]|0;
   $500 = $2;
   _print_rtf_node_tree($496,$499,$500);
   $501 = $0;
   _g_string_append_printf($501,39560,$vararg_buffer113);
   STACKTOP = sp;return;
   break;
  }
  case 55:  {
   $388 = $1;
   $389 = (($388) + 4|0);
   $390 = HEAP32[$389>>2]|0;
   $391 = $2;
   $392 = (($391) + 16|0);
   HEAP32[$392>>2] = $390;
   STACKTOP = sp;return;
   break;
  }
  case 21:  {
   $488 = $0;
   _g_string_append_printf($488,39576,$vararg_buffer107);
   $489 = $0;
   $490 = $1;
   $491 = (($490) + 12|0);
   $492 = HEAP32[$491>>2]|0;
   $493 = $2;
   _print_rtf_node_tree($489,$492,$493);
   $494 = $0;
   _g_string_append_printf($494,39560,$vararg_buffer109);
   STACKTOP = sp;return;
   break;
  }
  case 30:  {
   $587 = $1;
   $588 = $2;
   $589 = (_note_number_for_node($587,$588)|0);
   $lev = $589;
   $590 = $2;
   $591 = (($590) + 48|0);
   $592 = HEAP32[$591>>2]|0;
   $593 = $lev;
   $594 = (_node_for_count($592,$593)|0);
   $temp_node = $594;
   $595 = $2;
   $596 = (($595) + 4|0);
   HEAP32[$596>>2] = 2;
   $597 = $0;
   _g_string_append_printf($597,39712,$vararg_buffer141);
   $598 = $0;
   $599 = $temp_node;
   $600 = (($599) + 12|0);
   $601 = HEAP32[$600>>2]|0;
   $602 = $2;
   _print_rtf_node_tree($598,$601,$602);
   $603 = $0;
   _g_string_append_printf($603,39560,$vararg_buffer143);
   $604 = $2;
   $605 = (($604) + 4|0);
   HEAP32[$605>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 53: case 54:  {
   STACKTOP = sp;return;
   break;
  }
  case 43: case 41:  {
   $233 = $0;
   $234 = $2;
   _pad_rtf($233,2,$234);
   $235 = $0;
   _g_string_append_printf($235,38936,$vararg_buffer35);
   $236 = $0;
   $237 = $1;
   $238 = (($237) + 4|0);
   $239 = HEAP32[$238>>2]|0;
   $240 = $2;
   _print_rtf_code_string($236,$239,$240);
   $241 = $0;
   _g_string_append_printf($241,38984,$vararg_buffer37);
   $242 = $2;
   $243 = (($242) + 4|0);
   HEAP32[$243>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 72: case 73:  {
   $614 = $1;
   $615 = (($614) + 8|0);
   $616 = HEAP32[$615>>2]|0;
   $617 = ($616|0)!=(0|0);
   if ($617) {
    $618 = $1;
    $619 = (($618) + 8|0);
    $620 = HEAP32[$619>>2]|0;
    $621 = HEAP32[$620>>2]|0;
    $622 = (_strncmp($621,45008,2)|0);
    $623 = ($622|0)==(0);
    if ($623) {
     $624 = $0;
     $625 = $1;
     $626 = (($625) + 8|0);
     $627 = HEAP32[$626>>2]|0;
     $628 = HEAP32[$627>>2]|0;
     HEAP32[$vararg_buffer147>>2] = $628;
     _g_string_append_printf($624,40832,$vararg_buffer147);
    } else {
     label = 141;
    }
   } else {
    label = 141;
   }
   if ((label|0) == 141) {
    $629 = $2;
    $630 = (($629) + 25|0);
    HEAP8[$630>>0] = 1;
    $lev = 0;
    $631 = $1;
    $632 = (($631) + 8|0);
    $633 = HEAP32[$632>>2]|0;
    $634 = ($633|0)!=(0|0);
    if ($634) {
     $635 = $1;
     $636 = (($635) + 8|0);
     $637 = HEAP32[$636>>2]|0;
     $638 = HEAP32[$637>>2]|0;
     $639 = $2;
     $640 = (_note_number_for_label($638,$639)|0);
     $lev = $640;
    }
    $641 = $lev;
    $642 = ($641|0)!=(0);
    if ($642) {
     $643 = $2;
     $644 = (($643) + 48|0);
     $645 = HEAP32[$644>>2]|0;
     $646 = $lev;
     $647 = (_node_for_count($645,$646)|0);
     $temp_node = $647;
     $648 = $temp_node;
     HEAP16[$648>>1] = 63;
     $649 = $lev;
     $650 = $2;
     $651 = (($650) + 64|0);
     $652 = HEAP32[$651>>2]|0;
     $653 = ($649|0)>($652|0);
     if ($653) {
      $654 = $lev;
      $655 = $2;
      $656 = (($655) + 64|0);
      HEAP32[$656>>2] = $654;
      $657 = $2;
      $658 = (($657) + 80|0);
      $659 = HEAP32[$658>>2]|0;
      $old_type = $659;
      $660 = $2;
      $661 = (($660) + 80|0);
      HEAP32[$661>>2] = 72;
      $662 = $0;
      _g_string_append_printf($662,39768,$vararg_buffer150);
      $663 = $2;
      $664 = (($663) + 4|0);
      HEAP32[$664>>2] = 2;
      $665 = $temp_node;
      $666 = (($665) + 12|0);
      $667 = HEAP32[$666>>2]|0;
      $668 = ($667|0)!=(0|0);
      if ($668) {
       $669 = $0;
       $670 = $temp_node;
       $671 = (($670) + 12|0);
       $672 = HEAP32[$671>>2]|0;
       $673 = $2;
       _print_rtf_node($669,$672,$673);
      }
      $674 = $0;
      $675 = $2;
      _pad($674,1,$675);
      $676 = $0;
      _g_string_append_printf($676,39560,$vararg_buffer152);
      $677 = $old_type;
      $678 = $2;
      $679 = (($678) + 80|0);
      HEAP32[$679>>2] = $677;
     } else {
      $680 = $0;
      _g_string_append_printf($680,39824,$vararg_buffer154);
     }
    } else {
     $681 = $1;
     $682 = (($681) + 8|0);
     $683 = HEAP32[$682>>2]|0;
     $684 = ($683|0)!=(0|0);
     if ($684) {
      $685 = $1;
      $686 = HEAP16[$685>>1]|0;
      $687 = $686 << 16 >> 16;
      $688 = ($687|0)==(73);
      if ($688) {
       $689 = $0;
       $690 = $1;
       $691 = (($690) + 8|0);
       $692 = HEAP32[$691>>2]|0;
       $693 = HEAP32[$692>>2]|0;
       HEAP32[$vararg_buffer156>>2] = $693;
       _g_string_append_printf($689,40832,$vararg_buffer156);
      } else {
       label = 153;
      }
     } else {
      label = 153;
     }
     if ((label|0) == 153) {
      $694 = $1;
      $695 = (($694) + 8|0);
      $696 = HEAP32[$695>>2]|0;
      $697 = ($696|0)!=(0|0);
      if ($697) {
       $698 = $0;
       _g_string_append_printf($698,40808,$vararg_buffer159);
       $699 = $1;
       $700 = (($699) + 12|0);
       $701 = HEAP32[$700>>2]|0;
       $702 = ($701|0)!=(0|0);
       if ($702) {
        $703 = $0;
        $704 = $1;
        $705 = (($704) + 12|0);
        $706 = HEAP32[$705>>2]|0;
        $707 = $2;
        _print_rtf_node($703,$706,$707);
        $708 = $0;
        _g_string_append_printf($708,39840,$vararg_buffer161);
       }
       $709 = $0;
       $710 = $1;
       $711 = (($710) + 8|0);
       $712 = HEAP32[$711>>2]|0;
       $713 = HEAP32[$712>>2]|0;
       HEAP32[$vararg_buffer163>>2] = $713;
       _g_string_append_printf($709,39848,$vararg_buffer163);
      }
     }
    }
   }
   $714 = $2;
   $715 = (($714) + 25|0);
   HEAP8[$715>>0] = 0;
   $716 = $1;
   $717 = (($716) + 16|0);
   $718 = HEAP32[$717>>2]|0;
   $719 = ($718|0)!=(0|0);
   if ($719) {
    $720 = $1;
    $721 = (($720) + 16|0);
    $722 = HEAP32[$721>>2]|0;
    $723 = HEAP16[$722>>1]|0;
    $724 = $723 << 16 >> 16;
    $725 = ($724|0)==(72);
    if ($725) {
     $726 = $0;
     _g_string_append_printf($726,42624,$vararg_buffer166);
    }
   }
   STACKTOP = sp;return;
   break;
  }
  case 37:  {
   $744 = $0;
   $745 = $2;
   _print_rtf_localized_typography($744,2,$745);
   $746 = $0;
   $747 = $1;
   $748 = (($747) + 12|0);
   $749 = HEAP32[$748>>2]|0;
   $750 = $2;
   _print_rtf_node_tree($746,$749,$750);
   $751 = $0;
   $752 = $2;
   _print_rtf_localized_typography($751,3,$752);
   STACKTOP = sp;return;
   break;
  }
  case 15: case 14: case 13: case 12: case 11: case 10:  {
   $266 = $1;
   $267 = HEAP16[$266>>1]|0;
   $268 = $267 << 16 >> 16;
   $269 = (($268) - 10)|0;
   $270 = $2;
   $271 = (($270) + 8|0);
   $272 = HEAP32[$271>>2]|0;
   $273 = (($269) + ($272))|0;
   $lev = $273;
   $274 = $lev;
   $275 = ($274|0)>(6);
   if ($275) {
    $lev = 6;
   }
   $276 = $0;
   $277 = $2;
   _pad_rtf($276,2,$277);
   $278 = $lev;
   switch ($278|0) {
   case 4:  {
    $282 = $0;
    _g_string_append_printf($282,39240,$vararg_buffer55);
    break;
   }
   case 6:  {
    $284 = $0;
    _g_string_append_printf($284,39320,$vararg_buffer59);
    break;
   }
   case 1:  {
    $279 = $0;
    _g_string_append_printf($279,39120,$vararg_buffer49);
    break;
   }
   case 3:  {
    $281 = $0;
    _g_string_append_printf($281,39200,$vararg_buffer53);
    break;
   }
   case 5:  {
    $283 = $0;
    _g_string_append_printf($283,39280,$vararg_buffer57);
    break;
   }
   case 2:  {
    $280 = $0;
    _g_string_append_printf($280,39160,$vararg_buffer51);
    break;
   }
   default: {
   }
   }
   $285 = $1;
   $286 = (($285) + 12|0);
   $287 = HEAP32[$286>>2]|0;
   $288 = HEAP16[$287>>1]|0;
   $289 = $288 << 16 >> 16;
   $290 = ($289|0)==(27);
   if ($290) {
    $291 = $1;
    $292 = (($291) + 12|0);
    $293 = HEAP32[$292>>2]|0;
    $294 = (($293) + 4|0);
    $295 = HEAP32[$294>>2]|0;
    $296 = (_label_from_string($295)|0);
    $temp = $296;
    $297 = $0;
    $298 = $temp;
    $299 = $temp;
    HEAP32[$vararg_buffer61>>2] = $298;
    $vararg_ptr63 = (($vararg_buffer61) + 4|0);
    HEAP32[$vararg_ptr63>>2] = $299;
    _g_string_append_printf($297,39360,$vararg_buffer61);
    $300 = $0;
    $301 = $1;
    $302 = (($301) + 12|0);
    $303 = HEAP32[$302>>2]|0;
    $304 = (($303) + 16|0);
    $305 = HEAP32[$304>>2]|0;
    $306 = $2;
    _print_rtf_node_tree($300,$305,$306);
   } else {
    $307 = $1;
    $308 = (($307) + 12|0);
    $309 = HEAP32[$308>>2]|0;
    $310 = (_label_from_node_tree($309)|0);
    $temp = $310;
    $311 = $0;
    $312 = $temp;
    $313 = $temp;
    HEAP32[$vararg_buffer64>>2] = $312;
    $vararg_ptr67 = (($vararg_buffer64) + 4|0);
    HEAP32[$vararg_ptr67>>2] = $313;
    _g_string_append_printf($311,39360,$vararg_buffer64);
    $314 = $0;
    $315 = $1;
    $316 = (($315) + 12|0);
    $317 = HEAP32[$316>>2]|0;
    $318 = $2;
    _print_rtf_node_tree($314,$317,$318);
   }
   $319 = $temp;
   _free($319);
   $320 = $0;
   _g_string_append_printf($320,39400,$vararg_buffer68);
   $321 = $2;
   $322 = (($321) + 4|0);
   HEAP32[$322>>2] = 1;
   STACKTOP = sp;return;
   break;
  }
  case 6: case 59:  {
   $758 = $0;
   $759 = $1;
   $760 = (($759) + 12|0);
   $761 = HEAP32[$760>>2]|0;
   $762 = $2;
   _print_rtf_node_tree($758,$761,$762);
   $763 = $0;
   _g_string_append_printf($763,39856,$vararg_buffer168);
   STACKTOP = sp;return;
   break;
  }
  case 61: case 4: case 66: case 65:  {
   STACKTOP = sp;return;
   break;
  }
  case 3:  {
   $727 = $0;
   $728 = $2;
   _print_rtf_localized_typography($727,7,$728);
   STACKTOP = sp;return;
   break;
  }
  case 17:  {
   $11 = $2;
   $12 = HEAP32[$11>>2]|0;
   $13 = $12 & 4;
   $14 = ($13|0)!=(0);
   if ($14) {
    STACKTOP = sp;return;
   } else {
    $15 = $0;
    _g_string_append_printf($15,38584,$vararg_buffer);
    $16 = $0;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = $2;
    _print_rtf_node_tree($16,$19,$20);
    $21 = $0;
    _g_string_append_printf($21,38592,$vararg_buffer1);
    $22 = $2;
    $23 = (($22) + 4|0);
    HEAP32[$23>>2] = 0;
    STACKTOP = sp;return;
   }
   break;
  }
  case 86:  {
   $813 = $0;
   $814 = $1;
   $815 = (($814) + 12|0);
   $816 = HEAP32[$815>>2]|0;
   $817 = $2;
   _print_rtf_node_tree($813,$816,$817);
   STACKTOP = sp;return;
   break;
  }
  case 81:  {
   $774 = $1;
   $775 = (($774) + 4|0);
   $776 = HEAP32[$775>>2]|0;
   $777 = $2;
   $778 = (($777) + 52|0);
   $779 = HEAP32[$778>>2]|0;
   $780 = (_metavalue_for_key($776,$779)|0);
   $temp = $780;
   $781 = $temp;
   $782 = ($781|0)==(0|0);
   if ($782) {
    $783 = $0;
    $784 = $1;
    $785 = (($784) + 4|0);
    $786 = HEAP32[$785>>2]|0;
    HEAP32[$vararg_buffer172>>2] = $786;
    _g_string_append_printf($783,39936,$vararg_buffer172);
   } else {
    $787 = $0;
    $788 = $temp;
    _g_string_append_printf($787,$788,$vararg_buffer175);
    $789 = $temp;
    _free($789);
   }
   STACKTOP = sp;return;
   break;
  }
  case 62: case 63: case 69:  {
   $764 = $2;
   $765 = (($764) + 25|0);
   $766 = HEAP8[$765>>0]|0;
   $767 = $766&1;
   if ($767) {
    $768 = $0;
    $769 = $1;
    $770 = (($769) + 12|0);
    $771 = HEAP32[$770>>2]|0;
    $772 = $2;
    _print_html_node_tree($768,$771,$772);
   }
   STACKTOP = sp;return;
   break;
  }
  case 28: case 29:  {
   $773 = $0;
   _g_string_append_printf($773,39864,$vararg_buffer170);
   STACKTOP = sp;return;
   break;
  }
  case 33:  {
   $729 = $0;
   $730 = $2;
   _print_rtf_localized_typography($729,6,$730);
   STACKTOP = sp;return;
   break;
  }
  case 5:  {
   $249 = $0;
   $250 = $2;
   _pad_rtf($249,2,$250);
   $251 = $2;
   $252 = (($251) + 80|0);
   $253 = HEAP32[$252>>2]|0;
   switch ($253|0) {
   case 43: case 41: case 31:  {
    $256 = $0;
    _g_string_append_printf($256,38936,$vararg_buffer43);
    break;
   }
   case 72: case 30:  {
    $255 = $0;
    _g_string_append_printf($255,39040,$vararg_buffer41);
    break;
   }
   case 38:  {
    $254 = $0;
    _g_string_append_printf($254,38992,$vararg_buffer39);
    break;
   }
   default: {
    $257 = $0;
    _g_string_append_printf($257,39088,$vararg_buffer45);
   }
   }
   $258 = $0;
   $259 = $1;
   $260 = (($259) + 12|0);
   $261 = HEAP32[$260>>2]|0;
   $262 = $2;
   _print_rtf_node_tree($258,$261,$262);
   $263 = $0;
   _g_string_append_printf($263,38984,$vararg_buffer47);
   $264 = $2;
   $265 = (($264) + 4|0);
   HEAP32[$265>>2] = 1;
   STACKTOP = sp;return;
   break;
  }
  case 49:  {
   $562 = $0;
   $563 = $2;
   _pad($562,2,$563);
   $564 = $0;
   _g_string_append_printf($564,39672,$vararg_buffer137);
   $565 = $2;
   $566 = (($565) + 4|0);
   HEAP32[$566>>2] = 0;
   $567 = $0;
   $568 = $1;
   $569 = (($568) + 12|0);
   $570 = HEAP32[$569>>2]|0;
   $571 = $2;
   _print_rtf_node_tree($567,$570,$571);
   STACKTOP = sp;return;
   break;
  }
  case 19:  {
   $203 = $1;
   $204 = (($203) + 4|0);
   $205 = HEAP32[$204>>2]|0;
   _trim_trailing_whitespace($205);
   $206 = $0;
   $207 = $1;
   $208 = (($207) + 4|0);
   $209 = HEAP32[$208>>2]|0;
   $210 = $2;
   _print_rtf_string($206,$209,$210);
   STACKTOP = sp;return;
   break;
  }
  case 60:  {
   $393 = $2;
   $394 = (($393) + 24|0);
   HEAP8[$394>>0] = 104;
   $395 = $0;
   $396 = $1;
   $397 = (($396) + 12|0);
   $398 = HEAP32[$397>>2]|0;
   $399 = $2;
   _print_rtf_node_tree($395,$398,$399);
   $400 = $2;
   $401 = (($400) + 24|0);
   HEAP8[$401>>0] = 100;
   STACKTOP = sp;return;
   break;
  }
  case 38:  {
   $216 = $2;
   $217 = (($216) + 80|0);
   $218 = HEAP32[$217>>2]|0;
   $old_type = $218;
   $219 = $2;
   $220 = (($219) + 80|0);
   HEAP32[$220>>2] = 38;
   $221 = $0;
   $222 = $2;
   _pad_rtf($221,2,$222);
   $223 = $0;
   $224 = $1;
   $225 = (($224) + 12|0);
   $226 = HEAP32[$225>>2]|0;
   $227 = $2;
   _print_rtf_node_tree($223,$226,$227);
   $228 = $2;
   $229 = (($228) + 4|0);
   HEAP32[$229>>2] = 1;
   $230 = $old_type;
   $231 = $2;
   $232 = (($231) + 80|0);
   HEAP32[$232>>2] = $230;
   STACKTOP = sp;return;
   break;
  }
  case 50:  {
   $581 = $0;
   _g_string_append_printf($581,39688,$vararg_buffer139);
   $582 = $0;
   $583 = $1;
   $584 = (($583) + 12|0);
   $585 = HEAP32[$584>>2]|0;
   $586 = $2;
   _print_rtf_node_tree($582,$585,$586);
   STACKTOP = sp;return;
   break;
  }
  case 48:  {
   $572 = $0;
   $573 = $2;
   _pad($572,2,$573);
   $574 = $2;
   $575 = (($574) + 4|0);
   HEAP32[$575>>2] = 0;
   $576 = $0;
   $577 = $1;
   $578 = (($577) + 12|0);
   $579 = HEAP32[$578>>2]|0;
   $580 = $2;
   _print_rtf_node_tree($576,$579,$580);
   STACKTOP = sp;return;
   break;
  }
  case 58:  {
   $402 = $2;
   $403 = (($402) + 20|0);
   HEAP32[$403>>2] = 0;
   $404 = $0;
   _g_string_append_printf($404,39464,$vararg_buffer80);
   $i = 0;
   while(1) {
    $405 = $i;
    $406 = $2;
    $407 = (($406) + 16|0);
    $408 = HEAP32[$407>>2]|0;
    $409 = (_strlen(($408|0))|0);
    $410 = ($405>>>0)<($409>>>0);
    if (!($410)) {
     break;
    }
    $411 = $0;
    $412 = $i;
    $413 = (($412) + 1)|0;
    HEAP32[$vararg_buffer82>>2] = $413;
    _g_string_append_printf($411,39488,$vararg_buffer82);
    $414 = $i;
    $415 = (($414) + 1)|0;
    $i = $415;
   }
   $416 = $0;
   $417 = $1;
   $418 = (($417) + 12|0);
   $419 = HEAP32[$418>>2]|0;
   $420 = $2;
   _print_rtf_node_tree($416,$419,$420);
   $421 = $0;
   _g_string_append_printf($421,39504,$vararg_buffer85);
   STACKTOP = sp;return;
   break;
  }
  case 56:  {
   $422 = $2;
   $423 = (($422) + 16|0);
   $424 = HEAP32[$423>>2]|0;
   $temp = $424;
   $425 = $2;
   $426 = (($425) + 20|0);
   $427 = HEAP32[$426>>2]|0;
   $428 = $temp;
   $429 = (($428) + ($427)|0);
   $430 = (_strncmp($429,47240,1)|0);
   $431 = ($430|0)==(0);
   if ($431) {
    $432 = $2;
    $433 = (($432) + 20|0);
    $434 = HEAP32[$433>>2]|0;
    $435 = (($434) + 1)|0;
    HEAP32[$433>>2] = $435;
   }
   $436 = $2;
   $437 = (($436) + 20|0);
   $438 = HEAP32[$437>>2]|0;
   $lev = $438;
   $439 = $0;
   _g_string_append_printf($439,39512,$vararg_buffer87);
   $440 = $2;
   $441 = (($440) + 24|0);
   $442 = HEAP8[$441>>0]|0;
   $443 = $442 << 24 >> 24;
   $444 = ($443|0)==(104);
   if ($444) {
    $445 = $0;
    _g_string_append_printf($445,39520,$vararg_buffer89);
   } else {
    $446 = $lev;
    $447 = $temp;
    $448 = (($447) + ($446)|0);
    $449 = (_strncmp($448,47264,1)|0);
    $450 = ($449|0)==(0);
    if ($450) {
     $451 = $0;
     _g_string_append_printf($451,39528,$vararg_buffer91);
    } else {
     $452 = $lev;
     $453 = $temp;
     $454 = (($453) + ($452)|0);
     $455 = (_strncmp($454,47352,1)|0);
     $456 = ($455|0)==(0);
     if ($456) {
      $457 = $0;
      _g_string_append_printf($457,39528,$vararg_buffer93);
     } else {
      $458 = $lev;
      $459 = $temp;
      $460 = (($459) + ($458)|0);
      $461 = (_strncmp($460,47296,1)|0);
      $462 = ($461|0)==(0);
      if ($462) {
       $463 = $0;
       _g_string_append_printf($463,39536,$vararg_buffer95);
      } else {
       $464 = $lev;
       $465 = $temp;
       $466 = (($465) + ($464)|0);
       $467 = (_strncmp($466,47384,1)|0);
       $468 = ($467|0)==(0);
       if ($468) {
        $469 = $0;
        _g_string_append_printf($469,39536,$vararg_buffer97);
       } else {
        $470 = $0;
        _g_string_append_printf($470,39544,$vararg_buffer99);
       }
      }
     }
    }
   }
   $471 = $0;
   _g_string_append_printf($471,39552,$vararg_buffer101);
   $472 = $0;
   $473 = $1;
   $474 = (($473) + 12|0);
   $475 = HEAP32[$474>>2]|0;
   $476 = $2;
   _print_rtf_node_tree($472,$475,$476);
   $477 = $2;
   $478 = (($477) + 24|0);
   $479 = HEAP8[$478>>0]|0;
   $480 = $479 << 24 >> 24;
   $481 = ($480|0)==(104);
   if ($481) {
    $482 = $0;
    _g_string_append_printf($482,39560,$vararg_buffer103);
   }
   $483 = $0;
   _g_string_append_printf($483,39568,$vararg_buffer105);
   $484 = $2;
   $485 = (($484) + 20|0);
   $486 = HEAP32[$485>>2]|0;
   $487 = (($486) + 1)|0;
   HEAP32[$485>>2] = $487;
   STACKTOP = sp;return;
   break;
  }
  case 23:  {
   $503 = $1;
   $504 = $2;
   $505 = (_load_link_data($503,$504)|0);
   $temp_link_data = $505;
   $506 = $temp_link_data;
   $507 = ($506|0)==(0|0);
   if (!($507)) {
    $544 = $0;
    _g_string_append_printf($544,39616,$vararg_buffer131);
    $545 = $0;
    $546 = $temp_link_data;
    $547 = (($546) + 4|0);
    $548 = HEAP32[$547>>2]|0;
    $549 = $2;
    _print_rtf_string($545,$548,$549);
    $550 = $0;
    _g_string_append_printf($550,39648,$vararg_buffer133);
    $551 = $1;
    $552 = (($551) + 12|0);
    $553 = HEAP32[$552>>2]|0;
    $554 = ($553|0)!=(0|0);
    if ($554) {
     $555 = $0;
     $556 = $1;
     $557 = (($556) + 12|0);
     $558 = HEAP32[$557>>2]|0;
     $559 = $2;
     _print_rtf_node_tree($555,$558,$559);
    }
    $560 = $0;
    _g_string_append_printf($560,39664,$vararg_buffer135);
    $561 = $temp_link_data;
    _free($561);
    STACKTOP = sp;return;
   }
   $508 = $0;
   _g_string_append_printf($508,40808,$vararg_buffer117);
   $509 = $0;
   $510 = $1;
   $511 = (($510) + 12|0);
   $512 = HEAP32[$511>>2]|0;
   $513 = $2;
   _print_rtf_node($509,$512,$513);
   $514 = $0;
   _g_string_append_printf($514,39600,$vararg_buffer119);
   $515 = $1;
   $516 = (($515) + 12|0);
   $517 = HEAP32[$516>>2]|0;
   $518 = (($517) + 16|0);
   $519 = HEAP32[$518>>2]|0;
   $520 = ($519|0)!=(0|0);
   if ($520) {
    $521 = $0;
    _g_string_append_printf($521,40808,$vararg_buffer121);
    $522 = $0;
    $523 = $1;
    $524 = (($523) + 12|0);
    $525 = HEAP32[$524>>2]|0;
    $526 = (($525) + 16|0);
    $527 = HEAP32[$526>>2]|0;
    $528 = $2;
    _print_rtf_node_tree($522,$527,$528);
    $529 = $0;
    _g_string_append_printf($529,39600,$vararg_buffer123);
   } else {
    $530 = $1;
    $531 = (($530) + 4|0);
    $532 = HEAP32[$531>>2]|0;
    $533 = ($532|0)!=(0|0);
    if ($533) {
     $534 = $0;
     $535 = $1;
     $536 = (($535) + 4|0);
     $537 = HEAP32[$536>>2]|0;
     HEAP32[$vararg_buffer125>>2] = $537;
     _g_string_append_printf($534,40832,$vararg_buffer125);
    } else {
     $538 = $0;
     $539 = $1;
     $540 = (($539) + 8|0);
     $541 = HEAP32[$540>>2]|0;
     $542 = HEAP32[$541>>2]|0;
     HEAP32[$vararg_buffer128>>2] = $542;
     _g_string_append_printf($538,39608,$vararg_buffer128);
    }
   }
   $543 = $temp_link_data;
   _free_link_data($543);
   STACKTOP = sp;return;
   break;
  }
  case 34:  {
   $733 = $0;
   $734 = $2;
   _print_rtf_localized_typography($733,4,$734);
   STACKTOP = sp;return;
   break;
  }
  case 35:  {
   $731 = $0;
   $732 = $2;
   _print_rtf_localized_typography($731,5,$732);
   STACKTOP = sp;return;
   break;
  }
  case 39:  {
   $211 = $0;
   $212 = $1;
   $213 = (($212) + 12|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = $2;
   _print_rtf_node_tree($211,$214,$215);
   STACKTOP = sp;return;
   break;
  }
  case 31:  {
   $244 = $0;
   $245 = $1;
   $246 = (($245) + 12|0);
   $247 = HEAP32[$246>>2]|0;
   $248 = $2;
   _print_rtf_node_tree($244,$247,$248);
   STACKTOP = sp;return;
   break;
  }
  case 36:  {
   $735 = $0;
   $736 = $2;
   _print_rtf_localized_typography($735,0,$736);
   $737 = $0;
   $738 = $1;
   $739 = (($738) + 12|0);
   $740 = HEAP32[$739>>2]|0;
   $741 = $2;
   _print_rtf_node_tree($737,$740,$741);
   $742 = $0;
   $743 = $2;
   _print_rtf_localized_typography($742,1,$743);
   STACKTOP = sp;return;
   break;
  }
  case 7:  {
   $502 = $0;
   _g_string_append_printf($502,39592,$vararg_buffer115);
   STACKTOP = sp;return;
   break;
  }
  case 18:  {
   $24 = $1;
   $25 = (($24) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (_label_from_string($26)|0);
   $temp = $27;
   $28 = $1;
   $29 = (($28) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   _free($30);
   $31 = $temp;
   $32 = $1;
   $33 = (($32) + 4|0);
   HEAP32[$33>>2] = $31;
   $34 = $1;
   $35 = (($34) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (_strcmp($36,38600)|0);
   $38 = ($37|0)==(0);
   if ($38) {
    $39 = $1;
    $40 = (($39) + 12|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($41) + 4|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (_atoi($43)|0);
    $45 = $2;
    $46 = (($45) + 8|0);
    HEAP32[$46>>2] = $44;
    STACKTOP = sp;return;
   }
   $47 = $1;
   $48 = (($47) + 4|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (_strcmp($49,38616)|0);
   $51 = ($50|0)==(0);
   if ($51) {
    $52 = $1;
    $53 = (($52) + 12|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (($54) + 4|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = (_atoi($56)|0);
    $58 = $2;
    $59 = (($58) + 8|0);
    HEAP32[$59>>2] = $57;
    STACKTOP = sp;return;
   }
   $60 = $1;
   $61 = (($60) + 4|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (_strcmp($62,38632)|0);
   $64 = ($63|0)==(0);
   if ($64) {
    $65 = $1;
    $66 = (($65) + 12|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = (_label_from_node_tree($67)|0);
    $temp = $68;
    $69 = $temp;
    $70 = (_strcmp($69,38648)|0);
    $71 = ($70|0)==(0);
    if ($71) {
     label = 13;
    } else {
     $72 = $temp;
     $73 = (_strcmp($72,38656)|0);
     $74 = ($73|0)==(0);
     if ($74) {
      label = 13;
     } else {
      $77 = $temp;
      $78 = (_strcmp($77,38664)|0);
      $79 = ($78|0)==(0);
      if ($79) {
       label = 16;
      } else {
       $80 = $temp;
       $81 = (_strcmp($80,38672)|0);
       $82 = ($81|0)==(0);
       if ($82) {
        label = 16;
       } else {
        $85 = $temp;
        $86 = (_strcmp($85,38680)|0);
        $87 = ($86|0)==(0);
        if ($87) {
         $88 = $2;
         $89 = (($88) + 12|0);
         HEAP32[$89>>2] = 4;
        } else {
         $90 = $temp;
         $91 = (_strcmp($90,38704)|0);
         $92 = ($91|0)==(0);
         if ($92) {
          label = 21;
         } else {
          $93 = $temp;
          $94 = (_strcmp($93,38712)|0);
          $95 = ($94|0)==(0);
          if ($95) {
           label = 21;
          } else {
           $98 = $temp;
           $99 = (_strcmp($98,38720)|0);
           $100 = ($99|0)==(0);
           if ($100) {
            label = 24;
           } else {
            $101 = $temp;
            $102 = (_strcmp($101,38728)|0);
            $103 = ($102|0)==(0);
            if ($103) {
             label = 24;
            }
           }
           if ((label|0) == 24) {
            $104 = $2;
            $105 = (($104) + 12|0);
            HEAP32[$105>>2] = 5;
           }
          }
         }
         if ((label|0) == 21) {
          $96 = $2;
          $97 = (($96) + 12|0);
          HEAP32[$97>>2] = 2;
         }
        }
       }
      }
      if ((label|0) == 16) {
       $83 = $2;
       $84 = (($83) + 12|0);
       HEAP32[$84>>2] = 3;
      }
     }
    }
    if ((label|0) == 13) {
     $75 = $2;
     $76 = (($75) + 12|0);
     HEAP32[$76>>2] = 1;
    }
    $106 = $temp;
    _free($106);
    STACKTOP = sp;return;
   }
   $107 = $1;
   $108 = (($107) + 4|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = (_strcmp($109,38736)|0);
   $111 = ($110|0)==(0);
   if ($111) {
    $112 = $0;
    _g_string_append_printf($112,38744,$vararg_buffer3);
    $113 = $0;
    $114 = $1;
    $115 = (($114) + 12|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = $2;
    _print_rtf_node($113,$116,$117);
    $118 = $0;
    _g_string_append_printf($118,38592,$vararg_buffer5);
   } else {
    $119 = $1;
    $120 = (($119) + 4|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = (_strcmp($121,38760)|0);
    $123 = ($122|0)==(0);
    if ($123) {
     $124 = $0;
     _g_string_append_printf($124,38768,$vararg_buffer7);
     $125 = $0;
     $126 = $1;
     $127 = (($126) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = $2;
     _print_rtf_node($125,$128,$129);
     $130 = $0;
     _g_string_append_printf($130,38592,$vararg_buffer9);
    } else {
     $131 = $1;
     $132 = (($131) + 4|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = (_strcmp($133,38784)|0);
     $135 = ($134|0)==(0);
     if ($135) {
      $136 = $0;
      _g_string_append_printf($136,38800,$vararg_buffer11);
      $137 = $0;
      $138 = $1;
      $139 = (($138) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = $2;
      _print_rtf_node($137,$140,$141);
      $142 = $0;
      _g_string_append_printf($142,38592,$vararg_buffer13);
     } else {
      $143 = $1;
      $144 = (($143) + 4|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = (_strcmp($145,38816)|0);
      $147 = ($146|0)==(0);
      if ($147) {
       $148 = $0;
       _g_string_append_printf($148,38800,$vararg_buffer15);
       $149 = $0;
       $150 = $1;
       $151 = (($150) + 12|0);
       $152 = HEAP32[$151>>2]|0;
       $153 = $2;
       _print_rtf_node($149,$152,$153);
       $154 = $0;
       _g_string_append_printf($154,38592,$vararg_buffer17);
      } else {
       $155 = $1;
       $156 = (($155) + 4|0);
       $157 = HEAP32[$156>>2]|0;
       $158 = (_strcmp($157,38824)|0);
       $159 = ($158|0)==(0);
       if ($159) {
        $160 = $0;
        _g_string_append_printf($160,38840,$vararg_buffer19);
        $161 = $0;
        $162 = $1;
        $163 = (($162) + 12|0);
        $164 = HEAP32[$163>>2]|0;
        $165 = $2;
        _print_rtf_node($161,$164,$165);
        $166 = $0;
        _g_string_append_printf($166,38592,$vararg_buffer21);
       } else {
        $167 = $1;
        $168 = (($167) + 4|0);
        $169 = HEAP32[$168>>2]|0;
        $170 = (_strcmp($169,38856)|0);
        $171 = ($170|0)==(0);
        if ($171) {
         $172 = $0;
         _g_string_append_printf($172,38872,$vararg_buffer23);
         $173 = $0;
         $174 = $1;
         $175 = (($174) + 12|0);
         $176 = HEAP32[$175>>2]|0;
         $177 = $2;
         _print_rtf_node($173,$176,$177);
         $178 = $0;
         _g_string_append_printf($178,38592,$vararg_buffer25);
        } else {
         $179 = $1;
         $180 = (($179) + 4|0);
         $181 = HEAP32[$180>>2]|0;
         $182 = (_strcmp($181,38888)|0);
         $183 = ($182|0)==(0);
         if ($183) {
          $184 = $0;
          _g_string_append_printf($184,38896,$vararg_buffer27);
          $185 = $0;
          $186 = $1;
          $187 = (($186) + 12|0);
          $188 = HEAP32[$187>>2]|0;
          $189 = $2;
          _print_rtf_node($185,$188,$189);
          $190 = $0;
          _g_string_append_printf($190,38592,$vararg_buffer29);
         } else {
          $191 = $1;
          $192 = (($191) + 4|0);
          $193 = HEAP32[$192>>2]|0;
          $194 = (_strcmp($193,38912)|0);
          $195 = ($194|0)==(0);
          if ($195) {
           $196 = $0;
           _g_string_append_printf($196,38920,$vararg_buffer31);
           $197 = $0;
           $198 = $1;
           $199 = (($198) + 12|0);
           $200 = HEAP32[$199>>2]|0;
           $201 = $2;
           _print_rtf_node($197,$200,$201);
           $202 = $0;
           _g_string_append_printf($202,38592,$vararg_buffer33);
          }
         }
        }
       }
      }
     }
    }
   }
   STACKTOP = sp;return;
   break;
  }
  case 70:  {
   STACKTOP = sp;return;
   break;
  }
  case 71:  {
   $606 = $0;
   $607 = $1;
   $608 = (($607) + 12|0);
   $609 = HEAP32[$608>>2]|0;
   $610 = (($609) + 4|0);
   $611 = HEAP32[$610>>2]|0;
   $612 = $2;
   _print_rtf_string($606,$611,$612);
   $613 = $0;
   _g_string_append_printf($613,39760,$vararg_buffer145);
   STACKTOP = sp;return;
   break;
  }
  case 20: case 2: case 8:  {
   $6 = $0;
   $7 = $1;
   $8 = (($7) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $2;
   _print_rtf_string($6,$9,$10);
   STACKTOP = sp;return;
   break;
  }
  case 51:  {
   $790 = $1;
   $791 = (($790) + 4|0);
   $792 = HEAP32[$791>>2]|0;
   $793 = (_strncmp($792,42136,4)|0);
   $794 = ($793|0)==(0);
   if ($794) {
    $795 = $0;
    $796 = $2;
    _pad($795,2,$796);
    $797 = $1;
    $798 = (($797) + 4|0);
    $799 = HEAP32[$798>>2]|0;
    $800 = (_strlen(($799|0))|0);
    $801 = (($800) - 3)|0;
    $802 = $1;
    $803 = (($802) + 4|0);
    $804 = HEAP32[$803>>2]|0;
    $805 = (($804) + ($801)|0);
    HEAP8[$805>>0] = 0;
    $806 = $0;
    $807 = $1;
    $808 = (($807) + 4|0);
    $809 = HEAP32[$808>>2]|0;
    $810 = (($809) + 4|0);
    HEAP32[$vararg_buffer177>>2] = $810;
    _g_string_append_printf($806,40832,$vararg_buffer177);
    $811 = $2;
    $812 = (($811) + 4|0);
    HEAP32[$812>>2] = 0;
   }
   STACKTOP = sp;return;
   break;
  }
  case 52:  {
   $323 = $1;
   $324 = (($323) + 12|0);
   $325 = HEAP32[$324>>2]|0;
   $326 = ($325|0)!=(0|0);
   if ($326) {
    $327 = $1;
    $328 = (($327) + 12|0);
    $329 = HEAP32[$328>>2]|0;
    $330 = HEAP16[$329>>1]|0;
    $331 = $330 << 16 >> 16;
    $332 = ($331|0)==(53);
    if ($332) {
     $333 = $1;
     $334 = (($333) + 12|0);
     $335 = HEAP32[$334>>2]|0;
     $336 = (($335) + 12|0);
     $337 = HEAP32[$336>>2]|0;
     $338 = HEAP16[$337>>1]|0;
     $339 = $338 << 16 >> 16;
     $340 = ($339|0)==(54);
     if ($340) {
      $341 = $1;
      $342 = (($341) + 12|0);
      $343 = HEAP32[$342>>2]|0;
      $344 = (($343) + 12|0);
      $345 = HEAP32[$344>>2]|0;
      $346 = (($345) + 4|0);
      $347 = HEAP32[$346>>2]|0;
      $348 = (_label_from_string($347)|0);
      $temp = $348;
     } else {
      $349 = $1;
      $350 = (($349) + 12|0);
      $351 = HEAP32[$350>>2]|0;
      $352 = (($351) + 12|0);
      $353 = HEAP32[$352>>2]|0;
      $354 = (_label_from_node_tree($353)|0);
      $temp = $354;
     }
     $355 = $0;
     $356 = $temp;
     $357 = $temp;
     HEAP32[$vararg_buffer70>>2] = $356;
     $vararg_ptr73 = (($vararg_buffer70) + 4|0);
     HEAP32[$vararg_ptr73>>2] = $357;
     _g_string_append_printf($355,39360,$vararg_buffer70);
     $358 = $temp;
     _free($358);
    }
   }
   $359 = $0;
   $360 = $2;
   _pad_rtf($359,2,$360);
   $361 = $0;
   $362 = $1;
   $363 = (($362) + 12|0);
   $364 = HEAP32[$363>>2]|0;
   $365 = $2;
   _print_rtf_node_tree($361,$364,$365);
   $366 = $1;
   $367 = (($366) + 12|0);
   $368 = HEAP32[$367>>2]|0;
   $369 = ($368|0)!=(0|0);
   if ($369) {
    $370 = $1;
    $371 = (($370) + 12|0);
    $372 = HEAP32[$371>>2]|0;
    $373 = HEAP16[$372>>1]|0;
    $374 = $373 << 16 >> 16;
    $375 = ($374|0)==(53);
    if ($375) {
     $376 = $0;
     _g_string_append_printf($376,39408,$vararg_buffer74);
     $377 = $0;
     $378 = $1;
     $379 = (($378) + 12|0);
     $380 = HEAP32[$379>>2]|0;
     $381 = (($380) + 12|0);
     $382 = HEAP32[$381>>2]|0;
     $383 = $2;
     _print_rtf_node_tree($377,$382,$383);
     $384 = $0;
     _g_string_append_printf($384,39400,$vararg_buffer76);
    }
   }
   $385 = $0;
   _g_string_append_printf($385,39448,$vararg_buffer78);
   $386 = $2;
   $387 = (($386) + 4|0);
   HEAP32[$387>>2] = 1;
   STACKTOP = sp;return;
   break;
  }
  case 9: case 1:  {
   $753 = $0;
   $754 = $1;
   $755 = (($754) + 12|0);
   $756 = HEAP32[$755>>2]|0;
   $757 = $2;
   _print_rtf_node_tree($753,$756,$757);
   STACKTOP = sp;return;
   break;
  }
  default: {
   $818 = HEAP32[_stderr>>2]|0;
   $819 = $1;
   $820 = HEAP16[$819>>1]|0;
   $821 = $820 << 16 >> 16;
   HEAP32[$vararg_buffer180>>2] = $821;
   (_fprintf(($818|0),(39944|0),($vararg_buffer180|0))|0);
   $822 = $0;
   $823 = $1;
   $824 = (($823) + 4|0);
   $825 = HEAP32[$824>>2]|0;
   HEAP32[$vararg_buffer183>>2] = $825;
   _g_string_append_printf($822,40832,$vararg_buffer183);
   STACKTOP = sp;return;
  }
  }
 } while(0);
}
function _print_rtf_string($out,$str,$scratch) {
 $out = $out|0;
 $str = $str|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $str;
 $2 = $scratch;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 while(1) {
  $5 = $1;
  $6 = HEAP8[$5>>0]|0;
  $7 = $6 << 24 >> 24;
  $8 = ($7|0)!=(0);
  if (!($8)) {
   break;
  }
  $9 = $1;
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  if ((($11|0) == 10)) {
   $15 = $0;
   _g_string_append_printf($15,40720,$vararg_buffer5);
   label = 10;
  } else if ((($11|0) == 125)) {
   $14 = $0;
   _g_string_append_printf($14,40712,$vararg_buffer3);
  } else if ((($11|0) == 123)) {
   $13 = $0;
   _g_string_append_printf($13,40704,$vararg_buffer1);
  } else if ((($11|0) == 92)) {
   $12 = $0;
   _g_string_append_printf($12,40696,$vararg_buffer);
  } else {
   label = 10;
  }
  if ((label|0) == 10) {
   label = 0;
   $16 = $0;
   $17 = $1;
   $18 = HEAP8[$17>>0]|0;
   _g_string_append_c($16,$18);
  }
  $19 = $1;
  $20 = (($19) + 1|0);
  $1 = $20;
 }
 STACKTOP = sp;return;
}
function _pad_rtf($out,$num,$scratch) {
 $out = $out|0;
 $num = $num|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $num;
 $2 = $scratch;
 while(1) {
  $3 = $1;
  $4 = (($3) + -1)|0;
  $1 = $4;
  $5 = $2;
  $6 = (($5) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($3|0)>($7|0);
  if (!($8)) {
   break;
  }
  $9 = $0;
  _g_string_append_printf($9,42896,$vararg_buffer);
 }
 $10 = $1;
 $11 = $2;
 $12 = (($11) + 4|0);
 HEAP32[$12>>2] = $10;
 STACKTOP = sp;return;
}
function _print_rtf_code_string($out,$str,$scratch) {
 $out = $out|0;
 $str = $str|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $str;
 $2 = $scratch;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 while(1) {
  $5 = $1;
  $6 = HEAP8[$5>>0]|0;
  $7 = $6 << 24 >> 24;
  $8 = ($7|0)!=(0);
  if (!($8)) {
   break;
  }
  $9 = $1;
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  if ((($11|0) == 92)) {
   $12 = $0;
   _g_string_append_printf($12,40696,$vararg_buffer);
  } else if ((($11|0) == 10)) {
   $15 = $0;
   _g_string_append_printf($15,39856,$vararg_buffer5);
  } else if ((($11|0) == 123)) {
   $13 = $0;
   _g_string_append_printf($13,40704,$vararg_buffer1);
  } else if ((($11|0) == 125)) {
   $14 = $0;
   _g_string_append_printf($14,40712,$vararg_buffer3);
  } else {
   $16 = $0;
   $17 = $1;
   $18 = HEAP8[$17>>0]|0;
   _g_string_append_c($16,$18);
  }
  $19 = $1;
  $20 = (($19) + 1|0);
  $1 = $20;
 }
 STACKTOP = sp;return;
}
function _print_rtf_localized_typography($out,$character,$scratch) {
 $out = $out|0;
 $character = $character|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0;
 var $vararg_buffer37 = 0, $vararg_buffer39 = 0, $vararg_buffer41 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer41 = sp + 168|0;
 $vararg_buffer39 = sp + 160|0;
 $vararg_buffer37 = sp + 152|0;
 $vararg_buffer35 = sp + 144|0;
 $vararg_buffer33 = sp + 136|0;
 $vararg_buffer31 = sp + 128|0;
 $vararg_buffer29 = sp + 120|0;
 $vararg_buffer27 = sp + 112|0;
 $vararg_buffer25 = sp + 104|0;
 $vararg_buffer23 = sp + 96|0;
 $vararg_buffer21 = sp + 88|0;
 $vararg_buffer19 = sp + 80|0;
 $vararg_buffer17 = sp + 72|0;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $character;
 $2 = $scratch;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (_extension(16,$4)|0);
 if (!($5)) {
  $6 = $0;
  $7 = $1;
  $8 = $7&255;
  _g_string_append_c($6,$8);
  STACKTOP = sp;return;
 }
 $9 = $1;
 switch ($9|0) {
 case 6:  {
  $43 = $0;
  _g_string_append_printf($43,40688,$vararg_buffer41);
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $41 = $0;
  _g_string_append_printf($41,40672,$vararg_buffer37);
  STACKTOP = sp;return;
  break;
 }
 case 0:  {
  $10 = $2;
  $11 = (($10) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  if ((($12|0) == 4)) {
   $16 = $0;
   _g_string_append_printf($16,40568,$vararg_buffer5);
  } else if ((($12|0) == 5)) {
   $13 = $0;
   _g_string_append_printf($13,40544,$vararg_buffer);
  } else if ((($12|0) == 2)) {
   $14 = $0;
   _g_string_append_printf($14,40552,$vararg_buffer1);
  } else if ((($12|0) == 3)) {
   $15 = $0;
   _g_string_append_printf($15,40560,$vararg_buffer3);
  } else {
   $17 = $0;
   _g_string_append_printf($17,40576,$vararg_buffer7);
  }
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $33 = $2;
  $34 = (($33) + 12|0);
  $35 = HEAP32[$34>>2]|0;
  switch ($35|0) {
  case 1: case 5:  {
   $36 = $0;
   _g_string_append_printf($36,40640,$vararg_buffer27);
   break;
  }
  case 2:  {
   $39 = $0;
   _g_string_append_printf($39,40624,$vararg_buffer33);
   break;
  }
  case 3:  {
   $37 = $0;
   _g_string_append_printf($37,40656,$vararg_buffer29);
   break;
  }
  case 4:  {
   $38 = $0;
   _g_string_append_printf($38,40632,$vararg_buffer31);
   break;
  }
  default: {
   $40 = $0;
   _g_string_append_printf($40,40664,$vararg_buffer35);
  }
  }
  STACKTOP = sp;return;
  break;
 }
 case 5:  {
  $42 = $0;
  _g_string_append_printf($42,40680,$vararg_buffer39);
  STACKTOP = sp;return;
  break;
 }
 case 7:  {
  $24 = $0;
  _g_string_append_printf($24,40608,$vararg_buffer15);
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $18 = $2;
  $19 = (($18) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  if ((($20|0) == 4)) {
   $22 = $0;
   _g_string_append_printf($22,40592,$vararg_buffer11);
  } else if ((($20|0) == 3)) {
   $21 = $0;
   _g_string_append_printf($21,40584,$vararg_buffer9);
  } else {
   $23 = $0;
   _g_string_append_printf($23,40600,$vararg_buffer13);
  }
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $25 = $2;
  $26 = (($25) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  switch ($27|0) {
  case 2:  {
   $30 = $0;
   _g_string_append_printf($30,40632,$vararg_buffer21);
   break;
  }
  case 4:  {
   $29 = $0;
   _g_string_append_printf($29,40624,$vararg_buffer19);
   break;
  }
  case 5:  {
   $31 = $0;
   _g_string_append_printf($31,40640,$vararg_buffer23);
   break;
  }
  case 3: case 1:  {
   $28 = $0;
   _g_string_append_printf($28,40616,$vararg_buffer17);
   break;
  }
  default: {
   $32 = $0;
   _g_string_append_printf($32,40648,$vararg_buffer25);
  }
  }
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _begin_rtf_output($out,$list,$scratch) {
 $out = $out|0;
 $list = $list|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $list;
 $2 = $scratch;
 $3 = $0;
 _g_string_append_printf($3,40000,$vararg_buffer);
 STACKTOP = sp;return;
}
function _end_rtf_output($out,$list,$scratch) {
 $out = $out|0;
 $list = $list|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $list;
 $2 = $scratch;
 $3 = $0;
 _g_string_append_printf($3,38592,$vararg_buffer);
 STACKTOP = sp;return;
}
function _print_text_node_tree($out,$list,$scratch) {
 $out = $out|0;
 $list = $list|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $list;
 $2 = $scratch;
 while(1) {
  $3 = $1;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = $1;
  $7 = $2;
  _print_text_node($5,$6,$7);
  $8 = $1;
  $9 = (($8) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $1 = $10;
 }
 STACKTOP = sp;return;
}
function _print_text_node($out,$n,$scratch) {
 $out = $out|0;
 $n = $n|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $n;
 $2 = $scratch;
 $3 = $1;
 $4 = HEAP16[$3>>1]|0;
 $5 = $4 << 16 >> 16;
 switch ($5|0) {
 case 18:  {
  $15 = $0;
  $16 = $1;
  $17 = (($16) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $18;
  _g_string_append_printf($15,40728,$vararg_buffer1);
  $19 = $0;
  $20 = $1;
  $21 = (($20) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $2;
  _print_text_node($19,$22,$23);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $6 = $0;
  $7 = $1;
  $8 = (($7) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  _g_string_append_printf($6,40832,$vararg_buffer);
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  STACKTOP = sp;return;
  break;
 }
 case 17:  {
  $10 = $0;
  $11 = $1;
  $12 = (($11) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $2;
  _print_text_node_tree($10,$13,$14);
  STACKTOP = sp;return;
  break;
 }
 case 19:  {
  $24 = $0;
  $25 = $1;
  $26 = (($25) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $27;
  _g_string_append_printf($24,40832,$vararg_buffer4);
  $28 = $0;
  $29 = $2;
  _pad($28,1,$29);
  STACKTOP = sp;return;
  break;
 }
 default: {
  $30 = HEAP32[_stderr>>2]|0;
  $31 = $1;
  $32 = HEAP16[$31>>1]|0;
  $33 = $32 << 16 >> 16;
  HEAP32[$vararg_buffer7>>2] = $33;
  (_fprintf(($30|0),(40736|0),($vararg_buffer7|0))|0);
  _exit(1);
  // unreachable;
 }
 }
}
function _print_toc_node_tree($out,$list,$scratch) {
 $out = $out|0;
 $list = $list|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $list;
 $2 = $scratch;
 while(1) {
  $3 = $1;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $1;
  $6 = HEAP16[$5>>1]|0;
  $7 = $6 << 16 >> 16;
  $8 = ($7|0)==(9);
  if ($8) {
   $9 = $1;
   $10 = (($9) + 12|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = HEAP16[$11>>1]|0;
   $13 = $12 << 16 >> 16;
   $lev = $13;
   $14 = $0;
   $15 = $1;
   $16 = $2;
   _print_toc_section_and_children($14,$15,$16);
   while(1) {
    $17 = $1;
    $18 = (($17) + 16|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)!=(0|0);
    if ($20) {
     $21 = $1;
     $22 = (($21) + 16|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = HEAP16[$23>>1]|0;
     $25 = $24 << 16 >> 16;
     $26 = ($25|0)==(9);
     if ($26) {
      $27 = $1;
      $28 = (($27) + 16|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($29) + 12|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = HEAP16[$31>>1]|0;
      $33 = $32 << 16 >> 16;
      $34 = $lev;
      $35 = ($33|0)>($34|0);
      $45 = $35;
     } else {
      $45 = 0;
     }
    } else {
     $45 = 0;
    }
    if (!($45)) {
     break;
    }
    $36 = $1;
    $37 = (($36) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $1 = $38;
   }
  } else {
   $39 = $0;
   $40 = $1;
   $41 = $2;
   _print_toc_node($39,$40,$41);
  }
  $42 = $1;
  $43 = (($42) + 16|0);
  $44 = HEAP32[$43>>2]|0;
  $1 = $44;
 }
 STACKTOP = sp;return;
}
function _print_toc_section_and_children($out,$list,$scratch) {
 $out = $out|0;
 $list = $list|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $list;
 $2 = $scratch;
 $3 = $1;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 << 16 >> 16;
 $lev = $7;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 _print_toc_node($8,$9,$10);
 $11 = $2;
 $12 = (($11) + 92|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 1)|0;
 HEAP32[$12>>2] = $14;
 while(1) {
  $15 = $1;
  $16 = (($15) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $19 = $1;
   $20 = (($19) + 16|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = HEAP16[$21>>1]|0;
   $23 = $22 << 16 >> 16;
   $24 = ($23|0)==(9);
   if ($24) {
    $25 = $1;
    $26 = (($25) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (($27) + 12|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = HEAP16[$29>>1]|0;
    $31 = $30 << 16 >> 16;
    $32 = $lev;
    $33 = ($31|0)>($32|0);
    $56 = $33;
   } else {
    $56 = 0;
   }
  } else {
   $56 = 0;
  }
  if (!($56)) {
   break;
  }
  $34 = $1;
  $35 = (($34) + 16|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + 12|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = HEAP16[$38>>1]|0;
  $40 = $39 << 16 >> 16;
  $41 = $lev;
  $42 = (($40) - ($41))|0;
  $43 = ($42|0)==(1);
  if ($43) {
   $44 = $0;
   $45 = $1;
   $46 = (($45) + 16|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $2;
   _print_toc_section_and_children($44,$47,$48);
  }
  $49 = $1;
  $50 = (($49) + 16|0);
  $51 = HEAP32[$50>>2]|0;
  $1 = $51;
 }
 $52 = $2;
 $53 = (($52) + 92|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (($54) + -1)|0;
 HEAP32[$53>>2] = $55;
 STACKTOP = sp;return;
}
function _print_toc_node($out,$n,$scratch) {
 $out = $out|0;
 $n = $n|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $i = 0, $temp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0;
 var $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer23 = sp + 88|0;
 $vararg_buffer20 = sp + 80|0;
 $vararg_buffer18 = sp + 72|0;
 $vararg_buffer16 = sp + 64|0;
 $vararg_buffer14 = sp + 56|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $n;
 $2 = $scratch;
 $3 = $1;
 $4 = HEAP16[$3>>1]|0;
 $5 = $4 << 16 >> 16;
 do {
  switch ($5|0) {
  case 21:  {
   $68 = $0;
   _g_string_append_printf($68,45232,$vararg_buffer16);
   $69 = $0;
   $70 = $1;
   $71 = (($70) + 12|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $2;
   _print_toc_node_tree($69,$72,$73);
   $74 = $0;
   _g_string_append_printf($74,45232,$vararg_buffer18);
   STACKTOP = sp;return;
   break;
  }
  case 2:  {
   $57 = $0;
   $58 = $1;
   $59 = (($58) + 4|0);
   $60 = HEAP32[$59>>2]|0;
   _print_toc_string($57,$60);
   STACKTOP = sp;return;
   break;
  }
  case 8:  {
   $75 = $0;
   $76 = $1;
   $77 = (($76) + 4|0);
   $78 = HEAP32[$77>>2]|0;
   HEAP32[$vararg_buffer20>>2] = $78;
   _g_string_append_printf($75,40832,$vararg_buffer20);
   STACKTOP = sp;return;
   break;
  }
  case 1:  {
   $84 = $0;
   $85 = $1;
   $86 = (($85) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = $2;
   _print_toc_node_tree($84,$87,$88);
   STACKTOP = sp;return;
   break;
  }
  case 61:  {
   STACKTOP = sp;return;
   break;
  }
  case 22:  {
   $61 = $0;
   _g_string_append_printf($61,40824,$vararg_buffer12);
   $62 = $0;
   $63 = $1;
   $64 = (($63) + 12|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $2;
   _print_toc_node_tree($62,$65,$66);
   $67 = $0;
   _g_string_append_printf($67,40824,$vararg_buffer14);
   STACKTOP = sp;return;
   break;
  }
  case 9:  {
   $i = 0;
   while(1) {
    $6 = $i;
    $7 = $2;
    $8 = (($7) + 92|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($6|0)<($9|0);
    if (!($10)) {
     break;
    }
    $11 = $0;
    _g_string_append_printf($11,40792,$vararg_buffer);
    $12 = $i;
    $13 = (($12) + 1)|0;
    $i = $13;
   }
   $14 = $0;
   _g_string_append_printf($14,40800,$vararg_buffer1);
   $15 = $0;
   $16 = $1;
   $17 = (($16) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $2;
   _print_toc_node($15,$18,$19);
   STACKTOP = sp;return;
   break;
  }
  case 23:  {
   $79 = $0;
   $80 = $1;
   $81 = (($80) + 12|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = $2;
   _print_toc_node_tree($79,$82,$83);
   STACKTOP = sp;return;
   break;
  }
  case 32:  {
   STACKTOP = sp;return;
   break;
  }
  case 15: case 14: case 13: case 12: case 11: case 10:  {
   $20 = $1;
   $21 = (($20) + 12|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)!=(0|0);
   if ($23) {
    $24 = $1;
    $25 = (($24) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = HEAP16[$26>>1]|0;
    $28 = $27 << 16 >> 16;
    $29 = ($28|0)==(27);
    if ($29) {
     $30 = $1;
     $31 = (($30) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (($32) + 4|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = (_label_from_string($34)|0);
     $temp = $35;
     $36 = $0;
     _g_string_append_printf($36,40808,$vararg_buffer3);
     $37 = $0;
     $38 = $1;
     $39 = (($38) + 12|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = $2;
     _print_toc_node_tree($37,$40,$41);
     $42 = $0;
     $43 = $temp;
     HEAP32[$vararg_buffer5>>2] = $43;
     _g_string_append_printf($42,40816,$vararg_buffer5);
    } else {
     label = 10;
    }
   } else {
    label = 10;
   }
   if ((label|0) == 10) {
    $44 = $1;
    $45 = (($44) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (_label_from_node_tree($46)|0);
    $temp = $47;
    $48 = $0;
    _g_string_append_printf($48,40808,$vararg_buffer7);
    $49 = $0;
    $50 = $1;
    $51 = (($50) + 12|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = $2;
    _print_toc_node_tree($49,$52,$53);
    $54 = $0;
    $55 = $temp;
    HEAP32[$vararg_buffer9>>2] = $55;
    _g_string_append_printf($54,40816,$vararg_buffer9);
   }
   $56 = $temp;
   _free($56);
   STACKTOP = sp;return;
   break;
  }
  case 27:  {
   STACKTOP = sp;return;
   break;
  }
  default: {
   $89 = HEAP32[_stderr>>2]|0;
   $90 = $1;
   $91 = HEAP16[$90>>1]|0;
   $92 = $91 << 16 >> 16;
   HEAP32[$vararg_buffer23>>2] = $92;
   (_fprintf(($89|0),(40840|0),($vararg_buffer23|0))|0);
   STACKTOP = sp;return;
  }
  }
 } while(0);
}
function _print_toc_string($out,$str) {
 $out = $out|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $str;
 while(1) {
  $2 = $1;
  $3 = HEAP8[$2>>0]|0;
  $4 = $3 << 24 >> 24;
  $5 = ($4|0)!=(0);
  if (!($5)) {
   break;
  }
  $6 = $1;
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  if ((($8|0) == 91)) {
   $9 = $0;
   _g_string_append_printf($9,45536,$vararg_buffer);
  } else if ((($8|0) == 93)) {
   $10 = $0;
   _g_string_append_printf($10,40896,$vararg_buffer1);
  } else {
   $11 = $0;
   $12 = $1;
   $13 = HEAP8[$12>>0]|0;
   _g_string_append_c($11,$13);
  }
  $14 = $1;
  $15 = (($14) + 1|0);
  $1 = $15;
 }
 STACKTOP = sp;return;
}
function _export_node_tree($list,$format,$extensions) {
 $list = $list|0;
 $format = $format|0;
 $extensions = $extensions|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $out = 0;
 var $output = 0, $scratch = 0, $temp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $list;
 $1 = $format;
 $2 = $extensions;
 $3 = (_g_string_new(41432)|0);
 $out = $3;
 $4 = $2;
 $5 = (_mk_scratch_pad($4)|0);
 $scratch = $5;
 $6 = $0;
 $7 = $scratch;
 $8 = (($7) + 52|0);
 HEAP32[$8>>2] = $6;
 $9 = $1;
 $10 = ($9|0)!=(5);
 if ($10) {
  $11 = $1;
  $12 = ($11|0)!=(9);
  if ($12) {
   $13 = $1;
   $14 = ($13|0)!=(10);
   if ($14) {
    $15 = $1;
    $16 = ($15|0)!=(11);
    if ($16) {
     $17 = $0;
     $18 = $scratch;
     _extract_abbreviations($17,$18);
     $19 = $0;
     $20 = $scratch;
     _find_abbreviations($19,$20);
     $21 = $0;
     $22 = $scratch;
     _extract_references($21,$22);
    }
   }
  }
 }
 $23 = $1;
 $24 = ($23|0)==(2);
 if ($24) {
  $25 = $1;
  $26 = $0;
  $27 = (_find_latex_mode($25,$26)|0);
  $1 = $27;
 }
 $28 = $1;
 do {
  switch ($28|0) {
  case 3:  {
   $72 = $0;
   $73 = ($72|0)!=(0|0);
   if ($73) {
    $74 = $0;
    $75 = HEAP16[$74>>1]|0;
    $76 = $75 << 16 >> 16;
    $77 = ($76|0)!=(17);
    if ($77) {
     $78 = $out;
     $79 = $scratch;
     $80 = (($79) + 44|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = $scratch;
     _print_memoir_node_tree($78,$81,$82);
    }
   }
   $83 = $out;
   $84 = $0;
   $85 = $scratch;
   _print_memoir_node_tree($83,$84,$85);
   break;
  }
  case 11:  {
   $144 = $out;
   $145 = $0;
   $146 = $scratch;
   _print_critic_html_highlight_node_tree($144,$145,$146);
   break;
  }
  case 1:  {
   $29 = $out;
   $30 = $0;
   $31 = $scratch;
   _print_text_node_tree($29,$30,$31);
   break;
  }
  case 7:  {
   $121 = $scratch;
   $122 = HEAP32[$121>>2]|0;
   $123 = $122 & 4;
   $124 = ($123|0)!=(0);
   if (!($124)) {
    $125 = $out;
    $126 = $0;
    $127 = $scratch;
    _begin_rtf_output($125,$126,$127);
   }
   $128 = $out;
   $129 = $0;
   $130 = $scratch;
   _print_rtf_node_tree($128,$129,$130);
   $131 = $scratch;
   $132 = HEAP32[$131>>2]|0;
   $133 = $132 & 4;
   $134 = ($133|0)!=(0);
   if (!($134)) {
    $135 = $out;
    $136 = $0;
    $137 = $scratch;
    _end_rtf_output($135,$136,$137);
   }
   break;
  }
  case 9:  {
   $138 = $out;
   $139 = $0;
   $140 = $scratch;
   _print_critic_accept_node_tree($138,$139,$140);
   break;
  }
  case 12:  {
   $100 = $out;
   $101 = $0;
   $102 = $scratch;
   _perform_lyx_output($100,$101,$102);
   break;
  }
  case 10:  {
   $141 = $out;
   $142 = $0;
   $143 = $scratch;
   _print_critic_reject_node_tree($141,$142,$143);
   break;
  }
  case 13:  {
   $147 = $scratch;
   $148 = (($147) + 92|0);
   HEAP32[$148>>2] = 0;
   $149 = $out;
   $150 = $0;
   $151 = $scratch;
   _print_toc_node_tree($149,$150,$151);
   break;
  }
  case 4:  {
   $86 = $0;
   $87 = ($86|0)!=(0|0);
   if ($87) {
    $88 = $0;
    $89 = HEAP16[$88>>1]|0;
    $90 = $89 << 16 >> 16;
    $91 = ($90|0)!=(17);
    if ($91) {
     $92 = $out;
     $93 = $scratch;
     $94 = (($93) + 44|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = $scratch;
     _print_beamer_node_tree($92,$95,$96);
    }
   }
   $97 = $out;
   $98 = $0;
   $99 = $scratch;
   _print_beamer_node_tree($97,$98,$99);
   break;
  }
  case 0:  {
   $32 = $scratch;
   $33 = HEAP32[$32>>2]|0;
   $34 = $33 & 2;
   $35 = ($34|0)!=(0);
   if ($35) {
    $36 = $scratch;
    $37 = (($36) + 52|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (_metavalue_for_key(40904,$38)|0);
    $temp = $39;
    $40 = $temp;
    $41 = ($40|0)!=(0|0);
    if ($41) {
     $42 = $out;
     $43 = $temp;
     HEAP32[$vararg_buffer>>2] = $43;
     _g_string_append_printf($42,40912,$vararg_buffer);
     $44 = $temp;
     _free($44);
    } else {
     $45 = $out;
     _g_string_append_printf($45,40984,$vararg_buffer1);
    }
   }
   $46 = $out;
   $47 = $0;
   $48 = $scratch;
   _print_html_node_tree($46,$47,$48);
   $49 = $out;
   $50 = $scratch;
   _print_html_endnotes($49,$50);
   $51 = $scratch;
   $52 = HEAP32[$51>>2]|0;
   $53 = $52 & 2;
   $54 = ($53|0)!=(0);
   if ($54) {
    $55 = $out;
    $56 = $scratch;
    _pad($55,2,$56);
    $57 = $out;
    _g_string_append_printf($57,41040,$vararg_buffer3);
   }
   break;
  }
  case 6:  {
   $112 = $out;
   $113 = $0;
   $114 = $scratch;
   _begin_odf_output($112,$113,$114);
   $115 = $out;
   $116 = $0;
   $117 = $scratch;
   _print_odf_node_tree($115,$116,$117);
   $118 = $out;
   $119 = $0;
   $120 = $scratch;
   _end_odf_output($118,$119,$120);
   break;
  }
  case 2:  {
   $58 = $0;
   $59 = ($58|0)!=(0|0);
   if ($59) {
    $60 = $0;
    $61 = HEAP16[$60>>1]|0;
    $62 = $61 << 16 >> 16;
    $63 = ($62|0)!=(17);
    if ($63) {
     $64 = $out;
     $65 = $scratch;
     $66 = (($65) + 44|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = $scratch;
     _print_latex_node_tree($64,$67,$68);
    }
   }
   $69 = $out;
   $70 = $0;
   $71 = $scratch;
   _print_latex_node_tree($69,$70,$71);
   break;
  }
  case 5:  {
   $103 = $out;
   $104 = $0;
   $105 = $scratch;
   _begin_opml_output($103,$104,$105);
   $106 = $out;
   $107 = $0;
   $108 = $scratch;
   _print_opml_node_tree($106,$107,$108);
   $109 = $out;
   $110 = $0;
   $111 = $scratch;
   _end_opml_output($109,$110,$111);
   break;
  }
  default: {
   $152 = HEAP32[_stderr>>2]|0;
   $153 = $1;
   HEAP32[$vararg_buffer5>>2] = $153;
   (_fprintf(($152|0),(41056|0),($vararg_buffer5|0))|0);
   _exit(1);
   // unreachable;
  }
  }
 } while(0);
 $154 = $out;
 $155 = HEAP32[$154>>2]|0;
 $output = $155;
 $156 = $out;
 (_g_string_free($156,0)|0);
 $157 = $scratch;
 _free_scratch_pad($157);
 $158 = $output;
 STACKTOP = sp;return ($158|0);
}
function _extract_abbreviations($list,$scratch) {
 $list = $list|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $list;
 $1 = $scratch;
 while(1) {
  $2 = $0;
  $3 = ($2|0)!=(0|0);
  if (!($3)) {
   break;
  }
  $4 = $0;
  $5 = HEAP16[$4>>1]|0;
  $6 = $5 << 16 >> 16;
  switch ($6|0) {
  case 38: case 39: case 1: case 40: case 9:  {
   $20 = $0;
   $21 = (($20) + 12|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $1;
   _extract_abbreviations($22,$23);
   break;
  }
  case 82:  {
   $7 = $0;
   $8 = (_copy_node($7)|0);
   $temp = $8;
   $9 = $0;
   HEAP16[$9>>1] = 87;
   $10 = $temp;
   $11 = (($10) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   _trim_trailing_whitespace($12);
   $13 = $temp;
   $14 = $1;
   $15 = (($14) + 44|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (_cons($13,$16)|0);
   $18 = $1;
   $19 = (($18) + 44|0);
   HEAP32[$19>>2] = $17;
   break;
  }
  default: {
  }
  }
  $24 = $0;
  $25 = (($24) + 16|0);
  $26 = HEAP32[$25>>2]|0;
  $0 = $26;
 }
 STACKTOP = sp;return;
}
function _find_abbreviations($list,$scratch) {
 $list = $list|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $abbr = 0, $end = 0, $ismatch = 0, $target = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $list;
 $1 = $scratch;
 $2 = $1;
 $3 = (($2) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $abbr = $4;
 $end = 0;
 $5 = $abbr;
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 << 16 >> 16;
 $8 = ($7|0)==(87);
 if ($8) {
  STACKTOP = sp;return;
 }
 while(1) {
  $9 = $0;
  $10 = ($9|0)!=(0|0);
  if (!($10)) {
   break;
  }
  $11 = $0;
  $12 = HEAP16[$11>>1]|0;
  $13 = $12 << 16 >> 16;
  switch ($13|0) {
  case 2:  {
   $14 = $1;
   $15 = (($14) + 44|0);
   $16 = HEAP32[$15>>2]|0;
   $abbr = $16;
   while(1) {
    $17 = $abbr;
    $18 = ($17|0)!=(0|0);
    if (!($18)) {
     break;
    }
    $19 = $abbr;
    $20 = HEAP16[$19>>1]|0;
    $21 = $20 << 16 >> 16;
    $22 = ($21|0)!=(87);
    if ($22) {
     $ismatch = 1;
     $23 = $abbr;
     $24 = (($23) + 12|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = (($25) + 12|0);
     $27 = HEAP32[$26>>2]|0;
     $temp = $27;
     $28 = $0;
     $target = $28;
     while(1) {
      $29 = $ismatch;
      $30 = $29&1;
      if ($30) {
       $31 = $temp;
       $32 = ($31|0)!=(0|0);
       if ($32) {
        $33 = $target;
        $34 = ($33|0)!=(0|0);
        $89 = $34;
       } else {
        $89 = 0;
       }
      } else {
       $89 = 0;
      }
      if (!($89)) {
       break;
      }
      $35 = $temp;
      $36 = HEAP16[$35>>1]|0;
      $37 = $36 << 16 >> 16;
      if ((($37|0) == 2)) {
       $38 = $temp;
       $39 = (($38) + 4|0);
       $40 = HEAP32[$39>>2]|0;
       $41 = $target;
       $42 = (($41) + 4|0);
       $43 = HEAP32[$42>>2]|0;
       $44 = (_strcmp($40,$43)|0);
       $45 = ($44|0)!=(0);
       if ($45) {
        $ismatch = 0;
       }
       label = 18;
      } else if ((($37|0) == 87) | (($37|0) == 8)) {
       label = 18;
      } else {
       $46 = $temp;
       $47 = HEAP16[$46>>1]|0;
       $48 = $47 << 16 >> 16;
       $49 = $target;
       $50 = HEAP16[$49>>1]|0;
       $51 = $50 << 16 >> 16;
       $52 = ($48|0)!=($51|0);
       if ($52) {
        $ismatch = 0;
       }
      }
      if ((label|0) == 18) {
       label = 0;
      }
      $53 = $temp;
      $54 = (($53) + 16|0);
      $55 = HEAP32[$54>>2]|0;
      $temp = $55;
      $56 = $target;
      $end = $56;
      $57 = $target;
      $58 = (($57) + 16|0);
      $59 = HEAP32[$58>>2]|0;
      $target = $59;
     }
     $60 = $ismatch;
     $61 = $60&1;
     if ($61) {
      $62 = $temp;
      $63 = ($62|0)==(0|0);
      if ($63) {
       $64 = $abbr;
       $65 = (_copy_node($64)|0);
       $temp = $65;
       $66 = $temp;
       $67 = (($66) + 16|0);
       HEAP32[$67>>2] = 0;
       $68 = $temp;
       $69 = $0;
       $70 = (($69) + 12|0);
       HEAP32[$70>>2] = $68;
       $71 = $0;
       $72 = $end;
       $73 = ($71|0)!=($72|0);
       if ($73) {
        $74 = $0;
        HEAP16[$74>>1] = 84;
        $75 = $end;
        $76 = ($75|0)!=(0|0);
        if ($76) {
         $77 = $end;
         HEAP16[$77>>1] = 85;
        }
       } else {
        $78 = $0;
        HEAP16[$78>>1] = 83;
       }
      }
     }
    }
    $79 = $abbr;
    $80 = (($79) + 16|0);
    $81 = HEAP32[$80>>2]|0;
    $abbr = $81;
   }
   break;
  }
  case 38: case 39: case 69: case 62: case 30: case 61: case 23: case 6: case 5: case 9: case 50: case 49: case 48: case 1:  {
   $82 = $0;
   $83 = (($82) + 12|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = $1;
   _find_abbreviations($84,$85);
   break;
  }
  default: {
  }
  }
  $86 = $0;
  $87 = (($86) + 16|0);
  $88 = HEAP32[$87>>2]|0;
  $0 = $88;
 }
 STACKTOP = sp;return;
}
function _extract_references($list,$scratch) {
 $list = $list|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $l = 0, $label = 0, $label1 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $list;
 $1 = $scratch;
 while(1) {
  $2 = $0;
  $3 = ($2|0)!=(0|0);
  if (!($3)) {
   break;
  }
  $4 = $0;
  $5 = HEAP16[$4>>1]|0;
  $6 = $5 << 16 >> 16;
  switch ($6|0) {
  case 15: case 14: case 13: case 12: case 11: case 10:  {
   $46 = $0;
   $47 = (($46) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = HEAP16[$48>>1]|0;
   $50 = $49 << 16 >> 16;
   $51 = ($50|0)!=(27);
   if ($51) {
    $52 = $1;
    $53 = HEAP32[$52>>2]|0;
    $54 = $53 & 64;
    $55 = ($54|0)!=(0);
    if (!($55)) {
     $56 = $1;
     $57 = HEAP32[$56>>2]|0;
     $58 = $57 & 1;
     $59 = ($58|0)!=(0);
     if (!($59)) {
      $60 = $0;
      $61 = (($60) + 12|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = (_label_from_node_tree($62)|0);
      $label = $63;
      $64 = $label;
      $65 = (_mk_autolink($64)|0);
      $temp = $65;
      $66 = $temp;
      $67 = $1;
      $68 = (($67) + 32|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = (_cons($66,$69)|0);
      $71 = $1;
      $72 = (($71) + 32|0);
      HEAP32[$72>>2] = $70;
      $73 = $label;
      _free($73);
     }
    }
   }
   break;
  }
  case 61:  {
   $7 = $0;
   $8 = (($7) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $l = $9;
   $10 = $0;
   $11 = (($10) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $l;
   $14 = HEAP32[$13>>2]|0;
   $15 = $l;
   $16 = (($15) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $l;
   $19 = (($18) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (_mk_link($12,$14,$17,$20,0)|0);
   $temp = $21;
   $22 = $l;
   $23 = (($22) + 12|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (_copy_node_tree($24)|0);
   $26 = $temp;
   $27 = (($26) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($28) + 12|0);
   HEAP32[$29>>2] = $25;
   $30 = $temp;
   $31 = $1;
   $32 = (($31) + 32|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (_cons($30,$33)|0);
   $35 = $1;
   $36 = (($35) + 32|0);
   HEAP32[$36>>2] = $34;
   break;
  }
  case 52:  {
   $74 = $0;
   $75 = (($74) + 12|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = HEAP16[$76>>1]|0;
   $78 = $77 << 16 >> 16;
   $79 = ($78|0)!=(54);
   if ($79) {
    $80 = $0;
    $81 = (($80) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = (_label_from_node($82)|0);
    $label1 = $83;
    $84 = $label1;
    $85 = (_mk_autolink($84)|0);
    $temp = $85;
    $86 = $temp;
    $87 = $1;
    $88 = (($87) + 32|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = (_cons($86,$89)|0);
    $91 = $1;
    $92 = (($91) + 32|0);
    HEAP32[$92>>2] = $90;
    $93 = $label1;
    _free($93);
   }
   break;
  }
  case 1: case 40: case 9:  {
   $94 = $0;
   $95 = (($94) + 12|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = $1;
   _extract_references($96,$97);
   break;
  }
  case 69: case 62:  {
   $37 = $0;
   $38 = (_copy_node($37)|0);
   $temp = $38;
   $39 = $temp;
   $40 = $1;
   $41 = (($40) + 28|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (_cons($39,$42)|0);
   $44 = $1;
   $45 = (($44) + 28|0);
   HEAP32[$45>>2] = $43;
   break;
  }
  default: {
  }
  }
  $98 = $0;
  $99 = (($98) + 16|0);
  $100 = HEAP32[$99>>2]|0;
  $0 = $100;
 }
 STACKTOP = sp;return;
}
function _pad($out,$num,$scratch) {
 $out = $out|0;
 $num = $num|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $num;
 $2 = $scratch;
 while(1) {
  $3 = $1;
  $4 = (($3) + -1)|0;
  $1 = $4;
  $5 = $2;
  $6 = (($5) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($3|0)>($7|0);
  if (!($8)) {
   break;
  }
  $9 = $0;
  _g_string_append_c($9,10);
 }
 $10 = $1;
 $11 = $2;
 $12 = (($11) + 4|0);
 HEAP32[$12>>2] = $10;
 STACKTOP = sp;return;
}
function _extract_link_data($label,$scratch) {
 $label = $label|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $d = 0, $debug = 0, $ref = 0, $temp = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer13 = 0, $vararg_buffer17 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer17 = sp + 40|0;
 $vararg_buffer13 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $label;
 $2 = $scratch;
 $3 = $2;
 $4 = (($3) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $ref = $5;
 $debug = 0;
 $6 = $debug;
 $7 = $6&1;
 if ($7) {
  $8 = HEAP32[_stderr>>2]|0;
  $9 = $1;
  HEAP32[$vararg_buffer>>2] = $9;
  (_fprintf(($8|0),(41088|0),($vararg_buffer|0))|0);
 }
 $10 = $1;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  $12 = $1;
  $13 = (_strlen(($12|0))|0);
  $14 = ($13|0)==(0);
  if (!($14)) {
   $15 = $1;
   $16 = (_clean_string($15)|0);
   $temp = $16;
   while(1) {
    $17 = $ref;
    $18 = ($17|0)!=(0|0);
    if (!($18)) {
     break;
    }
    $19 = $ref;
    $20 = HEAP16[$19>>1]|0;
    $21 = $20 << 16 >> 16;
    $22 = ($21|0)==(87);
    if ($22) {
     $23 = $ref;
     $24 = (($23) + 16|0);
     $25 = HEAP32[$24>>2]|0;
     $ref = $25;
     continue;
    }
    $26 = $ref;
    $27 = (($26) + 8|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = HEAP32[$28>>2]|0;
    $30 = $temp;
    $31 = (_strcmp($29,$30)|0);
    $32 = ($31|0)==(0);
    if ($32) {
     label = 11;
     break;
    }
    $58 = $debug;
    $59 = $58&1;
    if ($59) {
     $60 = HEAP32[_stderr>>2]|0;
     $61 = $ref;
     $62 = (($61) + 8|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = HEAP32[$63>>2]|0;
     $65 = $1;
     HEAP32[$vararg_buffer5>>2] = $64;
     $vararg_ptr8 = (($vararg_buffer5) + 4|0);
     HEAP32[$vararg_ptr8>>2] = $65;
     (_fprintf(($60|0),(41144|0),($vararg_buffer5|0))|0);
    }
    $66 = $ref;
    $67 = (($66) + 16|0);
    $68 = HEAP32[$67>>2]|0;
    $ref = $68;
   }
   if ((label|0) == 11) {
    $33 = $debug;
    $34 = $33&1;
    if ($34) {
     $35 = HEAP32[_stderr>>2]|0;
     $36 = $ref;
     $37 = (($36) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = HEAP32[$38>>2]|0;
     $40 = $1;
     HEAP32[$vararg_buffer1>>2] = $39;
     $vararg_ptr4 = (($vararg_buffer1) + 4|0);
     HEAP32[$vararg_ptr4>>2] = $40;
     (_fprintf(($35|0),(41120|0),($vararg_buffer1|0))|0);
    }
    $41 = $ref;
    $42 = (($41) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    $d = $43;
    $44 = $d;
    $45 = HEAP32[$44>>2]|0;
    $46 = $d;
    $47 = (($46) + 4|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = $d;
    $50 = (($49) + 8|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = $d;
    $53 = (($52) + 12|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (_mk_link_data($45,$48,$51,$54)|0);
    $d = $55;
    $56 = $temp;
    _free($56);
    $57 = $d;
    $0 = $57;
    $135 = $0;
    STACKTOP = sp;return ($135|0);
   }
   $69 = $temp;
   _free($69);
   $70 = $2;
   $71 = HEAP32[$70>>2]|0;
   $72 = $71 & 1;
   $73 = ($72|0)!=(0);
   if ($73) {
    $0 = 0;
    $135 = $0;
    STACKTOP = sp;return ($135|0);
   }
   $74 = $1;
   $75 = (_label_from_string($74)|0);
   $temp = $75;
   $76 = $2;
   $77 = (($76) + 32|0);
   $78 = HEAP32[$77>>2]|0;
   $ref = $78;
   while(1) {
    $79 = $ref;
    $80 = ($79|0)!=(0|0);
    if (!($80)) {
     label = 32;
     break;
    }
    $81 = $ref;
    $82 = HEAP16[$81>>1]|0;
    $83 = $82 << 16 >> 16;
    $84 = ($83|0)==(87);
    if ($84) {
     $85 = $ref;
     $86 = (($85) + 16|0);
     $87 = HEAP32[$86>>2]|0;
     $ref = $87;
     continue;
    }
    $88 = $ref;
    $89 = (($88) + 8|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = HEAP32[$90>>2]|0;
    $92 = $temp;
    $93 = (_strcmp($91,$92)|0);
    $94 = ($93|0)==(0);
    if ($94) {
     label = 25;
     break;
    }
    $120 = $debug;
    $121 = $120&1;
    if ($121) {
     $122 = HEAP32[_stderr>>2]|0;
     $123 = $ref;
     $124 = (($123) + 8|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = HEAP32[$125>>2]|0;
     $127 = $1;
     HEAP32[$vararg_buffer13>>2] = $126;
     $vararg_ptr16 = (($vararg_buffer13) + 4|0);
     HEAP32[$vararg_ptr16>>2] = $127;
     (_fprintf(($122|0),(41200|0),($vararg_buffer13|0))|0);
    }
    $128 = $ref;
    $129 = (($128) + 16|0);
    $130 = HEAP32[$129>>2]|0;
    $ref = $130;
   }
   if ((label|0) == 25) {
    $95 = $debug;
    $96 = $95&1;
    if ($96) {
     $97 = HEAP32[_stderr>>2]|0;
     $98 = $ref;
     $99 = (($98) + 8|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = HEAP32[$100>>2]|0;
     $102 = $1;
     HEAP32[$vararg_buffer9>>2] = $101;
     $vararg_ptr12 = (($vararg_buffer9) + 4|0);
     HEAP32[$vararg_ptr12>>2] = $102;
     (_fprintf(($97|0),(41176|0),($vararg_buffer9|0))|0);
    }
    $103 = $ref;
    $104 = (($103) + 8|0);
    $105 = HEAP32[$104>>2]|0;
    $d = $105;
    $106 = $d;
    $107 = HEAP32[$106>>2]|0;
    $108 = $d;
    $109 = (($108) + 4|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = $d;
    $112 = (($111) + 8|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = $d;
    $115 = (($114) + 12|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = (_mk_link_data($107,$110,$113,$116)|0);
    $d = $117;
    $118 = $temp;
    _free($118);
    $119 = $d;
    $0 = $119;
    $135 = $0;
    STACKTOP = sp;return ($135|0);
   }
   else if ((label|0) == 32) {
    $131 = $temp;
    _free($131);
    $132 = $debug;
    $133 = $132&1;
    if ($133) {
     $134 = HEAP32[_stderr>>2]|0;
     (_fprintf(($134|0),(41232|0),($vararg_buffer17|0))|0);
    }
    $0 = 0;
    $135 = $0;
    STACKTOP = sp;return ($135|0);
   }
  }
 }
 $0 = 0;
 $135 = $0;
 STACKTOP = sp;return ($135|0);
}
function _note_number_for_label($text,$scratch) {
 $text = $text|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $clean = 0, $label = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $text;
 $2 = $scratch;
 $n = 0;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = $1;
  $6 = (_strlen(($5|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = $1;
   $9 = (_clean_string($8)|0);
   $clean = $9;
   $10 = $clean;
   $11 = (_label_from_string($10)|0);
   $label = $11;
   $12 = $clean;
   $13 = $2;
   $14 = (($13) + 48|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (_node_matching_label($12,$15)|0);
   $n = $16;
   $17 = $n;
   $18 = ($17|0)==(0|0);
   if ($18) {
    $19 = $clean;
    $20 = $2;
    $21 = (($20) + 28|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (_node_matching_label($19,$22)|0);
    $n = $23;
    $24 = $n;
    $25 = ($24|0)!=(0|0);
    if ($25) {
     $26 = $n;
     $27 = $2;
     _move_note_to_used($26,$27);
    }
   } else {
   }
   $28 = $n;
   $29 = ($28|0)==(0|0);
   if ($29) {
    $30 = $label;
    $31 = $2;
    $32 = (($31) + 48|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (_node_matching_label($30,$33)|0);
    $n = $34;
   }
   $35 = $n;
   $36 = ($35|0)==(0|0);
   if ($36) {
    $37 = $label;
    $38 = $2;
    $39 = (($38) + 28|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (_node_matching_label($37,$40)|0);
    $n = $41;
    $42 = $n;
    $43 = ($42|0)!=(0|0);
    if ($43) {
     $44 = $n;
     $45 = $2;
     _move_note_to_used($44,$45);
    }
   } else {
   }
   $46 = $label;
   _free($46);
   $47 = $clean;
   _free($47);
   $48 = $n;
   $49 = ($48|0)!=(0|0);
   if ($49) {
    $50 = $n;
    $51 = (_count_node_from_end($50)|0);
    $0 = $51;
    $52 = $0;
    STACKTOP = sp;return ($52|0);
   } else {
    $0 = 0;
    $52 = $0;
    STACKTOP = sp;return ($52|0);
   }
  }
 }
 $0 = 0;
 $52 = $0;
 STACKTOP = sp;return ($52|0);
}
function _node_matching_label($label,$n) {
 $label = $label|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $label;
 $2 = $n;
 while(1) {
  $3 = $2;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   label = 8;
   break;
  }
  $5 = $2;
  $6 = HEAP16[$5>>1]|0;
  $7 = $6 << 16 >> 16;
  $8 = ($7|0)==(87);
  if ($8) {
   $9 = $2;
   $10 = (($9) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $2 = $11;
   continue;
  }
  $12 = $2;
  $13 = (($12) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $1;
  $16 = (_strcmp($14,$15)|0);
  $17 = ($16|0)==(0);
  if ($17) {
   label = 6;
   break;
  }
  $19 = $2;
  $20 = (($19) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  $2 = $21;
 }
 if ((label|0) == 6) {
  $18 = $2;
  $0 = $18;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 else if ((label|0) == 8) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _move_note_to_used($list,$scratch) {
 $list = $list|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $last = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $list;
 $1 = $scratch;
 $2 = $1;
 $3 = (($2) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $n = $4;
 $last = 0;
 while(1) {
  $5 = $n;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   label = 9;
   break;
  }
  $7 = $n;
  $8 = $0;
  $9 = ($7|0)==($8|0);
  if ($9) {
   break;
  }
  $29 = $n;
  $last = $29;
  $30 = $n;
  $31 = (($30) + 16|0);
  $32 = HEAP32[$31>>2]|0;
  $n = $32;
 }
 if ((label|0) == 9) {
  STACKTOP = sp;return;
 }
 $10 = $last;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $n;
  $13 = (($12) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $last;
  $16 = (($15) + 16|0);
  HEAP32[$16>>2] = $14;
 } else {
  $17 = $n;
  $18 = (($17) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $1;
  $21 = (($20) + 28|0);
  HEAP32[$21>>2] = $19;
 }
 $22 = $n;
 $23 = $1;
 $24 = (($23) + 48|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (_cons($22,$25)|0);
 $27 = $1;
 $28 = (($27) + 48|0);
 HEAP32[$28>>2] = $26;
 STACKTOP = sp;return;
}
function _count_node_from_end($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $n;
 $2 = $1;
 $3 = (($2) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 do {
  if ($5) {
   $6 = $1;
   $7 = HEAP16[$6>>1]|0;
   $8 = $7 << 16 >> 16;
   $9 = ($8|0)==(87);
   if ($9) {
    $0 = 0;
    break;
   } else {
    $0 = 1;
    break;
   }
  } else {
   $10 = $1;
   $11 = (($10) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (_count_node_from_end($12)|0);
   $14 = (($13) + 1)|0;
   $0 = $14;
  }
 } while(0);
 $15 = $0;
 STACKTOP = sp;return ($15|0);
}
function _note_number_for_node($ref,$scratch) {
 $ref = $ref|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $label = 0, $n = 0, $num = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ref;
 $2 = $scratch;
 $3 = $1;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $label = $5;
 $n = 0;
 $num = 0;
 $6 = $label;
 $7 = $2;
 $8 = (_note_number_for_label($6,$7)|0);
 $num = $8;
 $9 = $num;
 $10 = ($9|0)>(0);
 if ($10) {
  $11 = $num;
  $0 = $11;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  $12 = $1;
  $13 = (($12) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $n = $14;
  $15 = $1;
  $16 = $2;
  _use_inline_footnote($15,$16);
  $17 = $n;
  $18 = (_count_node_from_end($17)|0);
  $0 = $18;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _use_inline_footnote($ref,$scratch) {
 $ref = $ref|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ref;
 $1 = $scratch;
 $2 = $0;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_cons($4,$7)|0);
 $9 = $1;
 $10 = (($9) + 48|0);
 HEAP32[$10>>2] = $8;
 $11 = $0;
 $12 = (($11) + 12|0);
 HEAP32[$12>>2] = 0;
 STACKTOP = sp;return;
}
function _cite_count_node_from_end($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $n;
 $2 = $1;
 $3 = (($2) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 do {
  if ($5) {
   $6 = $1;
   $7 = HEAP16[$6>>1]|0;
   $8 = $7 << 16 >> 16;
   $9 = ($8|0)==(63);
   if ($9) {
    $0 = 1;
    break;
   } else {
    $0 = 0;
    break;
   }
  } else {
   $10 = $1;
   $11 = HEAP16[$10>>1]|0;
   $12 = $11 << 16 >> 16;
   $13 = ($12|0)==(63);
   if ($13) {
    $14 = $1;
    $15 = (($14) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (_cite_count_node_from_end($16)|0);
    $18 = (($17) + 1)|0;
    $0 = $18;
    break;
   } else {
    $19 = $1;
    $20 = (($19) + 16|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (_cite_count_node_from_end($21)|0);
    $0 = $22;
    break;
   }
  }
 } while(0);
 $23 = $0;
 STACKTOP = sp;return ($23|0);
}
function _node_for_count($n,$count) {
 $n = $n|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $total = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $n;
 $2 = $count;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 do {
  if ($4) {
   $0 = 0;
  } else {
   $5 = $1;
   $6 = (_count_node_from_end($5)|0);
   $total = $6;
   $7 = $2;
   $8 = $total;
   $9 = ($7|0)>($8|0);
   if ($9) {
    $0 = 0;
    break;
   }
   $10 = $2;
   $11 = $total;
   $12 = ($10|0)==($11|0);
   if ($12) {
    $13 = $1;
    $0 = $13;
    break;
   }
   while(1) {
    $14 = $total;
    $15 = $2;
    $16 = ($14|0)>($15|0);
    if (!($16)) {
     label = 12;
     break;
    }
    $17 = $1;
    $18 = (($17) + 16|0);
    $19 = HEAP32[$18>>2]|0;
    $1 = $19;
    $20 = $1;
    $21 = ($20|0)==(0|0);
    if ($21) {
     label = 10;
     break;
    }
    $22 = $total;
    $23 = (($22) + -1)|0;
    $total = $23;
   }
   if ((label|0) == 10) {
    $0 = 0;
    break;
   }
   else if ((label|0) == 12) {
    $24 = $1;
    $0 = $24;
    break;
   }
  }
 } while(0);
 $25 = $0;
 STACKTOP = sp;return ($25|0);
}
function _node_for_attribute($querystring,$list) {
 $querystring = $querystring|0;
 $list = $list|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $query = 0, $step = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $querystring;
 $2 = $list;
 $step = 0;
 $3 = $2;
 $step = $3;
 $4 = $1;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 $6 = $1;
 $7 = (_label_from_string($6)|0);
 $query = $7;
 while(1) {
  $8 = $step;
  $9 = ($8|0)!=(0|0);
  if (!($9)) {
   label = 9;
   break;
  }
  $10 = $step;
  $11 = (($10) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)!=(0|0);
  if ($13) {
   $14 = $step;
   $15 = (($14) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $query;
   $18 = (_strcmp($16,$17)|0);
   $19 = ($18|0)==(0);
   if ($19) {
    label = 7;
    break;
   }
  }
  $22 = $step;
  $23 = (($22) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  $step = $24;
 }
 if ((label|0) == 7) {
  $20 = $query;
  _free($20);
  $21 = $step;
  $0 = $21;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 else if ((label|0) == 9) {
  $25 = $query;
  _free($25);
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _load_link_data($n,$scratch) {
 $n = $n|0;
 $scratch = $scratch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $r = 0, $temp = 0, $temp_str = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $n;
 $2 = $scratch;
 $r = 0;
 $temp_str = 0;
 $3 = $1;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($12) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $1;
 $18 = (($17) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (_mk_link_data($6,$11,$16,$21)|0);
 $r = $22;
 $23 = $r;
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if ($25) {
  $26 = $r;
  $27 = (($26) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)==(0|0);
  if ($29) {
   $30 = (_g_string_new(41432)|0);
   $temp_str = $30;
   $31 = $temp_str;
   $32 = $1;
   $33 = (($32) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   _print_raw_node_tree($31,$34);
   $35 = $temp_str;
   $36 = HEAP32[$35>>2]|0;
   $37 = $r;
   HEAP32[$37>>2] = $36;
   $38 = $temp_str;
   (_g_string_free($38,0)|0);
  }
 }
 $39 = $r;
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)!=(0|0);
 do {
  if ($41) {
   $42 = $r;
   $43 = HEAP32[$42>>2]|0;
   $44 = (___strdup($43)|0);
   $temp = $44;
   $45 = $r;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = 0;
   $47 = $r;
   _free_link_data($47);
   $48 = $temp;
   $49 = $2;
   $50 = (_extract_link_data($48,$49)|0);
   $r = $50;
   $51 = $r;
   $52 = ($51|0)==(0|0);
   if (!($52)) {
    $54 = $temp;
    _free($54);
    break;
   }
   $53 = $temp;
   _free($53);
   $0 = 0;
   $56 = $0;
   STACKTOP = sp;return ($56|0);
  }
 } while(0);
 $55 = $r;
 $0 = $55;
 $56 = $0;
 STACKTOP = sp;return ($56|0);
}
function _yy_input_func($buf,$result,$max_size,$data) {
 $buf = $buf|0;
 $result = $result|0;
 $max_size = $max_size|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yyc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buf;
 $1 = $result;
 $2 = $max_size;
 $3 = $data;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $3;
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP8[$8>>0]|0;
  $10 = $9 << 24 >> 24;
  $11 = ($10|0)!=(0);
  if ($11) {
   $12 = $3;
   $13 = HEAP32[$12>>2]|0;
   $14 = (($13) + 1|0);
   HEAP32[$12>>2] = $14;
   $15 = HEAP8[$13>>0]|0;
   $16 = $15 << 24 >> 24;
   $yyc = $16;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $yyc = -1;
 }
 $17 = $yyc;
 $18 = (-1)==($17|0);
 if ($18) {
  $23 = 0;
  $22 = $1;
  HEAP32[$22>>2] = $23;
  STACKTOP = sp;return;
 } else {
  $19 = $yyc;
  $20 = $19&255;
  $21 = $0;
  HEAP8[$21>>0] = $20;
  $23 = 1;
  $22 = $1;
  HEAP32[$22>>2] = $23;
  STACKTOP = sp;return;
 }
}
function _yyparse_from($G,$yystart) {
 $G = $G|0;
 $yystart = $yystart|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $yyok = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yystart;
 $2 = $0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  $6 = $0;
  $7 = (($6) + 4|0);
  HEAP32[$7>>2] = 1024;
  $8 = $0;
  $9 = (($8) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_malloc($10)|0);
  $12 = $0;
  HEAP32[$12>>2] = $11;
  $13 = $0;
  $14 = (($13) + 24|0);
  HEAP32[$14>>2] = 1024;
  $15 = $0;
  $16 = (($15) + 24|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_malloc($17)|0);
  $19 = $0;
  $20 = (($19) + 20|0);
  HEAP32[$20>>2] = $18;
  $21 = $0;
  $22 = (($21) + 40|0);
  HEAP32[$22>>2] = 128;
  $23 = $0;
  $24 = (($23) + 40|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25*20)|0;
  $27 = (_malloc($26)|0);
  $28 = $0;
  $29 = (($28) + 36|0);
  HEAP32[$29>>2] = $27;
  $30 = $0;
  $31 = (($30) + 60|0);
  HEAP32[$31>>2] = 128;
  $32 = $0;
  $33 = (($32) + 60|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $34<<2;
  $36 = (_malloc($35)|0);
  $37 = $0;
  $38 = (($37) + 56|0);
  HEAP32[$38>>2] = $36;
  $39 = $0;
  $40 = (($39) + 44|0);
  HEAP32[$40>>2] = 0;
  $41 = $0;
  $42 = (($41) + 16|0);
  HEAP32[$42>>2] = 0;
  $43 = $0;
  $44 = (($43) + 12|0);
  HEAP32[$44>>2] = 0;
  $45 = $0;
  $46 = (($45) + 32|0);
  HEAP32[$46>>2] = 0;
  $47 = $0;
  $48 = (($47) + 28|0);
  HEAP32[$48>>2] = 0;
 }
 $49 = $0;
 $50 = (($49) + 12|0);
 HEAP32[$50>>2] = 0;
 $51 = $0;
 $52 = (($51) + 12|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $0;
 $55 = (($54) + 32|0);
 HEAP32[$55>>2] = $53;
 $56 = $0;
 $57 = (($56) + 28|0);
 HEAP32[$57>>2] = $53;
 $58 = $0;
 $59 = (($58) + 44|0);
 HEAP32[$59>>2] = 0;
 $60 = $0;
 $61 = (($60) + 56|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $0;
 $64 = (($63) + 52|0);
 HEAP32[$64>>2] = $62;
 $65 = $1;
 $66 = $0;
 $67 = (FUNCTION_TABLE_ii[$65 & 7]($66)|0);
 $yyok = $67;
 $68 = $yyok;
 $69 = ($68|0)!=(0);
 if (!($69)) {
  $71 = $0;
  _yyCommit($71);
  $72 = $yyok;
  STACKTOP = sp;return ($72|0);
 }
 $70 = $0;
 _yyDone($70);
 $71 = $0;
 _yyCommit($71);
 $72 = $yyok;
 STACKTOP = sp;return ($72|0);
}
function _yyparse($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $0;
 $2 = (_yyparse_from($1,2)|0);
 STACKTOP = sp;return ($2|0);
}
function _yyinit($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $0;
 dest=$1+0|0; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _yydeinit($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = HEAP32[$4>>2]|0;
  _free($5);
 }
 $6 = $0;
 $7 = (($6) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $0;
  $11 = (($10) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  _free($12);
 }
 $13 = $0;
 $14 = (($13) + 36|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $0;
  $18 = (($17) + 36|0);
  $19 = HEAP32[$18>>2]|0;
  _free($19);
 }
 $20 = $0;
 $21 = (($20) + 56|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = $0;
 $25 = (($24) + 56|0);
 $26 = HEAP32[$25>>2]|0;
 _free($26);
 STACKTOP = sp;return;
}
function _process_raw_blocks($n,$extensions) {
 $n = $n|0;
 $extensions = $extensions|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $contents = 0, $current = 0, $g = 0, $last_child = 0;
 var $saveptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $saveptr = sp + 68|0;
 $g = sp;
 $0 = $n;
 $1 = $extensions;
 $current = 0;
 $last_child = 0;
 HEAP32[$saveptr>>2] = 0;
 $2 = $0;
 $current = $2;
 while(1) {
  $3 = $current;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $current;
  $6 = HEAP16[$5>>1]|0;
  $7 = $6 << 16 >> 16;
  $8 = ($7|0)==(40);
  if ($8) {
   _yyinit($g);
   $9 = $current;
   $10 = (($9) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (_strtok_r($11,41248,$saveptr)|0);
   $contents = $12;
   $13 = $current;
   HEAP16[$13>>1] = 1;
   $14 = $contents;
   $15 = $1;
   $16 = $15 | 1024;
   $17 = (_mk_parser_data($14,$16)|0);
   $18 = (($g) + 64|0);
   HEAP32[$18>>2] = $17;
   while(1) {
    $19 = (_yyparse($g)|0);
    $20 = ($19|0)!=(0);
    if (!($20)) {
     break;
    }
   }
   $21 = (($g) + 64|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($22) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $current;
   $26 = (($25) + 12|0);
   HEAP32[$26>>2] = $24;
   $27 = (($g) + 64|0);
   $28 = HEAP32[$27>>2]|0;
   _free($28);
   _yydeinit($g);
   $29 = $current;
   $30 = (($29) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $last_child = $31;
   while(1) {
    $32 = (_strtok_r(0,41248,$saveptr)|0);
    $contents = $32;
    $33 = ($32|0)!=(0|0);
    if (!($33)) {
     break;
    }
    while(1) {
     $34 = $last_child;
     $35 = (($34) + 16|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)!=(0|0);
     if (!($37)) {
      break;
     }
     $38 = $last_child;
     $39 = (($38) + 16|0);
     $40 = HEAP32[$39>>2]|0;
     $last_child = $40;
    }
    _yyinit($g);
    $41 = $contents;
    $42 = $1;
    $43 = $42 | 1024;
    $44 = (_mk_parser_data($41,$43)|0);
    $45 = (($g) + 64|0);
    HEAP32[$45>>2] = $44;
    while(1) {
     $46 = (_yyparse($g)|0);
     $47 = ($46|0)!=(0);
     if (!($47)) {
      break;
     }
    }
    $48 = (($g) + 64|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = (($49) + 8|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = $last_child;
    $53 = (($52) + 16|0);
    HEAP32[$53>>2] = $51;
    $54 = (($g) + 64|0);
    $55 = HEAP32[$54>>2]|0;
    _free($55);
    _yydeinit($g);
   }
   $56 = $current;
   $57 = (($56) + 4|0);
   $58 = HEAP32[$57>>2]|0;
   _free($58);
   $59 = $current;
   $60 = (($59) + 4|0);
   HEAP32[$60>>2] = 0;
  }
  $61 = $current;
  $62 = (($61) + 12|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ($63|0)!=(0|0);
  if ($64) {
   $65 = $current;
   $66 = (($65) + 12|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = $1;
   $69 = (_process_raw_blocks($67,$68)|0);
   $70 = $current;
   $71 = (($70) + 12|0);
   HEAP32[$71>>2] = $69;
  }
  $72 = $current;
  $73 = (($72) + 16|0);
  $74 = HEAP32[$73>>2]|0;
  $current = $74;
 }
 $75 = $0;
 STACKTOP = sp;return ($75|0);
}
function _markdown_to_string($source,$extensions,$format) {
 $source = $source|0;
 $extensions = $extensions|0;
 $format = $format|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $critic_resolved = 0, $formatted = 0, $g = 0, $out = 0, $refined = 0;
 var $target_meta_key = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $g = sp;
 $1 = $source;
 $2 = $extensions;
 $3 = $format;
 $target_meta_key = 0;
 _yyinit($g);
 $4 = $1;
 $5 = $2;
 $6 = (_extract_metadata_value($4,$5,41256)|0);
 $target_meta_key = $6;
 $7 = $target_meta_key;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $target_meta_key;
  $10 = (_label_from_string($9)|0);
  $temp = $10;
  $11 = $temp;
  $12 = (_strcmp($11,41272)|0);
  $13 = ($12|0)==(0);
  if ($13) {
   $14 = $2;
   $15 = $14 | 65536;
   $2 = $15;
  }
  $16 = $temp;
  _free($16);
 }
 $17 = $target_meta_key;
 _free($17);
 $18 = $2;
 $19 = $18 & 8192;
 $20 = ($19|0)!=(0);
 if ($20) {
  label = 7;
 } else {
  $21 = $2;
  $22 = $21 & 16384;
  $23 = ($22|0)!=(0);
  if ($23) {
   label = 7;
  } else {
   $61 = $1;
   $62 = (_preformat_text($61)|0);
   $formatted = $62;
  }
 }
 if ((label|0) == 7) {
  $24 = $1;
  $25 = $2;
  $26 = (_mk_parser_data($24,$25)|0);
  $27 = (($g) + 64|0);
  HEAP32[$27>>2] = $26;
  while(1) {
   $28 = (_yyparse_from($g,3)|0);
   $29 = ($28|0)!=(0);
   if (!($29)) {
    break;
   }
  }
  $30 = $2;
  $31 = $30 & 16384;
  $32 = ($31|0)!=(0);
  if ($32) {
   $33 = $2;
   $34 = $33 & 8192;
   $35 = ($34|0)!=(0);
   if ($35) {
    $36 = $3;
    $37 = ($36|0)==(0);
    if ($37) {
     $38 = (($g) + 64|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (($39) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = $2;
     $43 = (_export_node_tree($41,11,$42)|0);
     $critic_resolved = $43;
    } else {
     label = 14;
    }
   } else {
    label = 14;
   }
   if ((label|0) == 14) {
    $44 = (($g) + 64|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) + 8|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = $2;
    $49 = (_export_node_tree($47,10,$48)|0);
    $critic_resolved = $49;
   }
  } else {
   $50 = (($g) + 64|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) + 8|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $2;
   $55 = (_export_node_tree($53,9,$54)|0);
   $critic_resolved = $55;
  }
  $56 = (($g) + 64|0);
  $57 = HEAP32[$56>>2]|0;
  _free_parser_data($57);
  _yydeinit($g);
  _yyinit($g);
  $58 = $critic_resolved;
  $59 = (_preformat_text($58)|0);
  $formatted = $59;
  $60 = $critic_resolved;
  _free($60);
 }
 $63 = $formatted;
 $64 = $2;
 $65 = (_mk_parser_data($63,$64)|0);
 $66 = (($g) + 64|0);
 HEAP32[$66>>2] = $65;
 $67 = $3;
 $68 = ($67|0)==(5);
 if ($68) {
  while(1) {
   $69 = (_yyparse_from($g,4)|0);
   $70 = ($69|0)!=(0);
   if (!($70)) {
    break;
   }
  }
 } else {
  $71 = $3;
  $72 = ($71|0)==(13);
  if ($72) {
   while(1) {
    $73 = (_yyparse_from($g,5)|0);
    $74 = ($73|0)!=(0);
    if (!($74)) {
     break;
    }
   }
  } else {
   while(1) {
    $75 = (_yyparse($g)|0);
    $76 = ($75|0)!=(0);
    if (!($76)) {
     break;
    }
   }
  }
 }
 $77 = (($g) + 64|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = (($78) + 20|0);
 $80 = HEAP8[$79>>0]|0;
 $81 = $80&1;
 if ($81) {
  $82 = (($g) + 64|0);
  $83 = HEAP32[$82>>2]|0;
  _free_parser_data($83);
  _yydeinit($g);
  $84 = $formatted;
  _free($84);
  $85 = (___strdup(41280)|0);
  $out = $85;
  $86 = $out;
  $0 = $86;
  $114 = $0;
  STACKTOP = sp;return ($114|0);
 }
 $87 = (($g) + 64|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = (($88) + 8|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $2;
 $92 = (_process_raw_blocks($90,$91)|0);
 $refined = $92;
 $93 = (($g) + 64|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = (($94) + 16|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = ($96|0)!=(0|0);
 if ($97) {
  $98 = (($g) + 64|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = (($99) + 16|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = $refined;
  _append_list($101,$102);
  $103 = (($g) + 64|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = (($104) + 16|0);
  HEAP32[$105>>2] = 0;
 } else {
 }
 $106 = $refined;
 $107 = $3;
 $108 = $2;
 $109 = (_export_node_tree($106,$107,$108)|0);
 $out = $109;
 $110 = (($g) + 64|0);
 $111 = HEAP32[$110>>2]|0;
 _free_parser_data($111);
 _yydeinit($g);
 $112 = $formatted;
 _free($112);
 $113 = $out;
 $0 = $113;
 $114 = $0;
 STACKTOP = sp;return ($114|0);
}
function _extract_metadata_value($source,$extensions,$key) {
 $source = $source|0;
 $extensions = $extensions|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $formatted = 0, $g = 0, $out = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $g = sp;
 $0 = $source;
 $1 = $extensions;
 $2 = $key;
 _yyinit($g);
 $3 = $0;
 $4 = (_preformat_text($3)|0);
 $formatted = $4;
 $5 = $formatted;
 $6 = $1;
 $7 = (_mk_parser_data($5,$6)|0);
 $8 = (($g) + 64|0);
 HEAP32[$8>>2] = $7;
 while(1) {
  $9 = (_yyparse_from($g,6)|0);
  $10 = ($9|0)!=(0);
  if (!($10)) {
   break;
  }
 }
 $11 = (($g) + 64|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 20|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&1;
 if ($15) {
  $16 = (___strdup(41280)|0);
  $out = $16;
 } else {
  $17 = $2;
  $18 = (($g) + 64|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (_metavalue_for_key($17,$21)|0);
  $out = $22;
 }
 $23 = (($g) + 64|0);
 $24 = HEAP32[$23>>2]|0;
 _free_parser_data($24);
 _yydeinit($g);
 $25 = $formatted;
 _free($25);
 $26 = $out;
 STACKTOP = sp;return ($26|0);
}
function _yyDone($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $pos = 0, $thunk = 0, $yyleng = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $pos = 0;
 while(1) {
  $1 = $pos;
  $2 = $0;
  $3 = (($2) + 44|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($1|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = $pos;
  $7 = $0;
  $8 = (($7) + 36|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + (($6*20)|0)|0);
  $thunk = $10;
  $11 = $thunk;
  $12 = (($11) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(0);
  if ($14) {
   $15 = $0;
   $16 = $thunk;
   $17 = HEAP32[$16>>2]|0;
   $18 = $thunk;
   $19 = (($18) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (_yyText($15,$17,$20)|0);
   $24 = $21;
  } else {
   $22 = $thunk;
   $23 = HEAP32[$22>>2]|0;
   $24 = $23;
  }
  $yyleng = $24;
  $25 = $thunk;
  $26 = (($25) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $0;
  $29 = $0;
  $30 = (($29) + 20|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $yyleng;
  $33 = $thunk;
  $34 = $0;
  $35 = (($34) + 64|0);
  $36 = HEAP32[$35>>2]|0;
  FUNCTION_TABLE_viiiii[$27 & 255]($28,$31,$32,$33,$36);
  $37 = $pos;
  $38 = (($37) + 1)|0;
  $pos = $38;
 }
 $39 = $0;
 $40 = (($39) + 44|0);
 HEAP32[$40>>2] = 0;
 STACKTOP = sp;return;
}
function _yyCommit($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = (($4) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) - ($3))|0;
 HEAP32[$5>>2] = $7;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $0;
  $10 = HEAP32[$9>>2]|0;
  $11 = $0;
  $12 = HEAP32[$11>>2]|0;
  $13 = $0;
  $14 = (($13) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($12) + ($15)|0);
  $17 = $0;
  $18 = (($17) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  _memmove(($10|0),($16|0),($19|0))|0;
 }
 $20 = $0;
 $21 = (($20) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $0;
 $24 = (($23) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + ($22))|0;
 HEAP32[$24>>2] = $26;
 $27 = $0;
 $28 = (($27) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $0;
 $31 = (($30) + 28|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) - ($29))|0;
 HEAP32[$31>>2] = $33;
 $34 = $0;
 $35 = (($34) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $0;
 $38 = (($37) + 32|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($39) - ($36))|0;
 HEAP32[$38>>2] = $40;
 $41 = $0;
 $42 = (($41) + 44|0);
 HEAP32[$42>>2] = 0;
 $43 = $0;
 $44 = (($43) + 12|0);
 HEAP32[$44>>2] = 0;
 STACKTOP = sp;return;
}
function _yy_Doc($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0;
 var $yypos2629 = 0, $yypos2631 = 0, $yypos2633 = 0, $yypos2634 = 0, $yypos2636 = 0, $yypos2638 = 0, $yypos2640 = 0, $yythunkpos0 = 0, $yythunkpos2629 = 0, $yythunkpos2631 = 0, $yythunkpos2633 = 0, $yythunkpos2634 = 0, $yythunkpos2636 = 0, $yythunkpos2638 = 0, $yythunkpos2640 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,2,0,41328);
 $9 = $1;
 $10 = (($9) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $yypos2629 = $11;
 $12 = $1;
 $13 = (($12) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $yythunkpos2629 = $14;
 $15 = $1;
 $16 = (_yy_BOM($15)|0);
 $17 = ($16|0)!=(0);
 if ($17) {
 } else {
  $18 = $yypos2629;
  $19 = $1;
  $20 = (($19) + 12|0);
  HEAP32[$20>>2] = $18;
  $21 = $yythunkpos2629;
  $22 = $1;
  $23 = (($22) + 44|0);
  HEAP32[$23>>2] = $21;
 }
 $24 = $1;
 $25 = (_yy_StartList($24)|0);
 $26 = ($25|0)!=(0);
 do {
  if ($26) {
   $27 = $1;
   _yyDo($27,8,-2,0,41336);
   $28 = $1;
   $29 = (_yy_StartList($28)|0);
   $30 = ($29|0)!=(0);
   if (!($30)) {
    break;
   }
   $31 = $1;
   _yyDo($31,8,-1,0,41336);
   $32 = $1;
   $33 = (($32) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   $yypos2631 = $34;
   $35 = $1;
   $36 = (($35) + 44|0);
   $37 = HEAP32[$36>>2]|0;
   $yythunkpos2631 = $37;
   $38 = $1;
   $39 = $1;
   $40 = (($39) + 28|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $1;
   $43 = (($42) + 32|0);
   $44 = HEAP32[$43>>2]|0;
   (_yyText($38,$41,$44)|0);
   $45 = $1;
   $46 = (($45) + 64|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($47) + 12|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (_extension(1,$49)|0);
   do {
    if ($50) {
     label = 11;
    } else {
     $51 = $1;
     $52 = (($51) + 64|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = (($53) + 12|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = (_extension(1024,$55)|0);
     if ($56) {
      label = 11;
     } else {
      $57 = $1;
      $58 = (($57) + 12|0);
      $59 = HEAP32[$58>>2]|0;
      $yypos2633 = $59;
      $60 = $1;
      $61 = (($60) + 44|0);
      $62 = HEAP32[$61>>2]|0;
      $yythunkpos2633 = $62;
      $63 = $1;
      $64 = (($63) + 12|0);
      $65 = HEAP32[$64>>2]|0;
      $yypos2634 = $65;
      $66 = $1;
      $67 = (($66) + 44|0);
      $68 = HEAP32[$67>>2]|0;
      $yythunkpos2634 = $68;
      $69 = $1;
      $70 = (_yy_YAMLStart($69)|0);
      $71 = ($70|0)!=(0);
      if ($71) {
      } else {
       $72 = $yypos2634;
       $73 = $1;
       $74 = (($73) + 12|0);
       HEAP32[$74>>2] = $72;
       $75 = $yythunkpos2634;
       $76 = $1;
       $77 = (($76) + 44|0);
       HEAP32[$77>>2] = $75;
      }
      $78 = $1;
      $79 = (_yy_MetaDataKey($78)|0);
      $80 = ($79|0)!=(0);
      if (!($80)) {
       label = 30;
       break;
      }
      $81 = $1;
      $82 = (_yy_Sp($81)|0);
      $83 = ($82|0)!=(0);
      if (!($83)) {
       label = 30;
       break;
      }
      $84 = $1;
      $85 = (_yymatchChar($84,58)|0);
      $86 = ($85|0)!=(0);
      if (!($86)) {
       label = 30;
       break;
      }
      $87 = $1;
      $88 = (_yy_Sp($87)|0);
      $89 = ($88|0)!=(0);
      if (!($89)) {
       label = 30;
       break;
      }
      $90 = $1;
      $91 = (($90) + 12|0);
      $92 = HEAP32[$91>>2]|0;
      $yypos2636 = $92;
      $93 = $1;
      $94 = (($93) + 44|0);
      $95 = HEAP32[$94>>2]|0;
      $yythunkpos2636 = $95;
      $96 = $1;
      $97 = (_yy_Newline($96)|0);
      $98 = ($97|0)!=(0);
      if ($98) {
       label = 30;
       break;
      }
      $99 = $yypos2636;
      $100 = $1;
      $101 = (($100) + 12|0);
      HEAP32[$101>>2] = $99;
      $102 = $yythunkpos2636;
      $103 = $1;
      $104 = (($103) + 44|0);
      HEAP32[$104>>2] = $102;
      $105 = $yypos2633;
      $106 = $1;
      $107 = (($106) + 12|0);
      HEAP32[$107>>2] = $105;
      $108 = $yythunkpos2633;
      $109 = $1;
      $110 = (($109) + 44|0);
      HEAP32[$110>>2] = $108;
      $111 = $1;
      $112 = (_yy_MetaData($111)|0);
      $113 = ($112|0)!=(0);
      if ($113) {
       $114 = $1;
       $115 = $1;
       $116 = (($115) + 28|0);
       $117 = HEAP32[$116>>2]|0;
       $118 = $1;
       $119 = (($118) + 32|0);
       $120 = HEAP32[$119>>2]|0;
       _yyDo($114,9,$117,$120,46888);
       break;
      } else {
       label = 30;
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 11) {
    label = 30;
   }
   if ((label|0) == 30) {
    $121 = $yypos2631;
    $122 = $1;
    $123 = (($122) + 12|0);
    HEAP32[$123>>2] = $121;
    $124 = $yythunkpos2631;
    $125 = $1;
    $126 = (($125) + 44|0);
    HEAP32[$126>>2] = $124;
   }
   while(1) {
    $127 = $1;
    $128 = (($127) + 12|0);
    $129 = HEAP32[$128>>2]|0;
    $yypos2638 = $129;
    $130 = $1;
    $131 = (($130) + 44|0);
    $132 = HEAP32[$131>>2]|0;
    $yythunkpos2638 = $132;
    $133 = $1;
    $134 = (_yy_Block($133)|0);
    $135 = ($134|0)!=(0);
    if (!($135)) {
     break;
    }
    $136 = $1;
    $137 = $1;
    $138 = (($137) + 28|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $1;
    $141 = (($140) + 32|0);
    $142 = HEAP32[$141>>2]|0;
    _yyDo($136,10,$139,$142,46904);
   }
   $143 = $yypos2638;
   $144 = $1;
   $145 = (($144) + 12|0);
   HEAP32[$145>>2] = $143;
   $146 = $yythunkpos2638;
   $147 = $1;
   $148 = (($147) + 44|0);
   HEAP32[$148>>2] = $146;
   while(1) {
    $149 = $1;
    $150 = (($149) + 12|0);
    $151 = HEAP32[$150>>2]|0;
    $yypos2640 = $151;
    $152 = $1;
    $153 = (($152) + 44|0);
    $154 = HEAP32[$153>>2]|0;
    $yythunkpos2640 = $154;
    $155 = $1;
    $156 = (_yy_BlankLine($155)|0);
    $157 = ($156|0)!=(0);
    if (!($157)) {
     break;
    }
   }
   $158 = $yypos2640;
   $159 = $1;
   $160 = (($159) + 12|0);
   HEAP32[$160>>2] = $158;
   $161 = $yythunkpos2640;
   $162 = $1;
   $163 = (($162) + 44|0);
   HEAP32[$163>>2] = $161;
   $164 = $1;
   $165 = $1;
   $166 = (($165) + 28|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = $1;
   $169 = (($168) + 32|0);
   $170 = HEAP32[$169>>2]|0;
   _yyDo($164,11,$167,$170,46920);
   $171 = $1;
   _yyDo($171,12,2,0,41392);
   $0 = 1;
   $178 = $0;
   STACKTOP = sp;return ($178|0);
  } else {
  }
 } while(0);
 $172 = $yypos0;
 $173 = $1;
 $174 = (($173) + 12|0);
 HEAP32[$174>>2] = $172;
 $175 = $yythunkpos0;
 $176 = $1;
 $177 = (($176) + 44|0);
 HEAP32[$177>>2] = $175;
 $0 = 0;
 $178 = $0;
 STACKTOP = sp;return ($178|0);
}
function _yy_DocForCritic($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos24 = 0, $yypos27 = 0, $yypos28 = 0, $yypos32 = 0, $yythunkpos0 = 0, $yythunkpos24 = 0, $yythunkpos27 = 0, $yythunkpos28 = 0, $yythunkpos32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 $9 = $1;
 $10 = (($9) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $yypos24 = $11;
 $12 = $1;
 $13 = (($12) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $yythunkpos24 = $14;
 $15 = $1;
 $16 = (_yy_BOM($15)|0);
 $17 = ($16|0)!=(0);
 if ($17) {
 } else {
  $18 = $yypos24;
  $19 = $1;
  $20 = (($19) + 12|0);
  HEAP32[$20>>2] = $18;
  $21 = $yythunkpos24;
  $22 = $1;
  $23 = (($22) + 44|0);
  HEAP32[$23>>2] = $21;
 }
 $24 = $1;
 $25 = (_yy_StartList($24)|0);
 $26 = ($25|0)!=(0);
 do {
  if ($26) {
   $27 = $1;
   _yyDo($27,8,-1,0,41336);
   L8: while(1) {
    $28 = $1;
    $29 = (($28) + 12|0);
    $30 = HEAP32[$29>>2]|0;
    $yypos27 = $30;
    $31 = $1;
    $32 = (($31) + 44|0);
    $33 = HEAP32[$32>>2]|0;
    $yythunkpos27 = $33;
    $34 = $1;
    $35 = (($34) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $yypos28 = $36;
    $37 = $1;
    $38 = (($37) + 44|0);
    $39 = HEAP32[$38>>2]|0;
    $yythunkpos28 = $39;
    $40 = $1;
    $41 = (_yy_CriticString($40)|0);
    $42 = ($41|0)!=(0);
    do {
     if ($42) {
      $43 = $1;
      $44 = $1;
      $45 = (($44) + 28|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = $1;
      $48 = (($47) + 32|0);
      $49 = HEAP32[$48>>2]|0;
      _yyDo($43,13,$46,$49,46736);
     } else {
      $50 = $yypos28;
      $51 = $1;
      $52 = (($51) + 12|0);
      HEAP32[$52>>2] = $50;
      $53 = $yythunkpos28;
      $54 = $1;
      $55 = (($54) + 44|0);
      HEAP32[$55>>2] = $53;
      $56 = $1;
      $57 = (_yy_RawString($56)|0);
      $58 = ($57|0)!=(0);
      if ($58) {
       $59 = $1;
       $60 = $1;
       $61 = (($60) + 28|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = $1;
       $64 = (($63) + 32|0);
       $65 = HEAP32[$64>>2]|0;
       _yyDo($59,14,$62,$65,46760);
       break;
      }
      $66 = $yypos28;
      $67 = $1;
      $68 = (($67) + 12|0);
      HEAP32[$68>>2] = $66;
      $69 = $yythunkpos28;
      $70 = $1;
      $71 = (($70) + 44|0);
      HEAP32[$71>>2] = $69;
      $72 = $1;
      $73 = (_yy_FalseMatch($72)|0);
      $74 = ($73|0)!=(0);
      if (!($74)) {
       break L8;
      }
      $75 = $1;
      $76 = $1;
      $77 = (($76) + 28|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = $1;
      $80 = (($79) + 32|0);
      $81 = HEAP32[$80>>2]|0;
      _yyDo($75,15,$78,$81,46784);
     }
    } while(0);
   }
   $82 = $yypos27;
   $83 = $1;
   $84 = (($83) + 12|0);
   HEAP32[$84>>2] = $82;
   $85 = $yythunkpos27;
   $86 = $1;
   $87 = (($86) + 44|0);
   HEAP32[$87>>2] = $85;
   while(1) {
    $88 = $1;
    $89 = (($88) + 12|0);
    $90 = HEAP32[$89>>2]|0;
    $yypos32 = $90;
    $91 = $1;
    $92 = (($91) + 44|0);
    $93 = HEAP32[$92>>2]|0;
    $yythunkpos32 = $93;
    $94 = $1;
    $95 = (_yy_RawString($94)|0);
    $96 = ($95|0)!=(0);
    if (!($96)) {
     break;
    }
    $97 = $1;
    $98 = $1;
    $99 = (($98) + 28|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $1;
    $102 = (($101) + 32|0);
    $103 = HEAP32[$102>>2]|0;
    _yyDo($97,16,$100,$103,46808);
   }
   $104 = $yypos32;
   $105 = $1;
   $106 = (($105) + 12|0);
   HEAP32[$106>>2] = $104;
   $107 = $yythunkpos32;
   $108 = $1;
   $109 = (($108) + 44|0);
   HEAP32[$109>>2] = $107;
   $110 = $1;
   $111 = (_yy_Eof($110)|0);
   $112 = ($111|0)!=(0);
   if (!($112)) {
    break;
   }
   $113 = $1;
   $114 = $1;
   $115 = (($114) + 28|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = $1;
   $118 = (($117) + 32|0);
   $119 = HEAP32[$118>>2]|0;
   _yyDo($113,17,$116,$119,46832);
   $120 = $1;
   _yyDo($120,12,1,0,41392);
   $0 = 1;
   $127 = $0;
   STACKTOP = sp;return ($127|0);
  } else {
  }
 } while(0);
 $121 = $yypos0;
 $122 = $1;
 $123 = (($122) + 12|0);
 HEAP32[$123>>2] = $121;
 $124 = $yythunkpos0;
 $125 = $1;
 $126 = (($125) + 44|0);
 HEAP32[$126>>2] = $124;
 $0 = 0;
 $127 = $0;
 STACKTOP = sp;return ($127|0);
}
function _yy_DocForOPML($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos138 = 0, $yypos140 = 0, $yypos142 = 0, $yypos143 = 0, $yypos145 = 0, $yypos147 = 0, $yypos149 = 0, $yythunkpos0 = 0, $yythunkpos138 = 0, $yythunkpos140 = 0;
 var $yythunkpos142 = 0, $yythunkpos143 = 0, $yythunkpos145 = 0, $yythunkpos147 = 0, $yythunkpos149 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 $9 = $1;
 $10 = (($9) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $yypos138 = $11;
 $12 = $1;
 $13 = (($12) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $yythunkpos138 = $14;
 $15 = $1;
 $16 = (_yy_BOM($15)|0);
 $17 = ($16|0)!=(0);
 if ($17) {
 } else {
  $18 = $yypos138;
  $19 = $1;
  $20 = (($19) + 12|0);
  HEAP32[$20>>2] = $18;
  $21 = $yythunkpos138;
  $22 = $1;
  $23 = (($22) + 44|0);
  HEAP32[$23>>2] = $21;
 }
 $24 = $1;
 $25 = (_yy_StartList($24)|0);
 $26 = ($25|0)!=(0);
 if (!($26)) {
  $162 = $yypos0;
  $163 = $1;
  $164 = (($163) + 12|0);
  HEAP32[$164>>2] = $162;
  $165 = $yythunkpos0;
  $166 = $1;
  $167 = (($166) + 44|0);
  HEAP32[$167>>2] = $165;
  $0 = 0;
  $168 = $0;
  STACKTOP = sp;return ($168|0);
 }
 $27 = $1;
 _yyDo($27,8,-1,0,41336);
 $28 = $1;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $yypos140 = $30;
 $31 = $1;
 $32 = (($31) + 44|0);
 $33 = HEAP32[$32>>2]|0;
 $yythunkpos140 = $33;
 $34 = $1;
 $35 = $1;
 $36 = (($35) + 28|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $1;
 $39 = (($38) + 32|0);
 $40 = HEAP32[$39>>2]|0;
 (_yyText($34,$37,$40)|0);
 $41 = $1;
 $42 = (($41) + 64|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($43) + 12|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (_extension(1,$45)|0);
 do {
  if ($46) {
   label = 27;
  } else {
   $47 = $1;
   $48 = (($47) + 12|0);
   $49 = HEAP32[$48>>2]|0;
   $yypos142 = $49;
   $50 = $1;
   $51 = (($50) + 44|0);
   $52 = HEAP32[$51>>2]|0;
   $yythunkpos142 = $52;
   $53 = $1;
   $54 = (($53) + 12|0);
   $55 = HEAP32[$54>>2]|0;
   $yypos143 = $55;
   $56 = $1;
   $57 = (($56) + 44|0);
   $58 = HEAP32[$57>>2]|0;
   $yythunkpos143 = $58;
   $59 = $1;
   $60 = (_yy_YAMLStart($59)|0);
   $61 = ($60|0)!=(0);
   if ($61) {
   } else {
    $62 = $yypos143;
    $63 = $1;
    $64 = (($63) + 12|0);
    HEAP32[$64>>2] = $62;
    $65 = $yythunkpos143;
    $66 = $1;
    $67 = (($66) + 44|0);
    HEAP32[$67>>2] = $65;
   }
   $68 = $1;
   $69 = (_yy_MetaDataKey($68)|0);
   $70 = ($69|0)!=(0);
   if (!($70)) {
    label = 27;
    break;
   }
   $71 = $1;
   $72 = (_yy_Sp($71)|0);
   $73 = ($72|0)!=(0);
   if (!($73)) {
    label = 27;
    break;
   }
   $74 = $1;
   $75 = (_yymatchChar($74,58)|0);
   $76 = ($75|0)!=(0);
   if (!($76)) {
    label = 27;
    break;
   }
   $77 = $1;
   $78 = (_yy_Sp($77)|0);
   $79 = ($78|0)!=(0);
   if (!($79)) {
    label = 27;
    break;
   }
   $80 = $1;
   $81 = (($80) + 12|0);
   $82 = HEAP32[$81>>2]|0;
   $yypos145 = $82;
   $83 = $1;
   $84 = (($83) + 44|0);
   $85 = HEAP32[$84>>2]|0;
   $yythunkpos145 = $85;
   $86 = $1;
   $87 = (_yy_Newline($86)|0);
   $88 = ($87|0)!=(0);
   if ($88) {
    label = 27;
    break;
   }
   $89 = $yypos145;
   $90 = $1;
   $91 = (($90) + 12|0);
   HEAP32[$91>>2] = $89;
   $92 = $yythunkpos145;
   $93 = $1;
   $94 = (($93) + 44|0);
   HEAP32[$94>>2] = $92;
   $95 = $yypos142;
   $96 = $1;
   $97 = (($96) + 12|0);
   HEAP32[$97>>2] = $95;
   $98 = $yythunkpos142;
   $99 = $1;
   $100 = (($99) + 44|0);
   HEAP32[$100>>2] = $98;
   $101 = $1;
   $102 = (_yy_MetaData($101)|0);
   $103 = ($102|0)!=(0);
   if ($103) {
    $104 = $1;
    $105 = $1;
    $106 = (($105) + 28|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = $1;
    $109 = (($108) + 32|0);
    $110 = HEAP32[$109>>2]|0;
    _yyDo($104,18,$107,$110,46512);
    break;
   } else {
    label = 27;
    break;
   }
  }
 } while(0);
 if ((label|0) == 27) {
  $111 = $yypos140;
  $112 = $1;
  $113 = (($112) + 12|0);
  HEAP32[$113>>2] = $111;
  $114 = $yythunkpos140;
  $115 = $1;
  $116 = (($115) + 44|0);
  HEAP32[$116>>2] = $114;
 }
 while(1) {
  $117 = $1;
  $118 = (($117) + 12|0);
  $119 = HEAP32[$118>>2]|0;
  $yypos147 = $119;
  $120 = $1;
  $121 = (($120) + 44|0);
  $122 = HEAP32[$121>>2]|0;
  $yythunkpos147 = $122;
  $123 = $1;
  $124 = (_yy_OPMLBlock($123)|0);
  $125 = ($124|0)!=(0);
  if (!($125)) {
   break;
  }
  $126 = $1;
  $127 = $1;
  $128 = (($127) + 28|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = $1;
  $131 = (($130) + 32|0);
  $132 = HEAP32[$131>>2]|0;
  _yyDo($126,19,$129,$132,46528);
 }
 $133 = $yypos147;
 $134 = $1;
 $135 = (($134) + 12|0);
 HEAP32[$135>>2] = $133;
 $136 = $yythunkpos147;
 $137 = $1;
 $138 = (($137) + 44|0);
 HEAP32[$138>>2] = $136;
 while(1) {
  $139 = $1;
  $140 = (($139) + 12|0);
  $141 = HEAP32[$140>>2]|0;
  $yypos149 = $141;
  $142 = $1;
  $143 = (($142) + 44|0);
  $144 = HEAP32[$143>>2]|0;
  $yythunkpos149 = $144;
  $145 = $1;
  $146 = (_yy_BlankLine($145)|0);
  $147 = ($146|0)!=(0);
  if (!($147)) {
   break;
  }
 }
 $148 = $yypos149;
 $149 = $1;
 $150 = (($149) + 12|0);
 HEAP32[$150>>2] = $148;
 $151 = $yythunkpos149;
 $152 = $1;
 $153 = (($152) + 44|0);
 HEAP32[$153>>2] = $151;
 $154 = $1;
 $155 = $1;
 $156 = (($155) + 28|0);
 $157 = HEAP32[$156>>2]|0;
 $158 = $1;
 $159 = (($158) + 32|0);
 $160 = HEAP32[$159>>2]|0;
 _yyDo($154,20,$157,$160,46544);
 $161 = $1;
 _yyDo($161,12,1,0,41392);
 $0 = 1;
 $168 = $0;
 STACKTOP = sp;return ($168|0);
}
function _yy_DocForTOC($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos76 = 0, $yypos78 = 0, $yypos80 = 0, $yypos81 = 0, $yypos83 = 0, $yypos85 = 0, $yypos86 = 0;
 var $yypos89 = 0, $yythunkpos0 = 0, $yythunkpos76 = 0, $yythunkpos78 = 0, $yythunkpos80 = 0, $yythunkpos81 = 0, $yythunkpos83 = 0, $yythunkpos85 = 0, $yythunkpos86 = 0, $yythunkpos89 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,2,0,41328);
 $9 = $1;
 $10 = (($9) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $yypos76 = $11;
 $12 = $1;
 $13 = (($12) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $yythunkpos76 = $14;
 $15 = $1;
 $16 = (_yy_BOM($15)|0);
 $17 = ($16|0)!=(0);
 if ($17) {
 } else {
  $18 = $yypos76;
  $19 = $1;
  $20 = (($19) + 12|0);
  HEAP32[$20>>2] = $18;
  $21 = $yythunkpos76;
  $22 = $1;
  $23 = (($22) + 44|0);
  HEAP32[$23>>2] = $21;
 }
 $24 = $1;
 $25 = (_yy_StartList($24)|0);
 $26 = ($25|0)!=(0);
 if (!($26)) {
  $165 = $yypos0;
  $166 = $1;
  $167 = (($166) + 12|0);
  HEAP32[$167>>2] = $165;
  $168 = $yythunkpos0;
  $169 = $1;
  $170 = (($169) + 44|0);
  HEAP32[$170>>2] = $168;
  $0 = 0;
  $171 = $0;
  STACKTOP = sp;return ($171|0);
 }
 $27 = $1;
 _yyDo($27,8,-2,0,41336);
 $28 = $1;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $yypos78 = $30;
 $31 = $1;
 $32 = (($31) + 44|0);
 $33 = HEAP32[$32>>2]|0;
 $yythunkpos78 = $33;
 $34 = $1;
 $35 = (($34) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 $yypos80 = $36;
 $37 = $1;
 $38 = (($37) + 44|0);
 $39 = HEAP32[$38>>2]|0;
 $yythunkpos80 = $39;
 $40 = $1;
 $41 = (($40) + 12|0);
 $42 = HEAP32[$41>>2]|0;
 $yypos81 = $42;
 $43 = $1;
 $44 = (($43) + 44|0);
 $45 = HEAP32[$44>>2]|0;
 $yythunkpos81 = $45;
 $46 = $1;
 $47 = (_yy_YAMLStart($46)|0);
 $48 = ($47|0)!=(0);
 if ($48) {
 } else {
  $49 = $yypos81;
  $50 = $1;
  $51 = (($50) + 12|0);
  HEAP32[$51>>2] = $49;
  $52 = $yythunkpos81;
  $53 = $1;
  $54 = (($53) + 44|0);
  HEAP32[$54>>2] = $52;
 }
 $55 = $1;
 $56 = (_yy_MetaDataKey($55)|0);
 $57 = ($56|0)!=(0);
 do {
  if ($57) {
   $58 = $1;
   $59 = (_yy_Sp($58)|0);
   $60 = ($59|0)!=(0);
   if (!($60)) {
    label = 25;
    break;
   }
   $61 = $1;
   $62 = (_yymatchChar($61,58)|0);
   $63 = ($62|0)!=(0);
   if (!($63)) {
    label = 25;
    break;
   }
   $64 = $1;
   $65 = (_yy_Sp($64)|0);
   $66 = ($65|0)!=(0);
   if (!($66)) {
    label = 25;
    break;
   }
   $67 = $1;
   $68 = (($67) + 12|0);
   $69 = HEAP32[$68>>2]|0;
   $yypos83 = $69;
   $70 = $1;
   $71 = (($70) + 44|0);
   $72 = HEAP32[$71>>2]|0;
   $yythunkpos83 = $72;
   $73 = $1;
   $74 = (_yy_Newline($73)|0);
   $75 = ($74|0)!=(0);
   if ($75) {
    label = 25;
    break;
   }
   $76 = $yypos83;
   $77 = $1;
   $78 = (($77) + 12|0);
   HEAP32[$78>>2] = $76;
   $79 = $yythunkpos83;
   $80 = $1;
   $81 = (($80) + 44|0);
   HEAP32[$81>>2] = $79;
   $82 = $yypos80;
   $83 = $1;
   $84 = (($83) + 12|0);
   HEAP32[$84>>2] = $82;
   $85 = $yythunkpos80;
   $86 = $1;
   $87 = (($86) + 44|0);
   HEAP32[$87>>2] = $85;
   $88 = $1;
   $89 = (_yy_MetaData($88)|0);
   $90 = ($89|0)!=(0);
   if ($90) {
    $91 = $1;
    _yyDo($91,8,-1,0,41336);
    $92 = $1;
    $93 = $1;
    $94 = (($93) + 28|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = $1;
    $97 = (($96) + 32|0);
    $98 = HEAP32[$97>>2]|0;
    _yyDo($92,21,$95,$98,46336);
    break;
   } else {
    label = 25;
    break;
   }
  } else {
   label = 25;
  }
 } while(0);
 if ((label|0) == 25) {
  $99 = $yypos78;
  $100 = $1;
  $101 = (($100) + 12|0);
  HEAP32[$101>>2] = $99;
  $102 = $yythunkpos78;
  $103 = $1;
  $104 = (($103) + 44|0);
  HEAP32[$104>>2] = $102;
 }
 while(1) {
  $105 = $1;
  $106 = (($105) + 12|0);
  $107 = HEAP32[$106>>2]|0;
  $yypos85 = $107;
  $108 = $1;
  $109 = (($108) + 44|0);
  $110 = HEAP32[$109>>2]|0;
  $yythunkpos85 = $110;
  $111 = $1;
  $112 = (($111) + 12|0);
  $113 = HEAP32[$112>>2]|0;
  $yypos86 = $113;
  $114 = $1;
  $115 = (($114) + 44|0);
  $116 = HEAP32[$115>>2]|0;
  $yythunkpos86 = $116;
  $117 = $1;
  $118 = (_yy_TOCBlock($117)|0);
  $119 = ($118|0)!=(0);
  if ($119) {
   $120 = $1;
   $121 = $1;
   $122 = (($121) + 28|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = $1;
   $125 = (($124) + 32|0);
   $126 = HEAP32[$125>>2]|0;
   _yyDo($120,22,$123,$126,46352);
  } else {
   $127 = $yypos86;
   $128 = $1;
   $129 = (($128) + 12|0);
   HEAP32[$129>>2] = $127;
   $130 = $yythunkpos86;
   $131 = $1;
   $132 = (($131) + 44|0);
   HEAP32[$132>>2] = $130;
   $133 = $1;
   $134 = (_yy_TOCPlain($133)|0);
   $135 = ($134|0)!=(0);
   if (!($135)) {
    break;
   }
  }
 }
 $136 = $yypos85;
 $137 = $1;
 $138 = (($137) + 12|0);
 HEAP32[$138>>2] = $136;
 $139 = $yythunkpos85;
 $140 = $1;
 $141 = (($140) + 44|0);
 HEAP32[$141>>2] = $139;
 while(1) {
  $142 = $1;
  $143 = (($142) + 12|0);
  $144 = HEAP32[$143>>2]|0;
  $yypos89 = $144;
  $145 = $1;
  $146 = (($145) + 44|0);
  $147 = HEAP32[$146>>2]|0;
  $yythunkpos89 = $147;
  $148 = $1;
  $149 = (_yy_BlankLine($148)|0);
  $150 = ($149|0)!=(0);
  if (!($150)) {
   break;
  }
 }
 $151 = $yypos89;
 $152 = $1;
 $153 = (($152) + 12|0);
 HEAP32[$153>>2] = $151;
 $154 = $yythunkpos89;
 $155 = $1;
 $156 = (($155) + 44|0);
 HEAP32[$156>>2] = $154;
 $157 = $1;
 $158 = $1;
 $159 = (($158) + 28|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = $1;
 $162 = (($161) + 32|0);
 $163 = HEAP32[$162>>2]|0;
 _yyDo($157,23,$160,$163,46368);
 $164 = $1;
 _yyDo($164,12,2,0,41392);
 $0 = 1;
 $171 = $0;
 STACKTOP = sp;return ($171|0);
}
function _yy_DocForMetaDataOnly($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos2514 = 0, $yypos2516 = 0, $yypos2518 = 0, $yypos2519 = 0, $yypos2521 = 0, $yypos2523 = 0, $yypos2525 = 0, $yythunkpos0 = 0, $yythunkpos2514 = 0, $yythunkpos2516 = 0;
 var $yythunkpos2518 = 0, $yythunkpos2519 = 0, $yythunkpos2521 = 0, $yythunkpos2523 = 0, $yythunkpos2525 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 $9 = $1;
 $10 = (($9) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $yypos2514 = $11;
 $12 = $1;
 $13 = (($12) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $yythunkpos2514 = $14;
 $15 = $1;
 $16 = (_yy_BOM($15)|0);
 $17 = ($16|0)!=(0);
 if ($17) {
 } else {
  $18 = $yypos2514;
  $19 = $1;
  $20 = (($19) + 12|0);
  HEAP32[$20>>2] = $18;
  $21 = $yythunkpos2514;
  $22 = $1;
  $23 = (($22) + 44|0);
  HEAP32[$23>>2] = $21;
 }
 $24 = $1;
 $25 = (_yy_StartList($24)|0);
 $26 = ($25|0)!=(0);
 if (!($26)) {
  $142 = $yypos0;
  $143 = $1;
  $144 = (($143) + 12|0);
  HEAP32[$144>>2] = $142;
  $145 = $yythunkpos0;
  $146 = $1;
  $147 = (($146) + 44|0);
  HEAP32[$147>>2] = $145;
  $0 = 0;
  $148 = $0;
  STACKTOP = sp;return ($148|0);
 }
 $27 = $1;
 _yyDo($27,8,-1,0,41336);
 $28 = $1;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $yypos2516 = $30;
 $31 = $1;
 $32 = (($31) + 44|0);
 $33 = HEAP32[$32>>2]|0;
 $yythunkpos2516 = $33;
 $34 = $1;
 $35 = (($34) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 $yypos2518 = $36;
 $37 = $1;
 $38 = (($37) + 44|0);
 $39 = HEAP32[$38>>2]|0;
 $yythunkpos2518 = $39;
 $40 = $1;
 $41 = (($40) + 12|0);
 $42 = HEAP32[$41>>2]|0;
 $yypos2519 = $42;
 $43 = $1;
 $44 = (($43) + 44|0);
 $45 = HEAP32[$44>>2]|0;
 $yythunkpos2519 = $45;
 $46 = $1;
 $47 = (_yy_YAMLStart($46)|0);
 $48 = ($47|0)!=(0);
 if ($48) {
 } else {
  $49 = $yypos2519;
  $50 = $1;
  $51 = (($50) + 12|0);
  HEAP32[$51>>2] = $49;
  $52 = $yythunkpos2519;
  $53 = $1;
  $54 = (($53) + 44|0);
  HEAP32[$54>>2] = $52;
 }
 $55 = $1;
 $56 = (_yy_MetaDataKey($55)|0);
 $57 = ($56|0)!=(0);
 do {
  if ($57) {
   $58 = $1;
   $59 = (_yy_Sp($58)|0);
   $60 = ($59|0)!=(0);
   if (!($60)) {
    label = 25;
    break;
   }
   $61 = $1;
   $62 = (_yymatchChar($61,58)|0);
   $63 = ($62|0)!=(0);
   if (!($63)) {
    label = 25;
    break;
   }
   $64 = $1;
   $65 = (_yy_Sp($64)|0);
   $66 = ($65|0)!=(0);
   if (!($66)) {
    label = 25;
    break;
   }
   $67 = $1;
   $68 = (($67) + 12|0);
   $69 = HEAP32[$68>>2]|0;
   $yypos2521 = $69;
   $70 = $1;
   $71 = (($70) + 44|0);
   $72 = HEAP32[$71>>2]|0;
   $yythunkpos2521 = $72;
   $73 = $1;
   $74 = (_yy_Newline($73)|0);
   $75 = ($74|0)!=(0);
   if ($75) {
    label = 25;
    break;
   }
   $76 = $yypos2521;
   $77 = $1;
   $78 = (($77) + 12|0);
   HEAP32[$78>>2] = $76;
   $79 = $yythunkpos2521;
   $80 = $1;
   $81 = (($80) + 44|0);
   HEAP32[$81>>2] = $79;
   $82 = $yypos2518;
   $83 = $1;
   $84 = (($83) + 12|0);
   HEAP32[$84>>2] = $82;
   $85 = $yythunkpos2518;
   $86 = $1;
   $87 = (($86) + 44|0);
   HEAP32[$87>>2] = $85;
   $88 = $1;
   $89 = (_yy_MetaData($88)|0);
   $90 = ($89|0)!=(0);
   if ($90) {
    $91 = $1;
    $92 = $1;
    $93 = (($92) + 28|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = $1;
    $96 = (($95) + 32|0);
    $97 = HEAP32[$96>>2]|0;
    _yyDo($91,24,$94,$97,41344);
    break;
   } else {
    label = 25;
    break;
   }
  } else {
   label = 25;
  }
 } while(0);
 if ((label|0) == 25) {
  $98 = $yypos2516;
  $99 = $1;
  $100 = (($99) + 12|0);
  HEAP32[$100>>2] = $98;
  $101 = $yythunkpos2516;
  $102 = $1;
  $103 = (($102) + 44|0);
  HEAP32[$103>>2] = $101;
 }
 while(1) {
  $104 = $1;
  $105 = (($104) + 12|0);
  $106 = HEAP32[$105>>2]|0;
  $yypos2523 = $106;
  $107 = $1;
  $108 = (($107) + 44|0);
  $109 = HEAP32[$108>>2]|0;
  $yythunkpos2523 = $109;
  $110 = $1;
  $111 = (_yy_SkipBlock($110)|0);
  $112 = ($111|0)!=(0);
  if (!($112)) {
   break;
  }
 }
 $113 = $yypos2523;
 $114 = $1;
 $115 = (($114) + 12|0);
 HEAP32[$115>>2] = $113;
 $116 = $yythunkpos2523;
 $117 = $1;
 $118 = (($117) + 44|0);
 HEAP32[$118>>2] = $116;
 while(1) {
  $119 = $1;
  $120 = (($119) + 12|0);
  $121 = HEAP32[$120>>2]|0;
  $yypos2525 = $121;
  $122 = $1;
  $123 = (($122) + 44|0);
  $124 = HEAP32[$123>>2]|0;
  $yythunkpos2525 = $124;
  $125 = $1;
  $126 = (_yy_BlankLine($125)|0);
  $127 = ($126|0)!=(0);
  if (!($127)) {
   break;
  }
 }
 $128 = $yypos2525;
 $129 = $1;
 $130 = (($129) + 12|0);
 HEAP32[$130>>2] = $128;
 $131 = $yythunkpos2525;
 $132 = $1;
 $133 = (($132) + 44|0);
 HEAP32[$133>>2] = $131;
 $134 = $1;
 $135 = $1;
 $136 = (($135) + 28|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = $1;
 $139 = (($138) + 32|0);
 $140 = HEAP32[$139>>2]|0;
 _yyDo($134,25,$137,$140,41368);
 $141 = $1;
 _yyDo($141,12,1,0,41392);
 $0 = 1;
 $148 = $0;
 STACKTOP = sp;return ($148|0);
}
function _yyText($G,$begin,$end) {
 $G = $G|0;
 $begin = $begin|0;
 $end = $end|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $yyleng = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $begin;
 $2 = $end;
 $3 = $2;
 $4 = $1;
 $5 = (($3) - ($4))|0;
 $yyleng = $5;
 $6 = $yyleng;
 $7 = ($6|0)<=(0);
 if ($7) {
  $yyleng = 0;
  $35 = $yyleng;
  $36 = $0;
  $37 = (($36) + 20|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + ($35)|0);
  HEAP8[$39>>0] = 0;
  $40 = $yyleng;
  STACKTOP = sp;return ($40|0);
 }
 while(1) {
  $8 = $0;
  $9 = (($8) + 24|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $yyleng;
  $12 = (($11) + 1)|0;
  $13 = ($10|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $0;
  $15 = (($14) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16<<1;
  HEAP32[$15>>2] = $17;
  $18 = $0;
  $19 = (($18) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $0;
  $22 = (($21) + 24|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_realloc($20,$23)|0);
  $25 = $0;
  $26 = (($25) + 20|0);
  HEAP32[$26>>2] = $24;
 }
 $27 = $0;
 $28 = (($27) + 20|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $0;
 $31 = HEAP32[$30>>2]|0;
 $32 = $1;
 $33 = (($31) + ($32)|0);
 $34 = $yyleng;
 _memcpy(($29|0),($33|0),($34|0))|0;
 $35 = $yyleng;
 $36 = $0;
 $37 = (($36) + 20|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + ($35)|0);
 HEAP8[$39>>0] = 0;
 $40 = $yyleng;
 STACKTOP = sp;return ($40|0);
}
function _yyPush($G,$text,$count,$thunk,$yyxvar) {
 $G = $G|0;
 $text = $text|0;
 $count = $count|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $off = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $text;
 $2 = $count;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 56|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $7;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = (($13|0) / 4)&-1;
 $15 = $2;
 $16 = (($14) + ($15))|0;
 $off = $16;
 $17 = $off;
 $18 = $0;
 $19 = (($18) + 60|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($17>>>0)>($20>>>0);
 if (!($21)) {
  $49 = $2;
  $50 = $0;
  $51 = (($50) + 52|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + ($49<<2)|0);
  HEAP32[$51>>2] = $53;
  STACKTOP = sp;return;
 }
 while(1) {
  $22 = $0;
  $23 = (($22) + 60|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $off;
  $26 = (($25) + 1)|0;
  $27 = ($24>>>0)<($26>>>0);
  if (!($27)) {
   break;
  }
  $28 = $0;
  $29 = (($28) + 60|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30<<1;
  HEAP32[$29>>2] = $31;
 }
 $32 = $0;
 $33 = (($32) + 56|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $0;
 $36 = (($35) + 60|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $37<<2;
 $39 = (_realloc($34,$38)|0);
 $40 = $0;
 $41 = (($40) + 56|0);
 HEAP32[$41>>2] = $39;
 $42 = $0;
 $43 = (($42) + 56|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $off;
 $46 = (($44) + ($45<<2)|0);
 $47 = $0;
 $48 = (($47) + 52|0);
 HEAP32[$48>>2] = $46;
 STACKTOP = sp;return;
}
function _yyDo($G,$action,$begin,$end,$name) {
 $G = $G|0;
 $action = $action|0;
 $begin = $begin|0;
 $end = $end|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $action;
 $2 = $begin;
 $3 = $end;
 $4 = $name;
 while(1) {
  $5 = $0;
  $6 = (($5) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $0;
  $9 = (($8) + 40|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($7|0)>=($10|0);
  if (!($11)) {
   break;
  }
  $12 = $0;
  $13 = (($12) + 40|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14<<1;
  HEAP32[$13>>2] = $15;
  $16 = $0;
  $17 = (($16) + 36|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $0;
  $20 = (($19) + 40|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21*20)|0;
  $23 = (_realloc($18,$22)|0);
  $24 = $0;
  $25 = (($24) + 36|0);
  HEAP32[$25>>2] = $23;
 }
 $26 = $2;
 $27 = $0;
 $28 = (($27) + 44|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $0;
 $31 = (($30) + 36|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + (($29*20)|0)|0);
 HEAP32[$33>>2] = $26;
 $34 = $3;
 $35 = $0;
 $36 = (($35) + 44|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $0;
 $39 = (($38) + 36|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($40) + (($37*20)|0)|0);
 $42 = (($41) + 4|0);
 HEAP32[$42>>2] = $34;
 $43 = $1;
 $44 = $0;
 $45 = (($44) + 44|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $0;
 $48 = (($47) + 36|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (($49) + (($46*20)|0)|0);
 $51 = (($50) + 8|0);
 HEAP32[$51>>2] = $43;
 $52 = $4;
 $53 = $0;
 $54 = (($53) + 44|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $0;
 $57 = (($56) + 36|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (($58) + (($55*20)|0)|0);
 $60 = (($59) + 12|0);
 HEAP32[$60>>2] = $52;
 $61 = $0;
 $62 = (($61) + 44|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (($63) + 1)|0;
 HEAP32[$62>>2] = $64;
 STACKTOP = sp;return;
}
function _yy_BOM($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yythunkpos0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchString($8,46328)|0);
 $10 = ($9|0)!=(0);
 if ($10) {
  $0 = 1;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 $11 = $yypos0;
 $12 = $1;
 $13 = (($12) + 12|0);
 HEAP32[$13>>2] = $11;
 $14 = $yythunkpos0;
 $15 = $1;
 $16 = (($15) + 44|0);
 HEAP32[$16>>2] = $14;
 $0 = 0;
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _yy_StartList($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos2626 = 0, $yythunkpos0 = 0;
 var $yythunkpos2626 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos2626 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos2626 = $13;
 $14 = $1;
 $15 = (_yymatchDot($14)|0);
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $yypos2626;
  $18 = $1;
  $19 = (($18) + 12|0);
  HEAP32[$19>>2] = $17;
  $20 = $yythunkpos2626;
  $21 = $1;
  $22 = (($21) + 44|0);
  HEAP32[$22>>2] = $20;
  $23 = $1;
  $24 = $1;
  $25 = (($24) + 28|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $1;
  $28 = (($27) + 32|0);
  $29 = HEAP32[$28>>2]|0;
  _yyDo($23,26,$26,$29,46312);
  $0 = 1;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $30 = $yypos0;
 $31 = $1;
 $32 = (($31) + 12|0);
 HEAP32[$32>>2] = $30;
 $33 = $yythunkpos0;
 $34 = $1;
 $35 = (($34) + 44|0);
 HEAP32[$35>>2] = $33;
 $0 = 0;
 $36 = $0;
 STACKTOP = sp;return ($36|0);
}
function _yySet($G,$text,$count,$thunk,$yyxvar) {
 $G = $G|0;
 $text = $text|0;
 $count = $count|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $text;
 $2 = $count;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 $9 = $0;
 $10 = (($9) + 52|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($8<<2)|0);
 HEAP32[$12>>2] = $7;
 STACKTOP = sp;return;
}
function _yy_YAMLStart($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $yypos0 = 0, $yythunkpos0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchString($8,42760)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_BlankLine($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $0 = 1;
   $20 = $0;
   STACKTOP = sp;return ($20|0);
  } else {
  }
 } while(0);
 $14 = $yypos0;
 $15 = $1;
 $16 = (($15) + 12|0);
 HEAP32[$16>>2] = $14;
 $17 = $yythunkpos0;
 $18 = $1;
 $19 = (($18) + 44|0);
 HEAP32[$19>>2] = $17;
 $0 = 0;
 $20 = $0;
 STACKTOP = sp;return ($20|0);
}
function _yy_MetaDataKey($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0;
 var $yypos2607 = 0, $yypos2609 = 0, $yypos2611 = 0, $yypos2613 = 0, $yypos2614 = 0, $yypos2619 = 0, $yythunkpos0 = 0, $yythunkpos2607 = 0, $yythunkpos2609 = 0, $yythunkpos2611 = 0, $yythunkpos2613 = 0, $yythunkpos2614 = 0, $yythunkpos2619 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = $1;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($12) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 (_yyText($8,$11,$14)|0);
 $15 = $1;
 $16 = (($15) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = (($18) + 28|0);
 HEAP32[$19>>2] = $17;
 $20 = $1;
 $21 = (($20) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $yypos2607 = $22;
 $23 = $1;
 $24 = (($23) + 44|0);
 $25 = HEAP32[$24>>2]|0;
 $yythunkpos2607 = $25;
 $26 = $1;
 $27 = (_yymatchClass($26,42672,42712)|0);
 $28 = ($27|0)!=(0);
 do {
  if ($28) {
   while(1) {
    $29 = $1;
    $30 = (($29) + 12|0);
    $31 = HEAP32[$30>>2]|0;
    $yypos2609 = $31;
    $32 = $1;
    $33 = (($32) + 44|0);
    $34 = HEAP32[$33>>2]|0;
    $yythunkpos2609 = $34;
    $35 = $1;
    $36 = (_yymatchClass($35,42672,42712)|0);
    $37 = ($36|0)!=(0);
    if (!($37)) {
     break;
    }
   }
   $38 = $yypos2609;
   $39 = $1;
   $40 = (($39) + 12|0);
   HEAP32[$40>>2] = $38;
   $41 = $yythunkpos2609;
   $42 = $1;
   $43 = (($42) + 44|0);
   HEAP32[$43>>2] = $41;
   $44 = $1;
   $45 = (_yymatchString($44,42720)|0);
   $46 = ($45|0)!=(0);
   if ($46) {
    break;
   } else {
    label = 11;
    break;
   }
  } else {
   label = 11;
  }
 } while(0);
 do {
  if ((label|0) == 11) {
   $47 = $yypos2607;
   $48 = $1;
   $49 = (($48) + 12|0);
   HEAP32[$49>>2] = $47;
   $50 = $yythunkpos2607;
   $51 = $1;
   $52 = (($51) + 44|0);
   HEAP32[$52>>2] = $50;
   $53 = $1;
   $54 = (_yy_AlphanumericAscii($53)|0);
   $55 = ($54|0)!=(0);
   if (!($55)) {
    break;
   }
   L18: while(1) {
    $56 = $1;
    $57 = (($56) + 12|0);
    $58 = HEAP32[$57>>2]|0;
    $yypos2611 = $58;
    $59 = $1;
    $60 = (($59) + 44|0);
    $61 = HEAP32[$60>>2]|0;
    $yythunkpos2611 = $61;
    $62 = $1;
    $63 = (_yy_Sp($62)|0);
    $64 = ($63|0)!=(0);
    if (!($64)) {
     label = 15;
     break;
    }
    $65 = $1;
    $66 = (($65) + 12|0);
    $67 = HEAP32[$66>>2]|0;
    $yypos2614 = $67;
    $68 = $1;
    $69 = (($68) + 44|0);
    $70 = HEAP32[$69>>2]|0;
    $yythunkpos2614 = $70;
    $71 = $1;
    $72 = (_yy_AlphanumericAscii($71)|0);
    $73 = ($72|0)!=(0);
    do {
     if ($73) {
     } else {
      $74 = $yypos2614;
      $75 = $1;
      $76 = (($75) + 12|0);
      HEAP32[$76>>2] = $74;
      $77 = $yythunkpos2614;
      $78 = $1;
      $79 = (($78) + 44|0);
      HEAP32[$79>>2] = $77;
      $80 = $1;
      $81 = (_yymatchChar($80,95)|0);
      $82 = ($81|0)!=(0);
      if ($82) {
       break;
      }
      $83 = $yypos2614;
      $84 = $1;
      $85 = (($84) + 12|0);
      HEAP32[$85>>2] = $83;
      $86 = $yythunkpos2614;
      $87 = $1;
      $88 = (($87) + 44|0);
      HEAP32[$88>>2] = $86;
      $89 = $1;
      $90 = (_yymatchChar($89,32)|0);
      $91 = ($90|0)!=(0);
      if ($91) {
       break;
      }
      $92 = $yypos2614;
      $93 = $1;
      $94 = (($93) + 12|0);
      HEAP32[$94>>2] = $92;
      $95 = $yythunkpos2614;
      $96 = $1;
      $97 = (($96) + 44|0);
      HEAP32[$97>>2] = $95;
      $98 = $1;
      $99 = (_yymatchChar($98,45)|0);
      $100 = ($99|0)!=(0);
      if ($100) {
       break;
      }
      $101 = $yypos2614;
      $102 = $1;
      $103 = (($102) + 12|0);
      HEAP32[$103>>2] = $101;
      $104 = $yythunkpos2614;
      $105 = $1;
      $106 = (($105) + 44|0);
      HEAP32[$106>>2] = $104;
      $107 = $1;
      $108 = (_yymatchChar($107,46)|0);
      $109 = ($108|0)!=(0);
      if (!($109)) {
       label = 29;
       break L18;
      }
     }
    } while(0);
    L39: while(1) {
     $110 = $1;
     $111 = (($110) + 12|0);
     $112 = HEAP32[$111>>2]|0;
     $yypos2613 = $112;
     $113 = $1;
     $114 = (($113) + 44|0);
     $115 = HEAP32[$114>>2]|0;
     $yythunkpos2613 = $115;
     $116 = $1;
     $117 = (($116) + 12|0);
     $118 = HEAP32[$117>>2]|0;
     $yypos2619 = $118;
     $119 = $1;
     $120 = (($119) + 44|0);
     $121 = HEAP32[$120>>2]|0;
     $yythunkpos2619 = $121;
     $122 = $1;
     $123 = (_yy_AlphanumericAscii($122)|0);
     $124 = ($123|0)!=(0);
     do {
      if ($124) {
      } else {
       $125 = $yypos2619;
       $126 = $1;
       $127 = (($126) + 12|0);
       HEAP32[$127>>2] = $125;
       $128 = $yythunkpos2619;
       $129 = $1;
       $130 = (($129) + 44|0);
       HEAP32[$130>>2] = $128;
       $131 = $1;
       $132 = (_yymatchChar($131,95)|0);
       $133 = ($132|0)!=(0);
       if ($133) {
        break;
       }
       $134 = $yypos2619;
       $135 = $1;
       $136 = (($135) + 12|0);
       HEAP32[$136>>2] = $134;
       $137 = $yythunkpos2619;
       $138 = $1;
       $139 = (($138) + 44|0);
       HEAP32[$139>>2] = $137;
       $140 = $1;
       $141 = (_yymatchChar($140,32)|0);
       $142 = ($141|0)!=(0);
       if ($142) {
        break;
       }
       $143 = $yypos2619;
       $144 = $1;
       $145 = (($144) + 12|0);
       HEAP32[$145>>2] = $143;
       $146 = $yythunkpos2619;
       $147 = $1;
       $148 = (($147) + 44|0);
       HEAP32[$148>>2] = $146;
       $149 = $1;
       $150 = (_yymatchChar($149,45)|0);
       $151 = ($150|0)!=(0);
       if ($151) {
        break;
       }
       $152 = $yypos2619;
       $153 = $1;
       $154 = (($153) + 12|0);
       HEAP32[$154>>2] = $152;
       $155 = $yythunkpos2619;
       $156 = $1;
       $157 = (($156) + 44|0);
       HEAP32[$157>>2] = $155;
       $158 = $1;
       $159 = (_yymatchChar($158,46)|0);
       $160 = ($159|0)!=(0);
       if (!($160)) {
        break L39;
       }
      }
     } while(0);
    }
    $161 = $yypos2613;
    $162 = $1;
    $163 = (($162) + 12|0);
    HEAP32[$163>>2] = $161;
    $164 = $yythunkpos2613;
    $165 = $1;
    $166 = (($165) + 44|0);
    HEAP32[$166>>2] = $164;
   }
   if ((label|0) == 15) {
   }
   else if ((label|0) == 29) {
   }
   $167 = $yypos2611;
   $168 = $1;
   $169 = (($168) + 12|0);
   HEAP32[$169>>2] = $167;
   $170 = $yythunkpos2611;
   $171 = $1;
   $172 = (($171) + 44|0);
   HEAP32[$172>>2] = $170;
   $173 = $1;
   $174 = $1;
   $175 = (($174) + 28|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = $1;
   $178 = (($177) + 32|0);
   $179 = HEAP32[$178>>2]|0;
   (_yyText($173,$176,$179)|0);
   $180 = $1;
   $181 = (($180) + 12|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = $1;
   $184 = (($183) + 32|0);
   HEAP32[$184>>2] = $182;
   $185 = $1;
   $186 = $1;
   $187 = (($186) + 28|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = $1;
   $190 = (($189) + 32|0);
   $191 = HEAP32[$190>>2]|0;
   _yyDo($185,27,$188,$191,46288);
   $0 = 1;
   $198 = $0;
   STACKTOP = sp;return ($198|0);
  }
 } while(0);
 $192 = $yypos0;
 $193 = $1;
 $194 = (($193) + 12|0);
 HEAP32[$194>>2] = $192;
 $195 = $yythunkpos0;
 $196 = $1;
 $197 = (($196) + 44|0);
 HEAP32[$197>>2] = $195;
 $0 = 0;
 $198 = $0;
 STACKTOP = sp;return ($198|0);
}
function _yy_Sp($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos2605 = 0, $yythunkpos2605 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 while(1) {
  $1 = $0;
  $2 = (($1) + 12|0);
  $3 = HEAP32[$2>>2]|0;
  $yypos2605 = $3;
  $4 = $0;
  $5 = (($4) + 44|0);
  $6 = HEAP32[$5>>2]|0;
  $yythunkpos2605 = $6;
  $7 = $0;
  $8 = (_yy_Spacechar($7)|0);
  $9 = ($8|0)!=(0);
  if (!($9)) {
   break;
  }
 }
 $10 = $yypos2605;
 $11 = $0;
 $12 = (($11) + 12|0);
 HEAP32[$12>>2] = $10;
 $13 = $yythunkpos2605;
 $14 = $0;
 $15 = (($14) + 44|0);
 HEAP32[$15>>2] = $13;
 STACKTOP = sp;return 1;
}
function _yymatchChar($G,$c) {
 $G = $G|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $c;
 $3 = $1;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = (($6) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)>=($8|0);
 if ($9) {
  $10 = $1;
  $11 = (_yyrefill($10)|0);
  $12 = ($11|0)!=(0);
  if (!($12)) {
   $0 = 0;
   $31 = $0;
   STACKTOP = sp;return ($31|0);
  }
 }
 $13 = $1;
 $14 = (($13) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $1;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + ($15)|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $2;
 $22 = ($20|0)==($21|0);
 if ($22) {
  $23 = $1;
  $24 = (($23) + 12|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + 1)|0;
  HEAP32[$24>>2] = $26;
  $27 = $2;
  $28 = ($27|0)<(32);
  if ($28) {
  } else {
  }
  $0 = 1;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 } else {
  $29 = $2;
  $30 = ($29|0)<(32);
  if ($30) {
  } else {
  }
  $0 = 0;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 return (0)|0;
}
function _yy_Newline($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos2599 = 0, $yypos2601 = 0, $yythunkpos0 = 0, $yythunkpos2599 = 0, $yythunkpos2601 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos2599 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos2599 = $13;
 $14 = $1;
 $15 = (_yymatchChar($14,10)|0);
 $16 = ($15|0)!=(0);
 if ($16) {
 } else {
  $17 = $yypos2599;
  $18 = $1;
  $19 = (($18) + 12|0);
  HEAP32[$19>>2] = $17;
  $20 = $yythunkpos2599;
  $21 = $1;
  $22 = (($21) + 44|0);
  HEAP32[$22>>2] = $20;
  $23 = $1;
  $24 = (_yymatchChar($23,13)|0);
  $25 = ($24|0)!=(0);
  if (!($25)) {
   $41 = $yypos0;
   $42 = $1;
   $43 = (($42) + 12|0);
   HEAP32[$43>>2] = $41;
   $44 = $yythunkpos0;
   $45 = $1;
   $46 = (($45) + 44|0);
   HEAP32[$46>>2] = $44;
   $0 = 0;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  }
  $26 = $1;
  $27 = (($26) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $yypos2601 = $28;
  $29 = $1;
  $30 = (($29) + 44|0);
  $31 = HEAP32[$30>>2]|0;
  $yythunkpos2601 = $31;
  $32 = $1;
  $33 = (_yymatchChar($32,10)|0);
  $34 = ($33|0)!=(0);
  if ($34) {
  } else {
   $35 = $yypos2601;
   $36 = $1;
   $37 = (($36) + 12|0);
   HEAP32[$37>>2] = $35;
   $38 = $yythunkpos2601;
   $39 = $1;
   $40 = (($39) + 44|0);
   HEAP32[$40>>2] = $38;
  }
 }
 $0 = 1;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_MetaData($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos2588 = 0;
 var $yypos2590 = 0, $yypos2592 = 0, $yypos2593 = 0, $yypos2595 = 0, $yypos2596 = 0, $yythunkpos0 = 0, $yythunkpos2588 = 0, $yythunkpos2590 = 0, $yythunkpos2592 = 0, $yythunkpos2593 = 0, $yythunkpos2595 = 0, $yythunkpos2596 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 $9 = $1;
 $10 = (_yy_StartList($9)|0);
 $11 = ($10|0)!=(0);
 L1: do {
  if ($11) {
   $12 = $1;
   _yyDo($12,8,-1,0,41336);
   $13 = $1;
   $14 = (($13) + 12|0);
   $15 = HEAP32[$14>>2]|0;
   $yypos2588 = $15;
   $16 = $1;
   $17 = (($16) + 44|0);
   $18 = HEAP32[$17>>2]|0;
   $yythunkpos2588 = $18;
   $19 = $1;
   $20 = (_yy_YAMLStart($19)|0);
   $21 = ($20|0)!=(0);
   if ($21) {
   } else {
    $22 = $yypos2588;
    $23 = $1;
    $24 = (($23) + 12|0);
    HEAP32[$24>>2] = $22;
    $25 = $yythunkpos2588;
    $26 = $1;
    $27 = (($26) + 44|0);
    HEAP32[$27>>2] = $25;
    $28 = $1;
    $29 = (($28) + 12|0);
    $30 = HEAP32[$29>>2]|0;
    $yypos2590 = $30;
    $31 = $1;
    $32 = (($31) + 44|0);
    $33 = HEAP32[$32>>2]|0;
    $yythunkpos2590 = $33;
    $34 = $1;
    $35 = (_yymatchClass($34,42672,42712)|0);
    $36 = ($35|0)!=(0);
    do {
     if ($36) {
      while(1) {
       $37 = $1;
       $38 = (($37) + 12|0);
       $39 = HEAP32[$38>>2]|0;
       $yypos2592 = $39;
       $40 = $1;
       $41 = (($40) + 44|0);
       $42 = HEAP32[$41>>2]|0;
       $yythunkpos2592 = $42;
       $43 = $1;
       $44 = (_yymatchClass($43,42672,42712)|0);
       $45 = ($44|0)!=(0);
       if (!($45)) {
        break;
       }
      }
      $46 = $yypos2592;
      $47 = $1;
      $48 = (($47) + 12|0);
      HEAP32[$48>>2] = $46;
      $49 = $yythunkpos2592;
      $50 = $1;
      $51 = (($50) + 44|0);
      HEAP32[$51>>2] = $49;
      $52 = $1;
      $53 = (_yymatchString($52,42720)|0);
      $54 = ($53|0)!=(0);
      if ($54) {
       break L1;
      } else {
       break;
      }
     } else {
     }
    } while(0);
    $55 = $yypos2590;
    $56 = $1;
    $57 = (($56) + 12|0);
    HEAP32[$57>>2] = $55;
    $58 = $yythunkpos2590;
    $59 = $1;
    $60 = (($59) + 44|0);
    HEAP32[$60>>2] = $58;
    $61 = $1;
    $62 = (($61) + 12|0);
    $63 = HEAP32[$62>>2]|0;
    $yypos2593 = $63;
    $64 = $1;
    $65 = (($64) + 44|0);
    $66 = HEAP32[$65>>2]|0;
    $yythunkpos2593 = $66;
    $67 = $1;
    $68 = (_yy_SetextHeading($67)|0);
    $69 = ($68|0)!=(0);
    if ($69) {
     break;
    }
    $70 = $yypos2593;
    $71 = $1;
    $72 = (($71) + 12|0);
    HEAP32[$72>>2] = $70;
    $73 = $yythunkpos2593;
    $74 = $1;
    $75 = (($74) + 44|0);
    HEAP32[$75>>2] = $73;
   }
   $76 = $1;
   $77 = (_yy_MetaDataKeyValue($76)|0);
   $78 = ($77|0)!=(0);
   if (!($78)) {
    break;
   }
   $79 = $1;
   $80 = $1;
   $81 = (($80) + 28|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = $1;
   $84 = (($83) + 32|0);
   $85 = HEAP32[$84>>2]|0;
   _yyDo($79,28,$82,$85,42728);
   while(1) {
    $86 = $1;
    $87 = (($86) + 12|0);
    $88 = HEAP32[$87>>2]|0;
    $yypos2595 = $88;
    $89 = $1;
    $90 = (($89) + 44|0);
    $91 = HEAP32[$90>>2]|0;
    $yythunkpos2595 = $91;
    $92 = $1;
    $93 = (_yy_MetaDataKeyValue($92)|0);
    $94 = ($93|0)!=(0);
    if (!($94)) {
     break;
    }
    $95 = $1;
    $96 = $1;
    $97 = (($96) + 28|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = $1;
    $100 = (($99) + 32|0);
    $101 = HEAP32[$100>>2]|0;
    _yyDo($95,28,$98,$101,42728);
   }
   $102 = $yypos2595;
   $103 = $1;
   $104 = (($103) + 12|0);
   HEAP32[$104>>2] = $102;
   $105 = $yythunkpos2595;
   $106 = $1;
   $107 = (($106) + 44|0);
   HEAP32[$107>>2] = $105;
   $108 = $1;
   $109 = (($108) + 12|0);
   $110 = HEAP32[$109>>2]|0;
   $yypos2596 = $110;
   $111 = $1;
   $112 = (($111) + 44|0);
   $113 = HEAP32[$112>>2]|0;
   $yythunkpos2596 = $113;
   $114 = $1;
   $115 = (_yy_YAMLStop($114)|0);
   $116 = ($115|0)!=(0);
   if ($116) {
   } else {
    $117 = $yypos2596;
    $118 = $1;
    $119 = (($118) + 12|0);
    HEAP32[$119>>2] = $117;
    $120 = $yythunkpos2596;
    $121 = $1;
    $122 = (($121) + 44|0);
    HEAP32[$122>>2] = $120;
   }
   $123 = $1;
   $124 = $1;
   $125 = (($124) + 28|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = $1;
   $128 = (($127) + 32|0);
   $129 = HEAP32[$128>>2]|0;
   _yyDo($123,29,$126,$129,42744);
   $130 = $1;
   _yyDo($130,12,1,0,41392);
   $0 = 1;
   $137 = $0;
   STACKTOP = sp;return ($137|0);
  } else {
  }
 } while(0);
 $131 = $yypos0;
 $132 = $1;
 $133 = (($132) + 12|0);
 HEAP32[$133>>2] = $131;
 $134 = $yythunkpos0;
 $135 = $1;
 $136 = (($135) + 44|0);
 HEAP32[$136>>2] = $134;
 $0 = 0;
 $137 = $0;
 STACKTOP = sp;return ($137|0);
}
function _yy_1_Doc($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -8|0);
 HEAP32[$17>>2] = $13;
 $18 = $3;
 $19 = HEAP32[$18>>2]|0;
 $20 = $3;
 $21 = (($20) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (_mk_pos_node(4,0,$19,$22)|0);
 $24 = $0;
 $25 = (($24) + 52|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + -4|0);
 HEAP32[$27>>2] = $23;
 STACKTOP = sp;return;
}
function _yy_Block($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $yypos0 = 0, $yypos2564 = 0, $yypos2565 = 0, $yypos2586 = 0, $yythunkpos0 = 0, $yythunkpos2564 = 0, $yythunkpos2565 = 0, $yythunkpos2586 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 while(1) {
  $8 = $1;
  $9 = (($8) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $yypos2564 = $10;
  $11 = $1;
  $12 = (($11) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $yythunkpos2564 = $13;
  $14 = $1;
  $15 = (_yy_BlankLine($14)|0);
  $16 = ($15|0)!=(0);
  if (!($16)) {
   break;
  }
 }
 $17 = $yypos2564;
 $18 = $1;
 $19 = (($18) + 12|0);
 HEAP32[$19>>2] = $17;
 $20 = $yythunkpos2564;
 $21 = $1;
 $22 = (($21) + 44|0);
 HEAP32[$22>>2] = $20;
 $23 = $1;
 $24 = (($23) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $yypos2565 = $25;
 $26 = $1;
 $27 = (($26) + 44|0);
 $28 = HEAP32[$27>>2]|0;
 $yythunkpos2565 = $28;
 $29 = $1;
 $30 = (_yy_BlockQuote($29)|0);
 $31 = ($30|0)!=(0);
 L6: do {
  if ($31) {
  } else {
   $32 = $yypos2565;
   $33 = $1;
   $34 = (($33) + 12|0);
   HEAP32[$34>>2] = $32;
   $35 = $yythunkpos2565;
   $36 = $1;
   $37 = (($36) + 44|0);
   HEAP32[$37>>2] = $35;
   $38 = $1;
   $39 = $1;
   $40 = (($39) + 28|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $1;
   $43 = (($42) + 32|0);
   $44 = HEAP32[$43>>2]|0;
   (_yyText($38,$41,$44)|0);
   $45 = $1;
   $46 = (($45) + 64|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($47) + 12|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (_extension(1,$49)|0);
   do {
    if ($50) {
    } else {
     $51 = $1;
     $52 = (_yy_Fenced($51)|0);
     $53 = ($52|0)!=(0);
     if ($53) {
      break L6;
     } else {
      break;
     }
    }
   } while(0);
   $54 = $yypos2565;
   $55 = $1;
   $56 = (($55) + 12|0);
   HEAP32[$56>>2] = $54;
   $57 = $yythunkpos2565;
   $58 = $1;
   $59 = (($58) + 44|0);
   HEAP32[$59>>2] = $57;
   $60 = $1;
   $61 = (_yy_Verbatim($60)|0);
   $62 = ($61|0)!=(0);
   if ($62) {
    break;
   }
   $63 = $yypos2565;
   $64 = $1;
   $65 = (($64) + 12|0);
   HEAP32[$65>>2] = $63;
   $66 = $yythunkpos2565;
   $67 = $1;
   $68 = (($67) + 44|0);
   HEAP32[$68>>2] = $66;
   $69 = $1;
   $70 = $1;
   $71 = (($70) + 28|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $1;
   $74 = (($73) + 32|0);
   $75 = HEAP32[$74>>2]|0;
   (_yyText($69,$72,$75)|0);
   $76 = $1;
   $77 = (($76) + 64|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = (($78) + 12|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (_extension(1,$80)|0);
   do {
    if ($81) {
    } else {
     $82 = $1;
     $83 = (_yy_DefinitionList($82)|0);
     $84 = ($83|0)!=(0);
     if ($84) {
      break L6;
     } else {
      break;
     }
    }
   } while(0);
   $85 = $yypos2565;
   $86 = $1;
   $87 = (($86) + 12|0);
   HEAP32[$87>>2] = $85;
   $88 = $yythunkpos2565;
   $89 = $1;
   $90 = (($89) + 44|0);
   HEAP32[$90>>2] = $88;
   $91 = $1;
   $92 = $1;
   $93 = (($92) + 28|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = $1;
   $96 = (($95) + 32|0);
   $97 = HEAP32[$96>>2]|0;
   (_yyText($91,$94,$97)|0);
   $98 = $1;
   $99 = (($98) + 64|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = (($100) + 12|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = (_extension(1,$102)|0);
   do {
    if ($103) {
    } else {
     $104 = $1;
     $105 = (_yy_Glossary($104)|0);
     $106 = ($105|0)!=(0);
     if ($106) {
      break L6;
     } else {
      break;
     }
    }
   } while(0);
   $107 = $yypos2565;
   $108 = $1;
   $109 = (($108) + 12|0);
   HEAP32[$109>>2] = $107;
   $110 = $yythunkpos2565;
   $111 = $1;
   $112 = (($111) + 44|0);
   HEAP32[$112>>2] = $110;
   $113 = $1;
   $114 = (_yy_Note($113)|0);
   $115 = ($114|0)!=(0);
   if ($115) {
    break;
   }
   $116 = $yypos2565;
   $117 = $1;
   $118 = (($117) + 12|0);
   HEAP32[$118>>2] = $116;
   $119 = $yythunkpos2565;
   $120 = $1;
   $121 = (($120) + 44|0);
   HEAP32[$121>>2] = $119;
   $122 = $1;
   $123 = (_yy_LinkReference($122)|0);
   $124 = ($123|0)!=(0);
   if ($124) {
    break;
   }
   $125 = $yypos2565;
   $126 = $1;
   $127 = (($126) + 12|0);
   HEAP32[$127>>2] = $125;
   $128 = $yythunkpos2565;
   $129 = $1;
   $130 = (($129) + 44|0);
   HEAP32[$130>>2] = $128;
   $131 = $1;
   $132 = $1;
   $133 = (($132) + 28|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = $1;
   $136 = (($135) + 32|0);
   $137 = HEAP32[$136>>2]|0;
   (_yyText($131,$134,$137)|0);
   $138 = $1;
   $139 = (($138) + 64|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = (($140) + 12|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = (_extension(1,$142)|0);
   do {
    if ($143) {
    } else {
     $144 = $1;
     $145 = (_yy_Abbreviation($144)|0);
     $146 = ($145|0)!=(0);
     if ($146) {
      break L6;
     } else {
      break;
     }
    }
   } while(0);
   $147 = $yypos2565;
   $148 = $1;
   $149 = (($148) + 12|0);
   HEAP32[$149>>2] = $147;
   $150 = $yythunkpos2565;
   $151 = $1;
   $152 = (($151) + 44|0);
   HEAP32[$152>>2] = $150;
   $153 = $1;
   $154 = (_yy_HorizontalRule($153)|0);
   $155 = ($154|0)!=(0);
   if ($155) {
    break;
   }
   $156 = $yypos2565;
   $157 = $1;
   $158 = (($157) + 12|0);
   HEAP32[$158>>2] = $156;
   $159 = $yythunkpos2565;
   $160 = $1;
   $161 = (($160) + 44|0);
   HEAP32[$161>>2] = $159;
   $162 = $1;
   $163 = $1;
   $164 = (($163) + 28|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = $1;
   $167 = (($166) + 32|0);
   $168 = HEAP32[$167>>2]|0;
   (_yyText($162,$165,$168)|0);
   $169 = $1;
   $170 = (($169) + 64|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = (($171) + 12|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = (_extension(65536,$173)|0);
   do {
    if ($174) {
     $175 = $1;
     $176 = (_yy_HeadingSection($175)|0);
     $177 = ($176|0)!=(0);
     if ($177) {
      break L6;
     } else {
      break;
     }
    } else {
    }
   } while(0);
   $178 = $yypos2565;
   $179 = $1;
   $180 = (($179) + 12|0);
   HEAP32[$180>>2] = $178;
   $181 = $yythunkpos2565;
   $182 = $1;
   $183 = (($182) + 44|0);
   HEAP32[$183>>2] = $181;
   $184 = $1;
   $185 = (_yy_Heading($184)|0);
   $186 = ($185|0)!=(0);
   if ($186) {
    break;
   }
   $187 = $yypos2565;
   $188 = $1;
   $189 = (($188) + 12|0);
   HEAP32[$189>>2] = $187;
   $190 = $yythunkpos2565;
   $191 = $1;
   $192 = (($191) + 44|0);
   HEAP32[$192>>2] = $190;
   $193 = $1;
   $194 = (_yy_OrderedList($193)|0);
   $195 = ($194|0)!=(0);
   if ($195) {
    break;
   }
   $196 = $yypos2565;
   $197 = $1;
   $198 = (($197) + 12|0);
   HEAP32[$198>>2] = $196;
   $199 = $yythunkpos2565;
   $200 = $1;
   $201 = (($200) + 44|0);
   HEAP32[$201>>2] = $199;
   $202 = $1;
   $203 = (_yy_BulletList($202)|0);
   $204 = ($203|0)!=(0);
   if ($204) {
    break;
   }
   $205 = $yypos2565;
   $206 = $1;
   $207 = (($206) + 12|0);
   HEAP32[$207>>2] = $205;
   $208 = $yythunkpos2565;
   $209 = $1;
   $210 = (($209) + 44|0);
   HEAP32[$210>>2] = $208;
   $211 = $1;
   $212 = (_yy_HtmlBlock($211)|0);
   $213 = ($212|0)!=(0);
   if ($213) {
    break;
   }
   $214 = $yypos2565;
   $215 = $1;
   $216 = (($215) + 12|0);
   HEAP32[$216>>2] = $214;
   $217 = $yythunkpos2565;
   $218 = $1;
   $219 = (($218) + 44|0);
   HEAP32[$219>>2] = $217;
   $220 = $1;
   $221 = (_yy_MarkdownHtmlBlock($220)|0);
   $222 = ($221|0)!=(0);
   if ($222) {
    break;
   }
   $223 = $yypos2565;
   $224 = $1;
   $225 = (($224) + 12|0);
   HEAP32[$225>>2] = $223;
   $226 = $yythunkpos2565;
   $227 = $1;
   $228 = (($227) + 44|0);
   HEAP32[$228>>2] = $226;
   $229 = $1;
   $230 = (_yy_StyleBlock($229)|0);
   $231 = ($230|0)!=(0);
   if ($231) {
    break;
   }
   $232 = $yypos2565;
   $233 = $1;
   $234 = (($233) + 12|0);
   HEAP32[$234>>2] = $232;
   $235 = $yythunkpos2565;
   $236 = $1;
   $237 = (($236) + 44|0);
   HEAP32[$237>>2] = $235;
   $238 = $1;
   $239 = $1;
   $240 = (($239) + 28|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = $1;
   $243 = (($242) + 32|0);
   $244 = HEAP32[$243>>2]|0;
   (_yyText($238,$241,$244)|0);
   $245 = $1;
   $246 = (($245) + 64|0);
   $247 = HEAP32[$246>>2]|0;
   $248 = (($247) + 12|0);
   $249 = HEAP32[$248>>2]|0;
   $250 = (_extension(1,$249)|0);
   do {
    if ($250) {
    } else {
     $251 = $1;
     $252 = (_yy_Table($251)|0);
     $253 = ($252|0)!=(0);
     if ($253) {
      break L6;
     } else {
      break;
     }
    }
   } while(0);
   $254 = $yypos2565;
   $255 = $1;
   $256 = (($255) + 12|0);
   HEAP32[$256>>2] = $254;
   $257 = $yythunkpos2565;
   $258 = $1;
   $259 = (($258) + 44|0);
   HEAP32[$259>>2] = $257;
   $260 = $1;
   $261 = $1;
   $262 = (($261) + 28|0);
   $263 = HEAP32[$262>>2]|0;
   $264 = $1;
   $265 = (($264) + 32|0);
   $266 = HEAP32[$265>>2]|0;
   (_yyText($260,$263,$266)|0);
   $267 = $1;
   $268 = (($267) + 64|0);
   $269 = HEAP32[$268>>2]|0;
   $270 = (($269) + 12|0);
   $271 = HEAP32[$270>>2]|0;
   $272 = (_extension(1,$271)|0);
   do {
    if ($272) {
    } else {
     $273 = $1;
     $274 = (_yy_ImageBlock($273)|0);
     $275 = ($274|0)!=(0);
     if ($275) {
      break L6;
     } else {
      break;
     }
    }
   } while(0);
   $276 = $yypos2565;
   $277 = $1;
   $278 = (($277) + 12|0);
   HEAP32[$278>>2] = $276;
   $279 = $yythunkpos2565;
   $280 = $1;
   $281 = (($280) + 44|0);
   HEAP32[$281>>2] = $279;
   $282 = $1;
   $283 = $1;
   $284 = (($283) + 28|0);
   $285 = HEAP32[$284>>2]|0;
   $286 = $1;
   $287 = (($286) + 32|0);
   $288 = HEAP32[$287>>2]|0;
   (_yyText($282,$285,$288)|0);
   $289 = $1;
   $290 = (($289) + 64|0);
   $291 = HEAP32[$290>>2]|0;
   $292 = (($291) + 12|0);
   $293 = HEAP32[$292>>2]|0;
   $294 = (_extension(1,$293)|0);
   do {
    if ($294) {
    } else {
     $295 = $1;
     $296 = (_yy_TOC($295)|0);
     $297 = ($296|0)!=(0);
     if ($297) {
      break L6;
     } else {
      break;
     }
    }
   } while(0);
   $298 = $yypos2565;
   $299 = $1;
   $300 = (($299) + 12|0);
   HEAP32[$300>>2] = $298;
   $301 = $yythunkpos2565;
   $302 = $1;
   $303 = (($302) + 44|0);
   HEAP32[$303>>2] = $301;
   $304 = $1;
   $305 = (($304) + 12|0);
   $306 = HEAP32[$305>>2]|0;
   $yypos2586 = $306;
   $307 = $1;
   $308 = (($307) + 44|0);
   $309 = HEAP32[$308>>2]|0;
   $yythunkpos2586 = $309;
   $310 = $1;
   $311 = (_yy_Sp($310)|0);
   $312 = ($311|0)!=(0);
   do {
    if ($312) {
     $313 = $1;
     $314 = (_yy_HtmlBlockInTags($313)|0);
     $315 = ($314|0)!=(0);
     if ($315) {
      break;
     } else {
      label = 83;
      break;
     }
    } else {
     label = 83;
    }
   } while(0);
   do {
    if ((label|0) == 83) {
     $316 = $yypos2586;
     $317 = $1;
     $318 = (($317) + 12|0);
     HEAP32[$318>>2] = $316;
     $319 = $yythunkpos2586;
     $320 = $1;
     $321 = (($320) + 44|0);
     HEAP32[$321>>2] = $319;
     $322 = $1;
     $323 = (_yy_Para($322)|0);
     $324 = ($323|0)!=(0);
     if ($324) {
      break L6;
     } else {
      break;
     }
    }
   } while(0);
   $325 = $yypos2565;
   $326 = $1;
   $327 = (($326) + 12|0);
   HEAP32[$327>>2] = $325;
   $328 = $yythunkpos2565;
   $329 = $1;
   $330 = (($329) + 44|0);
   HEAP32[$330>>2] = $328;
   $331 = $1;
   $332 = (_yy_Plain($331)|0);
   $333 = ($332|0)!=(0);
   if ($333) {
    break;
   }
   $334 = $yypos0;
   $335 = $1;
   $336 = (($335) + 12|0);
   HEAP32[$336>>2] = $334;
   $337 = $yythunkpos0;
   $338 = $1;
   $339 = (($338) + 44|0);
   HEAP32[$339>>2] = $337;
   $0 = 0;
   $340 = $0;
   STACKTOP = sp;return ($340|0);
  }
 } while(0);
 $0 = 1;
 $340 = $0;
 STACKTOP = sp;return ($340|0);
}
function _yy_2_Doc($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -8|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_BlankLine($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $yypos0 = 0, $yythunkpos0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_Sp($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Newline($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $0 = 1;
   $20 = $0;
   STACKTOP = sp;return ($20|0);
  } else {
  }
 } while(0);
 $14 = $yypos0;
 $15 = $1;
 $16 = (($15) + 12|0);
 HEAP32[$16>>2] = $14;
 $17 = $yythunkpos0;
 $18 = $1;
 $19 = (($18) + 44|0);
 HEAP32[$19>>2] = $17;
 $0 = 0;
 $20 = $0;
 STACKTOP = sp;return ($20|0);
}
function _yy_3_Doc($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $0;
  $12 = (($11) + 52|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + -4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $0;
  $17 = (($16) + 52|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + -8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (_cons($15,$20)|0);
  $22 = $0;
  $23 = (($22) + 52|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + -8|0);
  HEAP32[$25>>2] = $21;
 }
 $26 = $0;
 $27 = (($26) + 52|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + -8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (_reverse_list($30)|0);
 $32 = $0;
 $33 = (($32) + 64|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) + 8|0);
 HEAP32[$35>>2] = $31;
 STACKTOP = sp;return;
}
function _yyPop($G,$text,$count,$thunk,$yyxvar) {
 $G = $G|0;
 $text = $text|0;
 $count = $count|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $text;
 $2 = $count;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $2;
 $6 = $0;
 $7 = (($6) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (0 - ($5))|0;
 $10 = (($8) + ($9<<2)|0);
 HEAP32[$7>>2] = $10;
 STACKTOP = sp;return;
}
function _yy_CriticString($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yythunkpos0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_CriticMarkup($8)|0);
 $10 = ($9|0)!=(0);
 if ($10) {
  $0 = 1;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 $11 = $yypos0;
 $12 = $1;
 $13 = (($12) + 12|0);
 HEAP32[$13>>2] = $11;
 $14 = $yythunkpos0;
 $15 = $1;
 $16 = (($15) + 44|0);
 HEAP32[$16>>2] = $14;
 $0 = 0;
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _yy_1_DocForCritic($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_RawString($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos10 = 0;
 var $yypos11 = 0, $yypos16 = 0, $yypos17 = 0, $yypos9 = 0, $yythunkpos0 = 0, $yythunkpos10 = 0, $yythunkpos11 = 0, $yythunkpos16 = 0, $yythunkpos17 = 0, $yythunkpos9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = $1;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($12) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 (_yyText($8,$11,$14)|0);
 $15 = $1;
 $16 = (($15) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = (($18) + 28|0);
 HEAP32[$19>>2] = $17;
 $20 = $1;
 $21 = (($20) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $yypos10 = $22;
 $23 = $1;
 $24 = (($23) + 44|0);
 $25 = HEAP32[$24>>2]|0;
 $yythunkpos10 = $25;
 $26 = $1;
 $27 = (($26) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $yypos11 = $28;
 $29 = $1;
 $30 = (($29) + 44|0);
 $31 = HEAP32[$30>>2]|0;
 $yythunkpos11 = $31;
 $32 = $1;
 $33 = (_yymatchString($32,46032)|0);
 $34 = ($33|0)!=(0);
 do {
  if ($34) {
   label = 17;
  } else {
   $35 = $yypos11;
   $36 = $1;
   $37 = (($36) + 12|0);
   HEAP32[$37>>2] = $35;
   $38 = $yythunkpos11;
   $39 = $1;
   $40 = (($39) + 44|0);
   HEAP32[$40>>2] = $38;
   $41 = $1;
   $42 = (_yymatchString($41,45992)|0);
   $43 = ($42|0)!=(0);
   if ($43) {
    label = 17;
    break;
   }
   $44 = $yypos11;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos11;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchString($50,45848)|0);
   $52 = ($51|0)!=(0);
   if ($52) {
    label = 17;
    break;
   }
   $53 = $yypos11;
   $54 = $1;
   $55 = (($54) + 12|0);
   HEAP32[$55>>2] = $53;
   $56 = $yythunkpos11;
   $57 = $1;
   $58 = (($57) + 44|0);
   HEAP32[$58>>2] = $56;
   $59 = $1;
   $60 = (_yymatchString($59,45808)|0);
   $61 = ($60|0)!=(0);
   if ($61) {
    label = 17;
    break;
   }
   $62 = $yypos11;
   $63 = $1;
   $64 = (($63) + 12|0);
   HEAP32[$64>>2] = $62;
   $65 = $yythunkpos11;
   $66 = $1;
   $67 = (($66) + 44|0);
   HEAP32[$67>>2] = $65;
   $68 = $1;
   $69 = (_yymatchString($68,45768)|0);
   $70 = ($69|0)!=(0);
   if ($70) {
    label = 17;
    break;
   }
   $71 = $yypos10;
   $72 = $1;
   $73 = (($72) + 12|0);
   HEAP32[$73>>2] = $71;
   $74 = $yythunkpos10;
   $75 = $1;
   $76 = (($75) + 44|0);
   HEAP32[$76>>2] = $74;
   $77 = $1;
   $78 = (_yymatchDot($77)|0);
   $79 = ($78|0)!=(0);
   if (!($79)) {
    break;
   }
   while(1) {
    $80 = $1;
    $81 = (($80) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $yypos9 = $82;
    $83 = $1;
    $84 = (($83) + 44|0);
    $85 = HEAP32[$84>>2]|0;
    $yythunkpos9 = $85;
    $86 = $1;
    $87 = (($86) + 12|0);
    $88 = HEAP32[$87>>2]|0;
    $yypos16 = $88;
    $89 = $1;
    $90 = (($89) + 44|0);
    $91 = HEAP32[$90>>2]|0;
    $yythunkpos16 = $91;
    $92 = $1;
    $93 = (($92) + 12|0);
    $94 = HEAP32[$93>>2]|0;
    $yypos17 = $94;
    $95 = $1;
    $96 = (($95) + 44|0);
    $97 = HEAP32[$96>>2]|0;
    $yythunkpos17 = $97;
    $98 = $1;
    $99 = (_yymatchString($98,46032)|0);
    $100 = ($99|0)!=(0);
    if ($100) {
     label = 23;
     break;
    }
    $101 = $yypos17;
    $102 = $1;
    $103 = (($102) + 12|0);
    HEAP32[$103>>2] = $101;
    $104 = $yythunkpos17;
    $105 = $1;
    $106 = (($105) + 44|0);
    HEAP32[$106>>2] = $104;
    $107 = $1;
    $108 = (_yymatchString($107,45992)|0);
    $109 = ($108|0)!=(0);
    if ($109) {
     label = 26;
     break;
    }
    $110 = $yypos17;
    $111 = $1;
    $112 = (($111) + 12|0);
    HEAP32[$112>>2] = $110;
    $113 = $yythunkpos17;
    $114 = $1;
    $115 = (($114) + 44|0);
    HEAP32[$115>>2] = $113;
    $116 = $1;
    $117 = (_yymatchString($116,45848)|0);
    $118 = ($117|0)!=(0);
    if ($118) {
     label = 29;
     break;
    }
    $119 = $yypos17;
    $120 = $1;
    $121 = (($120) + 12|0);
    HEAP32[$121>>2] = $119;
    $122 = $yythunkpos17;
    $123 = $1;
    $124 = (($123) + 44|0);
    HEAP32[$124>>2] = $122;
    $125 = $1;
    $126 = (_yymatchString($125,45808)|0);
    $127 = ($126|0)!=(0);
    if ($127) {
     label = 32;
     break;
    }
    $128 = $yypos17;
    $129 = $1;
    $130 = (($129) + 12|0);
    HEAP32[$130>>2] = $128;
    $131 = $yythunkpos17;
    $132 = $1;
    $133 = (($132) + 44|0);
    HEAP32[$133>>2] = $131;
    $134 = $1;
    $135 = (_yymatchString($134,45768)|0);
    $136 = ($135|0)!=(0);
    if ($136) {
     label = 35;
     break;
    }
    $137 = $yypos16;
    $138 = $1;
    $139 = (($138) + 12|0);
    HEAP32[$139>>2] = $137;
    $140 = $yythunkpos16;
    $141 = $1;
    $142 = (($141) + 44|0);
    HEAP32[$142>>2] = $140;
    $143 = $1;
    $144 = (_yymatchDot($143)|0);
    $145 = ($144|0)!=(0);
    if (!($145)) {
     label = 38;
     break;
    }
   }
   if ((label|0) == 23) {
    label = 36;
   }
   else if ((label|0) == 26) {
    label = 36;
   }
   else if ((label|0) == 29) {
    label = 36;
   }
   else if ((label|0) == 32) {
    label = 36;
   }
   else if ((label|0) == 35) {
    label = 36;
   }
   else if ((label|0) == 38) {
   }
   if ((label|0) == 36) {
   }
   $146 = $yypos9;
   $147 = $1;
   $148 = (($147) + 12|0);
   HEAP32[$148>>2] = $146;
   $149 = $yythunkpos9;
   $150 = $1;
   $151 = (($150) + 44|0);
   HEAP32[$151>>2] = $149;
   $152 = $1;
   $153 = $1;
   $154 = (($153) + 28|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = $1;
   $157 = (($156) + 32|0);
   $158 = HEAP32[$157>>2]|0;
   (_yyText($152,$155,$158)|0);
   $159 = $1;
   $160 = (($159) + 12|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = $1;
   $163 = (($162) + 32|0);
   HEAP32[$163>>2] = $161;
   $164 = $1;
   $165 = $1;
   $166 = (($165) + 28|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = $1;
   $169 = (($168) + 32|0);
   $170 = HEAP32[$169>>2]|0;
   _yyDo($164,30,$167,$170,46872);
   $0 = 1;
   $177 = $0;
   STACKTOP = sp;return ($177|0);
  }
 } while(0);
 if ((label|0) == 17) {
 }
 $171 = $yypos0;
 $172 = $1;
 $173 = (($172) + 12|0);
 HEAP32[$173>>2] = $171;
 $174 = $yythunkpos0;
 $175 = $1;
 $176 = (($175) + 44|0);
 HEAP32[$176>>2] = $174;
 $0 = 0;
 $177 = $0;
 STACKTOP = sp;return ($177|0);
}
function _yy_2_DocForCritic($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_FalseMatch($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $yypos0 = 0, $yypos2 = 0, $yythunkpos0 = 0, $yythunkpos2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = $1;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($12) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 (_yyText($8,$11,$14)|0);
 $15 = $1;
 $16 = (($15) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = (($18) + 28|0);
 HEAP32[$19>>2] = $17;
 $20 = $1;
 $21 = (($20) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $yypos2 = $22;
 $23 = $1;
 $24 = (($23) + 44|0);
 $25 = HEAP32[$24>>2]|0;
 $yythunkpos2 = $25;
 $26 = $1;
 $27 = (_yymatchString($26,46032)|0);
 $28 = ($27|0)!=(0);
 do {
  if ($28) {
  } else {
   $29 = $yypos2;
   $30 = $1;
   $31 = (($30) + 12|0);
   HEAP32[$31>>2] = $29;
   $32 = $yythunkpos2;
   $33 = $1;
   $34 = (($33) + 44|0);
   HEAP32[$34>>2] = $32;
   $35 = $1;
   $36 = (_yymatchString($35,45992)|0);
   $37 = ($36|0)!=(0);
   if ($37) {
    break;
   }
   $38 = $yypos2;
   $39 = $1;
   $40 = (($39) + 12|0);
   HEAP32[$40>>2] = $38;
   $41 = $yythunkpos2;
   $42 = $1;
   $43 = (($42) + 44|0);
   HEAP32[$43>>2] = $41;
   $44 = $1;
   $45 = (_yymatchString($44,45848)|0);
   $46 = ($45|0)!=(0);
   if ($46) {
    break;
   }
   $47 = $yypos2;
   $48 = $1;
   $49 = (($48) + 12|0);
   HEAP32[$49>>2] = $47;
   $50 = $yythunkpos2;
   $51 = $1;
   $52 = (($51) + 44|0);
   HEAP32[$52>>2] = $50;
   $53 = $1;
   $54 = (_yymatchString($53,45808)|0);
   $55 = ($54|0)!=(0);
   if ($55) {
    break;
   }
   $56 = $yypos2;
   $57 = $1;
   $58 = (($57) + 12|0);
   HEAP32[$58>>2] = $56;
   $59 = $yythunkpos2;
   $60 = $1;
   $61 = (($60) + 44|0);
   HEAP32[$61>>2] = $59;
   $62 = $1;
   $63 = (_yymatchString($62,45768)|0);
   $64 = ($63|0)!=(0);
   if ($64) {
    break;
   }
   $84 = $yypos0;
   $85 = $1;
   $86 = (($85) + 12|0);
   HEAP32[$86>>2] = $84;
   $87 = $yythunkpos0;
   $88 = $1;
   $89 = (($88) + 44|0);
   HEAP32[$89>>2] = $87;
   $0 = 0;
   $90 = $0;
   STACKTOP = sp;return ($90|0);
  }
 } while(0);
 $65 = $1;
 $66 = $1;
 $67 = (($66) + 28|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = $1;
 $70 = (($69) + 32|0);
 $71 = HEAP32[$70>>2]|0;
 (_yyText($65,$68,$71)|0);
 $72 = $1;
 $73 = (($72) + 12|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = $1;
 $76 = (($75) + 32|0);
 HEAP32[$76>>2] = $74;
 $77 = $1;
 $78 = $1;
 $79 = (($78) + 28|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = $1;
 $82 = (($81) + 32|0);
 $83 = HEAP32[$82>>2]|0;
 _yyDo($77,31,$80,$83,46856);
 $0 = 1;
 $90 = $0;
 STACKTOP = sp;return ($90|0);
}
function _yy_3_DocForCritic($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_4_DocForCritic($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_Eof($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos2172 = 0, $yythunkpos0 = 0, $yythunkpos2172 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos2172 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos2172 = $13;
 $14 = $1;
 $15 = (_yymatchDot($14)|0);
 $16 = ($15|0)!=(0);
 if ($16) {
  $23 = $yypos0;
  $24 = $1;
  $25 = (($24) + 12|0);
  HEAP32[$25>>2] = $23;
  $26 = $yythunkpos0;
  $27 = $1;
  $28 = (($27) + 44|0);
  HEAP32[$28>>2] = $26;
  $0 = 0;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 } else {
  $17 = $yypos2172;
  $18 = $1;
  $19 = (($18) + 12|0);
  HEAP32[$19>>2] = $17;
  $20 = $yythunkpos2172;
  $21 = $1;
  $22 = (($21) + 44|0);
  HEAP32[$22>>2] = $20;
  $0 = 1;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function _yy_5_DocForCritic($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_reverse_list($9)|0);
 $11 = $0;
 $12 = (($11) + 64|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 8|0);
 HEAP32[$14>>2] = $10;
 STACKTOP = sp;return;
}
function _yy_1_DocForOPML($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_OPMLBlock($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos134 = 0, $yypos135 = 0, $yythunkpos0 = 0, $yythunkpos134 = 0, $yythunkpos135 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 while(1) {
  $8 = $1;
  $9 = (($8) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $yypos134 = $10;
  $11 = $1;
  $12 = (($11) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $yythunkpos134 = $13;
  $14 = $1;
  $15 = (_yy_BlankLine($14)|0);
  $16 = ($15|0)!=(0);
  if (!($16)) {
   break;
  }
 }
 $17 = $yypos134;
 $18 = $1;
 $19 = (($18) + 12|0);
 HEAP32[$19>>2] = $17;
 $20 = $yythunkpos134;
 $21 = $1;
 $22 = (($21) + 44|0);
 HEAP32[$22>>2] = $20;
 $23 = $1;
 $24 = (($23) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $yypos135 = $25;
 $26 = $1;
 $27 = (($26) + 44|0);
 $28 = HEAP32[$27>>2]|0;
 $yythunkpos135 = $28;
 $29 = $1;
 $30 = (_yy_OPMLHeadingSection($29)|0);
 $31 = ($30|0)!=(0);
 do {
  if ($31) {
  } else {
   $32 = $yypos135;
   $33 = $1;
   $34 = (($33) + 12|0);
   HEAP32[$34>>2] = $32;
   $35 = $yythunkpos135;
   $36 = $1;
   $37 = (($36) + 44|0);
   HEAP32[$37>>2] = $35;
   $38 = $1;
   $39 = (_yy_OPMLPlain($38)|0);
   $40 = ($39|0)!=(0);
   if ($40) {
    break;
   }
   $41 = $yypos0;
   $42 = $1;
   $43 = (($42) + 12|0);
   HEAP32[$43>>2] = $41;
   $44 = $yythunkpos0;
   $45 = $1;
   $46 = (($45) + 44|0);
   HEAP32[$46>>2] = $44;
   $0 = 0;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  }
 } while(0);
 $0 = 1;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_2_DocForOPML($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_3_DocForOPML($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_reverse_list($9)|0);
 $11 = $0;
 $12 = (($11) + 64|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 8|0);
 HEAP32[$14>>2] = $10;
 STACKTOP = sp;return;
}
function _yy_1_DocForTOC($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 _free_node_tree($9);
 STACKTOP = sp;return;
}
function _yy_TOCBlock($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos74 = 0, $yythunkpos0 = 0, $yythunkpos74 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 while(1) {
  $8 = $1;
  $9 = (($8) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $yypos74 = $10;
  $11 = $1;
  $12 = (($11) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $yythunkpos74 = $13;
  $14 = $1;
  $15 = (_yy_BlankLine($14)|0);
  $16 = ($15|0)!=(0);
  if (!($16)) {
   break;
  }
 }
 $17 = $yypos74;
 $18 = $1;
 $19 = (($18) + 12|0);
 HEAP32[$19>>2] = $17;
 $20 = $yythunkpos74;
 $21 = $1;
 $22 = (($21) + 44|0);
 HEAP32[$22>>2] = $20;
 $23 = $1;
 $24 = (_yy_TOCHeadingSection($23)|0);
 $25 = ($24|0)!=(0);
 if ($25) {
  $0 = 1;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 $26 = $yypos0;
 $27 = $1;
 $28 = (($27) + 12|0);
 HEAP32[$28>>2] = $26;
 $29 = $yythunkpos0;
 $30 = $1;
 $31 = (($30) + 44|0);
 HEAP32[$31>>2] = $29;
 $0 = 0;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _yy_2_DocForTOC($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -8|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_TOCPlain($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos67 = 0, $yypos68 = 0, $yypos69 = 0, $yypos70 = 0, $yypos71 = 0, $yythunkpos0 = 0, $yythunkpos67 = 0, $yythunkpos68 = 0;
 var $yythunkpos69 = 0, $yythunkpos70 = 0, $yythunkpos71 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 $9 = $1;
 $10 = (($9) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $yypos68 = $11;
 $12 = $1;
 $13 = (($12) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $yythunkpos68 = $14;
 $15 = $1;
 $16 = (_yy_BlankLine($15)|0);
 $17 = ($16|0)!=(0);
 do {
  if ($17) {
  } else {
   $18 = $yypos68;
   $19 = $1;
   $20 = (($19) + 12|0);
   HEAP32[$20>>2] = $18;
   $21 = $yythunkpos68;
   $22 = $1;
   $23 = (($22) + 44|0);
   HEAP32[$23>>2] = $21;
   $24 = $1;
   $25 = (($24) + 12|0);
   $26 = HEAP32[$25>>2]|0;
   $yypos69 = $26;
   $27 = $1;
   $28 = (($27) + 44|0);
   $29 = HEAP32[$28>>2]|0;
   $yythunkpos69 = $29;
   $30 = $1;
   $31 = (_yy_Heading($30)|0);
   $32 = ($31|0)!=(0);
   if ($32) {
    break;
   }
   $33 = $yypos69;
   $34 = $1;
   $35 = (($34) + 12|0);
   HEAP32[$35>>2] = $33;
   $36 = $yythunkpos69;
   $37 = $1;
   $38 = (($37) + 44|0);
   HEAP32[$38>>2] = $36;
   $39 = $1;
   $40 = (_yy_Line($39)|0);
   $41 = ($40|0)!=(0);
   if (!($41)) {
    break;
   }
   $42 = $1;
   _yyDo($42,8,-1,0,41336);
   $43 = $1;
   $44 = $1;
   $45 = (($44) + 28|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $1;
   $48 = (($47) + 32|0);
   $49 = HEAP32[$48>>2]|0;
   _yyDo($43,32,$46,$49,46384);
   while(1) {
    $50 = $1;
    $51 = (($50) + 12|0);
    $52 = HEAP32[$51>>2]|0;
    $yypos67 = $52;
    $53 = $1;
    $54 = (($53) + 44|0);
    $55 = HEAP32[$54>>2]|0;
    $yythunkpos67 = $55;
    $56 = $1;
    $57 = (($56) + 12|0);
    $58 = HEAP32[$57>>2]|0;
    $yypos70 = $58;
    $59 = $1;
    $60 = (($59) + 44|0);
    $61 = HEAP32[$60>>2]|0;
    $yythunkpos70 = $61;
    $62 = $1;
    $63 = (_yy_BlankLine($62)|0);
    $64 = ($63|0)!=(0);
    if ($64) {
     label = 12;
     break;
    }
    $65 = $yypos70;
    $66 = $1;
    $67 = (($66) + 12|0);
    HEAP32[$67>>2] = $65;
    $68 = $yythunkpos70;
    $69 = $1;
    $70 = (($69) + 44|0);
    HEAP32[$70>>2] = $68;
    $71 = $1;
    $72 = (($71) + 12|0);
    $73 = HEAP32[$72>>2]|0;
    $yypos71 = $73;
    $74 = $1;
    $75 = (($74) + 44|0);
    $76 = HEAP32[$75>>2]|0;
    $yythunkpos71 = $76;
    $77 = $1;
    $78 = (_yy_Heading($77)|0);
    $79 = ($78|0)!=(0);
    if ($79) {
     label = 15;
     break;
    }
    $80 = $yypos71;
    $81 = $1;
    $82 = (($81) + 12|0);
    HEAP32[$82>>2] = $80;
    $83 = $yythunkpos71;
    $84 = $1;
    $85 = (($84) + 44|0);
    HEAP32[$85>>2] = $83;
    $86 = $1;
    $87 = (_yy_Line($86)|0);
    $88 = ($87|0)!=(0);
    if (!($88)) {
     label = 17;
     break;
    }
    $89 = $1;
    _yyDo($89,8,-1,0,41336);
    $90 = $1;
    $91 = $1;
    $92 = (($91) + 28|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = $1;
    $95 = (($94) + 32|0);
    $96 = HEAP32[$95>>2]|0;
    _yyDo($90,32,$93,$96,46384);
   }
   if ((label|0) == 12) {
   }
   else if ((label|0) == 15) {
   }
   else if ((label|0) == 17) {
   }
   $97 = $yypos67;
   $98 = $1;
   $99 = (($98) + 12|0);
   HEAP32[$99>>2] = $97;
   $100 = $yythunkpos67;
   $101 = $1;
   $102 = (($101) + 44|0);
   HEAP32[$102>>2] = $100;
   $103 = $1;
   _yyDo($103,12,1,0,41392);
   $0 = 1;
   $110 = $0;
   STACKTOP = sp;return ($110|0);
  }
 } while(0);
 $104 = $yypos0;
 $105 = $1;
 $106 = (($105) + 12|0);
 HEAP32[$106>>2] = $104;
 $107 = $yythunkpos0;
 $108 = $1;
 $109 = (($108) + 44|0);
 HEAP32[$109>>2] = $107;
 $0 = 0;
 $110 = $0;
 STACKTOP = sp;return ($110|0);
}
function _yy_3_DocForTOC($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_reverse_list($9)|0);
 $11 = $0;
 $12 = (($11) + 64|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 8|0);
 HEAP32[$14>>2] = $10;
 STACKTOP = sp;return;
}
function _yy_1_DocForMetaDataOnly($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_SkipBlock($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos2495 = 0, $yypos2499 = 0, $yypos2500 = 0, $yypos2501 = 0, $yypos2502 = 0, $yypos2503 = 0, $yypos2504 = 0, $yypos2505 = 0, $yypos2506 = 0, $yypos2507 = 0, $yypos2509 = 0, $yypos2512 = 0, $yythunkpos0 = 0, $yythunkpos2495 = 0, $yythunkpos2499 = 0, $yythunkpos2500 = 0;
 var $yythunkpos2501 = 0, $yythunkpos2502 = 0, $yythunkpos2503 = 0, $yythunkpos2504 = 0, $yythunkpos2505 = 0, $yythunkpos2506 = 0, $yythunkpos2507 = 0, $yythunkpos2509 = 0, $yythunkpos2512 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos2495 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos2495 = $13;
 $14 = $1;
 $15 = (_yy_HtmlBlock($14)|0);
 $16 = ($15|0)!=(0);
 L1: do {
  if ($16) {
   $17 = $1;
   $18 = $1;
   $19 = (($18) + 28|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $1;
   $22 = (($21) + 32|0);
   $23 = HEAP32[$22>>2]|0;
   _yyDo($17,33,$20,$23,41400);
  } else {
   $24 = $yypos2495;
   $25 = $1;
   $26 = (($25) + 12|0);
   HEAP32[$26>>2] = $24;
   $27 = $yythunkpos2495;
   $28 = $1;
   $29 = (($28) + 44|0);
   HEAP32[$29>>2] = $27;
   $30 = $1;
   $31 = (($30) + 12|0);
   $32 = HEAP32[$31>>2]|0;
   $yypos2500 = $32;
   $33 = $1;
   $34 = (($33) + 44|0);
   $35 = HEAP32[$34>>2]|0;
   $yythunkpos2500 = $35;
   $36 = $1;
   $37 = (_yymatchChar($36,35)|0);
   $38 = ($37|0)!=(0);
   do {
    if ($38) {
    } else {
     $39 = $yypos2500;
     $40 = $1;
     $41 = (($40) + 12|0);
     HEAP32[$41>>2] = $39;
     $42 = $yythunkpos2500;
     $43 = $1;
     $44 = (($43) + 44|0);
     HEAP32[$44>>2] = $42;
     $45 = $1;
     $46 = (($45) + 12|0);
     $47 = HEAP32[$46>>2]|0;
     $yypos2501 = $47;
     $48 = $1;
     $49 = (($48) + 44|0);
     $50 = HEAP32[$49>>2]|0;
     $yythunkpos2501 = $50;
     $51 = $1;
     $52 = (_yy_SetextBottom1($51)|0);
     $53 = ($52|0)!=(0);
     if ($53) {
      break;
     }
     $54 = $yypos2501;
     $55 = $1;
     $56 = (($55) + 12|0);
     HEAP32[$56>>2] = $54;
     $57 = $yythunkpos2501;
     $58 = $1;
     $59 = (($58) + 44|0);
     HEAP32[$59>>2] = $57;
     $60 = $1;
     $61 = (($60) + 12|0);
     $62 = HEAP32[$61>>2]|0;
     $yypos2502 = $62;
     $63 = $1;
     $64 = (($63) + 44|0);
     $65 = HEAP32[$64>>2]|0;
     $yythunkpos2502 = $65;
     $66 = $1;
     $67 = (_yy_SetextBottom2($66)|0);
     $68 = ($67|0)!=(0);
     if ($68) {
      break;
     }
     $69 = $yypos2502;
     $70 = $1;
     $71 = (($70) + 12|0);
     HEAP32[$71>>2] = $69;
     $72 = $yythunkpos2502;
     $73 = $1;
     $74 = (($73) + 44|0);
     HEAP32[$74>>2] = $72;
     $75 = $1;
     $76 = (($75) + 12|0);
     $77 = HEAP32[$76>>2]|0;
     $yypos2503 = $77;
     $78 = $1;
     $79 = (($78) + 44|0);
     $80 = HEAP32[$79>>2]|0;
     $yythunkpos2503 = $80;
     $81 = $1;
     $82 = (_yy_BlankLine($81)|0);
     $83 = ($82|0)!=(0);
     if ($83) {
      break;
     }
     $84 = $yypos2503;
     $85 = $1;
     $86 = (($85) + 12|0);
     HEAP32[$86>>2] = $84;
     $87 = $yythunkpos2503;
     $88 = $1;
     $89 = (($88) + 44|0);
     HEAP32[$89>>2] = $87;
     $90 = $1;
     $91 = (_yy_RawLine($90)|0);
     $92 = ($91|0)!=(0);
     if (!($92)) {
      break;
     }
     while(1) {
      $93 = $1;
      $94 = (($93) + 12|0);
      $95 = HEAP32[$94>>2]|0;
      $yypos2499 = $95;
      $96 = $1;
      $97 = (($96) + 44|0);
      $98 = HEAP32[$97>>2]|0;
      $yythunkpos2499 = $98;
      $99 = $1;
      $100 = (($99) + 12|0);
      $101 = HEAP32[$100>>2]|0;
      $yypos2504 = $101;
      $102 = $1;
      $103 = (($102) + 44|0);
      $104 = HEAP32[$103>>2]|0;
      $yythunkpos2504 = $104;
      $105 = $1;
      $106 = (_yymatchChar($105,35)|0);
      $107 = ($106|0)!=(0);
      if ($107) {
       label = 21;
       break;
      }
      $108 = $yypos2504;
      $109 = $1;
      $110 = (($109) + 12|0);
      HEAP32[$110>>2] = $108;
      $111 = $yythunkpos2504;
      $112 = $1;
      $113 = (($112) + 44|0);
      HEAP32[$113>>2] = $111;
      $114 = $1;
      $115 = (($114) + 12|0);
      $116 = HEAP32[$115>>2]|0;
      $yypos2505 = $116;
      $117 = $1;
      $118 = (($117) + 44|0);
      $119 = HEAP32[$118>>2]|0;
      $yythunkpos2505 = $119;
      $120 = $1;
      $121 = (_yy_SetextBottom1($120)|0);
      $122 = ($121|0)!=(0);
      if ($122) {
       label = 24;
       break;
      }
      $123 = $yypos2505;
      $124 = $1;
      $125 = (($124) + 12|0);
      HEAP32[$125>>2] = $123;
      $126 = $yythunkpos2505;
      $127 = $1;
      $128 = (($127) + 44|0);
      HEAP32[$128>>2] = $126;
      $129 = $1;
      $130 = (($129) + 12|0);
      $131 = HEAP32[$130>>2]|0;
      $yypos2506 = $131;
      $132 = $1;
      $133 = (($132) + 44|0);
      $134 = HEAP32[$133>>2]|0;
      $yythunkpos2506 = $134;
      $135 = $1;
      $136 = (_yy_SetextBottom2($135)|0);
      $137 = ($136|0)!=(0);
      if ($137) {
       label = 27;
       break;
      }
      $138 = $yypos2506;
      $139 = $1;
      $140 = (($139) + 12|0);
      HEAP32[$140>>2] = $138;
      $141 = $yythunkpos2506;
      $142 = $1;
      $143 = (($142) + 44|0);
      HEAP32[$143>>2] = $141;
      $144 = $1;
      $145 = (($144) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $yypos2507 = $146;
      $147 = $1;
      $148 = (($147) + 44|0);
      $149 = HEAP32[$148>>2]|0;
      $yythunkpos2507 = $149;
      $150 = $1;
      $151 = (_yy_BlankLine($150)|0);
      $152 = ($151|0)!=(0);
      if ($152) {
       label = 30;
       break;
      }
      $153 = $yypos2507;
      $154 = $1;
      $155 = (($154) + 12|0);
      HEAP32[$155>>2] = $153;
      $156 = $yythunkpos2507;
      $157 = $1;
      $158 = (($157) + 44|0);
      HEAP32[$158>>2] = $156;
      $159 = $1;
      $160 = (_yy_RawLine($159)|0);
      $161 = ($160|0)!=(0);
      if (!($161)) {
       label = 32;
       break;
      }
     }
     if ((label|0) == 21) {
     }
     else if ((label|0) == 24) {
     }
     else if ((label|0) == 27) {
     }
     else if ((label|0) == 30) {
     }
     else if ((label|0) == 32) {
     }
     $162 = $yypos2499;
     $163 = $1;
     $164 = (($163) + 12|0);
     HEAP32[$164>>2] = $162;
     $165 = $yythunkpos2499;
     $166 = $1;
     $167 = (($166) + 44|0);
     HEAP32[$167>>2] = $165;
     while(1) {
      $168 = $1;
      $169 = (($168) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $yypos2509 = $170;
      $171 = $1;
      $172 = (($171) + 44|0);
      $173 = HEAP32[$172>>2]|0;
      $yythunkpos2509 = $173;
      $174 = $1;
      $175 = (_yy_BlankLine($174)|0);
      $176 = ($175|0)!=(0);
      if (!($176)) {
       break;
      }
     }
     $177 = $yypos2509;
     $178 = $1;
     $179 = (($178) + 12|0);
     HEAP32[$179>>2] = $177;
     $180 = $yythunkpos2509;
     $181 = $1;
     $182 = (($181) + 44|0);
     HEAP32[$182>>2] = $180;
     break L1;
    }
   } while(0);
   $183 = $yypos2495;
   $184 = $1;
   $185 = (($184) + 12|0);
   HEAP32[$185>>2] = $183;
   $186 = $yythunkpos2495;
   $187 = $1;
   $188 = (($187) + 44|0);
   HEAP32[$188>>2] = $186;
   $189 = $1;
   $190 = (_yy_BlankLine($189)|0);
   $191 = ($190|0)!=(0);
   if ($191) {
    while(1) {
     $192 = $1;
     $193 = (($192) + 12|0);
     $194 = HEAP32[$193>>2]|0;
     $yypos2512 = $194;
     $195 = $1;
     $196 = (($195) + 44|0);
     $197 = HEAP32[$196>>2]|0;
     $yythunkpos2512 = $197;
     $198 = $1;
     $199 = (_yy_BlankLine($198)|0);
     $200 = ($199|0)!=(0);
     if (!($200)) {
      break;
     }
    }
    $201 = $yypos2512;
    $202 = $1;
    $203 = (($202) + 12|0);
    HEAP32[$203>>2] = $201;
    $204 = $yythunkpos2512;
    $205 = $1;
    $206 = (($205) + 44|0);
    HEAP32[$206>>2] = $204;
    break;
   }
   $207 = $yypos2495;
   $208 = $1;
   $209 = (($208) + 12|0);
   HEAP32[$209>>2] = $207;
   $210 = $yythunkpos2495;
   $211 = $1;
   $212 = (($211) + 44|0);
   HEAP32[$212>>2] = $210;
   $213 = $1;
   $214 = (_yy_RawLine($213)|0);
   $215 = ($214|0)!=(0);
   if ($215) {
    break;
   }
   $216 = $yypos0;
   $217 = $1;
   $218 = (($217) + 12|0);
   HEAP32[$218>>2] = $216;
   $219 = $yythunkpos0;
   $220 = $1;
   $221 = (($220) + 44|0);
   HEAP32[$221>>2] = $219;
   $0 = 0;
   $222 = $0;
   STACKTOP = sp;return ($222|0);
  }
 } while(0);
 $0 = 1;
 $222 = $0;
 STACKTOP = sp;return ($222|0);
}
function _yy_2_DocForMetaDataOnly($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_reverse_list($9)|0);
 $11 = $0;
 $12 = (($11) + 64|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 8|0);
 HEAP32[$14>>2] = $10;
 STACKTOP = sp;return;
}
function _yymatchString($G,$s) {
 $G = $G|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $yysav = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $s;
 $3 = $1;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $yysav = $5;
 while(1) {
  $6 = $2;
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)!=(0);
  if (!($8)) {
   label = 9;
   break;
  }
  $9 = $1;
  $10 = (($9) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $1;
  $13 = (($12) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($11|0)>=($14|0);
  if ($15) {
   $16 = $1;
   $17 = (_yyrefill($16)|0);
   $18 = ($17|0)!=(0);
   if (!($18)) {
    label = 5;
    break;
   }
  }
  $19 = $1;
  $20 = (($19) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $1;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + ($21)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 << 24 >> 24;
  $27 = $2;
  $28 = HEAP8[$27>>0]|0;
  $29 = $28 << 24 >> 24;
  $30 = ($26|0)!=($29|0);
  if ($30) {
   label = 7;
   break;
  }
  $34 = $2;
  $35 = (($34) + 1|0);
  $2 = $35;
  $36 = $1;
  $37 = (($36) + 12|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + 1)|0;
  HEAP32[$37>>2] = $39;
 }
 if ((label|0) == 5) {
  $0 = 0;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 else if ((label|0) == 7) {
  $31 = $yysav;
  $32 = $1;
  $33 = (($32) + 12|0);
  HEAP32[$33>>2] = $31;
  $0 = 0;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 else if ((label|0) == 9) {
  $0 = 1;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function _yymatchDot($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = (($5) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)>=($7|0);
 if ($8) {
  $9 = $1;
  $10 = (_yyrefill($9)|0);
  $11 = ($10|0)!=(0);
  if (!($11)) {
   $0 = 0;
   $16 = $0;
   STACKTOP = sp;return ($16|0);
  }
 }
 $12 = $1;
 $13 = (($12) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 1)|0;
 HEAP32[$13>>2] = $15;
 $0 = 1;
 $16 = $0;
 STACKTOP = sp;return ($16|0);
}
function _yy_1_StartList($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return;
}
function _yymatchClass($G,$bits,$cclass) {
 $G = $G|0;
 $bits = $bits|0;
 $cclass = $cclass|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $bits;
 $3 = $cclass;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 $8 = (($7) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($6|0)>=($9|0);
 if ($10) {
  $11 = $1;
  $12 = (_yyrefill($11)|0);
  $13 = ($12|0)!=(0);
  if (!($13)) {
   $0 = 0;
   $37 = $0;
   STACKTOP = sp;return ($37|0);
  }
 }
 $14 = $1;
 $15 = (($14) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $1;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + ($16)|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $c = $21;
 $22 = $c;
 $23 = $22 >> 3;
 $24 = $2;
 $25 = (($24) + ($23)|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = $c;
 $29 = $28 & 7;
 $30 = 1 << $29;
 $31 = $27 & $30;
 $32 = ($31|0)!=(0);
 if ($32) {
  $33 = $1;
  $34 = (($33) + 12|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + 1)|0;
  HEAP32[$34>>2] = $36;
  $0 = 1;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 } else {
  $0 = 0;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 return (0)|0;
}
function _yy_AlphanumericAscii($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yythunkpos0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchClass($8,41456,41496)|0);
 $10 = ($9|0)!=(0);
 if ($10) {
  $0 = 1;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 $11 = $yypos0;
 $12 = $1;
 $13 = (($12) + 12|0);
 HEAP32[$13>>2] = $11;
 $14 = $yythunkpos0;
 $15 = $1;
 $16 = (($15) + 44|0);
 HEAP32[$16>>2] = $14;
 $0 = 0;
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _yy_1_MetaDataKey($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 $14 = $0;
 $15 = (($14) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP16[$16>>1] = 18;
 STACKTOP = sp;return;
}
function _yy_Spacechar($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos2160 = 0, $yythunkpos0 = 0, $yythunkpos2160 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos2160 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos2160 = $13;
 $14 = $1;
 $15 = (_yymatchChar($14,32)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
  } else {
   $17 = $yypos2160;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos2160;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yymatchChar($23,9)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    break;
   }
   $26 = $yypos0;
   $27 = $1;
   $28 = (($27) + 12|0);
   HEAP32[$28>>2] = $26;
   $29 = $yythunkpos0;
   $30 = $1;
   $31 = (($30) + 44|0);
   HEAP32[$31>>2] = $29;
   $0 = 0;
   $32 = $0;
   STACKTOP = sp;return ($32|0);
  }
 } while(0);
 $0 = 1;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _yyrefill($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yyn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $yyn = sp;
 $1 = $G;
 while(1) {
  $2 = $1;
  $3 = (($2) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $1;
  $6 = (($5) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($4) - ($7))|0;
  $9 = ($8|0)<(512);
  if (!($9)) {
   break;
  }
  $10 = $1;
  $11 = (($10) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12<<1;
  HEAP32[$11>>2] = $13;
  $14 = $1;
  $15 = HEAP32[$14>>2]|0;
  $16 = $1;
  $17 = (($16) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_realloc($15,$18)|0);
  $20 = $1;
  HEAP32[$20>>2] = $19;
 }
 $21 = $1;
 $22 = HEAP32[$21>>2]|0;
 $23 = $1;
 $24 = (($23) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($22) + ($25)|0);
 $27 = $1;
 $28 = (($27) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $1;
 $31 = (($30) + 12|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($29) - ($32))|0;
 $34 = $1;
 $35 = (($34) + 64|0);
 $36 = HEAP32[$35>>2]|0;
 _yy_input_func($26,$yyn,$33,$36);
 $37 = HEAP32[$yyn>>2]|0;
 $38 = ($37|0)!=(0);
 if ($38) {
  $39 = HEAP32[$yyn>>2]|0;
  $40 = $1;
  $41 = (($40) + 16|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + ($39))|0;
  HEAP32[$41>>2] = $43;
  $0 = 1;
  $44 = $0;
  STACKTOP = sp;return ($44|0);
 } else {
  $0 = 0;
  $44 = $0;
  STACKTOP = sp;return ($44|0);
 }
 return (0)|0;
}
function _yy_SetextHeading($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos2559 = 0, $yythunkpos0 = 0, $yythunkpos2559 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_NonindentSpace($8)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (($11) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $yypos2559 = $13;
   $14 = $1;
   $15 = (($14) + 44|0);
   $16 = HEAP32[$15>>2]|0;
   $yythunkpos2559 = $16;
   $17 = $1;
   $18 = (_yy_SetextHeading1($17)|0);
   $19 = ($18|0)!=(0);
   do {
    if ($19) {
    } else {
     $20 = $yypos2559;
     $21 = $1;
     $22 = (($21) + 12|0);
     HEAP32[$22>>2] = $20;
     $23 = $yythunkpos2559;
     $24 = $1;
     $25 = (($24) + 44|0);
     HEAP32[$25>>2] = $23;
     $26 = $1;
     $27 = (_yy_SetextHeading2($26)|0);
     $28 = ($27|0)!=(0);
     if ($28) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $0 = 1;
   $35 = $0;
   STACKTOP = sp;return ($35|0);
  } else {
  }
 } while(0);
 $29 = $yypos0;
 $30 = $1;
 $31 = (($30) + 12|0);
 HEAP32[$31>>2] = $29;
 $32 = $yythunkpos0;
 $33 = $1;
 $34 = (($33) + 44|0);
 HEAP32[$34>>2] = $32;
 $0 = 0;
 $35 = $0;
 STACKTOP = sp;return ($35|0);
}
function _yy_MetaDataKeyValue($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $yypos0 = 0, $yythunkpos0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,2,0,41328);
 $9 = $1;
 $10 = (_yy_MetaDataKey($9)|0);
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $1;
   _yyDo($12,8,-2,0,41336);
   $13 = $1;
   $14 = (_yy_Sp($13)|0);
   $15 = ($14|0)!=(0);
   if (!($15)) {
    break;
   }
   $16 = $1;
   $17 = (_yymatchChar($16,58)|0);
   $18 = ($17|0)!=(0);
   if (!($18)) {
    break;
   }
   $19 = $1;
   $20 = (_yy_Sp($19)|0);
   $21 = ($20|0)!=(0);
   if (!($21)) {
    break;
   }
   $22 = $1;
   $23 = (_yy_MetaDataValue($22)|0);
   $24 = ($23|0)!=(0);
   if (!($24)) {
    break;
   }
   $25 = $1;
   _yyDo($25,8,-1,0,41336);
   $26 = $1;
   $27 = $1;
   $28 = (($27) + 28|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $1;
   $31 = (($30) + 32|0);
   $32 = HEAP32[$31>>2]|0;
   _yyDo($26,34,$29,$32,42776);
   $33 = $1;
   _yyDo($33,12,2,0,41392);
   $0 = 1;
   $40 = $0;
   STACKTOP = sp;return ($40|0);
  } else {
  }
 } while(0);
 $34 = $yypos0;
 $35 = $1;
 $36 = (($35) + 12|0);
 HEAP32[$36>>2] = $34;
 $37 = $yythunkpos0;
 $38 = $1;
 $39 = (($38) + 44|0);
 HEAP32[$39>>2] = $37;
 $0 = 0;
 $40 = $0;
 STACKTOP = sp;return ($40|0);
}
function _yy_1_MetaData($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_YAMLStop($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos2555 = 0, $yythunkpos0 = 0, $yythunkpos2555 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos2555 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos2555 = $13;
 $14 = $1;
 $15 = (_yymatchString($14,42760)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
   label = 7;
  } else {
   $17 = $yypos2555;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos2555;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yymatchString($23,42768)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    label = 7;
    break;
   } else {
    break;
   }
  }
 } while(0);
 do {
  if ((label|0) == 7) {
   $26 = $1;
   $27 = (_yy_BlankLine($26)|0);
   $28 = ($27|0)!=(0);
   if (!($28)) {
    break;
   }
   $0 = 1;
   $35 = $0;
   STACKTOP = sp;return ($35|0);
  }
 } while(0);
 $29 = $yypos0;
 $30 = $1;
 $31 = (($30) + 12|0);
 HEAP32[$31>>2] = $29;
 $32 = $yythunkpos0;
 $33 = $1;
 $34 = (($33) + 44|0);
 HEAP32[$34>>2] = $32;
 $0 = 0;
 $35 = $0;
 STACKTOP = sp;return ($35|0);
}
function _yy_2_MetaData($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_mk_pos_list(17,$9,$11,$14)|0);
 $16 = $0;
 $17 = (($16) + 48|0);
 HEAP32[$17>>2] = $15;
 STACKTOP = sp;return;
}
function _yy_BlockQuote($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yythunkpos0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 $9 = $1;
 $10 = (_yy_BlockQuoteRaw($9)|0);
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $1;
  _yyDo($12,8,-1,0,41336);
  $13 = $1;
  $14 = $1;
  $15 = (($14) + 28|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $1;
  $18 = (($17) + 32|0);
  $19 = HEAP32[$18>>2]|0;
  _yyDo($13,35,$16,$19,49024);
  $20 = $1;
  _yyDo($20,12,1,0,41392);
  $0 = 1;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 $21 = $yypos0;
 $22 = $1;
 $23 = (($22) + 12|0);
 HEAP32[$23>>2] = $21;
 $24 = $yythunkpos0;
 $25 = $1;
 $26 = (($25) + 44|0);
 HEAP32[$26>>2] = $24;
 $0 = 0;
 $27 = $0;
 STACKTOP = sp;return ($27|0);
}
function _yy_Fenced($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos2468 = 0, $yypos2471 = 0, $yypos2472 = 0, $yypos2475 = 0, $yypos2476 = 0, $yypos2478 = 0;
 var $yypos2479 = 0, $yythunkpos0 = 0, $yythunkpos2468 = 0, $yythunkpos2471 = 0, $yythunkpos2472 = 0, $yythunkpos2475 = 0, $yythunkpos2476 = 0, $yythunkpos2478 = 0, $yythunkpos2479 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 $9 = $1;
 $10 = (_yy_NonindentSpace($9)|0);
 $11 = ($10|0)!=(0);
 L1: do {
  if ($11) {
   $12 = $1;
   $13 = (($12) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $yypos2468 = $14;
   $15 = $1;
   $16 = (($15) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   $yythunkpos2468 = $17;
   $18 = $1;
   $19 = (_yy_Ticks3($18)|0);
   $20 = ($19|0)!=(0);
   do {
    if ($20) {
     $21 = $1;
     $22 = (_yy_FenceType($21)|0);
     $23 = ($22|0)!=(0);
     if (!($23)) {
      label = 27;
      break;
     }
     $24 = $1;
     _yyDo($24,8,-1,0,41336);
     $25 = $1;
     $26 = $1;
     $27 = (($26) + 28|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = $1;
     $30 = (($29) + 32|0);
     $31 = HEAP32[$30>>2]|0;
     (_yyText($25,$28,$31)|0);
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = $1;
     $36 = (($35) + 28|0);
     HEAP32[$36>>2] = $34;
     while(1) {
      $37 = $1;
      $38 = (($37) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $yypos2471 = $39;
      $40 = $1;
      $41 = (($40) + 44|0);
      $42 = HEAP32[$41>>2]|0;
      $yythunkpos2471 = $42;
      $43 = $1;
      $44 = (($43) + 12|0);
      $45 = HEAP32[$44>>2]|0;
      $yypos2472 = $45;
      $46 = $1;
      $47 = (($46) + 44|0);
      $48 = HEAP32[$47>>2]|0;
      $yythunkpos2472 = $48;
      $49 = $1;
      $50 = (_yy_NonindentSpace($49)|0);
      $51 = ($50|0)!=(0);
      if ($51) {
       $52 = $1;
       $53 = (_yy_Ticks3($52)|0);
       $54 = ($53|0)!=(0);
       if ($54) {
        label = 13;
        break;
       }
      } else {
      }
      $55 = $yypos2472;
      $56 = $1;
      $57 = (($56) + 12|0);
      HEAP32[$57>>2] = $55;
      $58 = $yythunkpos2472;
      $59 = $1;
      $60 = (($59) + 44|0);
      HEAP32[$60>>2] = $58;
      $61 = $1;
      $62 = (_yy_NonMatchingRawLine($61)|0);
      $63 = ($62|0)!=(0);
      if (!($63)) {
       label = 15;
       break;
      }
     }
     if ((label|0) == 13) {
     }
     else if ((label|0) == 15) {
     }
     $64 = $yypos2471;
     $65 = $1;
     $66 = (($65) + 12|0);
     HEAP32[$66>>2] = $64;
     $67 = $yythunkpos2471;
     $68 = $1;
     $69 = (($68) + 44|0);
     HEAP32[$69>>2] = $67;
     $70 = $1;
     $71 = $1;
     $72 = (($71) + 28|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = $1;
     $75 = (($74) + 32|0);
     $76 = HEAP32[$75>>2]|0;
     (_yyText($70,$73,$76)|0);
     $77 = $1;
     $78 = (($77) + 12|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = $1;
     $81 = (($80) + 32|0);
     HEAP32[$81>>2] = $79;
     $82 = $1;
     $83 = (_yy_NonindentSpace($82)|0);
     $84 = ($83|0)!=(0);
     if (!($84)) {
      label = 27;
      break;
     }
     $85 = $1;
     $86 = (_yy_Ticks3($85)|0);
     $87 = ($86|0)!=(0);
     if (!($87)) {
      label = 27;
      break;
     }
     $88 = $1;
     $89 = (_yy_Sp($88)|0);
     $90 = ($89|0)!=(0);
     if (!($90)) {
      label = 27;
      break;
     }
     $91 = $1;
     $92 = (_yy_Newline($91)|0);
     $93 = ($92|0)!=(0);
     if ($93) {
      break;
     } else {
      label = 27;
      break;
     }
    } else {
     label = 27;
    }
   } while(0);
   L35: do {
    if ((label|0) == 27) {
     $94 = $yypos2468;
     $95 = $1;
     $96 = (($95) + 12|0);
     HEAP32[$96>>2] = $94;
     $97 = $yythunkpos2468;
     $98 = $1;
     $99 = (($98) + 44|0);
     HEAP32[$99>>2] = $97;
     $100 = $1;
     $101 = (_yy_Ticks4($100)|0);
     $102 = ($101|0)!=(0);
     do {
      if ($102) {
       $103 = $1;
       $104 = (_yy_FenceType($103)|0);
       $105 = ($104|0)!=(0);
       if (!($105)) {
        break;
       }
       $106 = $1;
       _yyDo($106,8,-1,0,41336);
       $107 = $1;
       $108 = $1;
       $109 = (($108) + 28|0);
       $110 = HEAP32[$109>>2]|0;
       $111 = $1;
       $112 = (($111) + 32|0);
       $113 = HEAP32[$112>>2]|0;
       (_yyText($107,$110,$113)|0);
       $114 = $1;
       $115 = (($114) + 12|0);
       $116 = HEAP32[$115>>2]|0;
       $117 = $1;
       $118 = (($117) + 28|0);
       HEAP32[$118>>2] = $116;
       while(1) {
        $119 = $1;
        $120 = (($119) + 12|0);
        $121 = HEAP32[$120>>2]|0;
        $yypos2475 = $121;
        $122 = $1;
        $123 = (($122) + 44|0);
        $124 = HEAP32[$123>>2]|0;
        $yythunkpos2475 = $124;
        $125 = $1;
        $126 = (($125) + 12|0);
        $127 = HEAP32[$126>>2]|0;
        $yypos2476 = $127;
        $128 = $1;
        $129 = (($128) + 44|0);
        $130 = HEAP32[$129>>2]|0;
        $yythunkpos2476 = $130;
        $131 = $1;
        $132 = (_yy_NonindentSpace($131)|0);
        $133 = ($132|0)!=(0);
        if ($133) {
         $134 = $1;
         $135 = (_yy_Ticks4($134)|0);
         $136 = ($135|0)!=(0);
         if ($136) {
          label = 37;
          break;
         }
        } else {
        }
        $137 = $yypos2476;
        $138 = $1;
        $139 = (($138) + 12|0);
        HEAP32[$139>>2] = $137;
        $140 = $yythunkpos2476;
        $141 = $1;
        $142 = (($141) + 44|0);
        HEAP32[$142>>2] = $140;
        $143 = $1;
        $144 = (_yy_NonMatchingRawLine($143)|0);
        $145 = ($144|0)!=(0);
        if (!($145)) {
         label = 39;
         break;
        }
       }
       if ((label|0) == 37) {
       }
       else if ((label|0) == 39) {
       }
       $146 = $yypos2475;
       $147 = $1;
       $148 = (($147) + 12|0);
       HEAP32[$148>>2] = $146;
       $149 = $yythunkpos2475;
       $150 = $1;
       $151 = (($150) + 44|0);
       HEAP32[$151>>2] = $149;
       $152 = $1;
       $153 = $1;
       $154 = (($153) + 28|0);
       $155 = HEAP32[$154>>2]|0;
       $156 = $1;
       $157 = (($156) + 32|0);
       $158 = HEAP32[$157>>2]|0;
       (_yyText($152,$155,$158)|0);
       $159 = $1;
       $160 = (($159) + 12|0);
       $161 = HEAP32[$160>>2]|0;
       $162 = $1;
       $163 = (($162) + 32|0);
       HEAP32[$163>>2] = $161;
       $164 = $1;
       $165 = (_yy_NonindentSpace($164)|0);
       $166 = ($165|0)!=(0);
       if (!($166)) {
        break;
       }
       $167 = $1;
       $168 = (_yy_Ticks4($167)|0);
       $169 = ($168|0)!=(0);
       if (!($169)) {
        break;
       }
       $170 = $1;
       $171 = (_yy_Sp($170)|0);
       $172 = ($171|0)!=(0);
       if (!($172)) {
        break;
       }
       $173 = $1;
       $174 = (_yy_Newline($173)|0);
       $175 = ($174|0)!=(0);
       if ($175) {
        break L35;
       } else {
        break;
       }
      } else {
      }
     } while(0);
     $176 = $yypos2468;
     $177 = $1;
     $178 = (($177) + 12|0);
     HEAP32[$178>>2] = $176;
     $179 = $yythunkpos2468;
     $180 = $1;
     $181 = (($180) + 44|0);
     HEAP32[$181>>2] = $179;
     $182 = $1;
     $183 = (_yy_Ticks5($182)|0);
     $184 = ($183|0)!=(0);
     if (!($184)) {
      break L1;
     }
     $185 = $1;
     $186 = (_yy_FenceType($185)|0);
     $187 = ($186|0)!=(0);
     if (!($187)) {
      break L1;
     }
     $188 = $1;
     _yyDo($188,8,-1,0,41336);
     $189 = $1;
     $190 = $1;
     $191 = (($190) + 28|0);
     $192 = HEAP32[$191>>2]|0;
     $193 = $1;
     $194 = (($193) + 32|0);
     $195 = HEAP32[$194>>2]|0;
     (_yyText($189,$192,$195)|0);
     $196 = $1;
     $197 = (($196) + 12|0);
     $198 = HEAP32[$197>>2]|0;
     $199 = $1;
     $200 = (($199) + 28|0);
     HEAP32[$200>>2] = $198;
     while(1) {
      $201 = $1;
      $202 = (($201) + 12|0);
      $203 = HEAP32[$202>>2]|0;
      $yypos2478 = $203;
      $204 = $1;
      $205 = (($204) + 44|0);
      $206 = HEAP32[$205>>2]|0;
      $yythunkpos2478 = $206;
      $207 = $1;
      $208 = (($207) + 12|0);
      $209 = HEAP32[$208>>2]|0;
      $yypos2479 = $209;
      $210 = $1;
      $211 = (($210) + 44|0);
      $212 = HEAP32[$211>>2]|0;
      $yythunkpos2479 = $212;
      $213 = $1;
      $214 = (_yy_NonindentSpace($213)|0);
      $215 = ($214|0)!=(0);
      if ($215) {
       $216 = $1;
       $217 = (_yy_Ticks5($216)|0);
       $218 = ($217|0)!=(0);
       if ($218) {
        label = 61;
        break;
       }
      } else {
      }
      $219 = $yypos2479;
      $220 = $1;
      $221 = (($220) + 12|0);
      HEAP32[$221>>2] = $219;
      $222 = $yythunkpos2479;
      $223 = $1;
      $224 = (($223) + 44|0);
      HEAP32[$224>>2] = $222;
      $225 = $1;
      $226 = (_yy_NonMatchingRawLine($225)|0);
      $227 = ($226|0)!=(0);
      if (!($227)) {
       label = 63;
       break;
      }
     }
     if ((label|0) == 61) {
     }
     else if ((label|0) == 63) {
     }
     $228 = $yypos2478;
     $229 = $1;
     $230 = (($229) + 12|0);
     HEAP32[$230>>2] = $228;
     $231 = $yythunkpos2478;
     $232 = $1;
     $233 = (($232) + 44|0);
     HEAP32[$233>>2] = $231;
     $234 = $1;
     $235 = $1;
     $236 = (($235) + 28|0);
     $237 = HEAP32[$236>>2]|0;
     $238 = $1;
     $239 = (($238) + 32|0);
     $240 = HEAP32[$239>>2]|0;
     (_yyText($234,$237,$240)|0);
     $241 = $1;
     $242 = (($241) + 12|0);
     $243 = HEAP32[$242>>2]|0;
     $244 = $1;
     $245 = (($244) + 32|0);
     HEAP32[$245>>2] = $243;
     $246 = $1;
     $247 = (_yy_NonindentSpace($246)|0);
     $248 = ($247|0)!=(0);
     if (!($248)) {
      break L1;
     }
     $249 = $1;
     $250 = (_yy_Ticks5($249)|0);
     $251 = ($250|0)!=(0);
     if (!($251)) {
      break L1;
     }
     $252 = $1;
     $253 = (_yy_Sp($252)|0);
     $254 = ($253|0)!=(0);
     if (!($254)) {
      break L1;
     }
     $255 = $1;
     $256 = (_yy_Newline($255)|0);
     $257 = ($256|0)!=(0);
     if ($257) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $258 = $1;
   $259 = $1;
   $260 = (($259) + 28|0);
   $261 = HEAP32[$260>>2]|0;
   $262 = $1;
   $263 = (($262) + 32|0);
   $264 = HEAP32[$263>>2]|0;
   _yyDo($258,36,$261,$264,48992);
   $265 = $1;
   _yyDo($265,12,1,0,41392);
   $0 = 1;
   $272 = $0;
   STACKTOP = sp;return ($272|0);
  } else {
  }
 } while(0);
 $266 = $yypos0;
 $267 = $1;
 $268 = (($267) + 12|0);
 HEAP32[$268>>2] = $266;
 $269 = $yythunkpos0;
 $270 = $1;
 $271 = (($270) + 44|0);
 HEAP32[$271>>2] = $269;
 $0 = 0;
 $272 = $0;
 STACKTOP = sp;return ($272|0);
}
function _yy_Verbatim($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $yypos0 = 0, $yypos2462 = 0, $yypos2464 = 0, $yypos2466 = 0, $yythunkpos0 = 0, $yythunkpos2462 = 0, $yythunkpos2464 = 0, $yythunkpos2466 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 while(1) {
  $9 = $1;
  $10 = (($9) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $yypos2462 = $11;
  $12 = $1;
  $13 = (($12) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $yythunkpos2462 = $14;
  $15 = $1;
  $16 = (_yy_BlankLine($15)|0);
  $17 = ($16|0)!=(0);
  if (!($17)) {
   break;
  }
 }
 $18 = $yypos2462;
 $19 = $1;
 $20 = (($19) + 12|0);
 HEAP32[$20>>2] = $18;
 $21 = $yythunkpos2462;
 $22 = $1;
 $23 = (($22) + 44|0);
 HEAP32[$23>>2] = $21;
 $24 = $1;
 $25 = (_yy_StartList($24)|0);
 $26 = ($25|0)!=(0);
 do {
  if ($26) {
   $27 = $1;
   _yyDo($27,8,-1,0,41336);
   $28 = $1;
   $29 = (_yy_VerbatimChunk($28)|0);
   $30 = ($29|0)!=(0);
   if (!($30)) {
    break;
   }
   $31 = $1;
   $32 = $1;
   $33 = (($32) + 28|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $1;
   $36 = (($35) + 32|0);
   $37 = HEAP32[$36>>2]|0;
   _yyDo($31,37,$34,$37,48888);
   while(1) {
    $38 = $1;
    $39 = (($38) + 12|0);
    $40 = HEAP32[$39>>2]|0;
    $yypos2464 = $40;
    $41 = $1;
    $42 = (($41) + 44|0);
    $43 = HEAP32[$42>>2]|0;
    $yythunkpos2464 = $43;
    $44 = $1;
    $45 = (_yy_VerbatimChunk($44)|0);
    $46 = ($45|0)!=(0);
    if (!($46)) {
     break;
    }
    $47 = $1;
    $48 = $1;
    $49 = (($48) + 28|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = $1;
    $52 = (($51) + 32|0);
    $53 = HEAP32[$52>>2]|0;
    _yyDo($47,37,$50,$53,48888);
   }
   $54 = $yypos2464;
   $55 = $1;
   $56 = (($55) + 12|0);
   HEAP32[$56>>2] = $54;
   $57 = $yythunkpos2464;
   $58 = $1;
   $59 = (($58) + 44|0);
   HEAP32[$59>>2] = $57;
   while(1) {
    $60 = $1;
    $61 = (($60) + 12|0);
    $62 = HEAP32[$61>>2]|0;
    $yypos2466 = $62;
    $63 = $1;
    $64 = (($63) + 44|0);
    $65 = HEAP32[$64>>2]|0;
    $yythunkpos2466 = $65;
    $66 = $1;
    $67 = (_yy_BlankLine($66)|0);
    $68 = ($67|0)!=(0);
    if (!($68)) {
     break;
    }
   }
   $69 = $yypos2466;
   $70 = $1;
   $71 = (($70) + 12|0);
   HEAP32[$71>>2] = $69;
   $72 = $yythunkpos2466;
   $73 = $1;
   $74 = (($73) + 44|0);
   HEAP32[$74>>2] = $72;
   $75 = $1;
   $76 = $1;
   $77 = (($76) + 28|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $1;
   $80 = (($79) + 32|0);
   $81 = HEAP32[$80>>2]|0;
   _yyDo($75,38,$78,$81,48904);
   $82 = $1;
   _yyDo($82,12,1,0,41392);
   $0 = 1;
   $89 = $0;
   STACKTOP = sp;return ($89|0);
  } else {
  }
 } while(0);
 $83 = $yypos0;
 $84 = $1;
 $85 = (($84) + 12|0);
 HEAP32[$85>>2] = $83;
 $86 = $yythunkpos0;
 $87 = $1;
 $88 = (($87) + 44|0);
 HEAP32[$88>>2] = $86;
 $0 = 0;
 $89 = $0;
 STACKTOP = sp;return ($89|0);
}
function _yy_DefinitionList($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0;
 var $yypos2437 = 0, $yypos2439 = 0, $yypos2440 = 0, $yypos2443 = 0, $yypos2445 = 0, $yypos2446 = 0, $yypos2449 = 0, $yypos2451 = 0, $yypos2453 = 0, $yypos2454 = 0, $yypos2457 = 0, $yypos2459 = 0, $yythunkpos0 = 0, $yythunkpos2437 = 0, $yythunkpos2439 = 0, $yythunkpos2440 = 0, $yythunkpos2443 = 0, $yythunkpos2445 = 0, $yythunkpos2446 = 0, $yythunkpos2449 = 0;
 var $yythunkpos2451 = 0, $yythunkpos2453 = 0, $yythunkpos2454 = 0, $yythunkpos2457 = 0, $yythunkpos2459 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 $9 = $1;
 $10 = (_yy_StartList($9)|0);
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $1;
   _yyDo($12,8,-1,0,41336);
   $13 = $1;
   $14 = (($13) + 12|0);
   $15 = HEAP32[$14>>2]|0;
   $yypos2437 = $15;
   $16 = $1;
   $17 = (($16) + 44|0);
   $18 = HEAP32[$17>>2]|0;
   $yythunkpos2437 = $18;
   $19 = $1;
   $20 = (_yy_TermLine($19)|0);
   $21 = ($20|0)!=(0);
   if (!($21)) {
    break;
   }
   while(1) {
    $22 = $1;
    $23 = (($22) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $yypos2439 = $24;
    $25 = $1;
    $26 = (($25) + 44|0);
    $27 = HEAP32[$26>>2]|0;
    $yythunkpos2439 = $27;
    $28 = $1;
    $29 = (_yy_TermLine($28)|0);
    $30 = ($29|0)!=(0);
    if (!($30)) {
     break;
    }
   }
   $31 = $yypos2439;
   $32 = $1;
   $33 = (($32) + 12|0);
   HEAP32[$33>>2] = $31;
   $34 = $yythunkpos2439;
   $35 = $1;
   $36 = (($35) + 44|0);
   HEAP32[$36>>2] = $34;
   $37 = $1;
   $38 = (($37) + 12|0);
   $39 = HEAP32[$38>>2]|0;
   $yypos2440 = $39;
   $40 = $1;
   $41 = (($40) + 44|0);
   $42 = HEAP32[$41>>2]|0;
   $yythunkpos2440 = $42;
   $43 = $1;
   $44 = (_yy_Newline($43)|0);
   $45 = ($44|0)!=(0);
   if ($45) {
   } else {
    $46 = $yypos2440;
    $47 = $1;
    $48 = (($47) + 12|0);
    HEAP32[$48>>2] = $46;
    $49 = $yythunkpos2440;
    $50 = $1;
    $51 = (($50) + 44|0);
    HEAP32[$51>>2] = $49;
   }
   $52 = $1;
   $53 = (_yy_NonindentSpace($52)|0);
   $54 = ($53|0)!=(0);
   if (!($54)) {
    break;
   }
   $55 = $1;
   $56 = (_yymatchChar($55,58)|0);
   $57 = ($56|0)!=(0);
   if (!($57)) {
    break;
   }
   $58 = $yypos2437;
   $59 = $1;
   $60 = (($59) + 12|0);
   HEAP32[$60>>2] = $58;
   $61 = $yythunkpos2437;
   $62 = $1;
   $63 = (($62) + 44|0);
   HEAP32[$63>>2] = $61;
   $64 = $1;
   $65 = (_yy_Term($64)|0);
   $66 = ($65|0)!=(0);
   if (!($66)) {
    break;
   }
   $67 = $1;
   $68 = $1;
   $69 = (($68) + 28|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = $1;
   $72 = (($71) + 32|0);
   $73 = HEAP32[$72>>2]|0;
   _yyDo($67,39,$70,$73,48672);
   while(1) {
    $74 = $1;
    $75 = (($74) + 12|0);
    $76 = HEAP32[$75>>2]|0;
    $yypos2445 = $76;
    $77 = $1;
    $78 = (($77) + 44|0);
    $79 = HEAP32[$78>>2]|0;
    $yythunkpos2445 = $79;
    $80 = $1;
    $81 = (_yy_Term($80)|0);
    $82 = ($81|0)!=(0);
    if (!($82)) {
     break;
    }
    $83 = $1;
    $84 = $1;
    $85 = (($84) + 28|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $1;
    $88 = (($87) + 32|0);
    $89 = HEAP32[$88>>2]|0;
    _yyDo($83,39,$86,$89,48672);
   }
   $90 = $yypos2445;
   $91 = $1;
   $92 = (($91) + 12|0);
   HEAP32[$92>>2] = $90;
   $93 = $yythunkpos2445;
   $94 = $1;
   $95 = (($94) + 44|0);
   HEAP32[$95>>2] = $93;
   $96 = $1;
   $97 = (($96) + 12|0);
   $98 = HEAP32[$97>>2]|0;
   $yypos2446 = $98;
   $99 = $1;
   $100 = (($99) + 44|0);
   $101 = HEAP32[$100>>2]|0;
   $yythunkpos2446 = $101;
   $102 = $1;
   $103 = (_yy_BlankLine($102)|0);
   $104 = ($103|0)!=(0);
   if ($104) {
   } else {
    $105 = $yypos2446;
    $106 = $1;
    $107 = (($106) + 12|0);
    HEAP32[$107>>2] = $105;
    $108 = $yythunkpos2446;
    $109 = $1;
    $110 = (($109) + 44|0);
    HEAP32[$110>>2] = $108;
   }
   $111 = $1;
   $112 = (_yy_Definition($111)|0);
   $113 = ($112|0)!=(0);
   if (!($113)) {
    break;
   }
   $114 = $1;
   $115 = $1;
   $116 = (($115) + 28|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = $1;
   $119 = (($118) + 32|0);
   $120 = HEAP32[$119>>2]|0;
   _yyDo($114,40,$117,$120,48696);
   while(1) {
    $121 = $1;
    $122 = (($121) + 12|0);
    $123 = HEAP32[$122>>2]|0;
    $yypos2449 = $123;
    $124 = $1;
    $125 = (($124) + 44|0);
    $126 = HEAP32[$125>>2]|0;
    $yythunkpos2449 = $126;
    $127 = $1;
    $128 = (_yy_Definition($127)|0);
    $129 = ($128|0)!=(0);
    if (!($129)) {
     break;
    }
    $130 = $1;
    $131 = $1;
    $132 = (($131) + 28|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = $1;
    $135 = (($134) + 32|0);
    $136 = HEAP32[$135>>2]|0;
    _yyDo($130,40,$133,$136,48696);
   }
   $137 = $yypos2449;
   $138 = $1;
   $139 = (($138) + 12|0);
   HEAP32[$139>>2] = $137;
   $140 = $yythunkpos2449;
   $141 = $1;
   $142 = (($141) + 44|0);
   HEAP32[$142>>2] = $140;
   while(1) {
    $143 = $1;
    $144 = (($143) + 12|0);
    $145 = HEAP32[$144>>2]|0;
    $yypos2451 = $145;
    $146 = $1;
    $147 = (($146) + 44|0);
    $148 = HEAP32[$147>>2]|0;
    $yythunkpos2451 = $148;
    $149 = $1;
    $150 = (_yy_BlankLine($149)|0);
    $151 = ($150|0)!=(0);
    if (!($151)) {
     break;
    }
   }
   $152 = $yypos2451;
   $153 = $1;
   $154 = (($153) + 12|0);
   HEAP32[$154>>2] = $152;
   $155 = $yythunkpos2451;
   $156 = $1;
   $157 = (($156) + 44|0);
   HEAP32[$157>>2] = $155;
   while(1) {
    $158 = $1;
    $159 = (($158) + 12|0);
    $160 = HEAP32[$159>>2]|0;
    $yypos2443 = $160;
    $161 = $1;
    $162 = (($161) + 44|0);
    $163 = HEAP32[$162>>2]|0;
    $yythunkpos2443 = $163;
    $164 = $1;
    $165 = (_yy_Term($164)|0);
    $166 = ($165|0)!=(0);
    if (!($166)) {
     label = 39;
     break;
    }
    $167 = $1;
    $168 = $1;
    $169 = (($168) + 28|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = $1;
    $172 = (($171) + 32|0);
    $173 = HEAP32[$172>>2]|0;
    _yyDo($167,39,$170,$173,48672);
    while(1) {
     $174 = $1;
     $175 = (($174) + 12|0);
     $176 = HEAP32[$175>>2]|0;
     $yypos2453 = $176;
     $177 = $1;
     $178 = (($177) + 44|0);
     $179 = HEAP32[$178>>2]|0;
     $yythunkpos2453 = $179;
     $180 = $1;
     $181 = (_yy_Term($180)|0);
     $182 = ($181|0)!=(0);
     if (!($182)) {
      break;
     }
     $183 = $1;
     $184 = $1;
     $185 = (($184) + 28|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = $1;
     $188 = (($187) + 32|0);
     $189 = HEAP32[$188>>2]|0;
     _yyDo($183,39,$186,$189,48672);
    }
    $190 = $yypos2453;
    $191 = $1;
    $192 = (($191) + 12|0);
    HEAP32[$192>>2] = $190;
    $193 = $yythunkpos2453;
    $194 = $1;
    $195 = (($194) + 44|0);
    HEAP32[$195>>2] = $193;
    $196 = $1;
    $197 = (($196) + 12|0);
    $198 = HEAP32[$197>>2]|0;
    $yypos2454 = $198;
    $199 = $1;
    $200 = (($199) + 44|0);
    $201 = HEAP32[$200>>2]|0;
    $yythunkpos2454 = $201;
    $202 = $1;
    $203 = (_yy_BlankLine($202)|0);
    $204 = ($203|0)!=(0);
    if ($204) {
    } else {
     $205 = $yypos2454;
     $206 = $1;
     $207 = (($206) + 12|0);
     HEAP32[$207>>2] = $205;
     $208 = $yythunkpos2454;
     $209 = $1;
     $210 = (($209) + 44|0);
     HEAP32[$210>>2] = $208;
    }
    $211 = $1;
    $212 = (_yy_Definition($211)|0);
    $213 = ($212|0)!=(0);
    if (!($213)) {
     label = 49;
     break;
    }
    $214 = $1;
    $215 = $1;
    $216 = (($215) + 28|0);
    $217 = HEAP32[$216>>2]|0;
    $218 = $1;
    $219 = (($218) + 32|0);
    $220 = HEAP32[$219>>2]|0;
    _yyDo($214,40,$217,$220,48696);
    while(1) {
     $221 = $1;
     $222 = (($221) + 12|0);
     $223 = HEAP32[$222>>2]|0;
     $yypos2457 = $223;
     $224 = $1;
     $225 = (($224) + 44|0);
     $226 = HEAP32[$225>>2]|0;
     $yythunkpos2457 = $226;
     $227 = $1;
     $228 = (_yy_Definition($227)|0);
     $229 = ($228|0)!=(0);
     if (!($229)) {
      break;
     }
     $230 = $1;
     $231 = $1;
     $232 = (($231) + 28|0);
     $233 = HEAP32[$232>>2]|0;
     $234 = $1;
     $235 = (($234) + 32|0);
     $236 = HEAP32[$235>>2]|0;
     _yyDo($230,40,$233,$236,48696);
    }
    $237 = $yypos2457;
    $238 = $1;
    $239 = (($238) + 12|0);
    HEAP32[$239>>2] = $237;
    $240 = $yythunkpos2457;
    $241 = $1;
    $242 = (($241) + 44|0);
    HEAP32[$242>>2] = $240;
    while(1) {
     $243 = $1;
     $244 = (($243) + 12|0);
     $245 = HEAP32[$244>>2]|0;
     $yypos2459 = $245;
     $246 = $1;
     $247 = (($246) + 44|0);
     $248 = HEAP32[$247>>2]|0;
     $yythunkpos2459 = $248;
     $249 = $1;
     $250 = (_yy_BlankLine($249)|0);
     $251 = ($250|0)!=(0);
     if (!($251)) {
      break;
     }
    }
    $252 = $yypos2459;
    $253 = $1;
    $254 = (($253) + 12|0);
    HEAP32[$254>>2] = $252;
    $255 = $yythunkpos2459;
    $256 = $1;
    $257 = (($256) + 44|0);
    HEAP32[$257>>2] = $255;
   }
   if ((label|0) == 39) {
   }
   else if ((label|0) == 49) {
   }
   $258 = $yypos2443;
   $259 = $1;
   $260 = (($259) + 12|0);
   HEAP32[$260>>2] = $258;
   $261 = $yythunkpos2443;
   $262 = $1;
   $263 = (($262) + 44|0);
   HEAP32[$263>>2] = $261;
   $264 = $1;
   $265 = $1;
   $266 = (($265) + 28|0);
   $267 = HEAP32[$266>>2]|0;
   $268 = $1;
   $269 = (($268) + 32|0);
   $270 = HEAP32[$269>>2]|0;
   _yyDo($264,41,$267,$270,48720);
   $271 = $1;
   _yyDo($271,12,1,0,41392);
   $0 = 1;
   $278 = $0;
   STACKTOP = sp;return ($278|0);
  } else {
  }
 } while(0);
 $272 = $yypos0;
 $273 = $1;
 $274 = (($273) + 12|0);
 HEAP32[$274>>2] = $272;
 $275 = $yythunkpos0;
 $276 = $1;
 $277 = (($276) + 44|0);
 HEAP32[$277>>2] = $275;
 $0 = 0;
 $278 = $0;
 STACKTOP = sp;return ($278|0);
}
function _yy_Glossary($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $yypos0 = 0, $yypos2431 = 0, $yypos2434 = 0, $yypos2435 = 0, $yythunkpos0 = 0, $yythunkpos2431 = 0, $yythunkpos2434 = 0, $yythunkpos2435 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,2,0,41328);
 $9 = $1;
 $10 = $1;
 $11 = (($10) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $1;
 $14 = (($13) + 32|0);
 $15 = HEAP32[$14>>2]|0;
 (_yyText($9,$12,$15)|0);
 $16 = $1;
 $17 = (($16) + 64|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (_extension(32,$20)|0);
 do {
  if ($21) {
   $22 = $1;
   $23 = (_yy_StartList($22)|0);
   $24 = ($23|0)!=(0);
   if (!($24)) {
    break;
   }
   $25 = $1;
   _yyDo($25,8,-2,0,41336);
   $26 = $1;
   $27 = (_yy_NonindentSpace($26)|0);
   $28 = ($27|0)!=(0);
   if (!($28)) {
    break;
   }
   $29 = $1;
   $30 = (_yy_RawNoteReference($29)|0);
   $31 = ($30|0)!=(0);
   if (!($31)) {
    break;
   }
   $32 = $1;
   _yyDo($32,8,-1,0,41336);
   $33 = $1;
   $34 = (_yymatchChar($33,58)|0);
   $35 = ($34|0)!=(0);
   if (!($35)) {
    break;
   }
   $36 = $1;
   $37 = (_yy_Sp($36)|0);
   $38 = ($37|0)!=(0);
   if (!($38)) {
    break;
   }
   $39 = $1;
   $40 = (_yymatchString($39,48528)|0);
   $41 = ($40|0)!=(0);
   if (!($41)) {
    break;
   }
   $42 = $1;
   $43 = (_yy_Sp($42)|0);
   $44 = ($43|0)!=(0);
   if (!($44)) {
    break;
   }
   $45 = $1;
   $46 = (_yy_GlossaryTerm($45)|0);
   $47 = ($46|0)!=(0);
   if (!($47)) {
    break;
   }
   $48 = $1;
   $49 = $1;
   $50 = (($49) + 28|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = $1;
   $53 = (($52) + 32|0);
   $54 = HEAP32[$53>>2]|0;
   _yyDo($48,42,$51,$54,48544);
   $55 = $1;
   $56 = (($55) + 12|0);
   $57 = HEAP32[$56>>2]|0;
   $yypos2431 = $57;
   $58 = $1;
   $59 = (($58) + 44|0);
   $60 = HEAP32[$59>>2]|0;
   $yythunkpos2431 = $60;
   $61 = $1;
   $62 = (_yy_GlossarySortKey($61)|0);
   $63 = ($62|0)!=(0);
   if ($63) {
    $64 = $1;
    $65 = $1;
    $66 = (($65) + 28|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = $1;
    $69 = (($68) + 32|0);
    $70 = HEAP32[$69>>2]|0;
    _yyDo($64,43,$67,$70,48560);
   } else {
    $71 = $yypos2431;
    $72 = $1;
    $73 = (($72) + 12|0);
    HEAP32[$73>>2] = $71;
    $74 = $yythunkpos2431;
    $75 = $1;
    $76 = (($75) + 44|0);
    HEAP32[$76>>2] = $74;
   }
   $77 = $1;
   $78 = (_yy_Newline($77)|0);
   $79 = ($78|0)!=(0);
   if (!($79)) {
    break;
   }
   $80 = $1;
   $81 = (_yy_RawNoteBlock($80)|0);
   $82 = ($81|0)!=(0);
   if (!($82)) {
    break;
   }
   $83 = $1;
   $84 = $1;
   $85 = (($84) + 28|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = $1;
   $88 = (($87) + 32|0);
   $89 = HEAP32[$88>>2]|0;
   _yyDo($83,44,$86,$89,48576);
   while(1) {
    $90 = $1;
    $91 = (($90) + 12|0);
    $92 = HEAP32[$91>>2]|0;
    $yypos2434 = $92;
    $93 = $1;
    $94 = (($93) + 44|0);
    $95 = HEAP32[$94>>2]|0;
    $yythunkpos2434 = $95;
    $96 = $1;
    $97 = (($96) + 12|0);
    $98 = HEAP32[$97>>2]|0;
    $yypos2435 = $98;
    $99 = $1;
    $100 = (($99) + 44|0);
    $101 = HEAP32[$100>>2]|0;
    $yythunkpos2435 = $101;
    $102 = $1;
    $103 = (_yy_Indent($102)|0);
    $104 = ($103|0)!=(0);
    if (!($104)) {
     label = 29;
     break;
    }
    $105 = $yypos2435;
    $106 = $1;
    $107 = (($106) + 12|0);
    HEAP32[$107>>2] = $105;
    $108 = $yythunkpos2435;
    $109 = $1;
    $110 = (($109) + 44|0);
    HEAP32[$110>>2] = $108;
    $111 = $1;
    $112 = (_yy_RawNoteBlock($111)|0);
    $113 = ($112|0)!=(0);
    if (!($113)) {
     label = 31;
     break;
    }
    $114 = $1;
    $115 = $1;
    $116 = (($115) + 28|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = $1;
    $119 = (($118) + 32|0);
    $120 = HEAP32[$119>>2]|0;
    _yyDo($114,45,$117,$120,48592);
   }
   if ((label|0) == 29) {
   }
   else if ((label|0) == 31) {
   }
   $121 = $yypos2434;
   $122 = $1;
   $123 = (($122) + 12|0);
   HEAP32[$123>>2] = $121;
   $124 = $yythunkpos2434;
   $125 = $1;
   $126 = (($125) + 44|0);
   HEAP32[$126>>2] = $124;
   $127 = $1;
   $128 = $1;
   $129 = (($128) + 28|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = $1;
   $132 = (($131) + 32|0);
   $133 = HEAP32[$132>>2]|0;
   _yyDo($127,46,$130,$133,48608);
   $134 = $1;
   _yyDo($134,12,2,0,41392);
   $0 = 1;
   $141 = $0;
   STACKTOP = sp;return ($141|0);
  } else {
  }
 } while(0);
 $135 = $yypos0;
 $136 = $1;
 $137 = (($136) + 12|0);
 HEAP32[$137>>2] = $135;
 $138 = $yythunkpos0;
 $139 = $1;
 $140 = (($139) + 44|0);
 HEAP32[$140>>2] = $138;
 $0 = 0;
 $141 = $0;
 STACKTOP = sp;return ($141|0);
}
function _yy_Note($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $yypos0 = 0, $yypos2428 = 0, $yypos2429 = 0, $yythunkpos0 = 0, $yythunkpos2428 = 0, $yythunkpos2429 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,2,0,41328);
 $9 = $1;
 $10 = $1;
 $11 = (($10) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $1;
 $14 = (($13) + 32|0);
 $15 = HEAP32[$14>>2]|0;
 (_yyText($9,$12,$15)|0);
 $16 = $1;
 $17 = (($16) + 64|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (_extension(32,$20)|0);
 do {
  if ($21) {
   $22 = $1;
   $23 = (_yy_NonindentSpace($22)|0);
   $24 = ($23|0)!=(0);
   if (!($24)) {
    break;
   }
   $25 = $1;
   $26 = (_yy_RawNoteReference($25)|0);
   $27 = ($26|0)!=(0);
   if (!($27)) {
    break;
   }
   $28 = $1;
   _yyDo($28,8,-2,0,41336);
   $29 = $1;
   $30 = (_yymatchChar($29,58)|0);
   $31 = ($30|0)!=(0);
   if (!($31)) {
    break;
   }
   $32 = $1;
   $33 = (_yy_Sp($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   $35 = $1;
   $36 = (_yy_StartList($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   _yyDo($38,8,-1,0,41336);
   $39 = $1;
   $40 = (_yy_RawNoteBlock($39)|0);
   $41 = ($40|0)!=(0);
   if (!($41)) {
    break;
   }
   $42 = $1;
   $43 = $1;
   $44 = (($43) + 28|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $1;
   $47 = (($46) + 32|0);
   $48 = HEAP32[$47>>2]|0;
   _yyDo($42,47,$45,$48,48384);
   while(1) {
    $49 = $1;
    $50 = (($49) + 12|0);
    $51 = HEAP32[$50>>2]|0;
    $yypos2428 = $51;
    $52 = $1;
    $53 = (($52) + 44|0);
    $54 = HEAP32[$53>>2]|0;
    $yythunkpos2428 = $54;
    $55 = $1;
    $56 = (($55) + 12|0);
    $57 = HEAP32[$56>>2]|0;
    $yypos2429 = $57;
    $58 = $1;
    $59 = (($58) + 44|0);
    $60 = HEAP32[$59>>2]|0;
    $yythunkpos2429 = $60;
    $61 = $1;
    $62 = (_yy_Indent($61)|0);
    $63 = ($62|0)!=(0);
    if (!($63)) {
     label = 17;
     break;
    }
    $64 = $yypos2429;
    $65 = $1;
    $66 = (($65) + 12|0);
    HEAP32[$66>>2] = $64;
    $67 = $yythunkpos2429;
    $68 = $1;
    $69 = (($68) + 44|0);
    HEAP32[$69>>2] = $67;
    $70 = $1;
    $71 = (_yy_RawNoteBlock($70)|0);
    $72 = ($71|0)!=(0);
    if (!($72)) {
     label = 19;
     break;
    }
    $73 = $1;
    $74 = $1;
    $75 = (($74) + 28|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $1;
    $78 = (($77) + 32|0);
    $79 = HEAP32[$78>>2]|0;
    _yyDo($73,48,$76,$79,48400);
   }
   if ((label|0) == 17) {
   }
   else if ((label|0) == 19) {
   }
   $80 = $yypos2428;
   $81 = $1;
   $82 = (($81) + 12|0);
   HEAP32[$82>>2] = $80;
   $83 = $yythunkpos2428;
   $84 = $1;
   $85 = (($84) + 44|0);
   HEAP32[$85>>2] = $83;
   $86 = $1;
   $87 = $1;
   $88 = (($87) + 28|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = $1;
   $91 = (($90) + 32|0);
   $92 = HEAP32[$91>>2]|0;
   _yyDo($86,49,$89,$92,48416);
   $93 = $1;
   _yyDo($93,12,2,0,41392);
   $0 = 1;
   $100 = $0;
   STACKTOP = sp;return ($100|0);
  } else {
  }
 } while(0);
 $94 = $yypos0;
 $95 = $1;
 $96 = (($95) + 12|0);
 HEAP32[$96>>2] = $94;
 $97 = $yythunkpos0;
 $98 = $1;
 $99 = (($98) + 44|0);
 HEAP32[$99>>2] = $97;
 $0 = 0;
 $100 = $0;
 STACKTOP = sp;return ($100|0);
}
function _yy_LinkReference($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $yypos0 = 0, $yypos2421 = 0, $yypos2422 = 0, $yypos2425 = 0, $yythunkpos0 = 0, $yythunkpos2421 = 0, $yythunkpos2422 = 0, $yythunkpos2425 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,4,0,41328);
 $9 = $1;
 $10 = (_yy_StartList($9)|0);
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $1;
   _yyDo($12,8,-4,0,41336);
   $13 = $1;
   $14 = (_yy_NonindentSpace($13)|0);
   $15 = ($14|0)!=(0);
   if (!($15)) {
    break;
   }
   $16 = $1;
   $17 = (($16) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $yypos2421 = $18;
   $19 = $1;
   $20 = (($19) + 44|0);
   $21 = HEAP32[$20>>2]|0;
   $yythunkpos2421 = $21;
   $22 = $1;
   $23 = (_yymatchString($22,44776)|0);
   $24 = ($23|0)!=(0);
   if ($24) {
    break;
   }
   $25 = $yypos2421;
   $26 = $1;
   $27 = (($26) + 12|0);
   HEAP32[$27>>2] = $25;
   $28 = $yythunkpos2421;
   $29 = $1;
   $30 = (($29) + 44|0);
   HEAP32[$30>>2] = $28;
   $31 = $1;
   $32 = (_yy_Label($31)|0);
   $33 = ($32|0)!=(0);
   if (!($33)) {
    break;
   }
   $34 = $1;
   _yyDo($34,8,-3,0,41336);
   $35 = $1;
   $36 = (_yymatchChar($35,58)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yy_Spnl($38)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $41 = $1;
   $42 = (_yy_RefSrc($41)|0);
   $43 = ($42|0)!=(0);
   if (!($43)) {
    break;
   }
   $44 = $1;
   _yyDo($44,8,-2,0,41336);
   $45 = $1;
   $46 = (_yy_RefTitle($45)|0);
   $47 = ($46|0)!=(0);
   if (!($47)) {
    break;
   }
   $48 = $1;
   _yyDo($48,8,-1,0,41336);
   $49 = $1;
   $50 = (($49) + 12|0);
   $51 = HEAP32[$50>>2]|0;
   $yypos2422 = $51;
   $52 = $1;
   $53 = (($52) + 44|0);
   $54 = HEAP32[$53>>2]|0;
   $yythunkpos2422 = $54;
   $55 = $1;
   $56 = $1;
   $57 = (($56) + 28|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $1;
   $60 = (($59) + 32|0);
   $61 = HEAP32[$60>>2]|0;
   (_yyText($55,$58,$61)|0);
   $62 = $1;
   $63 = (($62) + 64|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (($64) + 12|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (_extension(1,$66)|0);
   do {
    if ($67) {
     label = 24;
    } else {
     $68 = $1;
     $69 = $1;
     $70 = (($69) + 28|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = $1;
     $73 = (($72) + 32|0);
     $74 = HEAP32[$73>>2]|0;
     (_yyText($68,$71,$74)|0);
     $75 = $1;
     $76 = (($75) + 12|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = $1;
     $79 = (($78) + 28|0);
     HEAP32[$79>>2] = $77;
     $80 = $1;
     $81 = (_yy_Attributes($80)|0);
     $82 = ($81|0)!=(0);
     if ($82) {
      $83 = $1;
      $84 = $1;
      $85 = (($84) + 28|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = $1;
      $88 = (($87) + 32|0);
      $89 = HEAP32[$88>>2]|0;
      _yyDo($83,50,$86,$89,48224);
      break;
     } else {
      label = 24;
      break;
     }
    }
   } while(0);
   if ((label|0) == 24) {
    $90 = $yypos2422;
    $91 = $1;
    $92 = (($91) + 12|0);
    HEAP32[$92>>2] = $90;
    $93 = $yythunkpos2422;
    $94 = $1;
    $95 = (($94) + 44|0);
    HEAP32[$95>>2] = $93;
   }
   $96 = $1;
   $97 = $1;
   $98 = (($97) + 28|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = $1;
   $101 = (($100) + 32|0);
   $102 = HEAP32[$101>>2]|0;
   (_yyText($96,$99,$102)|0);
   $103 = $1;
   $104 = (($103) + 12|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = $1;
   $107 = (($106) + 32|0);
   HEAP32[$107>>2] = $105;
   $108 = $1;
   $109 = (_yy_BlankLine($108)|0);
   $110 = ($109|0)!=(0);
   if (!($110)) {
    break;
   }
   while(1) {
    $111 = $1;
    $112 = (($111) + 12|0);
    $113 = HEAP32[$112>>2]|0;
    $yypos2425 = $113;
    $114 = $1;
    $115 = (($114) + 44|0);
    $116 = HEAP32[$115>>2]|0;
    $yythunkpos2425 = $116;
    $117 = $1;
    $118 = (_yy_BlankLine($117)|0);
    $119 = ($118|0)!=(0);
    if (!($119)) {
     break;
    }
   }
   $120 = $yypos2425;
   $121 = $1;
   $122 = (($121) + 12|0);
   HEAP32[$122>>2] = $120;
   $123 = $yythunkpos2425;
   $124 = $1;
   $125 = (($124) + 44|0);
   HEAP32[$125>>2] = $123;
   $126 = $1;
   $127 = $1;
   $128 = (($127) + 28|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = $1;
   $131 = (($130) + 32|0);
   $132 = HEAP32[$131>>2]|0;
   _yyDo($126,51,$129,$132,48248);
   $133 = $1;
   _yyDo($133,12,4,0,41392);
   $0 = 1;
   $140 = $0;
   STACKTOP = sp;return ($140|0);
  } else {
  }
 } while(0);
 $134 = $yypos0;
 $135 = $1;
 $136 = (($135) + 12|0);
 HEAP32[$136>>2] = $134;
 $137 = $yythunkpos0;
 $138 = $1;
 $139 = (($138) + 44|0);
 HEAP32[$139>>2] = $137;
 $0 = 0;
 $140 = $0;
 STACKTOP = sp;return ($140|0);
}
function _yy_Abbreviation($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yythunkpos0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 $9 = $1;
 $10 = (_yymatchChar($9,42)|0);
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $1;
   $13 = (_yy_Label($12)|0);
   $14 = ($13|0)!=(0);
   if (!($14)) {
    break;
   }
   $15 = $1;
   _yyDo($15,8,-1,0,41336);
   $16 = $1;
   $17 = (_yy_Sp($16)|0);
   $18 = ($17|0)!=(0);
   if (!($18)) {
    break;
   }
   $19 = $1;
   $20 = (_yymatchChar($19,58)|0);
   $21 = ($20|0)!=(0);
   if (!($21)) {
    break;
   }
   $22 = $1;
   $23 = (_yy_Sp($22)|0);
   $24 = ($23|0)!=(0);
   if (!($24)) {
    break;
   }
   $25 = $1;
   $26 = (_yy_RawLine($25)|0);
   $27 = ($26|0)!=(0);
   if (!($27)) {
    break;
   }
   $28 = $1;
   $29 = $1;
   $30 = (($29) + 28|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $1;
   $33 = (($32) + 32|0);
   $34 = HEAP32[$33>>2]|0;
   _yyDo($28,52,$31,$34,48200);
   $35 = $1;
   _yyDo($35,12,1,0,41392);
   $0 = 1;
   $42 = $0;
   STACKTOP = sp;return ($42|0);
  } else {
  }
 } while(0);
 $36 = $yypos0;
 $37 = $1;
 $38 = (($37) + 12|0);
 HEAP32[$38>>2] = $36;
 $39 = $yythunkpos0;
 $40 = $1;
 $41 = (($40) + 44|0);
 HEAP32[$41>>2] = $39;
 $0 = 0;
 $42 = $0;
 STACKTOP = sp;return ($42|0);
}
function _yy_HorizontalRule($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos2408 = 0, $yypos2411 = 0, $yypos2414 = 0, $yypos2416 = 0, $yypos2418 = 0, $yythunkpos0 = 0, $yythunkpos2408 = 0, $yythunkpos2411 = 0, $yythunkpos2414 = 0, $yythunkpos2416 = 0, $yythunkpos2418 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_NonindentSpace($8)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (($11) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $yypos2408 = $13;
   $14 = $1;
   $15 = (($14) + 44|0);
   $16 = HEAP32[$15>>2]|0;
   $yythunkpos2408 = $16;
   $17 = $1;
   $18 = (_yymatchChar($17,42)|0);
   $19 = ($18|0)!=(0);
   do {
    if ($19) {
     $20 = $1;
     $21 = (_yy_Sp($20)|0);
     $22 = ($21|0)!=(0);
     if (!($22)) {
      label = 20;
      break;
     }
     $23 = $1;
     $24 = (_yymatchChar($23,42)|0);
     $25 = ($24|0)!=(0);
     if (!($25)) {
      label = 20;
      break;
     }
     $26 = $1;
     $27 = (_yy_Sp($26)|0);
     $28 = ($27|0)!=(0);
     if (!($28)) {
      label = 20;
      break;
     }
     $29 = $1;
     $30 = (_yymatchChar($29,42)|0);
     $31 = ($30|0)!=(0);
     if (!($31)) {
      label = 20;
      break;
     }
     while(1) {
      $32 = $1;
      $33 = (($32) + 12|0);
      $34 = HEAP32[$33>>2]|0;
      $yypos2411 = $34;
      $35 = $1;
      $36 = (($35) + 44|0);
      $37 = HEAP32[$36>>2]|0;
      $yythunkpos2411 = $37;
      $38 = $1;
      $39 = (_yy_Sp($38)|0);
      $40 = ($39|0)!=(0);
      if (!($40)) {
       label = 15;
       break;
      }
      $41 = $1;
      $42 = (_yymatchChar($41,42)|0);
      $43 = ($42|0)!=(0);
      if (!($43)) {
       label = 17;
       break;
      }
     }
     if ((label|0) == 15) {
     }
     else if ((label|0) == 17) {
     }
     $44 = $yypos2411;
     $45 = $1;
     $46 = (($45) + 12|0);
     HEAP32[$46>>2] = $44;
     $47 = $yythunkpos2411;
     $48 = $1;
     $49 = (($48) + 44|0);
     HEAP32[$49>>2] = $47;
    } else {
     label = 20;
    }
   } while(0);
   L27: do {
    if ((label|0) == 20) {
     $50 = $yypos2408;
     $51 = $1;
     $52 = (($51) + 12|0);
     HEAP32[$52>>2] = $50;
     $53 = $yythunkpos2408;
     $54 = $1;
     $55 = (($54) + 44|0);
     HEAP32[$55>>2] = $53;
     $56 = $1;
     $57 = (_yymatchChar($56,45)|0);
     $58 = ($57|0)!=(0);
     do {
      if ($58) {
       $59 = $1;
       $60 = (_yy_Sp($59)|0);
       $61 = ($60|0)!=(0);
       if (!($61)) {
        break;
       }
       $62 = $1;
       $63 = (_yymatchChar($62,45)|0);
       $64 = ($63|0)!=(0);
       if (!($64)) {
        break;
       }
       $65 = $1;
       $66 = (_yy_Sp($65)|0);
       $67 = ($66|0)!=(0);
       if (!($67)) {
        break;
       }
       $68 = $1;
       $69 = (_yymatchChar($68,45)|0);
       $70 = ($69|0)!=(0);
       if (!($70)) {
        break;
       }
       while(1) {
        $71 = $1;
        $72 = (($71) + 12|0);
        $73 = HEAP32[$72>>2]|0;
        $yypos2414 = $73;
        $74 = $1;
        $75 = (($74) + 44|0);
        $76 = HEAP32[$75>>2]|0;
        $yythunkpos2414 = $76;
        $77 = $1;
        $78 = (_yy_Sp($77)|0);
        $79 = ($78|0)!=(0);
        if (!($79)) {
         label = 32;
         break;
        }
        $80 = $1;
        $81 = (_yymatchChar($80,45)|0);
        $82 = ($81|0)!=(0);
        if (!($82)) {
         label = 34;
         break;
        }
       }
       if ((label|0) == 32) {
       }
       else if ((label|0) == 34) {
       }
       $83 = $yypos2414;
       $84 = $1;
       $85 = (($84) + 12|0);
       HEAP32[$85>>2] = $83;
       $86 = $yythunkpos2414;
       $87 = $1;
       $88 = (($87) + 44|0);
       HEAP32[$88>>2] = $86;
       break L27;
      } else {
      }
     } while(0);
     $89 = $yypos2408;
     $90 = $1;
     $91 = (($90) + 12|0);
     HEAP32[$91>>2] = $89;
     $92 = $yythunkpos2408;
     $93 = $1;
     $94 = (($93) + 44|0);
     HEAP32[$94>>2] = $92;
     $95 = $1;
     $96 = (_yymatchChar($95,95)|0);
     $97 = ($96|0)!=(0);
     if (!($97)) {
      break L1;
     }
     $98 = $1;
     $99 = (_yy_Sp($98)|0);
     $100 = ($99|0)!=(0);
     if (!($100)) {
      break L1;
     }
     $101 = $1;
     $102 = (_yymatchChar($101,95)|0);
     $103 = ($102|0)!=(0);
     if (!($103)) {
      break L1;
     }
     $104 = $1;
     $105 = (_yy_Sp($104)|0);
     $106 = ($105|0)!=(0);
     if (!($106)) {
      break L1;
     }
     $107 = $1;
     $108 = (_yymatchChar($107,95)|0);
     $109 = ($108|0)!=(0);
     if (!($109)) {
      break L1;
     }
     while(1) {
      $110 = $1;
      $111 = (($110) + 12|0);
      $112 = HEAP32[$111>>2]|0;
      $yypos2416 = $112;
      $113 = $1;
      $114 = (($113) + 44|0);
      $115 = HEAP32[$114>>2]|0;
      $yythunkpos2416 = $115;
      $116 = $1;
      $117 = (_yy_Sp($116)|0);
      $118 = ($117|0)!=(0);
      if (!($118)) {
       label = 49;
       break;
      }
      $119 = $1;
      $120 = (_yymatchChar($119,95)|0);
      $121 = ($120|0)!=(0);
      if (!($121)) {
       label = 51;
       break;
      }
     }
     if ((label|0) == 49) {
     }
     else if ((label|0) == 51) {
     }
     $122 = $yypos2416;
     $123 = $1;
     $124 = (($123) + 12|0);
     HEAP32[$124>>2] = $122;
     $125 = $yythunkpos2416;
     $126 = $1;
     $127 = (($126) + 44|0);
     HEAP32[$127>>2] = $125;
    }
   } while(0);
   $128 = $1;
   $129 = (_yy_Sp($128)|0);
   $130 = ($129|0)!=(0);
   if (!($130)) {
    break;
   }
   $131 = $1;
   $132 = (_yy_Newline($131)|0);
   $133 = ($132|0)!=(0);
   if (!($133)) {
    break;
   }
   while(1) {
    $134 = $1;
    $135 = (($134) + 12|0);
    $136 = HEAP32[$135>>2]|0;
    $yypos2418 = $136;
    $137 = $1;
    $138 = (($137) + 44|0);
    $139 = HEAP32[$138>>2]|0;
    $yythunkpos2418 = $139;
    $140 = $1;
    $141 = (_yy_BlankLine($140)|0);
    $142 = ($141|0)!=(0);
    if (!($142)) {
     break;
    }
   }
   $143 = $yypos2418;
   $144 = $1;
   $145 = (($144) + 12|0);
   HEAP32[$145>>2] = $143;
   $146 = $yythunkpos2418;
   $147 = $1;
   $148 = (($147) + 44|0);
   HEAP32[$148>>2] = $146;
   $149 = $1;
   $150 = $1;
   $151 = (($150) + 28|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = $1;
   $154 = (($153) + 32|0);
   $155 = HEAP32[$154>>2]|0;
   _yyDo($149,53,$152,$155,48176);
   $0 = 1;
   $162 = $0;
   STACKTOP = sp;return ($162|0);
  } else {
  }
 } while(0);
 $156 = $yypos0;
 $157 = $1;
 $158 = (($157) + 12|0);
 HEAP32[$158>>2] = $156;
 $159 = $yythunkpos0;
 $160 = $1;
 $161 = (($160) + 44|0);
 HEAP32[$161>>2] = $159;
 $0 = 0;
 $162 = $0;
 STACKTOP = sp;return ($162|0);
}
function _yy_HeadingSection($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos2406 = 0, $yythunkpos0 = 0, $yythunkpos2406 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 $9 = $1;
 $10 = (_yy_StartList($9)|0);
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $1;
   _yyDo($12,8,-1,0,41336);
   $13 = $1;
   $14 = (_yy_Heading($13)|0);
   $15 = ($14|0)!=(0);
   if (!($15)) {
    break;
   }
   $16 = $1;
   $17 = $1;
   $18 = (($17) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $1;
   $21 = (($20) + 32|0);
   $22 = HEAP32[$21>>2]|0;
   _yyDo($16,54,$19,$22,48104);
   while(1) {
    $23 = $1;
    $24 = (($23) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $yypos2406 = $25;
    $26 = $1;
    $27 = (($26) + 44|0);
    $28 = HEAP32[$27>>2]|0;
    $yythunkpos2406 = $28;
    $29 = $1;
    $30 = (_yy_HeadingSectionBlock($29)|0);
    $31 = ($30|0)!=(0);
    if (!($31)) {
     break;
    }
    $32 = $1;
    $33 = $1;
    $34 = (($33) + 28|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $1;
    $37 = (($36) + 32|0);
    $38 = HEAP32[$37>>2]|0;
    _yyDo($32,55,$35,$38,48128);
   }
   $39 = $yypos2406;
   $40 = $1;
   $41 = (($40) + 12|0);
   HEAP32[$41>>2] = $39;
   $42 = $yythunkpos2406;
   $43 = $1;
   $44 = (($43) + 44|0);
   HEAP32[$44>>2] = $42;
   $45 = $1;
   $46 = $1;
   $47 = (($46) + 28|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $1;
   $50 = (($49) + 32|0);
   $51 = HEAP32[$50>>2]|0;
   _yyDo($45,56,$48,$51,48152);
   $52 = $1;
   _yyDo($52,12,1,0,41392);
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_Heading($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos2402 = 0, $yythunkpos0 = 0, $yythunkpos2402 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos2402 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos2402 = $13;
 $14 = $1;
 $15 = (_yy_SetextHeading($14)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
  } else {
   $17 = $yypos2402;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos2402;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yy_AtxHeading($23)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    break;
   }
   $26 = $yypos0;
   $27 = $1;
   $28 = (($27) + 12|0);
   HEAP32[$28>>2] = $26;
   $29 = $yythunkpos0;
   $30 = $1;
   $31 = (($30) + 44|0);
   HEAP32[$31>>2] = $29;
   $0 = 0;
   $32 = $0;
   STACKTOP = sp;return ($32|0);
  }
 } while(0);
 $0 = 1;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _yy_OrderedList($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos2398 = 0, $yypos2399 = 0, $yythunkpos0 = 0, $yythunkpos2398 = 0;
 var $yythunkpos2399 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos2398 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos2398 = $13;
 $14 = $1;
 $15 = (_yy_Enumerator($14)|0);
 $16 = ($15|0)!=(0);
 L1: do {
  if ($16) {
   $17 = $yypos2398;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos2398;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (($23) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $yypos2399 = $25;
   $26 = $1;
   $27 = (($26) + 44|0);
   $28 = HEAP32[$27>>2]|0;
   $yythunkpos2399 = $28;
   $29 = $1;
   $30 = (_yy_ListTight($29)|0);
   $31 = ($30|0)!=(0);
   do {
    if ($31) {
    } else {
     $32 = $yypos2399;
     $33 = $1;
     $34 = (($33) + 12|0);
     HEAP32[$34>>2] = $32;
     $35 = $yythunkpos2399;
     $36 = $1;
     $37 = (($36) + 44|0);
     HEAP32[$37>>2] = $35;
     $38 = $1;
     $39 = (_yy_ListLoose($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $41 = $1;
   $42 = $1;
   $43 = (($42) + 28|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $1;
   $46 = (($45) + 32|0);
   $47 = HEAP32[$46>>2]|0;
   _yyDo($41,57,$44,$47,48080);
   $0 = 1;
   $54 = $0;
   STACKTOP = sp;return ($54|0);
  } else {
  }
 } while(0);
 $48 = $yypos0;
 $49 = $1;
 $50 = (($49) + 12|0);
 HEAP32[$50>>2] = $48;
 $51 = $yythunkpos0;
 $52 = $1;
 $53 = (($52) + 44|0);
 HEAP32[$53>>2] = $51;
 $0 = 0;
 $54 = $0;
 STACKTOP = sp;return ($54|0);
}
function _yy_BulletList($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos2394 = 0, $yypos2395 = 0, $yythunkpos0 = 0, $yythunkpos2394 = 0;
 var $yythunkpos2395 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos2394 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos2394 = $13;
 $14 = $1;
 $15 = (_yy_Bullet($14)|0);
 $16 = ($15|0)!=(0);
 L1: do {
  if ($16) {
   $17 = $yypos2394;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos2394;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (($23) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $yypos2395 = $25;
   $26 = $1;
   $27 = (($26) + 44|0);
   $28 = HEAP32[$27>>2]|0;
   $yythunkpos2395 = $28;
   $29 = $1;
   $30 = (_yy_ListTight($29)|0);
   $31 = ($30|0)!=(0);
   do {
    if ($31) {
    } else {
     $32 = $yypos2395;
     $33 = $1;
     $34 = (($33) + 12|0);
     HEAP32[$34>>2] = $32;
     $35 = $yythunkpos2395;
     $36 = $1;
     $37 = (($36) + 44|0);
     HEAP32[$37>>2] = $35;
     $38 = $1;
     $39 = (_yy_ListLoose($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $41 = $1;
   $42 = $1;
   $43 = (($42) + 28|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $1;
   $46 = (($45) + 32|0);
   $47 = HEAP32[$46>>2]|0;
   _yyDo($41,58,$44,$47,47664);
   $0 = 1;
   $54 = $0;
   STACKTOP = sp;return ($54|0);
  } else {
  }
 } while(0);
 $48 = $yypos0;
 $49 = $1;
 $50 = (($49) + 12|0);
 HEAP32[$50>>2] = $48;
 $51 = $yythunkpos0;
 $52 = $1;
 $53 = (($52) + 44|0);
 HEAP32[$53>>2] = $51;
 $0 = 0;
 $54 = $0;
 STACKTOP = sp;return ($54|0);
}
function _yy_HtmlBlock($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos2488 = 0, $yypos2489 = 0, $yypos2493 = 0, $yythunkpos0 = 0, $yythunkpos2488 = 0, $yythunkpos2489 = 0, $yythunkpos2493 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos2488 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos2488 = $13;
 $14 = $1;
 $15 = (_yy_MarkdownHtmlTagOpen($14)|0);
 $16 = ($15|0)!=(0);
 L1: do {
  if ($16) {
  } else {
   $17 = $yypos2488;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos2488;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = $1;
   $25 = (($24) + 28|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $1;
   $28 = (($27) + 32|0);
   $29 = HEAP32[$28>>2]|0;
   (_yyText($23,$26,$29)|0);
   $30 = $1;
   $31 = (($30) + 12|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $1;
   $34 = (($33) + 28|0);
   HEAP32[$34>>2] = $32;
   $35 = $1;
   $36 = (($35) + 12|0);
   $37 = HEAP32[$36>>2]|0;
   $yypos2489 = $37;
   $38 = $1;
   $39 = (($38) + 44|0);
   $40 = HEAP32[$39>>2]|0;
   $yythunkpos2489 = $40;
   $41 = $1;
   $42 = (_yy_HtmlBlockInTags($41)|0);
   $43 = ($42|0)!=(0);
   do {
    if ($43) {
    } else {
     $44 = $yypos2489;
     $45 = $1;
     $46 = (($45) + 12|0);
     HEAP32[$46>>2] = $44;
     $47 = $yythunkpos2489;
     $48 = $1;
     $49 = (($48) + 44|0);
     HEAP32[$49>>2] = $47;
     $50 = $1;
     $51 = (_yy_HtmlComment($50)|0);
     $52 = ($51|0)!=(0);
     if ($52) {
      break;
     }
     $53 = $yypos2489;
     $54 = $1;
     $55 = (($54) + 12|0);
     HEAP32[$55>>2] = $53;
     $56 = $yythunkpos2489;
     $57 = $1;
     $58 = (($57) + 44|0);
     HEAP32[$58>>2] = $56;
     $59 = $1;
     $60 = (_yy_HtmlBlockSelfClosing($59)|0);
     $61 = ($60|0)!=(0);
     if ($61) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $62 = $1;
   $63 = $1;
   $64 = (($63) + 28|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $1;
   $67 = (($66) + 32|0);
   $68 = HEAP32[$67>>2]|0;
   (_yyText($62,$65,$68)|0);
   $69 = $1;
   $70 = (($69) + 12|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $1;
   $73 = (($72) + 32|0);
   HEAP32[$73>>2] = $71;
   $74 = $1;
   $75 = (_yy_BlankLine($74)|0);
   $76 = ($75|0)!=(0);
   if (!($76)) {
    break;
   }
   while(1) {
    $77 = $1;
    $78 = (($77) + 12|0);
    $79 = HEAP32[$78>>2]|0;
    $yypos2493 = $79;
    $80 = $1;
    $81 = (($80) + 44|0);
    $82 = HEAP32[$81>>2]|0;
    $yythunkpos2493 = $82;
    $83 = $1;
    $84 = (_yy_BlankLine($83)|0);
    $85 = ($84|0)!=(0);
    if (!($85)) {
     break;
    }
   }
   $86 = $yypos2493;
   $87 = $1;
   $88 = (($87) + 12|0);
   HEAP32[$88>>2] = $86;
   $89 = $yythunkpos2493;
   $90 = $1;
   $91 = (($90) + 44|0);
   HEAP32[$91>>2] = $89;
   $92 = $1;
   $93 = $1;
   $94 = (($93) + 28|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $1;
   $97 = (($96) + 32|0);
   $98 = HEAP32[$97>>2]|0;
   _yyDo($92,59,$95,$98,41440);
   $0 = 1;
   $105 = $0;
   STACKTOP = sp;return ($105|0);
  }
 } while(0);
 $99 = $yypos0;
 $100 = $1;
 $101 = (($100) + 12|0);
 HEAP32[$101>>2] = $99;
 $102 = $yythunkpos0;
 $103 = $1;
 $104 = (($103) + 44|0);
 HEAP32[$104>>2] = $102;
 $0 = 0;
 $105 = $0;
 STACKTOP = sp;return ($105|0);
}
function _yy_MarkdownHtmlBlock($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos2387 = 0, $yypos2388 = 0, $yypos2392 = 0, $yythunkpos0 = 0, $yythunkpos2387 = 0, $yythunkpos2388 = 0, $yythunkpos2392 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos2387 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos2387 = $13;
 $14 = $1;
 $15 = (_yy_MarkdownHtmlTagOpen($14)|0);
 $16 = ($15|0)!=(0);
 L1: do {
  if ($16) {
   $17 = $yypos2387;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos2387;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = $1;
   $25 = (($24) + 28|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $1;
   $28 = (($27) + 32|0);
   $29 = HEAP32[$28>>2]|0;
   (_yyText($23,$26,$29)|0);
   $30 = $1;
   $31 = (($30) + 12|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $1;
   $34 = (($33) + 28|0);
   HEAP32[$34>>2] = $32;
   $35 = $1;
   $36 = (($35) + 12|0);
   $37 = HEAP32[$36>>2]|0;
   $yypos2388 = $37;
   $38 = $1;
   $39 = (($38) + 44|0);
   $40 = HEAP32[$39>>2]|0;
   $yythunkpos2388 = $40;
   $41 = $1;
   $42 = (_yy_HtmlBlockInTags($41)|0);
   $43 = ($42|0)!=(0);
   do {
    if ($43) {
    } else {
     $44 = $yypos2388;
     $45 = $1;
     $46 = (($45) + 12|0);
     HEAP32[$46>>2] = $44;
     $47 = $yythunkpos2388;
     $48 = $1;
     $49 = (($48) + 44|0);
     HEAP32[$49>>2] = $47;
     $50 = $1;
     $51 = (_yy_HtmlComment($50)|0);
     $52 = ($51|0)!=(0);
     if ($52) {
      break;
     }
     $53 = $yypos2388;
     $54 = $1;
     $55 = (($54) + 12|0);
     HEAP32[$55>>2] = $53;
     $56 = $yythunkpos2388;
     $57 = $1;
     $58 = (($57) + 44|0);
     HEAP32[$58>>2] = $56;
     $59 = $1;
     $60 = (_yy_HtmlBlockSelfClosing($59)|0);
     $61 = ($60|0)!=(0);
     if ($61) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $62 = $1;
   $63 = $1;
   $64 = (($63) + 28|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $1;
   $67 = (($66) + 32|0);
   $68 = HEAP32[$67>>2]|0;
   (_yyText($62,$65,$68)|0);
   $69 = $1;
   $70 = (($69) + 12|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $1;
   $73 = (($72) + 32|0);
   HEAP32[$73>>2] = $71;
   $74 = $1;
   $75 = (_yy_BlankLine($74)|0);
   $76 = ($75|0)!=(0);
   if (!($76)) {
    break;
   }
   while(1) {
    $77 = $1;
    $78 = (($77) + 12|0);
    $79 = HEAP32[$78>>2]|0;
    $yypos2392 = $79;
    $80 = $1;
    $81 = (($80) + 44|0);
    $82 = HEAP32[$81>>2]|0;
    $yythunkpos2392 = $82;
    $83 = $1;
    $84 = (_yy_BlankLine($83)|0);
    $85 = ($84|0)!=(0);
    if (!($85)) {
     break;
    }
   }
   $86 = $yypos2392;
   $87 = $1;
   $88 = (($87) + 12|0);
   HEAP32[$88>>2] = $86;
   $89 = $yythunkpos2392;
   $90 = $1;
   $91 = (($90) + 44|0);
   HEAP32[$91>>2] = $89;
   $92 = $1;
   $93 = $1;
   $94 = (($93) + 28|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $1;
   $97 = (($96) + 32|0);
   $98 = HEAP32[$97>>2]|0;
   _yyDo($92,60,$95,$98,47640);
   $0 = 1;
   $105 = $0;
   STACKTOP = sp;return ($105|0);
  } else {
  }
 } while(0);
 $99 = $yypos0;
 $100 = $1;
 $101 = (($100) + 12|0);
 HEAP32[$101>>2] = $99;
 $102 = $yythunkpos0;
 $103 = $1;
 $104 = (($103) + 44|0);
 HEAP32[$104>>2] = $102;
 $0 = 0;
 $105 = $0;
 STACKTOP = sp;return ($105|0);
}
function _yy_StyleBlock($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos2385 = 0, $yythunkpos0 = 0, $yythunkpos2385 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = $1;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($12) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 (_yyText($8,$11,$14)|0);
 $15 = $1;
 $16 = (($15) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = (($18) + 28|0);
 HEAP32[$19>>2] = $17;
 $20 = $1;
 $21 = (_yy_InStyleTags($20)|0);
 $22 = ($21|0)!=(0);
 if (!($22)) {
  $57 = $yypos0;
  $58 = $1;
  $59 = (($58) + 12|0);
  HEAP32[$59>>2] = $57;
  $60 = $yythunkpos0;
  $61 = $1;
  $62 = (($61) + 44|0);
  HEAP32[$62>>2] = $60;
  $0 = 0;
  $63 = $0;
  STACKTOP = sp;return ($63|0);
 }
 $23 = $1;
 $24 = $1;
 $25 = (($24) + 28|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $1;
 $28 = (($27) + 32|0);
 $29 = HEAP32[$28>>2]|0;
 (_yyText($23,$26,$29)|0);
 $30 = $1;
 $31 = (($30) + 12|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $1;
 $34 = (($33) + 32|0);
 HEAP32[$34>>2] = $32;
 while(1) {
  $35 = $1;
  $36 = (($35) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $yypos2385 = $37;
  $38 = $1;
  $39 = (($38) + 44|0);
  $40 = HEAP32[$39>>2]|0;
  $yythunkpos2385 = $40;
  $41 = $1;
  $42 = (_yy_BlankLine($41)|0);
  $43 = ($42|0)!=(0);
  if (!($43)) {
   break;
  }
 }
 $44 = $yypos2385;
 $45 = $1;
 $46 = (($45) + 12|0);
 HEAP32[$46>>2] = $44;
 $47 = $yythunkpos2385;
 $48 = $1;
 $49 = (($48) + 44|0);
 HEAP32[$49>>2] = $47;
 $50 = $1;
 $51 = $1;
 $52 = (($51) + 28|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $1;
 $55 = (($54) + 32|0);
 $56 = HEAP32[$55>>2]|0;
 _yyDo($50,61,$53,$56,47608);
 $0 = 1;
 $63 = $0;
 STACKTOP = sp;return ($63|0);
}
function _yy_Table($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos2366 = 0, $yypos2368 = 0, $yypos2371 = 0, $yypos2372 = 0, $yypos2373 = 0, $yypos2374 = 0, $yypos2377 = 0, $yypos2379 = 0, $yypos2381 = 0, $yypos2382 = 0, $yythunkpos0 = 0;
 var $yythunkpos2366 = 0, $yythunkpos2368 = 0, $yythunkpos2371 = 0, $yythunkpos2372 = 0, $yythunkpos2373 = 0, $yythunkpos2374 = 0, $yythunkpos2377 = 0, $yythunkpos2379 = 0, $yythunkpos2381 = 0, $yythunkpos2382 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,2,0,41328);
 $9 = $1;
 $10 = (_yy_StartList($9)|0);
 $11 = ($10|0)!=(0);
 L1: do {
  if ($11) {
   $12 = $1;
   _yyDo($12,8,-2,0,41336);
   $13 = $1;
   $14 = (_yy_StartList($13)|0);
   $15 = ($14|0)!=(0);
   if (!($15)) {
    break;
   }
   $16 = $1;
   _yyDo($16,8,-1,0,41336);
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos2366 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos2366 = $22;
   $23 = $1;
   $24 = (_yy_TableCaption($23)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    $26 = $1;
    $27 = $1;
    $28 = (($27) + 28|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = $1;
    $31 = (($30) + 32|0);
    $32 = HEAP32[$31>>2]|0;
    _yyDo($26,62,$29,$32,47056);
   } else {
    $33 = $yypos2366;
    $34 = $1;
    $35 = (($34) + 12|0);
    HEAP32[$35>>2] = $33;
    $36 = $yythunkpos2366;
    $37 = $1;
    $38 = (($37) + 44|0);
    HEAP32[$38>>2] = $36;
   }
   $39 = $1;
   $40 = (($39) + 12|0);
   $41 = HEAP32[$40>>2]|0;
   $yypos2368 = $41;
   $42 = $1;
   $43 = (($42) + 44|0);
   $44 = HEAP32[$43>>2]|0;
   $yythunkpos2368 = $44;
   $45 = $1;
   $46 = (_yy_TableBody($45)|0);
   $47 = ($46|0)!=(0);
   if ($47) {
    $48 = $1;
    $49 = $1;
    $50 = (($49) + 28|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = $1;
    $53 = (($52) + 32|0);
    $54 = HEAP32[$53>>2]|0;
    _yyDo($48,63,$51,$54,47072);
   } else {
    $55 = $yypos2368;
    $56 = $1;
    $57 = (($56) + 12|0);
    HEAP32[$57>>2] = $55;
    $58 = $yythunkpos2368;
    $59 = $1;
    $60 = (($59) + 44|0);
    HEAP32[$60>>2] = $58;
   }
   $61 = $1;
   $62 = (_yy_SeparatorLine($61)|0);
   $63 = ($62|0)!=(0);
   if (!($63)) {
    break;
   }
   $64 = $1;
   $65 = $1;
   $66 = (($65) + 28|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = $1;
   $69 = (($68) + 32|0);
   $70 = HEAP32[$69>>2]|0;
   _yyDo($64,64,$67,$70,47088);
   $71 = $1;
   $72 = (_yy_TableBody($71)|0);
   $73 = ($72|0)!=(0);
   if (!($73)) {
    break;
   }
   $74 = $1;
   $75 = $1;
   $76 = (($75) + 28|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $1;
   $79 = (($78) + 32|0);
   $80 = HEAP32[$79>>2]|0;
   _yyDo($74,65,$77,$80,47104);
   L22: while(1) {
    $81 = $1;
    $82 = (($81) + 12|0);
    $83 = HEAP32[$82>>2]|0;
    $yypos2371 = $83;
    $84 = $1;
    $85 = (($84) + 44|0);
    $86 = HEAP32[$85>>2]|0;
    $yythunkpos2371 = $86;
    $87 = $1;
    $88 = (_yy_BlankLine($87)|0);
    $89 = ($88|0)!=(0);
    if (!($89)) {
     label = 19;
     break;
    }
    $90 = $1;
    $91 = (($90) + 12|0);
    $92 = HEAP32[$91>>2]|0;
    $yypos2372 = $92;
    $93 = $1;
    $94 = (($93) + 44|0);
    $95 = HEAP32[$94>>2]|0;
    $yythunkpos2372 = $95;
    $96 = $1;
    $97 = (_yy_TableCaption($96)|0);
    $98 = ($97|0)!=(0);
    if ($98) {
     label = 22;
     break;
    }
    $99 = $yypos2372;
    $100 = $1;
    $101 = (($100) + 12|0);
    HEAP32[$101>>2] = $99;
    $102 = $yythunkpos2372;
    $103 = $1;
    $104 = (($103) + 44|0);
    HEAP32[$104>>2] = $102;
    $105 = $1;
    $106 = (_yy_TableBody($105)|0);
    $107 = ($106|0)!=(0);
    if (!($107)) {
     label = 24;
     break;
    }
    $108 = $1;
    $109 = $1;
    $110 = (($109) + 28|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = $1;
    $113 = (($112) + 32|0);
    $114 = HEAP32[$113>>2]|0;
    _yyDo($108,66,$111,$114,47120);
    $115 = $1;
    $116 = (($115) + 12|0);
    $117 = HEAP32[$116>>2]|0;
    $yypos2373 = $117;
    $118 = $1;
    $119 = (($118) + 44|0);
    $120 = HEAP32[$119>>2]|0;
    $yythunkpos2373 = $120;
    $121 = $1;
    $122 = (($121) + 12|0);
    $123 = HEAP32[$122>>2]|0;
    $yypos2374 = $123;
    $124 = $1;
    $125 = (($124) + 44|0);
    $126 = HEAP32[$125>>2]|0;
    $yythunkpos2374 = $126;
    $127 = $1;
    $128 = (_yy_TableCaption($127)|0);
    $129 = ($128|0)!=(0);
    do {
     if ($129) {
     } else {
      $130 = $yypos2374;
      $131 = $1;
      $132 = (($131) + 12|0);
      HEAP32[$132>>2] = $130;
      $133 = $yythunkpos2374;
      $134 = $1;
      $135 = (($134) + 44|0);
      HEAP32[$135>>2] = $133;
      $136 = $1;
      $137 = (_yy_BlankLine($136)|0);
      $138 = ($137|0)!=(0);
      if ($138) {
       break;
      }
      $139 = $yypos2374;
      $140 = $1;
      $141 = (($140) + 12|0);
      HEAP32[$141>>2] = $139;
      $142 = $yythunkpos2374;
      $143 = $1;
      $144 = (($143) + 44|0);
      HEAP32[$144>>2] = $142;
      $145 = $1;
      $146 = (_yy_Heading($145)|0);
      $147 = ($146|0)!=(0);
      if (!($147)) {
       label = 32;
       break L22;
      }
     }
    } while(0);
    $148 = $yypos2373;
    $149 = $1;
    $150 = (($149) + 12|0);
    HEAP32[$150>>2] = $148;
    $151 = $yythunkpos2373;
    $152 = $1;
    $153 = (($152) + 44|0);
    HEAP32[$153>>2] = $151;
   }
   if ((label|0) == 19) {
   }
   else if ((label|0) == 22) {
   }
   else if ((label|0) == 24) {
   }
   else if ((label|0) == 32) {
   }
   $154 = $yypos2371;
   $155 = $1;
   $156 = (($155) + 12|0);
   HEAP32[$156>>2] = $154;
   $157 = $yythunkpos2371;
   $158 = $1;
   $159 = (($158) + 44|0);
   HEAP32[$159>>2] = $157;
   $160 = $1;
   $161 = (($160) + 12|0);
   $162 = HEAP32[$161>>2]|0;
   $yypos2377 = $162;
   $163 = $1;
   $164 = (($163) + 44|0);
   $165 = HEAP32[$164>>2]|0;
   $yythunkpos2377 = $165;
   $166 = $1;
   $167 = (_yy_TableCaption($166)|0);
   $168 = ($167|0)!=(0);
   do {
    if ($168) {
     $169 = $1;
     $170 = $1;
     $171 = (($170) + 28|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = $1;
     $174 = (($173) + 32|0);
     $175 = HEAP32[$174>>2]|0;
     _yyDo($169,67,$172,$175,47136);
     $176 = $1;
     $177 = (($176) + 12|0);
     $178 = HEAP32[$177>>2]|0;
     $yypos2379 = $178;
     $179 = $1;
     $180 = (($179) + 44|0);
     $181 = HEAP32[$180>>2]|0;
     $yythunkpos2379 = $181;
     $182 = $1;
     $183 = (_yy_BlankLine($182)|0);
     $184 = ($183|0)!=(0);
     if ($184) {
      $185 = $yypos2379;
      $186 = $1;
      $187 = (($186) + 12|0);
      HEAP32[$187>>2] = $185;
      $188 = $yythunkpos2379;
      $189 = $1;
      $190 = (($189) + 44|0);
      HEAP32[$190>>2] = $188;
      break;
     } else {
      label = 40;
      break;
     }
    } else {
     label = 40;
    }
   } while(0);
   do {
    if ((label|0) == 40) {
     $191 = $yypos2377;
     $192 = $1;
     $193 = (($192) + 12|0);
     HEAP32[$193>>2] = $191;
     $194 = $yythunkpos2377;
     $195 = $1;
     $196 = (($195) + 44|0);
     HEAP32[$196>>2] = $194;
     $197 = $1;
     $198 = (($197) + 12|0);
     $199 = HEAP32[$198>>2]|0;
     $yypos2381 = $199;
     $200 = $1;
     $201 = (($200) + 44|0);
     $202 = HEAP32[$201>>2]|0;
     $yythunkpos2381 = $202;
     $203 = $1;
     $204 = (_yy_BlankLine($203)|0);
     $205 = ($204|0)!=(0);
     if ($205) {
      $206 = $yypos2381;
      $207 = $1;
      $208 = (($207) + 12|0);
      HEAP32[$208>>2] = $206;
      $209 = $yythunkpos2381;
      $210 = $1;
      $211 = (($210) + 44|0);
      HEAP32[$211>>2] = $209;
      break;
     }
     $212 = $yypos2377;
     $213 = $1;
     $214 = (($213) + 12|0);
     HEAP32[$214>>2] = $212;
     $215 = $yythunkpos2377;
     $216 = $1;
     $217 = (($216) + 44|0);
     HEAP32[$217>>2] = $215;
     $218 = $1;
     $219 = (($218) + 12|0);
     $220 = HEAP32[$219>>2]|0;
     $yypos2382 = $220;
     $221 = $1;
     $222 = (($221) + 44|0);
     $223 = HEAP32[$222>>2]|0;
     $yythunkpos2382 = $223;
     $224 = $1;
     $225 = (_yy_Heading($224)|0);
     $226 = ($225|0)!=(0);
     if ($226) {
      $227 = $yypos2382;
      $228 = $1;
      $229 = (($228) + 12|0);
      HEAP32[$229>>2] = $227;
      $230 = $yythunkpos2382;
      $231 = $1;
      $232 = (($231) + 44|0);
      HEAP32[$232>>2] = $230;
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $233 = $1;
   $234 = $1;
   $235 = (($234) + 28|0);
   $236 = HEAP32[$235>>2]|0;
   $237 = $1;
   $238 = (($237) + 32|0);
   $239 = HEAP32[$238>>2]|0;
   _yyDo($233,68,$236,$239,47152);
   $240 = $1;
   _yyDo($240,12,2,0,41392);
   $0 = 1;
   $247 = $0;
   STACKTOP = sp;return ($247|0);
  } else {
  }
 } while(0);
 $241 = $yypos0;
 $242 = $1;
 $243 = (($242) + 12|0);
 HEAP32[$243>>2] = $241;
 $244 = $yythunkpos0;
 $245 = $1;
 $246 = (($245) + 44|0);
 HEAP32[$246>>2] = $244;
 $0 = 0;
 $247 = $0;
 STACKTOP = sp;return ($247|0);
}
function _yy_ImageBlock($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos2364 = 0, $yythunkpos0 = 0, $yythunkpos2364 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_Image($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Sp($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yy_Newline($14)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (_yy_BlankLine($17)|0);
   $19 = ($18|0)!=(0);
   if (!($19)) {
    break;
   }
   while(1) {
    $20 = $1;
    $21 = (($20) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $yypos2364 = $22;
    $23 = $1;
    $24 = (($23) + 44|0);
    $25 = HEAP32[$24>>2]|0;
    $yythunkpos2364 = $25;
    $26 = $1;
    $27 = (_yy_BlankLine($26)|0);
    $28 = ($27|0)!=(0);
    if (!($28)) {
     break;
    }
   }
   $29 = $yypos2364;
   $30 = $1;
   $31 = (($30) + 12|0);
   HEAP32[$31>>2] = $29;
   $32 = $yythunkpos2364;
   $33 = $1;
   $34 = (($33) + 44|0);
   HEAP32[$34>>2] = $32;
   $35 = $1;
   $36 = $1;
   $37 = (($36) + 28|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $1;
   $40 = (($39) + 32|0);
   $41 = HEAP32[$40>>2]|0;
   _yyDo($35,69,$38,$41,47040);
   $0 = 1;
   $48 = $0;
   STACKTOP = sp;return ($48|0);
  } else {
  }
 } while(0);
 $42 = $yypos0;
 $43 = $1;
 $44 = (($43) + 12|0);
 HEAP32[$44>>2] = $42;
 $45 = $yythunkpos0;
 $46 = $1;
 $47 = (($46) + 44|0);
 HEAP32[$47>>2] = $45;
 $0 = 0;
 $48 = $0;
 STACKTOP = sp;return ($48|0);
}
function _yy_TOC($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yythunkpos0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchString($8,47016)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Sp($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yy_Newline($14)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = $1;
   $19 = (($18) + 28|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $1;
   $22 = (($21) + 32|0);
   $23 = HEAP32[$22>>2]|0;
   _yyDo($17,70,$20,$23,47024);
   $0 = 1;
   $30 = $0;
   STACKTOP = sp;return ($30|0);
  } else {
  }
 } while(0);
 $24 = $yypos0;
 $25 = $1;
 $26 = (($25) + 12|0);
 HEAP32[$26>>2] = $24;
 $27 = $yythunkpos0;
 $28 = $1;
 $29 = (($28) + 44|0);
 HEAP32[$29>>2] = $27;
 $0 = 0;
 $30 = $0;
 STACKTOP = sp;return ($30|0);
}
function _yy_HtmlBlockInTags($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos2312 = 0, $yythunkpos0 = 0, $yythunkpos2312 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos2312 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos2312 = $13;
 $14 = $1;
 $15 = (_yy_HtmlBlockAddress($14)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
  } else {
   $17 = $yypos2312;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos2312;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yy_HtmlBlockArticle($23)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    break;
   }
   $26 = $yypos2312;
   $27 = $1;
   $28 = (($27) + 12|0);
   HEAP32[$28>>2] = $26;
   $29 = $yythunkpos2312;
   $30 = $1;
   $31 = (($30) + 44|0);
   HEAP32[$31>>2] = $29;
   $32 = $1;
   $33 = (_yy_HtmlBlockAside($32)|0);
   $34 = ($33|0)!=(0);
   if ($34) {
    break;
   }
   $35 = $yypos2312;
   $36 = $1;
   $37 = (($36) + 12|0);
   HEAP32[$37>>2] = $35;
   $38 = $yythunkpos2312;
   $39 = $1;
   $40 = (($39) + 44|0);
   HEAP32[$40>>2] = $38;
   $41 = $1;
   $42 = (_yy_HtmlBlockCanvas($41)|0);
   $43 = ($42|0)!=(0);
   if ($43) {
    break;
   }
   $44 = $yypos2312;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos2312;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yy_HtmlBlockBlockquote($50)|0);
   $52 = ($51|0)!=(0);
   if ($52) {
    break;
   }
   $53 = $yypos2312;
   $54 = $1;
   $55 = (($54) + 12|0);
   HEAP32[$55>>2] = $53;
   $56 = $yythunkpos2312;
   $57 = $1;
   $58 = (($57) + 44|0);
   HEAP32[$58>>2] = $56;
   $59 = $1;
   $60 = (_yy_HtmlBlockCenter($59)|0);
   $61 = ($60|0)!=(0);
   if ($61) {
    break;
   }
   $62 = $yypos2312;
   $63 = $1;
   $64 = (($63) + 12|0);
   HEAP32[$64>>2] = $62;
   $65 = $yythunkpos2312;
   $66 = $1;
   $67 = (($66) + 44|0);
   HEAP32[$67>>2] = $65;
   $68 = $1;
   $69 = (_yy_HtmlBlockDir($68)|0);
   $70 = ($69|0)!=(0);
   if ($70) {
    break;
   }
   $71 = $yypos2312;
   $72 = $1;
   $73 = (($72) + 12|0);
   HEAP32[$73>>2] = $71;
   $74 = $yythunkpos2312;
   $75 = $1;
   $76 = (($75) + 44|0);
   HEAP32[$76>>2] = $74;
   $77 = $1;
   $78 = (_yy_HtmlBlockDiv($77)|0);
   $79 = ($78|0)!=(0);
   if ($79) {
    break;
   }
   $80 = $yypos2312;
   $81 = $1;
   $82 = (($81) + 12|0);
   HEAP32[$82>>2] = $80;
   $83 = $yythunkpos2312;
   $84 = $1;
   $85 = (($84) + 44|0);
   HEAP32[$85>>2] = $83;
   $86 = $1;
   $87 = (_yy_HtmlBlockDl($86)|0);
   $88 = ($87|0)!=(0);
   if ($88) {
    break;
   }
   $89 = $yypos2312;
   $90 = $1;
   $91 = (($90) + 12|0);
   HEAP32[$91>>2] = $89;
   $92 = $yythunkpos2312;
   $93 = $1;
   $94 = (($93) + 44|0);
   HEAP32[$94>>2] = $92;
   $95 = $1;
   $96 = (_yy_HtmlBlockFieldset($95)|0);
   $97 = ($96|0)!=(0);
   if ($97) {
    break;
   }
   $98 = $yypos2312;
   $99 = $1;
   $100 = (($99) + 12|0);
   HEAP32[$100>>2] = $98;
   $101 = $yythunkpos2312;
   $102 = $1;
   $103 = (($102) + 44|0);
   HEAP32[$103>>2] = $101;
   $104 = $1;
   $105 = (_yy_HtmlBlockFigure($104)|0);
   $106 = ($105|0)!=(0);
   if ($106) {
    break;
   }
   $107 = $yypos2312;
   $108 = $1;
   $109 = (($108) + 12|0);
   HEAP32[$109>>2] = $107;
   $110 = $yythunkpos2312;
   $111 = $1;
   $112 = (($111) + 44|0);
   HEAP32[$112>>2] = $110;
   $113 = $1;
   $114 = (_yy_HtmlBlockFooter($113)|0);
   $115 = ($114|0)!=(0);
   if ($115) {
    break;
   }
   $116 = $yypos2312;
   $117 = $1;
   $118 = (($117) + 12|0);
   HEAP32[$118>>2] = $116;
   $119 = $yythunkpos2312;
   $120 = $1;
   $121 = (($120) + 44|0);
   HEAP32[$121>>2] = $119;
   $122 = $1;
   $123 = (_yy_HtmlBlockForm($122)|0);
   $124 = ($123|0)!=(0);
   if ($124) {
    break;
   }
   $125 = $yypos2312;
   $126 = $1;
   $127 = (($126) + 12|0);
   HEAP32[$127>>2] = $125;
   $128 = $yythunkpos2312;
   $129 = $1;
   $130 = (($129) + 44|0);
   HEAP32[$130>>2] = $128;
   $131 = $1;
   $132 = (_yy_HtmlBlockHeader($131)|0);
   $133 = ($132|0)!=(0);
   if ($133) {
    break;
   }
   $134 = $yypos2312;
   $135 = $1;
   $136 = (($135) + 12|0);
   HEAP32[$136>>2] = $134;
   $137 = $yythunkpos2312;
   $138 = $1;
   $139 = (($138) + 44|0);
   HEAP32[$139>>2] = $137;
   $140 = $1;
   $141 = (_yy_HtmlBlockHgroup($140)|0);
   $142 = ($141|0)!=(0);
   if ($142) {
    break;
   }
   $143 = $yypos2312;
   $144 = $1;
   $145 = (($144) + 12|0);
   HEAP32[$145>>2] = $143;
   $146 = $yythunkpos2312;
   $147 = $1;
   $148 = (($147) + 44|0);
   HEAP32[$148>>2] = $146;
   $149 = $1;
   $150 = (_yy_HtmlBlockH1($149)|0);
   $151 = ($150|0)!=(0);
   if ($151) {
    break;
   }
   $152 = $yypos2312;
   $153 = $1;
   $154 = (($153) + 12|0);
   HEAP32[$154>>2] = $152;
   $155 = $yythunkpos2312;
   $156 = $1;
   $157 = (($156) + 44|0);
   HEAP32[$157>>2] = $155;
   $158 = $1;
   $159 = (_yy_HtmlBlockH2($158)|0);
   $160 = ($159|0)!=(0);
   if ($160) {
    break;
   }
   $161 = $yypos2312;
   $162 = $1;
   $163 = (($162) + 12|0);
   HEAP32[$163>>2] = $161;
   $164 = $yythunkpos2312;
   $165 = $1;
   $166 = (($165) + 44|0);
   HEAP32[$166>>2] = $164;
   $167 = $1;
   $168 = (_yy_HtmlBlockH3($167)|0);
   $169 = ($168|0)!=(0);
   if ($169) {
    break;
   }
   $170 = $yypos2312;
   $171 = $1;
   $172 = (($171) + 12|0);
   HEAP32[$172>>2] = $170;
   $173 = $yythunkpos2312;
   $174 = $1;
   $175 = (($174) + 44|0);
   HEAP32[$175>>2] = $173;
   $176 = $1;
   $177 = (_yy_HtmlBlockH4($176)|0);
   $178 = ($177|0)!=(0);
   if ($178) {
    break;
   }
   $179 = $yypos2312;
   $180 = $1;
   $181 = (($180) + 12|0);
   HEAP32[$181>>2] = $179;
   $182 = $yythunkpos2312;
   $183 = $1;
   $184 = (($183) + 44|0);
   HEAP32[$184>>2] = $182;
   $185 = $1;
   $186 = (_yy_HtmlBlockH5($185)|0);
   $187 = ($186|0)!=(0);
   if ($187) {
    break;
   }
   $188 = $yypos2312;
   $189 = $1;
   $190 = (($189) + 12|0);
   HEAP32[$190>>2] = $188;
   $191 = $yythunkpos2312;
   $192 = $1;
   $193 = (($192) + 44|0);
   HEAP32[$193>>2] = $191;
   $194 = $1;
   $195 = (_yy_HtmlBlockH6($194)|0);
   $196 = ($195|0)!=(0);
   if ($196) {
    break;
   }
   $197 = $yypos2312;
   $198 = $1;
   $199 = (($198) + 12|0);
   HEAP32[$199>>2] = $197;
   $200 = $yythunkpos2312;
   $201 = $1;
   $202 = (($201) + 44|0);
   HEAP32[$202>>2] = $200;
   $203 = $1;
   $204 = (_yy_HtmlBlockMenu($203)|0);
   $205 = ($204|0)!=(0);
   if ($205) {
    break;
   }
   $206 = $yypos2312;
   $207 = $1;
   $208 = (($207) + 12|0);
   HEAP32[$208>>2] = $206;
   $209 = $yythunkpos2312;
   $210 = $1;
   $211 = (($210) + 44|0);
   HEAP32[$211>>2] = $209;
   $212 = $1;
   $213 = (_yy_HtmlBlockNoframes($212)|0);
   $214 = ($213|0)!=(0);
   if ($214) {
    break;
   }
   $215 = $yypos2312;
   $216 = $1;
   $217 = (($216) + 12|0);
   HEAP32[$217>>2] = $215;
   $218 = $yythunkpos2312;
   $219 = $1;
   $220 = (($219) + 44|0);
   HEAP32[$220>>2] = $218;
   $221 = $1;
   $222 = (_yy_HtmlBlockNoscript($221)|0);
   $223 = ($222|0)!=(0);
   if ($223) {
    break;
   }
   $224 = $yypos2312;
   $225 = $1;
   $226 = (($225) + 12|0);
   HEAP32[$226>>2] = $224;
   $227 = $yythunkpos2312;
   $228 = $1;
   $229 = (($228) + 44|0);
   HEAP32[$229>>2] = $227;
   $230 = $1;
   $231 = (_yy_HtmlBlockOl($230)|0);
   $232 = ($231|0)!=(0);
   if ($232) {
    break;
   }
   $233 = $yypos2312;
   $234 = $1;
   $235 = (($234) + 12|0);
   HEAP32[$235>>2] = $233;
   $236 = $yythunkpos2312;
   $237 = $1;
   $238 = (($237) + 44|0);
   HEAP32[$238>>2] = $236;
   $239 = $1;
   $240 = (_yy_HtmlBlockP($239)|0);
   $241 = ($240|0)!=(0);
   if ($241) {
    break;
   }
   $242 = $yypos2312;
   $243 = $1;
   $244 = (($243) + 12|0);
   HEAP32[$244>>2] = $242;
   $245 = $yythunkpos2312;
   $246 = $1;
   $247 = (($246) + 44|0);
   HEAP32[$247>>2] = $245;
   $248 = $1;
   $249 = (_yy_HtmlBlockPre($248)|0);
   $250 = ($249|0)!=(0);
   if ($250) {
    break;
   }
   $251 = $yypos2312;
   $252 = $1;
   $253 = (($252) + 12|0);
   HEAP32[$253>>2] = $251;
   $254 = $yythunkpos2312;
   $255 = $1;
   $256 = (($255) + 44|0);
   HEAP32[$256>>2] = $254;
   $257 = $1;
   $258 = (_yy_HtmlBlockProgress($257)|0);
   $259 = ($258|0)!=(0);
   if ($259) {
    break;
   }
   $260 = $yypos2312;
   $261 = $1;
   $262 = (($261) + 12|0);
   HEAP32[$262>>2] = $260;
   $263 = $yythunkpos2312;
   $264 = $1;
   $265 = (($264) + 44|0);
   HEAP32[$265>>2] = $263;
   $266 = $1;
   $267 = (_yy_HtmlBlockSection($266)|0);
   $268 = ($267|0)!=(0);
   if ($268) {
    break;
   }
   $269 = $yypos2312;
   $270 = $1;
   $271 = (($270) + 12|0);
   HEAP32[$271>>2] = $269;
   $272 = $yythunkpos2312;
   $273 = $1;
   $274 = (($273) + 44|0);
   HEAP32[$274>>2] = $272;
   $275 = $1;
   $276 = (_yy_HtmlBlockTable($275)|0);
   $277 = ($276|0)!=(0);
   if ($277) {
    break;
   }
   $278 = $yypos2312;
   $279 = $1;
   $280 = (($279) + 12|0);
   HEAP32[$280>>2] = $278;
   $281 = $yythunkpos2312;
   $282 = $1;
   $283 = (($282) + 44|0);
   HEAP32[$283>>2] = $281;
   $284 = $1;
   $285 = (_yy_HtmlBlockUl($284)|0);
   $286 = ($285|0)!=(0);
   if ($286) {
    break;
   }
   $287 = $yypos2312;
   $288 = $1;
   $289 = (($288) + 12|0);
   HEAP32[$289>>2] = $287;
   $290 = $yythunkpos2312;
   $291 = $1;
   $292 = (($291) + 44|0);
   HEAP32[$292>>2] = $290;
   $293 = $1;
   $294 = (_yy_HtmlBlockVideo($293)|0);
   $295 = ($294|0)!=(0);
   if ($295) {
    break;
   }
   $296 = $yypos2312;
   $297 = $1;
   $298 = (($297) + 12|0);
   HEAP32[$298>>2] = $296;
   $299 = $yythunkpos2312;
   $300 = $1;
   $301 = (($300) + 44|0);
   HEAP32[$301>>2] = $299;
   $302 = $1;
   $303 = (_yy_HtmlBlockDd($302)|0);
   $304 = ($303|0)!=(0);
   if ($304) {
    break;
   }
   $305 = $yypos2312;
   $306 = $1;
   $307 = (($306) + 12|0);
   HEAP32[$307>>2] = $305;
   $308 = $yythunkpos2312;
   $309 = $1;
   $310 = (($309) + 44|0);
   HEAP32[$310>>2] = $308;
   $311 = $1;
   $312 = (_yy_HtmlBlockDt($311)|0);
   $313 = ($312|0)!=(0);
   if ($313) {
    break;
   }
   $314 = $yypos2312;
   $315 = $1;
   $316 = (($315) + 12|0);
   HEAP32[$316>>2] = $314;
   $317 = $yythunkpos2312;
   $318 = $1;
   $319 = (($318) + 44|0);
   HEAP32[$319>>2] = $317;
   $320 = $1;
   $321 = (_yy_HtmlBlockFrameset($320)|0);
   $322 = ($321|0)!=(0);
   if ($322) {
    break;
   }
   $323 = $yypos2312;
   $324 = $1;
   $325 = (($324) + 12|0);
   HEAP32[$325>>2] = $323;
   $326 = $yythunkpos2312;
   $327 = $1;
   $328 = (($327) + 44|0);
   HEAP32[$328>>2] = $326;
   $329 = $1;
   $330 = (_yy_HtmlBlockLi($329)|0);
   $331 = ($330|0)!=(0);
   if ($331) {
    break;
   }
   $332 = $yypos2312;
   $333 = $1;
   $334 = (($333) + 12|0);
   HEAP32[$334>>2] = $332;
   $335 = $yythunkpos2312;
   $336 = $1;
   $337 = (($336) + 44|0);
   HEAP32[$337>>2] = $335;
   $338 = $1;
   $339 = (_yy_HtmlBlockTbody($338)|0);
   $340 = ($339|0)!=(0);
   if ($340) {
    break;
   }
   $341 = $yypos2312;
   $342 = $1;
   $343 = (($342) + 12|0);
   HEAP32[$343>>2] = $341;
   $344 = $yythunkpos2312;
   $345 = $1;
   $346 = (($345) + 44|0);
   HEAP32[$346>>2] = $344;
   $347 = $1;
   $348 = (_yy_HtmlBlockTd($347)|0);
   $349 = ($348|0)!=(0);
   if ($349) {
    break;
   }
   $350 = $yypos2312;
   $351 = $1;
   $352 = (($351) + 12|0);
   HEAP32[$352>>2] = $350;
   $353 = $yythunkpos2312;
   $354 = $1;
   $355 = (($354) + 44|0);
   HEAP32[$355>>2] = $353;
   $356 = $1;
   $357 = (_yy_HtmlBlockTfoot($356)|0);
   $358 = ($357|0)!=(0);
   if ($358) {
    break;
   }
   $359 = $yypos2312;
   $360 = $1;
   $361 = (($360) + 12|0);
   HEAP32[$361>>2] = $359;
   $362 = $yythunkpos2312;
   $363 = $1;
   $364 = (($363) + 44|0);
   HEAP32[$364>>2] = $362;
   $365 = $1;
   $366 = (_yy_HtmlBlockTh($365)|0);
   $367 = ($366|0)!=(0);
   if ($367) {
    break;
   }
   $368 = $yypos2312;
   $369 = $1;
   $370 = (($369) + 12|0);
   HEAP32[$370>>2] = $368;
   $371 = $yythunkpos2312;
   $372 = $1;
   $373 = (($372) + 44|0);
   HEAP32[$373>>2] = $371;
   $374 = $1;
   $375 = (_yy_HtmlBlockThead($374)|0);
   $376 = ($375|0)!=(0);
   if ($376) {
    break;
   }
   $377 = $yypos2312;
   $378 = $1;
   $379 = (($378) + 12|0);
   HEAP32[$379>>2] = $377;
   $380 = $yythunkpos2312;
   $381 = $1;
   $382 = (($381) + 44|0);
   HEAP32[$382>>2] = $380;
   $383 = $1;
   $384 = (_yy_HtmlBlockTr($383)|0);
   $385 = ($384|0)!=(0);
   if ($385) {
    break;
   }
   $386 = $yypos2312;
   $387 = $1;
   $388 = (($387) + 12|0);
   HEAP32[$388>>2] = $386;
   $389 = $yythunkpos2312;
   $390 = $1;
   $391 = (($390) + 44|0);
   HEAP32[$391>>2] = $389;
   $392 = $1;
   $393 = (_yy_HtmlBlockScript($392)|0);
   $394 = ($393|0)!=(0);
   if ($394) {
    break;
   }
   $395 = $yypos2312;
   $396 = $1;
   $397 = (($396) + 12|0);
   HEAP32[$397>>2] = $395;
   $398 = $yythunkpos2312;
   $399 = $1;
   $400 = (($399) + 44|0);
   HEAP32[$400>>2] = $398;
   $401 = $1;
   $402 = (_yy_HtmlBlockHead($401)|0);
   $403 = ($402|0)!=(0);
   if ($403) {
    break;
   }
   $404 = $yypos2312;
   $405 = $1;
   $406 = (($405) + 12|0);
   HEAP32[$406>>2] = $404;
   $407 = $yythunkpos2312;
   $408 = $1;
   $409 = (($408) + 44|0);
   HEAP32[$409>>2] = $407;
   $410 = $1;
   $411 = (_yy_HtmlBlockMain($410)|0);
   $412 = ($411|0)!=(0);
   if ($412) {
    break;
   }
   $413 = $yypos2312;
   $414 = $1;
   $415 = (($414) + 12|0);
   HEAP32[$415>>2] = $413;
   $416 = $yythunkpos2312;
   $417 = $1;
   $418 = (($417) + 44|0);
   HEAP32[$418>>2] = $416;
   $419 = $1;
   $420 = (_yy_HtmlBlockNav($419)|0);
   $421 = ($420|0)!=(0);
   if ($421) {
    break;
   }
   $422 = $yypos2312;
   $423 = $1;
   $424 = (($423) + 12|0);
   HEAP32[$424>>2] = $422;
   $425 = $yythunkpos2312;
   $426 = $1;
   $427 = (($426) + 44|0);
   HEAP32[$427>>2] = $425;
   $428 = $1;
   $429 = (_yy_HtmlBlockDel($428)|0);
   $430 = ($429|0)!=(0);
   if ($430) {
    break;
   }
   $431 = $yypos2312;
   $432 = $1;
   $433 = (($432) + 12|0);
   HEAP32[$433>>2] = $431;
   $434 = $yythunkpos2312;
   $435 = $1;
   $436 = (($435) + 44|0);
   HEAP32[$436>>2] = $434;
   $437 = $1;
   $438 = (_yy_HtmlBlockIns($437)|0);
   $439 = ($438|0)!=(0);
   if ($439) {
    break;
   }
   $440 = $yypos2312;
   $441 = $1;
   $442 = (($441) + 12|0);
   HEAP32[$442>>2] = $440;
   $443 = $yythunkpos2312;
   $444 = $1;
   $445 = (($444) + 44|0);
   HEAP32[$445>>2] = $443;
   $446 = $1;
   $447 = (_yy_HtmlBlockMark($446)|0);
   $448 = ($447|0)!=(0);
   if ($448) {
    break;
   }
   $449 = $yypos0;
   $450 = $1;
   $451 = (($450) + 12|0);
   HEAP32[$451>>2] = $449;
   $452 = $yythunkpos0;
   $453 = $1;
   $454 = (($453) + 44|0);
   HEAP32[$454>>2] = $452;
   $0 = 0;
   $455 = $0;
   STACKTOP = sp;return ($455|0);
  }
 } while(0);
 $0 = 1;
 $455 = $0;
 STACKTOP = sp;return ($455|0);
}
function _yy_Para($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos2310 = 0, $yythunkpos0 = 0, $yythunkpos2310 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 $9 = $1;
 $10 = (_yy_NonindentSpace($9)|0);
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $1;
   $13 = (_yy_Inlines($12)|0);
   $14 = ($13|0)!=(0);
   if (!($14)) {
    break;
   }
   $15 = $1;
   _yyDo($15,8,-1,0,41336);
   $16 = $1;
   $17 = (_yy_BlankLine($16)|0);
   $18 = ($17|0)!=(0);
   if (!($18)) {
    break;
   }
   while(1) {
    $19 = $1;
    $20 = (($19) + 12|0);
    $21 = HEAP32[$20>>2]|0;
    $yypos2310 = $21;
    $22 = $1;
    $23 = (($22) + 44|0);
    $24 = HEAP32[$23>>2]|0;
    $yythunkpos2310 = $24;
    $25 = $1;
    $26 = (_yy_BlankLine($25)|0);
    $27 = ($26|0)!=(0);
    if (!($27)) {
     break;
    }
   }
   $28 = $yypos2310;
   $29 = $1;
   $30 = (($29) + 12|0);
   HEAP32[$30>>2] = $28;
   $31 = $yythunkpos2310;
   $32 = $1;
   $33 = (($32) + 44|0);
   HEAP32[$33>>2] = $31;
   $34 = $1;
   $35 = $1;
   $36 = (($35) + 28|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $1;
   $39 = (($38) + 32|0);
   $40 = HEAP32[$39>>2]|0;
   _yyDo($34,71,$37,$40,47000);
   $41 = $1;
   _yyDo($41,12,1,0,41392);
   $0 = 1;
   $48 = $0;
   STACKTOP = sp;return ($48|0);
  } else {
  }
 } while(0);
 $42 = $yypos0;
 $43 = $1;
 $44 = (($43) + 12|0);
 HEAP32[$44>>2] = $42;
 $45 = $yythunkpos0;
 $46 = $1;
 $47 = (($46) + 44|0);
 HEAP32[$47>>2] = $45;
 $0 = 0;
 $48 = $0;
 STACKTOP = sp;return ($48|0);
}
function _yy_Plain($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yythunkpos0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 $9 = $1;
 $10 = (_yy_Inlines($9)|0);
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $1;
  _yyDo($12,8,-1,0,41336);
  $13 = $1;
  $14 = $1;
  $15 = (($14) + 28|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $1;
  $18 = (($17) + 32|0);
  $19 = HEAP32[$18>>2]|0;
  _yyDo($13,72,$16,$19,46936);
  $20 = $1;
  _yyDo($20,12,1,0,41392);
  $0 = 1;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 $21 = $yypos0;
 $22 = $1;
 $23 = (($22) + 12|0);
 HEAP32[$23>>2] = $21;
 $24 = $yythunkpos0;
 $25 = $1;
 $26 = (($25) + 44|0);
 HEAP32[$26>>2] = $24;
 $0 = 0;
 $27 = $0;
 STACKTOP = sp;return ($27|0);
}
function _yy_CriticMarkup($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos1878 = 0, $yythunkpos0 = 0, $yythunkpos1878 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos1878 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos1878 = $13;
 $14 = $1;
 $15 = (_yy_CriticAddition($14)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
  } else {
   $17 = $yypos1878;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos1878;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yy_CriticDeletion($23)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    break;
   }
   $26 = $yypos1878;
   $27 = $1;
   $28 = (($27) + 12|0);
   HEAP32[$28>>2] = $26;
   $29 = $yythunkpos1878;
   $30 = $1;
   $31 = (($30) + 44|0);
   HEAP32[$31>>2] = $29;
   $32 = $1;
   $33 = (_yy_CriticSubstitution($32)|0);
   $34 = ($33|0)!=(0);
   if ($34) {
    break;
   }
   $35 = $yypos1878;
   $36 = $1;
   $37 = (($36) + 12|0);
   HEAP32[$37>>2] = $35;
   $38 = $yythunkpos1878;
   $39 = $1;
   $40 = (($39) + 44|0);
   HEAP32[$40>>2] = $38;
   $41 = $1;
   $42 = (_yy_CriticHighlight($41)|0);
   $43 = ($42|0)!=(0);
   if ($43) {
    break;
   }
   $44 = $yypos1878;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos1878;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yy_CriticComment($50)|0);
   $52 = ($51|0)!=(0);
   if ($52) {
    break;
   }
   $53 = $yypos0;
   $54 = $1;
   $55 = (($54) + 12|0);
   HEAP32[$55>>2] = $53;
   $56 = $yythunkpos0;
   $57 = $1;
   $58 = (($57) + 44|0);
   HEAP32[$58>>2] = $56;
   $0 = 0;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  }
 } while(0);
 $0 = 1;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_1_RawString($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 STACKTOP = sp;return;
}
function _yy_1_FalseMatch($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 STACKTOP = sp;return;
}
function _yy_OPMLHeadingSection($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos131 = 0, $yythunkpos0 = 0, $yythunkpos131 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 $9 = $1;
 $10 = (_yy_StartList($9)|0);
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $1;
   _yyDo($12,8,-1,0,41336);
   $13 = $1;
   $14 = (_yy_OPMLHeading($13)|0);
   $15 = ($14|0)!=(0);
   if (!($15)) {
    break;
   }
   $16 = $1;
   $17 = $1;
   $18 = (($17) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $1;
   $21 = (($20) + 32|0);
   $22 = HEAP32[$21>>2]|0;
   _yyDo($16,73,$19,$22,46592);
   while(1) {
    $23 = $1;
    $24 = (($23) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $yypos131 = $25;
    $26 = $1;
    $27 = (($26) + 44|0);
    $28 = HEAP32[$27>>2]|0;
    $yythunkpos131 = $28;
    $29 = $1;
    $30 = (_yy_OPMLSectionBlock($29)|0);
    $31 = ($30|0)!=(0);
    if (!($31)) {
     break;
    }
    $32 = $1;
    $33 = $1;
    $34 = (($33) + 28|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $1;
    $37 = (($36) + 32|0);
    $38 = HEAP32[$37>>2]|0;
    _yyDo($32,74,$35,$38,46616);
   }
   $39 = $yypos131;
   $40 = $1;
   $41 = (($40) + 12|0);
   HEAP32[$41>>2] = $39;
   $42 = $yythunkpos131;
   $43 = $1;
   $44 = (($43) + 44|0);
   HEAP32[$44>>2] = $42;
   $45 = $1;
   $46 = $1;
   $47 = (($46) + 28|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $1;
   $50 = (($49) + 32|0);
   $51 = HEAP32[$50>>2]|0;
   _yyDo($45,75,$48,$51,46640);
   $52 = $1;
   _yyDo($52,12,1,0,41392);
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_OPMLPlain($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $yypos0 = 0, $yypos124 = 0, $yypos125 = 0, $yypos126 = 0, $yypos127 = 0, $yypos128 = 0, $yythunkpos0 = 0, $yythunkpos124 = 0, $yythunkpos125 = 0, $yythunkpos126 = 0, $yythunkpos127 = 0, $yythunkpos128 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 $9 = $1;
 $10 = (_yy_StartList($9)|0);
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $1;
   _yyDo($12,8,-1,0,41336);
   $13 = $1;
   $14 = (($13) + 12|0);
   $15 = HEAP32[$14>>2]|0;
   $yypos125 = $15;
   $16 = $1;
   $17 = (($16) + 44|0);
   $18 = HEAP32[$17>>2]|0;
   $yythunkpos125 = $18;
   $19 = $1;
   $20 = (_yy_BlankLine($19)|0);
   $21 = ($20|0)!=(0);
   if ($21) {
    break;
   }
   $22 = $yypos125;
   $23 = $1;
   $24 = (($23) + 12|0);
   HEAP32[$24>>2] = $22;
   $25 = $yythunkpos125;
   $26 = $1;
   $27 = (($26) + 44|0);
   HEAP32[$27>>2] = $25;
   $28 = $1;
   $29 = (($28) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $yypos126 = $30;
   $31 = $1;
   $32 = (($31) + 44|0);
   $33 = HEAP32[$32>>2]|0;
   $yythunkpos126 = $33;
   $34 = $1;
   $35 = (_yy_Heading($34)|0);
   $36 = ($35|0)!=(0);
   if ($36) {
    break;
   }
   $37 = $yypos126;
   $38 = $1;
   $39 = (($38) + 12|0);
   HEAP32[$39>>2] = $37;
   $40 = $yythunkpos126;
   $41 = $1;
   $42 = (($41) + 44|0);
   HEAP32[$42>>2] = $40;
   $43 = $1;
   $44 = (_yy_Line($43)|0);
   $45 = ($44|0)!=(0);
   if (!($45)) {
    break;
   }
   $46 = $1;
   $47 = $1;
   $48 = (($47) + 28|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $1;
   $51 = (($50) + 32|0);
   $52 = HEAP32[$51>>2]|0;
   _yyDo($46,76,$49,$52,46560);
   while(1) {
    $53 = $1;
    $54 = (($53) + 12|0);
    $55 = HEAP32[$54>>2]|0;
    $yypos124 = $55;
    $56 = $1;
    $57 = (($56) + 44|0);
    $58 = HEAP32[$57>>2]|0;
    $yythunkpos124 = $58;
    $59 = $1;
    $60 = (($59) + 12|0);
    $61 = HEAP32[$60>>2]|0;
    $yypos127 = $61;
    $62 = $1;
    $63 = (($62) + 44|0);
    $64 = HEAP32[$63>>2]|0;
    $yythunkpos127 = $64;
    $65 = $1;
    $66 = (_yy_BlankLine($65)|0);
    $67 = ($66|0)!=(0);
    if ($67) {
     label = 14;
     break;
    }
    $68 = $yypos127;
    $69 = $1;
    $70 = (($69) + 12|0);
    HEAP32[$70>>2] = $68;
    $71 = $yythunkpos127;
    $72 = $1;
    $73 = (($72) + 44|0);
    HEAP32[$73>>2] = $71;
    $74 = $1;
    $75 = (($74) + 12|0);
    $76 = HEAP32[$75>>2]|0;
    $yypos128 = $76;
    $77 = $1;
    $78 = (($77) + 44|0);
    $79 = HEAP32[$78>>2]|0;
    $yythunkpos128 = $79;
    $80 = $1;
    $81 = (_yy_Heading($80)|0);
    $82 = ($81|0)!=(0);
    if ($82) {
     label = 17;
     break;
    }
    $83 = $yypos128;
    $84 = $1;
    $85 = (($84) + 12|0);
    HEAP32[$85>>2] = $83;
    $86 = $yythunkpos128;
    $87 = $1;
    $88 = (($87) + 44|0);
    HEAP32[$88>>2] = $86;
    $89 = $1;
    $90 = (_yy_Line($89)|0);
    $91 = ($90|0)!=(0);
    if (!($91)) {
     label = 19;
     break;
    }
    $92 = $1;
    $93 = $1;
    $94 = (($93) + 28|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = $1;
    $97 = (($96) + 32|0);
    $98 = HEAP32[$97>>2]|0;
    _yyDo($92,76,$95,$98,46560);
   }
   if ((label|0) == 14) {
   }
   else if ((label|0) == 17) {
   }
   else if ((label|0) == 19) {
   }
   $99 = $yypos124;
   $100 = $1;
   $101 = (($100) + 12|0);
   HEAP32[$101>>2] = $99;
   $102 = $yythunkpos124;
   $103 = $1;
   $104 = (($103) + 44|0);
   HEAP32[$104>>2] = $102;
   $105 = $1;
   $106 = $1;
   $107 = (($106) + 28|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $1;
   $110 = (($109) + 32|0);
   $111 = HEAP32[$110>>2]|0;
   _yyDo($105,77,$108,$111,46576);
   $112 = $1;
   _yyDo($112,12,1,0,41392);
   $0 = 1;
   $119 = $0;
   STACKTOP = sp;return ($119|0);
  } else {
  }
 } while(0);
 $113 = $yypos0;
 $114 = $1;
 $115 = (($114) + 12|0);
 HEAP32[$115>>2] = $113;
 $116 = $yythunkpos0;
 $117 = $1;
 $118 = (($117) + 44|0);
 HEAP32[$118>>2] = $116;
 $0 = 0;
 $119 = $0;
 STACKTOP = sp;return ($119|0);
}
function _yy_TOCHeadingSection($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos64 = 0, $yythunkpos0 = 0, $yythunkpos64 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 $9 = $1;
 $10 = (_yy_StartList($9)|0);
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $1;
   _yyDo($12,8,-1,0,41336);
   $13 = $1;
   $14 = (_yy_Heading($13)|0);
   $15 = ($14|0)!=(0);
   if (!($15)) {
    break;
   }
   $16 = $1;
   $17 = $1;
   $18 = (($17) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $1;
   $21 = (($20) + 32|0);
   $22 = HEAP32[$21>>2]|0;
   _yyDo($16,78,$19,$22,46464);
   while(1) {
    $23 = $1;
    $24 = (($23) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $yypos64 = $25;
    $26 = $1;
    $27 = (($26) + 44|0);
    $28 = HEAP32[$27>>2]|0;
    $yythunkpos64 = $28;
    $29 = $1;
    $30 = (_yy_TOCSectionBlock($29)|0);
    $31 = ($30|0)!=(0);
    if (!($31)) {
     break;
    }
   }
   $32 = $yypos64;
   $33 = $1;
   $34 = (($33) + 12|0);
   HEAP32[$34>>2] = $32;
   $35 = $yythunkpos64;
   $36 = $1;
   $37 = (($36) + 44|0);
   HEAP32[$37>>2] = $35;
   $38 = $1;
   $39 = $1;
   $40 = (($39) + 28|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $1;
   $43 = (($42) + 32|0);
   $44 = HEAP32[$43>>2]|0;
   _yyDo($38,79,$41,$44,46488);
   $45 = $1;
   _yyDo($45,12,1,0,41392);
   $0 = 1;
   $52 = $0;
   STACKTOP = sp;return ($52|0);
  } else {
  }
 } while(0);
 $46 = $yypos0;
 $47 = $1;
 $48 = (($47) + 12|0);
 HEAP32[$48>>2] = $46;
 $49 = $yythunkpos0;
 $50 = $1;
 $51 = (($50) + 44|0);
 HEAP32[$51>>2] = $49;
 $0 = 0;
 $52 = $0;
 STACKTOP = sp;return ($52|0);
}
function _yy_Line($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yythunkpos0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_RawLine($8)|0);
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $1;
  $12 = $1;
  $13 = (($12) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $1;
  $16 = (($15) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  _yyDo($11,80,$14,$17,46400);
  $0 = 1;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $18 = $yypos0;
 $19 = $1;
 $20 = (($19) + 12|0);
 HEAP32[$20>>2] = $18;
 $21 = $yythunkpos0;
 $22 = $1;
 $23 = (($22) + 44|0);
 HEAP32[$23>>2] = $21;
 $0 = 0;
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function _yy_1_TOCPlain($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 _free_node_tree($9);
 STACKTOP = sp;return;
}
function _yy_1_SkipBlock($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 _free_node_tree($7);
 STACKTOP = sp;return;
}
function _yy_SetextBottom1($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $yypos0 = 0, $yypos2486 = 0, $yythunkpos0 = 0, $yythunkpos2486 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_NonindentSpace($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = (_yymatchChar($11,61)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   while(1) {
    $14 = $1;
    $15 = (($14) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $yypos2486 = $16;
    $17 = $1;
    $18 = (($17) + 44|0);
    $19 = HEAP32[$18>>2]|0;
    $yythunkpos2486 = $19;
    $20 = $1;
    $21 = (_yymatchChar($20,61)|0);
    $22 = ($21|0)!=(0);
    if (!($22)) {
     break;
    }
   }
   $23 = $yypos2486;
   $24 = $1;
   $25 = (($24) + 12|0);
   HEAP32[$25>>2] = $23;
   $26 = $yythunkpos2486;
   $27 = $1;
   $28 = (($27) + 44|0);
   HEAP32[$28>>2] = $26;
   $29 = $1;
   $30 = (_yy_Sp($29)|0);
   $31 = ($30|0)!=(0);
   if (!($31)) {
    break;
   }
   $32 = $1;
   $33 = (_yy_Newline($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   $0 = 1;
   $41 = $0;
   STACKTOP = sp;return ($41|0);
  } else {
  }
 } while(0);
 $35 = $yypos0;
 $36 = $1;
 $37 = (($36) + 12|0);
 HEAP32[$37>>2] = $35;
 $38 = $yythunkpos0;
 $39 = $1;
 $40 = (($39) + 44|0);
 HEAP32[$40>>2] = $38;
 $0 = 0;
 $41 = $0;
 STACKTOP = sp;return ($41|0);
}
function _yy_SetextBottom2($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $yypos0 = 0, $yypos2483 = 0, $yythunkpos0 = 0, $yythunkpos2483 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_NonindentSpace($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = (_yymatchChar($11,45)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   while(1) {
    $14 = $1;
    $15 = (($14) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $yypos2483 = $16;
    $17 = $1;
    $18 = (($17) + 44|0);
    $19 = HEAP32[$18>>2]|0;
    $yythunkpos2483 = $19;
    $20 = $1;
    $21 = (_yymatchChar($20,45)|0);
    $22 = ($21|0)!=(0);
    if (!($22)) {
     break;
    }
   }
   $23 = $yypos2483;
   $24 = $1;
   $25 = (($24) + 12|0);
   HEAP32[$25>>2] = $23;
   $26 = $yythunkpos2483;
   $27 = $1;
   $28 = (($27) + 44|0);
   HEAP32[$28>>2] = $26;
   $29 = $1;
   $30 = (_yy_Sp($29)|0);
   $31 = ($30|0)!=(0);
   if (!($31)) {
    break;
   }
   $32 = $1;
   $33 = (_yy_Newline($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   $0 = 1;
   $41 = $0;
   STACKTOP = sp;return ($41|0);
  } else {
  }
 } while(0);
 $35 = $yypos0;
 $36 = $1;
 $37 = (($36) + 12|0);
 HEAP32[$37>>2] = $35;
 $38 = $yythunkpos0;
 $39 = $1;
 $40 = (($39) + 44|0);
 HEAP32[$40>>2] = $38;
 $0 = 0;
 $41 = $0;
 STACKTOP = sp;return ($41|0);
}
function _yy_RawLine($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos2527 = 0, $yypos2530 = 0, $yypos2531 = 0, $yypos2532 = 0, $yypos2534 = 0, $yythunkpos0 = 0, $yythunkpos2527 = 0, $yythunkpos2530 = 0, $yythunkpos2531 = 0, $yythunkpos2532 = 0, $yythunkpos2534 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos2527 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos2527 = $13;
 $14 = $1;
 $15 = $1;
 $16 = (($15) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = (($18) + 32|0);
 $20 = HEAP32[$19>>2]|0;
 (_yyText($14,$17,$20)|0);
 $21 = $1;
 $22 = (($21) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $1;
 $25 = (($24) + 28|0);
 HEAP32[$25>>2] = $23;
 while(1) {
  $26 = $1;
  $27 = (($26) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $yypos2530 = $28;
  $29 = $1;
  $30 = (($29) + 44|0);
  $31 = HEAP32[$30>>2]|0;
  $yythunkpos2530 = $31;
  $32 = $1;
  $33 = (($32) + 12|0);
  $34 = HEAP32[$33>>2]|0;
  $yypos2531 = $34;
  $35 = $1;
  $36 = (($35) + 44|0);
  $37 = HEAP32[$36>>2]|0;
  $yythunkpos2531 = $37;
  $38 = $1;
  $39 = (_yymatchChar($38,13)|0);
  $40 = ($39|0)!=(0);
  if ($40) {
   label = 5;
   break;
  }
  $41 = $yypos2531;
  $42 = $1;
  $43 = (($42) + 12|0);
  HEAP32[$43>>2] = $41;
  $44 = $yythunkpos2531;
  $45 = $1;
  $46 = (($45) + 44|0);
  HEAP32[$46>>2] = $44;
  $47 = $1;
  $48 = (($47) + 12|0);
  $49 = HEAP32[$48>>2]|0;
  $yypos2532 = $49;
  $50 = $1;
  $51 = (($50) + 44|0);
  $52 = HEAP32[$51>>2]|0;
  $yythunkpos2532 = $52;
  $53 = $1;
  $54 = (_yymatchChar($53,10)|0);
  $55 = ($54|0)!=(0);
  if ($55) {
   label = 8;
   break;
  }
  $56 = $yypos2532;
  $57 = $1;
  $58 = (($57) + 12|0);
  HEAP32[$58>>2] = $56;
  $59 = $yythunkpos2532;
  $60 = $1;
  $61 = (($60) + 44|0);
  HEAP32[$61>>2] = $59;
  $62 = $1;
  $63 = (_yymatchDot($62)|0);
  $64 = ($63|0)!=(0);
  if (!($64)) {
   label = 10;
   break;
  }
 }
 if ((label|0) == 5) {
 }
 else if ((label|0) == 8) {
 }
 else if ((label|0) == 10) {
 }
 $65 = $yypos2530;
 $66 = $1;
 $67 = (($66) + 12|0);
 HEAP32[$67>>2] = $65;
 $68 = $yythunkpos2530;
 $69 = $1;
 $70 = (($69) + 44|0);
 HEAP32[$70>>2] = $68;
 $71 = $1;
 $72 = (_yy_Newline($71)|0);
 $73 = ($72|0)!=(0);
 L14: do {
  if ($73) {
   $74 = $1;
   $75 = $1;
   $76 = (($75) + 28|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $1;
   $79 = (($78) + 32|0);
   $80 = HEAP32[$79>>2]|0;
   (_yyText($74,$77,$80)|0);
   $81 = $1;
   $82 = (($81) + 12|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = $1;
   $85 = (($84) + 32|0);
   HEAP32[$85>>2] = $83;
  } else {
   $86 = $yypos2527;
   $87 = $1;
   $88 = (($87) + 12|0);
   HEAP32[$88>>2] = $86;
   $89 = $yythunkpos2527;
   $90 = $1;
   $91 = (($90) + 44|0);
   HEAP32[$91>>2] = $89;
   $92 = $1;
   $93 = $1;
   $94 = (($93) + 28|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $1;
   $97 = (($96) + 32|0);
   $98 = HEAP32[$97>>2]|0;
   (_yyText($92,$95,$98)|0);
   $99 = $1;
   $100 = (($99) + 12|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = $1;
   $103 = (($102) + 28|0);
   HEAP32[$103>>2] = $101;
   $104 = $1;
   $105 = (_yymatchDot($104)|0);
   $106 = ($105|0)!=(0);
   do {
    if ($106) {
     while(1) {
      $107 = $1;
      $108 = (($107) + 12|0);
      $109 = HEAP32[$108>>2]|0;
      $yypos2534 = $109;
      $110 = $1;
      $111 = (($110) + 44|0);
      $112 = HEAP32[$111>>2]|0;
      $yythunkpos2534 = $112;
      $113 = $1;
      $114 = (_yymatchDot($113)|0);
      $115 = ($114|0)!=(0);
      if (!($115)) {
       break;
      }
     }
     $116 = $yypos2534;
     $117 = $1;
     $118 = (($117) + 12|0);
     HEAP32[$118>>2] = $116;
     $119 = $yythunkpos2534;
     $120 = $1;
     $121 = (($120) + 44|0);
     HEAP32[$121>>2] = $119;
     $122 = $1;
     $123 = $1;
     $124 = (($123) + 28|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = $1;
     $127 = (($126) + 32|0);
     $128 = HEAP32[$127>>2]|0;
     (_yyText($122,$125,$128)|0);
     $129 = $1;
     $130 = (($129) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = $1;
     $133 = (($132) + 32|0);
     HEAP32[$133>>2] = $131;
     $134 = $1;
     $135 = (_yy_Eof($134)|0);
     $136 = ($135|0)!=(0);
     if ($136) {
      break L14;
     } else {
      break;
     }
    } else {
    }
   } while(0);
   $137 = $yypos0;
   $138 = $1;
   $139 = (($138) + 12|0);
   HEAP32[$139>>2] = $137;
   $140 = $yythunkpos0;
   $141 = $1;
   $142 = (($141) + 44|0);
   HEAP32[$142>>2] = $140;
   $0 = 0;
   $143 = $0;
   STACKTOP = sp;return ($143|0);
  }
 } while(0);
 $0 = 1;
 $143 = $0;
 STACKTOP = sp;return ($143|0);
}
function _yy_NonindentSpace($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos2217 = 0, $yythunkpos0 = 0, $yythunkpos2217 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos2217 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos2217 = $13;
 $14 = $1;
 $15 = (_yymatchString($14,41416)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
  } else {
   $17 = $yypos2217;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos2217;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yymatchString($23,41424)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    break;
   }
   $26 = $yypos2217;
   $27 = $1;
   $28 = (($27) + 12|0);
   HEAP32[$28>>2] = $26;
   $29 = $yythunkpos2217;
   $30 = $1;
   $31 = (($30) + 44|0);
   HEAP32[$31>>2] = $29;
   $32 = $1;
   $33 = (_yymatchChar($32,32)|0);
   $34 = ($33|0)!=(0);
   if ($34) {
    break;
   }
   $35 = $yypos2217;
   $36 = $1;
   $37 = (($36) + 12|0);
   HEAP32[$37>>2] = $35;
   $38 = $yythunkpos2217;
   $39 = $1;
   $40 = (($39) + 44|0);
   HEAP32[$40>>2] = $38;
   $41 = $1;
   $42 = (_yymatchString($41,41432)|0);
   $43 = ($42|0)!=(0);
   if ($43) {
    break;
   }
   $44 = $yypos0;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos0;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $0 = 0;
   $50 = $0;
   STACKTOP = sp;return ($50|0);
  }
 } while(0);
 $0 = 1;
 $50 = $0;
 STACKTOP = sp;return ($50|0);
}
function _yy_SetextHeading1($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos2207 = 0, $yypos2209 = 0, $yypos2210 = 0, $yypos2211 = 0, $yypos2212 = 0, $yypos2213 = 0, $yypos2214 = 0;
 var $yythunkpos0 = 0, $yythunkpos2207 = 0, $yythunkpos2209 = 0, $yythunkpos2210 = 0, $yythunkpos2211 = 0, $yythunkpos2212 = 0, $yythunkpos2213 = 0, $yythunkpos2214 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,2,0,41328);
 $9 = $1;
 $10 = (($9) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $yypos2207 = $11;
 $12 = $1;
 $13 = (($12) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $yythunkpos2207 = $14;
 $15 = $1;
 $16 = (_yy_RawLine($15)|0);
 $17 = ($16|0)!=(0);
 L1: do {
  if ($17) {
   $18 = $1;
   $19 = (_yy_SetextBottom1($18)|0);
   $20 = ($19|0)!=(0);
   if (!($20)) {
    break;
   }
   $21 = $yypos2207;
   $22 = $1;
   $23 = (($22) + 12|0);
   HEAP32[$23>>2] = $21;
   $24 = $yythunkpos2207;
   $25 = $1;
   $26 = (($25) + 44|0);
   HEAP32[$26>>2] = $24;
   $27 = $1;
   $28 = (_yy_StartList($27)|0);
   $29 = ($28|0)!=(0);
   if (!($29)) {
    break;
   }
   $30 = $1;
   _yyDo($30,8,-2,0,41336);
   $31 = $1;
   $32 = (($31) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $yypos2210 = $33;
   $34 = $1;
   $35 = (($34) + 44|0);
   $36 = HEAP32[$35>>2]|0;
   $yythunkpos2210 = $36;
   $37 = $1;
   $38 = (_yy_Endline($37)|0);
   $39 = ($38|0)!=(0);
   if ($39) {
    break;
   }
   $40 = $yypos2210;
   $41 = $1;
   $42 = (($41) + 12|0);
   HEAP32[$42>>2] = $40;
   $43 = $yythunkpos2210;
   $44 = $1;
   $45 = (($44) + 44|0);
   HEAP32[$45>>2] = $43;
   $46 = $1;
   $47 = (($46) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $yypos2211 = $48;
   $49 = $1;
   $50 = (($49) + 44|0);
   $51 = HEAP32[$50>>2]|0;
   $yythunkpos2211 = $51;
   $52 = $1;
   $53 = $1;
   $54 = (($53) + 28|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = $1;
   $57 = (($56) + 32|0);
   $58 = HEAP32[$57>>2]|0;
   (_yyText($52,$55,$58)|0);
   $59 = $1;
   $60 = (($59) + 64|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($61) + 12|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (_extension(1,$63)|0);
   do {
    if ($64) {
    } else {
     $65 = $1;
     $66 = (_yy_Sp($65)|0);
     $67 = ($66|0)!=(0);
     if (!($67)) {
      break;
     }
     $68 = $1;
     $69 = (_yy_AutoLabel($68)|0);
     $70 = ($69|0)!=(0);
     if ($70) {
      break L1;
     } else {
      break;
     }
    }
   } while(0);
   $71 = $yypos2211;
   $72 = $1;
   $73 = (($72) + 12|0);
   HEAP32[$73>>2] = $71;
   $74 = $yythunkpos2211;
   $75 = $1;
   $76 = (($75) + 44|0);
   HEAP32[$76>>2] = $74;
   $77 = $1;
   $78 = (_yy_Inline($77)|0);
   $79 = ($78|0)!=(0);
   if (!($79)) {
    break;
   }
   $80 = $1;
   $81 = $1;
   $82 = (($81) + 28|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = $1;
   $85 = (($84) + 32|0);
   $86 = HEAP32[$85>>2]|0;
   _yyDo($80,81,$83,$86,46216);
   L26: while(1) {
    $87 = $1;
    $88 = (($87) + 12|0);
    $89 = HEAP32[$88>>2]|0;
    $yypos2209 = $89;
    $90 = $1;
    $91 = (($90) + 44|0);
    $92 = HEAP32[$91>>2]|0;
    $yythunkpos2209 = $92;
    $93 = $1;
    $94 = (($93) + 12|0);
    $95 = HEAP32[$94>>2]|0;
    $yypos2212 = $95;
    $96 = $1;
    $97 = (($96) + 44|0);
    $98 = HEAP32[$97>>2]|0;
    $yythunkpos2212 = $98;
    $99 = $1;
    $100 = (_yy_Endline($99)|0);
    $101 = ($100|0)!=(0);
    if ($101) {
     label = 22;
     break;
    }
    $102 = $yypos2212;
    $103 = $1;
    $104 = (($103) + 12|0);
    HEAP32[$104>>2] = $102;
    $105 = $yythunkpos2212;
    $106 = $1;
    $107 = (($106) + 44|0);
    HEAP32[$107>>2] = $105;
    $108 = $1;
    $109 = (($108) + 12|0);
    $110 = HEAP32[$109>>2]|0;
    $yypos2213 = $110;
    $111 = $1;
    $112 = (($111) + 44|0);
    $113 = HEAP32[$112>>2]|0;
    $yythunkpos2213 = $113;
    $114 = $1;
    $115 = $1;
    $116 = (($115) + 28|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = $1;
    $119 = (($118) + 32|0);
    $120 = HEAP32[$119>>2]|0;
    (_yyText($114,$117,$120)|0);
    $121 = $1;
    $122 = (($121) + 64|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = (($123) + 12|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = (_extension(1,$125)|0);
    do {
     if ($126) {
     } else {
      $127 = $1;
      $128 = (_yy_Sp($127)|0);
      $129 = ($128|0)!=(0);
      if (!($129)) {
       break;
      }
      $130 = $1;
      $131 = (_yy_AutoLabel($130)|0);
      $132 = ($131|0)!=(0);
      if ($132) {
       label = 29;
       break L26;
      }
     }
    } while(0);
    $133 = $yypos2213;
    $134 = $1;
    $135 = (($134) + 12|0);
    HEAP32[$135>>2] = $133;
    $136 = $yythunkpos2213;
    $137 = $1;
    $138 = (($137) + 44|0);
    HEAP32[$138>>2] = $136;
    $139 = $1;
    $140 = (_yy_Inline($139)|0);
    $141 = ($140|0)!=(0);
    if (!($141)) {
     label = 31;
     break;
    }
    $142 = $1;
    $143 = $1;
    $144 = (($143) + 28|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = $1;
    $147 = (($146) + 32|0);
    $148 = HEAP32[$147>>2]|0;
    _yyDo($142,81,$145,$148,46216);
   }
   if ((label|0) == 22) {
   }
   else if ((label|0) == 29) {
   }
   else if ((label|0) == 31) {
   }
   $149 = $yypos2209;
   $150 = $1;
   $151 = (($150) + 12|0);
   HEAP32[$151>>2] = $149;
   $152 = $yythunkpos2209;
   $153 = $1;
   $154 = (($153) + 44|0);
   HEAP32[$154>>2] = $152;
   $155 = $1;
   $156 = (($155) + 12|0);
   $157 = HEAP32[$156>>2]|0;
   $yypos2214 = $157;
   $158 = $1;
   $159 = (($158) + 44|0);
   $160 = HEAP32[$159>>2]|0;
   $yythunkpos2214 = $160;
   $161 = $1;
   $162 = (_yy_Sp($161)|0);
   $163 = ($162|0)!=(0);
   do {
    if ($163) {
     $164 = $1;
     $165 = (_yy_AutoLabel($164)|0);
     $166 = ($165|0)!=(0);
     if (!($166)) {
      label = 40;
      break;
     }
     $167 = $1;
     _yyDo($167,8,-1,0,41336);
     $168 = $1;
     $169 = $1;
     $170 = (($169) + 28|0);
     $171 = HEAP32[$170>>2]|0;
     $172 = $1;
     $173 = (($172) + 32|0);
     $174 = HEAP32[$173>>2]|0;
     _yyDo($168,82,$171,$174,46240);
     $175 = $1;
     $176 = (_yy_Sp($175)|0);
     $177 = ($176|0)!=(0);
     if ($177) {
      break;
     } else {
      label = 40;
      break;
     }
    } else {
     label = 40;
    }
   } while(0);
   if ((label|0) == 40) {
    $178 = $yypos2214;
    $179 = $1;
    $180 = (($179) + 12|0);
    HEAP32[$180>>2] = $178;
    $181 = $yythunkpos2214;
    $182 = $1;
    $183 = (($182) + 44|0);
    HEAP32[$183>>2] = $181;
   }
   $184 = $1;
   $185 = (_yy_Sp($184)|0);
   $186 = ($185|0)!=(0);
   if (!($186)) {
    break;
   }
   $187 = $1;
   $188 = (_yy_Newline($187)|0);
   $189 = ($188|0)!=(0);
   if (!($189)) {
    break;
   }
   $190 = $1;
   $191 = $1;
   $192 = (($191) + 28|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = $1;
   $195 = (($194) + 32|0);
   $196 = HEAP32[$195>>2]|0;
   (_yyText($190,$193,$196)|0);
   $197 = $1;
   $198 = (($197) + 12|0);
   $199 = HEAP32[$198>>2]|0;
   $200 = $1;
   $201 = (($200) + 28|0);
   HEAP32[$201>>2] = $199;
   $202 = $1;
   $203 = (_yy_SetextBottom1($202)|0);
   $204 = ($203|0)!=(0);
   if (!($204)) {
    break;
   }
   $205 = $1;
   $206 = $1;
   $207 = (($206) + 28|0);
   $208 = HEAP32[$207>>2]|0;
   $209 = $1;
   $210 = (($209) + 32|0);
   $211 = HEAP32[$210>>2]|0;
   (_yyText($205,$208,$211)|0);
   $212 = $1;
   $213 = (($212) + 12|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = $1;
   $216 = (($215) + 32|0);
   HEAP32[$216>>2] = $214;
   $217 = $1;
   $218 = $1;
   $219 = (($218) + 28|0);
   $220 = HEAP32[$219>>2]|0;
   $221 = $1;
   $222 = (($221) + 32|0);
   $223 = HEAP32[$222>>2]|0;
   _yyDo($217,83,$220,$223,46264);
   $224 = $1;
   _yyDo($224,12,2,0,41392);
   $0 = 1;
   $231 = $0;
   STACKTOP = sp;return ($231|0);
  } else {
  }
 } while(0);
 $225 = $yypos0;
 $226 = $1;
 $227 = (($226) + 12|0);
 HEAP32[$227>>2] = $225;
 $228 = $yythunkpos0;
 $229 = $1;
 $230 = (($229) + 44|0);
 HEAP32[$230>>2] = $228;
 $0 = 0;
 $231 = $0;
 STACKTOP = sp;return ($231|0);
}
function _yy_SetextHeading2($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos2197 = 0, $yypos2199 = 0, $yypos2200 = 0, $yypos2201 = 0, $yypos2202 = 0, $yypos2203 = 0, $yypos2204 = 0;
 var $yythunkpos0 = 0, $yythunkpos2197 = 0, $yythunkpos2199 = 0, $yythunkpos2200 = 0, $yythunkpos2201 = 0, $yythunkpos2202 = 0, $yythunkpos2203 = 0, $yythunkpos2204 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,2,0,41328);
 $9 = $1;
 $10 = (($9) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $yypos2197 = $11;
 $12 = $1;
 $13 = (($12) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $yythunkpos2197 = $14;
 $15 = $1;
 $16 = (_yy_RawLine($15)|0);
 $17 = ($16|0)!=(0);
 L1: do {
  if ($17) {
   $18 = $1;
   $19 = (_yy_SetextBottom2($18)|0);
   $20 = ($19|0)!=(0);
   if (!($20)) {
    break;
   }
   $21 = $yypos2197;
   $22 = $1;
   $23 = (($22) + 12|0);
   HEAP32[$23>>2] = $21;
   $24 = $yythunkpos2197;
   $25 = $1;
   $26 = (($25) + 44|0);
   HEAP32[$26>>2] = $24;
   $27 = $1;
   $28 = (_yy_StartList($27)|0);
   $29 = ($28|0)!=(0);
   if (!($29)) {
    break;
   }
   $30 = $1;
   _yyDo($30,8,-2,0,41336);
   $31 = $1;
   $32 = (($31) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $yypos2200 = $33;
   $34 = $1;
   $35 = (($34) + 44|0);
   $36 = HEAP32[$35>>2]|0;
   $yythunkpos2200 = $36;
   $37 = $1;
   $38 = (_yy_Endline($37)|0);
   $39 = ($38|0)!=(0);
   if ($39) {
    break;
   }
   $40 = $yypos2200;
   $41 = $1;
   $42 = (($41) + 12|0);
   HEAP32[$42>>2] = $40;
   $43 = $yythunkpos2200;
   $44 = $1;
   $45 = (($44) + 44|0);
   HEAP32[$45>>2] = $43;
   $46 = $1;
   $47 = (($46) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $yypos2201 = $48;
   $49 = $1;
   $50 = (($49) + 44|0);
   $51 = HEAP32[$50>>2]|0;
   $yythunkpos2201 = $51;
   $52 = $1;
   $53 = $1;
   $54 = (($53) + 28|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = $1;
   $57 = (($56) + 32|0);
   $58 = HEAP32[$57>>2]|0;
   (_yyText($52,$55,$58)|0);
   $59 = $1;
   $60 = (($59) + 64|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($61) + 12|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (_extension(1,$63)|0);
   do {
    if ($64) {
    } else {
     $65 = $1;
     $66 = (_yy_Sp($65)|0);
     $67 = ($66|0)!=(0);
     if (!($67)) {
      break;
     }
     $68 = $1;
     $69 = (_yy_AutoLabel($68)|0);
     $70 = ($69|0)!=(0);
     if ($70) {
      break L1;
     } else {
      break;
     }
    }
   } while(0);
   $71 = $yypos2201;
   $72 = $1;
   $73 = (($72) + 12|0);
   HEAP32[$73>>2] = $71;
   $74 = $yythunkpos2201;
   $75 = $1;
   $76 = (($75) + 44|0);
   HEAP32[$76>>2] = $74;
   $77 = $1;
   $78 = (_yy_Inline($77)|0);
   $79 = ($78|0)!=(0);
   if (!($79)) {
    break;
   }
   $80 = $1;
   $81 = $1;
   $82 = (($81) + 28|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = $1;
   $85 = (($84) + 32|0);
   $86 = HEAP32[$85>>2]|0;
   _yyDo($80,84,$83,$86,42904);
   L26: while(1) {
    $87 = $1;
    $88 = (($87) + 12|0);
    $89 = HEAP32[$88>>2]|0;
    $yypos2199 = $89;
    $90 = $1;
    $91 = (($90) + 44|0);
    $92 = HEAP32[$91>>2]|0;
    $yythunkpos2199 = $92;
    $93 = $1;
    $94 = (($93) + 12|0);
    $95 = HEAP32[$94>>2]|0;
    $yypos2202 = $95;
    $96 = $1;
    $97 = (($96) + 44|0);
    $98 = HEAP32[$97>>2]|0;
    $yythunkpos2202 = $98;
    $99 = $1;
    $100 = (_yy_Endline($99)|0);
    $101 = ($100|0)!=(0);
    if ($101) {
     label = 22;
     break;
    }
    $102 = $yypos2202;
    $103 = $1;
    $104 = (($103) + 12|0);
    HEAP32[$104>>2] = $102;
    $105 = $yythunkpos2202;
    $106 = $1;
    $107 = (($106) + 44|0);
    HEAP32[$107>>2] = $105;
    $108 = $1;
    $109 = (($108) + 12|0);
    $110 = HEAP32[$109>>2]|0;
    $yypos2203 = $110;
    $111 = $1;
    $112 = (($111) + 44|0);
    $113 = HEAP32[$112>>2]|0;
    $yythunkpos2203 = $113;
    $114 = $1;
    $115 = $1;
    $116 = (($115) + 28|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = $1;
    $119 = (($118) + 32|0);
    $120 = HEAP32[$119>>2]|0;
    (_yyText($114,$117,$120)|0);
    $121 = $1;
    $122 = (($121) + 64|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = (($123) + 12|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = (_extension(1,$125)|0);
    do {
     if ($126) {
     } else {
      $127 = $1;
      $128 = (_yy_Sp($127)|0);
      $129 = ($128|0)!=(0);
      if (!($129)) {
       break;
      }
      $130 = $1;
      $131 = (_yy_AutoLabel($130)|0);
      $132 = ($131|0)!=(0);
      if ($132) {
       label = 29;
       break L26;
      }
     }
    } while(0);
    $133 = $yypos2203;
    $134 = $1;
    $135 = (($134) + 12|0);
    HEAP32[$135>>2] = $133;
    $136 = $yythunkpos2203;
    $137 = $1;
    $138 = (($137) + 44|0);
    HEAP32[$138>>2] = $136;
    $139 = $1;
    $140 = (_yy_Inline($139)|0);
    $141 = ($140|0)!=(0);
    if (!($141)) {
     label = 31;
     break;
    }
    $142 = $1;
    $143 = $1;
    $144 = (($143) + 28|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = $1;
    $147 = (($146) + 32|0);
    $148 = HEAP32[$147>>2]|0;
    _yyDo($142,84,$145,$148,42904);
   }
   if ((label|0) == 22) {
   }
   else if ((label|0) == 29) {
   }
   else if ((label|0) == 31) {
   }
   $149 = $yypos2199;
   $150 = $1;
   $151 = (($150) + 12|0);
   HEAP32[$151>>2] = $149;
   $152 = $yythunkpos2199;
   $153 = $1;
   $154 = (($153) + 44|0);
   HEAP32[$154>>2] = $152;
   $155 = $1;
   $156 = (($155) + 12|0);
   $157 = HEAP32[$156>>2]|0;
   $yypos2204 = $157;
   $158 = $1;
   $159 = (($158) + 44|0);
   $160 = HEAP32[$159>>2]|0;
   $yythunkpos2204 = $160;
   $161 = $1;
   $162 = (_yy_Sp($161)|0);
   $163 = ($162|0)!=(0);
   do {
    if ($163) {
     $164 = $1;
     $165 = (_yy_AutoLabel($164)|0);
     $166 = ($165|0)!=(0);
     if (!($166)) {
      label = 40;
      break;
     }
     $167 = $1;
     _yyDo($167,8,-1,0,41336);
     $168 = $1;
     $169 = $1;
     $170 = (($169) + 28|0);
     $171 = HEAP32[$170>>2]|0;
     $172 = $1;
     $173 = (($172) + 32|0);
     $174 = HEAP32[$173>>2]|0;
     _yyDo($168,85,$171,$174,42928);
     $175 = $1;
     $176 = (_yy_Sp($175)|0);
     $177 = ($176|0)!=(0);
     if ($177) {
      break;
     } else {
      label = 40;
      break;
     }
    } else {
     label = 40;
    }
   } while(0);
   if ((label|0) == 40) {
    $178 = $yypos2204;
    $179 = $1;
    $180 = (($179) + 12|0);
    HEAP32[$180>>2] = $178;
    $181 = $yythunkpos2204;
    $182 = $1;
    $183 = (($182) + 44|0);
    HEAP32[$183>>2] = $181;
   }
   $184 = $1;
   $185 = (_yy_Sp($184)|0);
   $186 = ($185|0)!=(0);
   if (!($186)) {
    break;
   }
   $187 = $1;
   $188 = (_yy_Newline($187)|0);
   $189 = ($188|0)!=(0);
   if (!($189)) {
    break;
   }
   $190 = $1;
   $191 = $1;
   $192 = (($191) + 28|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = $1;
   $195 = (($194) + 32|0);
   $196 = HEAP32[$195>>2]|0;
   (_yyText($190,$193,$196)|0);
   $197 = $1;
   $198 = (($197) + 12|0);
   $199 = HEAP32[$198>>2]|0;
   $200 = $1;
   $201 = (($200) + 28|0);
   HEAP32[$201>>2] = $199;
   $202 = $1;
   $203 = (_yy_SetextBottom2($202)|0);
   $204 = ($203|0)!=(0);
   if (!($204)) {
    break;
   }
   $205 = $1;
   $206 = $1;
   $207 = (($206) + 28|0);
   $208 = HEAP32[$207>>2]|0;
   $209 = $1;
   $210 = (($209) + 32|0);
   $211 = HEAP32[$210>>2]|0;
   (_yyText($205,$208,$211)|0);
   $212 = $1;
   $213 = (($212) + 12|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = $1;
   $216 = (($215) + 32|0);
   HEAP32[$216>>2] = $214;
   $217 = $1;
   $218 = $1;
   $219 = (($218) + 28|0);
   $220 = HEAP32[$219>>2]|0;
   $221 = $1;
   $222 = (($221) + 32|0);
   $223 = HEAP32[$222>>2]|0;
   _yyDo($217,86,$220,$223,42952);
   $224 = $1;
   _yyDo($224,12,2,0,41392);
   $0 = 1;
   $231 = $0;
   STACKTOP = sp;return ($231|0);
  } else {
  }
 } while(0);
 $225 = $yypos0;
 $226 = $1;
 $227 = (($226) + 12|0);
 HEAP32[$227>>2] = $225;
 $228 = $yythunkpos0;
 $229 = $1;
 $230 = (($229) + 44|0);
 HEAP32[$230>>2] = $228;
 $0 = 0;
 $231 = $0;
 STACKTOP = sp;return ($231|0);
}
function _yy_MetaDataValue($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos2542 = 0, $yypos2543 = 0, $yypos2544 = 0, $yypos2546 = 0, $yypos2547 = 0, $yypos2548 = 0, $yypos2550 = 0;
 var $yypos2551 = 0, $yypos2552 = 0, $yypos2553 = 0, $yythunkpos0 = 0, $yythunkpos2542 = 0, $yythunkpos2543 = 0, $yythunkpos2544 = 0, $yythunkpos2546 = 0, $yythunkpos2547 = 0, $yythunkpos2548 = 0, $yythunkpos2550 = 0, $yythunkpos2551 = 0, $yythunkpos2552 = 0, $yythunkpos2553 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 $9 = $1;
 $10 = (_yy_StartList($9)|0);
 $11 = ($10|0)!=(0);
 L1: do {
  if ($11) {
   $12 = $1;
   _yyDo($12,8,-1,0,41336);
   $13 = $1;
   $14 = $1;
   $15 = (($14) + 28|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $1;
   $18 = (($17) + 32|0);
   $19 = HEAP32[$18>>2]|0;
   (_yyText($13,$16,$19)|0);
   $20 = $1;
   $21 = (($20) + 12|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $1;
   $24 = (($23) + 28|0);
   HEAP32[$24>>2] = $22;
   while(1) {
    $25 = $1;
    $26 = (($25) + 12|0);
    $27 = HEAP32[$26>>2]|0;
    $yypos2542 = $27;
    $28 = $1;
    $29 = (($28) + 44|0);
    $30 = HEAP32[$29>>2]|0;
    $yythunkpos2542 = $30;
    $31 = $1;
    $32 = (($31) + 12|0);
    $33 = HEAP32[$32>>2]|0;
    $yypos2543 = $33;
    $34 = $1;
    $35 = (($34) + 44|0);
    $36 = HEAP32[$35>>2]|0;
    $yythunkpos2543 = $36;
    $37 = $1;
    $38 = (_yy_Newline($37)|0);
    $39 = ($38|0)!=(0);
    if ($39) {
     label = 7;
     break;
    }
    $40 = $yypos2543;
    $41 = $1;
    $42 = (($41) + 12|0);
    HEAP32[$42>>2] = $40;
    $43 = $yythunkpos2543;
    $44 = $1;
    $45 = (($44) + 44|0);
    HEAP32[$45>>2] = $43;
    $46 = $1;
    $47 = (_yymatchDot($46)|0);
    $48 = ($47|0)!=(0);
    if (!($48)) {
     label = 9;
     break;
    }
   }
   if ((label|0) == 7) {
   }
   else if ((label|0) == 9) {
   }
   $49 = $yypos2542;
   $50 = $1;
   $51 = (($50) + 12|0);
   HEAP32[$51>>2] = $49;
   $52 = $yythunkpos2542;
   $53 = $1;
   $54 = (($53) + 44|0);
   HEAP32[$54>>2] = $52;
   $55 = $1;
   $56 = $1;
   $57 = (($56) + 28|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $1;
   $60 = (($59) + 32|0);
   $61 = HEAP32[$60>>2]|0;
   (_yyText($55,$58,$61)|0);
   $62 = $1;
   $63 = (($62) + 12|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $1;
   $66 = (($65) + 32|0);
   HEAP32[$66>>2] = $64;
   $67 = $1;
   $68 = $1;
   $69 = (($68) + 28|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = $1;
   $72 = (($71) + 32|0);
   $73 = HEAP32[$72>>2]|0;
   _yyDo($67,87,$70,$73,42800);
   $74 = $1;
   $75 = (($74) + 12|0);
   $76 = HEAP32[$75>>2]|0;
   $yypos2544 = $76;
   $77 = $1;
   $78 = (($77) + 44|0);
   $79 = HEAP32[$78>>2]|0;
   $yythunkpos2544 = $79;
   $80 = $1;
   $81 = (_yy_Newline($80)|0);
   $82 = ($81|0)!=(0);
   do {
    if ($82) {
     $83 = $1;
     $84 = (($83) + 12|0);
     $85 = HEAP32[$84>>2]|0;
     $yypos2546 = $85;
     $86 = $1;
     $87 = (($86) + 44|0);
     $88 = HEAP32[$87>>2]|0;
     $yythunkpos2546 = $88;
     $89 = $1;
     $90 = (($89) + 12|0);
     $91 = HEAP32[$90>>2]|0;
     $yypos2547 = $91;
     $92 = $1;
     $93 = (($92) + 44|0);
     $94 = HEAP32[$93>>2]|0;
     $yythunkpos2547 = $94;
     $95 = $1;
     $96 = (_yy_BlankLine($95)|0);
     $97 = ($96|0)!=(0);
     if ($97) {
      label = 25;
      break;
     }
     $98 = $yypos2547;
     $99 = $1;
     $100 = (($99) + 12|0);
     HEAP32[$100>>2] = $98;
     $101 = $yythunkpos2547;
     $102 = $1;
     $103 = (($102) + 44|0);
     HEAP32[$103>>2] = $101;
     $104 = $1;
     $105 = (($104) + 12|0);
     $106 = HEAP32[$105>>2]|0;
     $yypos2548 = $106;
     $107 = $1;
     $108 = (($107) + 44|0);
     $109 = HEAP32[$108>>2]|0;
     $yythunkpos2548 = $109;
     $110 = $1;
     $111 = (_yy_SingleLineMetaKeyValue($110)|0);
     $112 = ($111|0)!=(0);
     if ($112) {
      label = 25;
      break;
     }
     $113 = $yypos2548;
     $114 = $1;
     $115 = (($114) + 12|0);
     HEAP32[$115>>2] = $113;
     $116 = $yythunkpos2548;
     $117 = $1;
     $118 = (($117) + 44|0);
     HEAP32[$118>>2] = $116;
     $119 = $1;
     $120 = (_yy_Sp($119)|0);
     $121 = ($120|0)!=(0);
     if (!($121)) {
      label = 25;
      break;
     }
     $122 = $1;
     $123 = (_yy_RawLine($122)|0);
     $124 = ($123|0)!=(0);
     if ($124) {
      $125 = $yypos2546;
      $126 = $1;
      $127 = (($126) + 12|0);
      HEAP32[$127>>2] = $125;
      $128 = $yythunkpos2546;
      $129 = $1;
      $130 = (($129) + 44|0);
      HEAP32[$130>>2] = $128;
      $131 = $1;
      $132 = $1;
      $133 = (($132) + 28|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = $1;
      $136 = (($135) + 32|0);
      $137 = HEAP32[$136>>2]|0;
      _yyDo($131,88,$134,$137,42824);
      break;
     } else {
      label = 25;
      break;
     }
    } else {
     label = 25;
    }
   } while(0);
   do {
    if ((label|0) == 25) {
     $138 = $yypos2544;
     $139 = $1;
     $140 = (($139) + 12|0);
     HEAP32[$140>>2] = $138;
     $141 = $yythunkpos2544;
     $142 = $1;
     $143 = (($142) + 44|0);
     HEAP32[$143>>2] = $141;
     $144 = $1;
     $145 = (_yy_Newline($144)|0);
     $146 = ($145|0)!=(0);
     if ($146) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   while(1) {
    $147 = $1;
    $148 = (($147) + 12|0);
    $149 = HEAP32[$148>>2]|0;
    $yypos2550 = $149;
    $150 = $1;
    $151 = (($150) + 44|0);
    $152 = HEAP32[$151>>2]|0;
    $yythunkpos2550 = $152;
    $153 = $1;
    $154 = (($153) + 12|0);
    $155 = HEAP32[$154>>2]|0;
    $yypos2551 = $155;
    $156 = $1;
    $157 = (($156) + 44|0);
    $158 = HEAP32[$157>>2]|0;
    $yythunkpos2551 = $158;
    $159 = $1;
    $160 = (_yy_BlankLine($159)|0);
    $161 = ($160|0)!=(0);
    if ($161) {
     label = 31;
     break;
    }
    $162 = $yypos2551;
    $163 = $1;
    $164 = (($163) + 12|0);
    HEAP32[$164>>2] = $162;
    $165 = $yythunkpos2551;
    $166 = $1;
    $167 = (($166) + 44|0);
    HEAP32[$167>>2] = $165;
    $168 = $1;
    $169 = (($168) + 12|0);
    $170 = HEAP32[$169>>2]|0;
    $yypos2552 = $170;
    $171 = $1;
    $172 = (($171) + 44|0);
    $173 = HEAP32[$172>>2]|0;
    $yythunkpos2552 = $173;
    $174 = $1;
    $175 = (_yy_SingleLineMetaKeyValue($174)|0);
    $176 = ($175|0)!=(0);
    if ($176) {
     label = 34;
     break;
    }
    $177 = $yypos2552;
    $178 = $1;
    $179 = (($178) + 12|0);
    HEAP32[$179>>2] = $177;
    $180 = $yythunkpos2552;
    $181 = $1;
    $182 = (($181) + 44|0);
    HEAP32[$182>>2] = $180;
    $183 = $1;
    $184 = (($183) + 12|0);
    $185 = HEAP32[$184>>2]|0;
    $yypos2553 = $185;
    $186 = $1;
    $187 = (($186) + 44|0);
    $188 = HEAP32[$187>>2]|0;
    $yythunkpos2553 = $188;
    $189 = $1;
    $190 = (_yy_YAMLStop($189)|0);
    $191 = ($190|0)!=(0);
    if ($191) {
     label = 37;
     break;
    }
    $192 = $yypos2553;
    $193 = $1;
    $194 = (($193) + 12|0);
    HEAP32[$194>>2] = $192;
    $195 = $yythunkpos2553;
    $196 = $1;
    $197 = (($196) + 44|0);
    HEAP32[$197>>2] = $195;
    $198 = $1;
    $199 = (_yy_Sp($198)|0);
    $200 = ($199|0)!=(0);
    if (!($200)) {
     label = 39;
     break;
    }
    $201 = $1;
    $202 = (_yy_RawLine($201)|0);
    $203 = ($202|0)!=(0);
    if (!($203)) {
     label = 41;
     break;
    }
    $204 = $1;
    $205 = $1;
    $206 = (($205) + 28|0);
    $207 = HEAP32[$206>>2]|0;
    $208 = $1;
    $209 = (($208) + 32|0);
    $210 = HEAP32[$209>>2]|0;
    _yyDo($204,89,$207,$210,42848);
   }
   if ((label|0) == 31) {
   }
   else if ((label|0) == 34) {
   }
   else if ((label|0) == 37) {
   }
   else if ((label|0) == 39) {
   }
   else if ((label|0) == 41) {
   }
   $211 = $yypos2550;
   $212 = $1;
   $213 = (($212) + 12|0);
   HEAP32[$213>>2] = $211;
   $214 = $yythunkpos2550;
   $215 = $1;
   $216 = (($215) + 44|0);
   HEAP32[$216>>2] = $214;
   $217 = $1;
   $218 = $1;
   $219 = (($218) + 28|0);
   $220 = HEAP32[$219>>2]|0;
   $221 = $1;
   $222 = (($221) + 32|0);
   $223 = HEAP32[$222>>2]|0;
   _yyDo($217,90,$220,$223,42872);
   $224 = $1;
   _yyDo($224,12,1,0,41392);
   $0 = 1;
   $231 = $0;
   STACKTOP = sp;return ($231|0);
  } else {
  }
 } while(0);
 $225 = $yypos0;
 $226 = $1;
 $227 = (($226) + 12|0);
 HEAP32[$227>>2] = $225;
 $228 = $yythunkpos0;
 $229 = $1;
 $230 = (($229) + 44|0);
 HEAP32[$230>>2] = $228;
 $0 = 0;
 $231 = $0;
 STACKTOP = sp;return ($231|0);
}
function _yy_1_MetaDataKeyValue($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = (($10) + 48|0);
 HEAP32[$11>>2] = $9;
 $12 = $0;
 $13 = (($12) + 52|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + -4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $0;
 $18 = (($17) + 48|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + 12|0);
 HEAP32[$20>>2] = $16;
 STACKTOP = sp;return;
}
function _yy_BlockQuoteRaw($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos2179 = 0, $yypos2181 = 0, $yypos2182 = 0, $yypos2183 = 0, $yypos2185 = 0, $yypos2187 = 0, $yypos2188 = 0;
 var $yypos2189 = 0, $yypos2191 = 0, $yythunkpos0 = 0, $yythunkpos2179 = 0, $yythunkpos2181 = 0, $yythunkpos2182 = 0, $yythunkpos2183 = 0, $yythunkpos2185 = 0, $yythunkpos2187 = 0, $yythunkpos2188 = 0, $yythunkpos2189 = 0, $yythunkpos2191 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,3,0,41328);
 $9 = $1;
 $10 = (_yy_StartList($9)|0);
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $1;
   _yyDo($12,8,-3,0,41336);
   $13 = $1;
   $14 = (_yy_StartList($13)|0);
   $15 = ($14|0)!=(0);
   if (!($15)) {
    break;
   }
   $16 = $1;
   _yyDo($16,8,-2,0,41336);
   $17 = $1;
   $18 = (_yy_NonindentSpace($17)|0);
   $19 = ($18|0)!=(0);
   if (!($19)) {
    break;
   }
   $20 = $1;
   $21 = (_yy_BlockQuoteMarker($20)|0);
   $22 = ($21|0)!=(0);
   if (!($22)) {
    break;
   }
   $23 = $1;
   _yyDo($23,8,-1,0,41336);
   $24 = $1;
   $25 = (_yy_Line($24)|0);
   $26 = ($25|0)!=(0);
   if (!($26)) {
    break;
   }
   $27 = $1;
   $28 = $1;
   $29 = (($28) + 28|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $1;
   $32 = (($31) + 32|0);
   $33 = HEAP32[$32>>2]|0;
   _yyDo($27,91,$30,$33,49040);
   while(1) {
    $34 = $1;
    $35 = (($34) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $yypos2181 = $36;
    $37 = $1;
    $38 = (($37) + 44|0);
    $39 = HEAP32[$38>>2]|0;
    $yythunkpos2181 = $39;
    $40 = $1;
    $41 = (($40) + 12|0);
    $42 = HEAP32[$41>>2]|0;
    $yypos2182 = $42;
    $43 = $1;
    $44 = (($43) + 44|0);
    $45 = HEAP32[$44>>2]|0;
    $yythunkpos2182 = $45;
    $46 = $1;
    $47 = (_yy_NonindentSpace($46)|0);
    $48 = ($47|0)!=(0);
    if ($48) {
     $49 = $1;
     $50 = (_yymatchChar($49,62)|0);
     $51 = ($50|0)!=(0);
     if ($51) {
      label = 16;
      break;
     }
    } else {
    }
    $52 = $yypos2182;
    $53 = $1;
    $54 = (($53) + 12|0);
    HEAP32[$54>>2] = $52;
    $55 = $yythunkpos2182;
    $56 = $1;
    $57 = (($56) + 44|0);
    HEAP32[$57>>2] = $55;
    $58 = $1;
    $59 = (($58) + 12|0);
    $60 = HEAP32[$59>>2]|0;
    $yypos2183 = $60;
    $61 = $1;
    $62 = (($61) + 44|0);
    $63 = HEAP32[$62>>2]|0;
    $yythunkpos2183 = $63;
    $64 = $1;
    $65 = (_yy_BlankLine($64)|0);
    $66 = ($65|0)!=(0);
    if ($66) {
     label = 19;
     break;
    }
    $67 = $yypos2183;
    $68 = $1;
    $69 = (($68) + 12|0);
    HEAP32[$69>>2] = $67;
    $70 = $yythunkpos2183;
    $71 = $1;
    $72 = (($71) + 44|0);
    HEAP32[$72>>2] = $70;
    $73 = $1;
    $74 = (_yy_Line($73)|0);
    $75 = ($74|0)!=(0);
    if (!($75)) {
     label = 21;
     break;
    }
    $76 = $1;
    $77 = $1;
    $78 = (($77) + 28|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = $1;
    $81 = (($80) + 32|0);
    $82 = HEAP32[$81>>2]|0;
    _yyDo($76,92,$79,$82,49064);
   }
   if ((label|0) == 16) {
   }
   else if ((label|0) == 19) {
   }
   else if ((label|0) == 21) {
   }
   $83 = $yypos2181;
   $84 = $1;
   $85 = (($84) + 12|0);
   HEAP32[$85>>2] = $83;
   $86 = $yythunkpos2181;
   $87 = $1;
   $88 = (($87) + 44|0);
   HEAP32[$88>>2] = $86;
   while(1) {
    $89 = $1;
    $90 = (($89) + 12|0);
    $91 = HEAP32[$90>>2]|0;
    $yypos2185 = $91;
    $92 = $1;
    $93 = (($92) + 44|0);
    $94 = HEAP32[$93>>2]|0;
    $yythunkpos2185 = $94;
    $95 = $1;
    $96 = (_yy_BlankLine($95)|0);
    $97 = ($96|0)!=(0);
    if (!($97)) {
     break;
    }
    $98 = $1;
    $99 = $1;
    $100 = (($99) + 28|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $1;
    $103 = (($102) + 32|0);
    $104 = HEAP32[$103>>2]|0;
    _yyDo($98,93,$101,$104,49088);
   }
   $105 = $yypos2185;
   $106 = $1;
   $107 = (($106) + 12|0);
   HEAP32[$107>>2] = $105;
   $108 = $yythunkpos2185;
   $109 = $1;
   $110 = (($109) + 44|0);
   HEAP32[$110>>2] = $108;
   while(1) {
    $111 = $1;
    $112 = (($111) + 12|0);
    $113 = HEAP32[$112>>2]|0;
    $yypos2179 = $113;
    $114 = $1;
    $115 = (($114) + 44|0);
    $116 = HEAP32[$115>>2]|0;
    $yythunkpos2179 = $116;
    $117 = $1;
    $118 = (_yy_NonindentSpace($117)|0);
    $119 = ($118|0)!=(0);
    if (!($119)) {
     label = 29;
     break;
    }
    $120 = $1;
    $121 = (_yy_BlockQuoteMarker($120)|0);
    $122 = ($121|0)!=(0);
    if (!($122)) {
     label = 31;
     break;
    }
    $123 = $1;
    _yyDo($123,8,-1,0,41336);
    $124 = $1;
    $125 = (_yy_Line($124)|0);
    $126 = ($125|0)!=(0);
    if (!($126)) {
     label = 33;
     break;
    }
    $127 = $1;
    $128 = $1;
    $129 = (($128) + 28|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = $1;
    $132 = (($131) + 32|0);
    $133 = HEAP32[$132>>2]|0;
    _yyDo($127,91,$130,$133,49040);
    while(1) {
     $134 = $1;
     $135 = (($134) + 12|0);
     $136 = HEAP32[$135>>2]|0;
     $yypos2187 = $136;
     $137 = $1;
     $138 = (($137) + 44|0);
     $139 = HEAP32[$138>>2]|0;
     $yythunkpos2187 = $139;
     $140 = $1;
     $141 = (($140) + 12|0);
     $142 = HEAP32[$141>>2]|0;
     $yypos2188 = $142;
     $143 = $1;
     $144 = (($143) + 44|0);
     $145 = HEAP32[$144>>2]|0;
     $yythunkpos2188 = $145;
     $146 = $1;
     $147 = (_yy_NonindentSpace($146)|0);
     $148 = ($147|0)!=(0);
     if ($148) {
      $149 = $1;
      $150 = (_yymatchChar($149,62)|0);
      $151 = ($150|0)!=(0);
      if ($151) {
       label = 39;
       break;
      }
     } else {
     }
     $152 = $yypos2188;
     $153 = $1;
     $154 = (($153) + 12|0);
     HEAP32[$154>>2] = $152;
     $155 = $yythunkpos2188;
     $156 = $1;
     $157 = (($156) + 44|0);
     HEAP32[$157>>2] = $155;
     $158 = $1;
     $159 = (($158) + 12|0);
     $160 = HEAP32[$159>>2]|0;
     $yypos2189 = $160;
     $161 = $1;
     $162 = (($161) + 44|0);
     $163 = HEAP32[$162>>2]|0;
     $yythunkpos2189 = $163;
     $164 = $1;
     $165 = (_yy_BlankLine($164)|0);
     $166 = ($165|0)!=(0);
     if ($166) {
      label = 42;
      break;
     }
     $167 = $yypos2189;
     $168 = $1;
     $169 = (($168) + 12|0);
     HEAP32[$169>>2] = $167;
     $170 = $yythunkpos2189;
     $171 = $1;
     $172 = (($171) + 44|0);
     HEAP32[$172>>2] = $170;
     $173 = $1;
     $174 = (_yy_Line($173)|0);
     $175 = ($174|0)!=(0);
     if (!($175)) {
      label = 44;
      break;
     }
     $176 = $1;
     $177 = $1;
     $178 = (($177) + 28|0);
     $179 = HEAP32[$178>>2]|0;
     $180 = $1;
     $181 = (($180) + 32|0);
     $182 = HEAP32[$181>>2]|0;
     _yyDo($176,92,$179,$182,49064);
    }
    if ((label|0) == 39) {
     label = 0;
    }
    else if ((label|0) == 42) {
     label = 0;
    }
    else if ((label|0) == 44) {
     label = 0;
    }
    $183 = $yypos2187;
    $184 = $1;
    $185 = (($184) + 12|0);
    HEAP32[$185>>2] = $183;
    $186 = $yythunkpos2187;
    $187 = $1;
    $188 = (($187) + 44|0);
    HEAP32[$188>>2] = $186;
    while(1) {
     $189 = $1;
     $190 = (($189) + 12|0);
     $191 = HEAP32[$190>>2]|0;
     $yypos2191 = $191;
     $192 = $1;
     $193 = (($192) + 44|0);
     $194 = HEAP32[$193>>2]|0;
     $yythunkpos2191 = $194;
     $195 = $1;
     $196 = (_yy_BlankLine($195)|0);
     $197 = ($196|0)!=(0);
     if (!($197)) {
      break;
     }
     $198 = $1;
     $199 = $1;
     $200 = (($199) + 28|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = $1;
     $203 = (($202) + 32|0);
     $204 = HEAP32[$203>>2]|0;
     _yyDo($198,93,$201,$204,49088);
    }
    $205 = $yypos2191;
    $206 = $1;
    $207 = (($206) + 12|0);
    HEAP32[$207>>2] = $205;
    $208 = $yythunkpos2191;
    $209 = $1;
    $210 = (($209) + 44|0);
    HEAP32[$210>>2] = $208;
   }
   if ((label|0) == 29) {
   }
   else if ((label|0) == 31) {
   }
   else if ((label|0) == 33) {
   }
   $211 = $yypos2179;
   $212 = $1;
   $213 = (($212) + 12|0);
   HEAP32[$213>>2] = $211;
   $214 = $yythunkpos2179;
   $215 = $1;
   $216 = (($215) + 44|0);
   HEAP32[$216>>2] = $214;
   $217 = $1;
   $218 = $1;
   $219 = (($218) + 28|0);
   $220 = HEAP32[$219>>2]|0;
   $221 = $1;
   $222 = (($221) + 32|0);
   $223 = HEAP32[$222>>2]|0;
   _yyDo($217,94,$220,$223,49112);
   $224 = $1;
   _yyDo($224,12,3,0,41392);
   $0 = 1;
   $231 = $0;
   STACKTOP = sp;return ($231|0);
  } else {
  }
 } while(0);
 $225 = $yypos0;
 $226 = $1;
 $227 = (($226) + 12|0);
 HEAP32[$227>>2] = $225;
 $228 = $yythunkpos0;
 $229 = $1;
 $230 = (($229) + 44|0);
 HEAP32[$230>>2] = $228;
 $0 = 0;
 $231 = $0;
 STACKTOP = sp;return ($231|0);
}
function _yy_1_BlockQuote($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_mk_pos_list(38,$9,$11,$14)|0);
 $16 = $0;
 $17 = (($16) + 48|0);
 HEAP32[$17>>2] = $15;
 STACKTOP = sp;return;
}
function _yy_Ticks3($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1224 = 0, $yythunkpos0 = 0, $yythunkpos1224 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchString($8,44600)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = (($11) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $yypos1224 = $13;
   $14 = $1;
   $15 = (($14) + 44|0);
   $16 = HEAP32[$15>>2]|0;
   $yythunkpos1224 = $16;
   $17 = $1;
   $18 = (_yymatchChar($17,96)|0);
   $19 = ($18|0)!=(0);
   if ($19) {
    break;
   }
   $20 = $yypos1224;
   $21 = $1;
   $22 = (($21) + 12|0);
   HEAP32[$22>>2] = $20;
   $23 = $yythunkpos1224;
   $24 = $1;
   $25 = (($24) + 44|0);
   HEAP32[$25>>2] = $23;
   $0 = 1;
   $32 = $0;
   STACKTOP = sp;return ($32|0);
  } else {
  }
 } while(0);
 $26 = $yypos0;
 $27 = $1;
 $28 = (($27) + 12|0);
 HEAP32[$28>>2] = $26;
 $29 = $yythunkpos0;
 $30 = $1;
 $31 = (($30) + 44|0);
 HEAP32[$31>>2] = $29;
 $0 = 0;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _yy_FenceType($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yythunkpos0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_Sp($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_RawLine($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = $1;
   $16 = (($15) + 28|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $1;
   $19 = (($18) + 32|0);
   $20 = HEAP32[$19>>2]|0;
   _yyDo($14,95,$17,$20,49008);
   $0 = 1;
   $27 = $0;
   STACKTOP = sp;return ($27|0);
  } else {
  }
 } while(0);
 $21 = $yypos0;
 $22 = $1;
 $23 = (($22) + 12|0);
 HEAP32[$23>>2] = $21;
 $24 = $yythunkpos0;
 $25 = $1;
 $26 = (($25) + 44|0);
 HEAP32[$26>>2] = $24;
 $0 = 0;
 $27 = $0;
 STACKTOP = sp;return ($27|0);
}
function _yy_NonMatchingRawLine($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $yypos0 = 0, $yypos2163 = 0, $yypos2166 = 0, $yypos2167 = 0;
 var $yypos2168 = 0, $yypos2170 = 0, $yythunkpos0 = 0, $yythunkpos2163 = 0, $yythunkpos2166 = 0, $yythunkpos2167 = 0, $yythunkpos2168 = 0, $yythunkpos2170 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos2163 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos2163 = $13;
 while(1) {
  $14 = $1;
  $15 = (($14) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $yypos2166 = $16;
  $17 = $1;
  $18 = (($17) + 44|0);
  $19 = HEAP32[$18>>2]|0;
  $yythunkpos2166 = $19;
  $20 = $1;
  $21 = (($20) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $yypos2167 = $22;
  $23 = $1;
  $24 = (($23) + 44|0);
  $25 = HEAP32[$24>>2]|0;
  $yythunkpos2167 = $25;
  $26 = $1;
  $27 = (_yymatchChar($26,13)|0);
  $28 = ($27|0)!=(0);
  if ($28) {
   label = 4;
   break;
  }
  $29 = $yypos2167;
  $30 = $1;
  $31 = (($30) + 12|0);
  HEAP32[$31>>2] = $29;
  $32 = $yythunkpos2167;
  $33 = $1;
  $34 = (($33) + 44|0);
  HEAP32[$34>>2] = $32;
  $35 = $1;
  $36 = (($35) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $yypos2168 = $37;
  $38 = $1;
  $39 = (($38) + 44|0);
  $40 = HEAP32[$39>>2]|0;
  $yythunkpos2168 = $40;
  $41 = $1;
  $42 = (_yymatchChar($41,10)|0);
  $43 = ($42|0)!=(0);
  if ($43) {
   label = 7;
   break;
  }
  $44 = $yypos2168;
  $45 = $1;
  $46 = (($45) + 12|0);
  HEAP32[$46>>2] = $44;
  $47 = $yythunkpos2168;
  $48 = $1;
  $49 = (($48) + 44|0);
  HEAP32[$49>>2] = $47;
  $50 = $1;
  $51 = (_yymatchDot($50)|0);
  $52 = ($51|0)!=(0);
  if (!($52)) {
   label = 9;
   break;
  }
 }
 if ((label|0) == 4) {
 }
 else if ((label|0) == 7) {
 }
 else if ((label|0) == 9) {
 }
 $53 = $yypos2166;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos2166;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $59 = $1;
 $60 = (_yy_Newline($59)|0);
 $61 = ($60|0)!=(0);
 L13: do {
  if ($61) {
  } else {
   $62 = $yypos2163;
   $63 = $1;
   $64 = (($63) + 12|0);
   HEAP32[$64>>2] = $62;
   $65 = $yythunkpos2163;
   $66 = $1;
   $67 = (($66) + 44|0);
   HEAP32[$67>>2] = $65;
   $68 = $1;
   $69 = (_yymatchDot($68)|0);
   $70 = ($69|0)!=(0);
   do {
    if ($70) {
     while(1) {
      $71 = $1;
      $72 = (($71) + 12|0);
      $73 = HEAP32[$72>>2]|0;
      $yypos2170 = $73;
      $74 = $1;
      $75 = (($74) + 44|0);
      $76 = HEAP32[$75>>2]|0;
      $yythunkpos2170 = $76;
      $77 = $1;
      $78 = (_yymatchDot($77)|0);
      $79 = ($78|0)!=(0);
      if (!($79)) {
       break;
      }
     }
     $80 = $yypos2170;
     $81 = $1;
     $82 = (($81) + 12|0);
     HEAP32[$82>>2] = $80;
     $83 = $yythunkpos2170;
     $84 = $1;
     $85 = (($84) + 44|0);
     HEAP32[$85>>2] = $83;
     $86 = $1;
     $87 = (_yy_Eof($86)|0);
     $88 = ($87|0)!=(0);
     if ($88) {
      break L13;
     } else {
      break;
     }
    } else {
    }
   } while(0);
   $89 = $yypos0;
   $90 = $1;
   $91 = (($90) + 12|0);
   HEAP32[$91>>2] = $89;
   $92 = $yythunkpos0;
   $93 = $1;
   $94 = (($93) + 44|0);
   HEAP32[$94>>2] = $92;
   $0 = 0;
   $95 = $0;
   STACKTOP = sp;return ($95|0);
  }
 } while(0);
 $0 = 1;
 $95 = $0;
 STACKTOP = sp;return ($95|0);
}
function _yy_Ticks4($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1222 = 0, $yythunkpos0 = 0, $yythunkpos1222 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchString($8,44592)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = (($11) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $yypos1222 = $13;
   $14 = $1;
   $15 = (($14) + 44|0);
   $16 = HEAP32[$15>>2]|0;
   $yythunkpos1222 = $16;
   $17 = $1;
   $18 = (_yymatchChar($17,96)|0);
   $19 = ($18|0)!=(0);
   if ($19) {
    break;
   }
   $20 = $yypos1222;
   $21 = $1;
   $22 = (($21) + 12|0);
   HEAP32[$22>>2] = $20;
   $23 = $yythunkpos1222;
   $24 = $1;
   $25 = (($24) + 44|0);
   HEAP32[$25>>2] = $23;
   $0 = 1;
   $32 = $0;
   STACKTOP = sp;return ($32|0);
  } else {
  }
 } while(0);
 $26 = $yypos0;
 $27 = $1;
 $28 = (($27) + 12|0);
 HEAP32[$28>>2] = $26;
 $29 = $yythunkpos0;
 $30 = $1;
 $31 = (($30) + 44|0);
 HEAP32[$31>>2] = $29;
 $0 = 0;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _yy_Ticks5($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1220 = 0, $yythunkpos0 = 0, $yythunkpos1220 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchString($8,44584)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = (($11) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $yypos1220 = $13;
   $14 = $1;
   $15 = (($14) + 44|0);
   $16 = HEAP32[$15>>2]|0;
   $yythunkpos1220 = $16;
   $17 = $1;
   $18 = (_yymatchChar($17,96)|0);
   $19 = ($18|0)!=(0);
   if ($19) {
    break;
   }
   $20 = $yypos1220;
   $21 = $1;
   $22 = (($21) + 12|0);
   HEAP32[$22>>2] = $20;
   $23 = $yythunkpos1220;
   $24 = $1;
   $25 = (($24) + 44|0);
   HEAP32[$25>>2] = $23;
   $0 = 1;
   $32 = $0;
   STACKTOP = sp;return ($32|0);
  } else {
  }
 } while(0);
 $26 = $yypos0;
 $27 = $1;
 $28 = (($27) + 12|0);
 HEAP32[$28>>2] = $26;
 $29 = $yythunkpos0;
 $30 = $1;
 $31 = (($30) + 44|0);
 HEAP32[$31>>2] = $29;
 $0 = 0;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _yy_1_Fenced($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 $14 = $0;
 $15 = (($14) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP16[$16>>1] = 43;
 $17 = $0;
 $18 = (($17) + 52|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + -4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $0;
 $23 = (($22) + 48|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + 12|0);
 HEAP32[$25>>2] = $21;
 STACKTOP = sp;return;
}
function _yy_VerbatimChunk($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $yypos0 = 0, $yypos1170 = 0, $yypos1172 = 0, $yythunkpos0 = 0, $yythunkpos1170 = 0, $yythunkpos1172 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 $9 = $1;
 $10 = (_yy_StartList($9)|0);
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $1;
   _yyDo($12,8,-1,0,41336);
   while(1) {
    $13 = $1;
    $14 = (($13) + 12|0);
    $15 = HEAP32[$14>>2]|0;
    $yypos1170 = $15;
    $16 = $1;
    $17 = (($16) + 44|0);
    $18 = HEAP32[$17>>2]|0;
    $yythunkpos1170 = $18;
    $19 = $1;
    $20 = (_yy_BlankLine($19)|0);
    $21 = ($20|0)!=(0);
    if (!($21)) {
     break;
    }
    $22 = $1;
    $23 = $1;
    $24 = (($23) + 28|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $1;
    $27 = (($26) + 32|0);
    $28 = HEAP32[$27>>2]|0;
    _yyDo($22,96,$25,$28,48920);
   }
   $29 = $yypos1170;
   $30 = $1;
   $31 = (($30) + 12|0);
   HEAP32[$31>>2] = $29;
   $32 = $yythunkpos1170;
   $33 = $1;
   $34 = (($33) + 44|0);
   HEAP32[$34>>2] = $32;
   $35 = $1;
   $36 = (_yy_NonblankIndentedLine($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = $1;
   $40 = (($39) + 28|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $1;
   $43 = (($42) + 32|0);
   $44 = HEAP32[$43>>2]|0;
   _yyDo($38,97,$41,$44,48944);
   while(1) {
    $45 = $1;
    $46 = (($45) + 12|0);
    $47 = HEAP32[$46>>2]|0;
    $yypos1172 = $47;
    $48 = $1;
    $49 = (($48) + 44|0);
    $50 = HEAP32[$49>>2]|0;
    $yythunkpos1172 = $50;
    $51 = $1;
    $52 = (_yy_NonblankIndentedLine($51)|0);
    $53 = ($52|0)!=(0);
    if (!($53)) {
     break;
    }
    $54 = $1;
    $55 = $1;
    $56 = (($55) + 28|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = $1;
    $59 = (($58) + 32|0);
    $60 = HEAP32[$59>>2]|0;
    _yyDo($54,97,$57,$60,48944);
   }
   $61 = $yypos1172;
   $62 = $1;
   $63 = (($62) + 12|0);
   HEAP32[$63>>2] = $61;
   $64 = $yythunkpos1172;
   $65 = $1;
   $66 = (($65) + 44|0);
   HEAP32[$66>>2] = $64;
   $67 = $1;
   $68 = $1;
   $69 = (($68) + 28|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = $1;
   $72 = (($71) + 32|0);
   $73 = HEAP32[$72>>2]|0;
   _yyDo($67,98,$70,$73,48968);
   $74 = $1;
   _yyDo($74,12,1,0,41392);
   $0 = 1;
   $81 = $0;
   STACKTOP = sp;return ($81|0);
  } else {
  }
 } while(0);
 $75 = $yypos0;
 $76 = $1;
 $77 = (($76) + 12|0);
 HEAP32[$77>>2] = $75;
 $78 = $yythunkpos0;
 $79 = $1;
 $80 = (($79) + 44|0);
 HEAP32[$80>>2] = $78;
 $0 = 0;
 $81 = $0;
 STACKTOP = sp;return ($81|0);
}
function _yy_1_Verbatim($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_2_Verbatim($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_mk_str_from_list($9,0)|0);
 $11 = $0;
 $12 = (($11) + 48|0);
 HEAP32[$12>>2] = $10;
 $13 = $0;
 $14 = (($13) + 48|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP16[$15>>1] = 41;
 STACKTOP = sp;return;
}
function _yy_TermLine($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1163 = 0;
 var $yypos1164 = 0, $yypos1166 = 0, $yypos1167 = 0, $yythunkpos0 = 0, $yythunkpos1163 = 0, $yythunkpos1164 = 0, $yythunkpos1166 = 0, $yythunkpos1167 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos1163 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos1163 = $13;
 $14 = $1;
 $15 = (_yymatchChar($14,58)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
  } else {
   $17 = $yypos1163;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos1163;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (($23) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $yypos1164 = $25;
   $26 = $1;
   $27 = (($26) + 44|0);
   $28 = HEAP32[$27>>2]|0;
   $yythunkpos1164 = $28;
   $29 = $1;
   $30 = (_yy_BlankLine($29)|0);
   $31 = ($30|0)!=(0);
   if ($31) {
    break;
   }
   $32 = $yypos1164;
   $33 = $1;
   $34 = (($33) + 12|0);
   HEAP32[$34>>2] = $32;
   $35 = $yythunkpos1164;
   $36 = $1;
   $37 = (($36) + 44|0);
   HEAP32[$37>>2] = $35;
   while(1) {
    $38 = $1;
    $39 = (($38) + 12|0);
    $40 = HEAP32[$39>>2]|0;
    $yypos1166 = $40;
    $41 = $1;
    $42 = (($41) + 44|0);
    $43 = HEAP32[$42>>2]|0;
    $yythunkpos1166 = $43;
    $44 = $1;
    $45 = (($44) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $yypos1167 = $46;
    $47 = $1;
    $48 = (($47) + 44|0);
    $49 = HEAP32[$48>>2]|0;
    $yythunkpos1167 = $49;
    $50 = $1;
    $51 = (_yy_Newline($50)|0);
    $52 = ($51|0)!=(0);
    if ($52) {
     label = 10;
     break;
    }
    $53 = $yypos1167;
    $54 = $1;
    $55 = (($54) + 12|0);
    HEAP32[$55>>2] = $53;
    $56 = $yythunkpos1167;
    $57 = $1;
    $58 = (($57) + 44|0);
    HEAP32[$58>>2] = $56;
    $59 = $1;
    $60 = (_yymatchDot($59)|0);
    $61 = ($60|0)!=(0);
    if (!($61)) {
     label = 12;
     break;
    }
   }
   if ((label|0) == 10) {
   }
   else if ((label|0) == 12) {
   }
   $62 = $yypos1166;
   $63 = $1;
   $64 = (($63) + 12|0);
   HEAP32[$64>>2] = $62;
   $65 = $yythunkpos1166;
   $66 = $1;
   $67 = (($66) + 44|0);
   HEAP32[$67>>2] = $65;
   $68 = $1;
   $69 = (_yy_Newline($68)|0);
   $70 = ($69|0)!=(0);
   if (!($70)) {
    break;
   }
   $0 = 1;
   $77 = $0;
   STACKTOP = sp;return ($77|0);
  }
 } while(0);
 $71 = $yypos0;
 $72 = $1;
 $73 = (($72) + 12|0);
 HEAP32[$73>>2] = $71;
 $74 = $yythunkpos0;
 $75 = $1;
 $76 = (($75) + 44|0);
 HEAP32[$76>>2] = $74;
 $0 = 0;
 $77 = $0;
 STACKTOP = sp;return ($77|0);
}
function _yy_Term($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos1154 = 0, $yypos1155 = 0, $yypos1157 = 0;
 var $yypos1158 = 0, $yypos1159 = 0, $yypos1160 = 0, $yypos1161 = 0, $yythunkpos0 = 0, $yythunkpos1154 = 0, $yythunkpos1155 = 0, $yythunkpos1157 = 0, $yythunkpos1158 = 0, $yythunkpos1159 = 0, $yythunkpos1160 = 0, $yythunkpos1161 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 $9 = $1;
 $10 = (_yy_StartList($9)|0);
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $1;
   _yyDo($12,8,-1,0,41336);
   $13 = $1;
   $14 = (($13) + 12|0);
   $15 = HEAP32[$14>>2]|0;
   $yypos1154 = $15;
   $16 = $1;
   $17 = (($16) + 44|0);
   $18 = HEAP32[$17>>2]|0;
   $yythunkpos1154 = $18;
   $19 = $1;
   $20 = (_yy_BlankLine($19)|0);
   $21 = ($20|0)!=(0);
   if ($21) {
    break;
   }
   $22 = $yypos1154;
   $23 = $1;
   $24 = (($23) + 12|0);
   HEAP32[$24>>2] = $22;
   $25 = $yythunkpos1154;
   $26 = $1;
   $27 = (($26) + 44|0);
   HEAP32[$27>>2] = $25;
   $28 = $1;
   $29 = (($28) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $yypos1155 = $30;
   $31 = $1;
   $32 = (($31) + 44|0);
   $33 = HEAP32[$32>>2]|0;
   $yythunkpos1155 = $33;
   $34 = $1;
   $35 = (_yymatchChar($34,58)|0);
   $36 = ($35|0)!=(0);
   if ($36) {
    break;
   }
   $37 = $yypos1155;
   $38 = $1;
   $39 = (($38) + 12|0);
   HEAP32[$39>>2] = $37;
   $40 = $yythunkpos1155;
   $41 = $1;
   $42 = (($41) + 44|0);
   HEAP32[$42>>2] = $40;
   $43 = $1;
   $44 = (($43) + 12|0);
   $45 = HEAP32[$44>>2]|0;
   $yypos1158 = $45;
   $46 = $1;
   $47 = (($46) + 44|0);
   $48 = HEAP32[$47>>2]|0;
   $yythunkpos1158 = $48;
   $49 = $1;
   $50 = (_yy_Newline($49)|0);
   $51 = ($50|0)!=(0);
   if ($51) {
    break;
   }
   $52 = $yypos1158;
   $53 = $1;
   $54 = (($53) + 12|0);
   HEAP32[$54>>2] = $52;
   $55 = $yythunkpos1158;
   $56 = $1;
   $57 = (($56) + 44|0);
   HEAP32[$57>>2] = $55;
   $58 = $1;
   $59 = (($58) + 12|0);
   $60 = HEAP32[$59>>2]|0;
   $yypos1159 = $60;
   $61 = $1;
   $62 = (($61) + 44|0);
   $63 = HEAP32[$62>>2]|0;
   $yythunkpos1159 = $63;
   $64 = $1;
   $65 = (_yy_Endline($64)|0);
   $66 = ($65|0)!=(0);
   if ($66) {
    break;
   }
   $67 = $yypos1159;
   $68 = $1;
   $69 = (($68) + 12|0);
   HEAP32[$69>>2] = $67;
   $70 = $yythunkpos1159;
   $71 = $1;
   $72 = (($71) + 44|0);
   HEAP32[$72>>2] = $70;
   $73 = $1;
   $74 = (_yy_Inline($73)|0);
   $75 = ($74|0)!=(0);
   if (!($75)) {
    break;
   }
   $76 = $1;
   $77 = $1;
   $78 = (($77) + 28|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $1;
   $81 = (($80) + 32|0);
   $82 = HEAP32[$81>>2]|0;
   _yyDo($76,99,$79,$82,48856);
   while(1) {
    $83 = $1;
    $84 = (($83) + 12|0);
    $85 = HEAP32[$84>>2]|0;
    $yypos1157 = $85;
    $86 = $1;
    $87 = (($86) + 44|0);
    $88 = HEAP32[$87>>2]|0;
    $yythunkpos1157 = $88;
    $89 = $1;
    $90 = (($89) + 12|0);
    $91 = HEAP32[$90>>2]|0;
    $yypos1160 = $91;
    $92 = $1;
    $93 = (($92) + 44|0);
    $94 = HEAP32[$93>>2]|0;
    $yythunkpos1160 = $94;
    $95 = $1;
    $96 = (_yy_Newline($95)|0);
    $97 = ($96|0)!=(0);
    if ($97) {
     label = 20;
     break;
    }
    $98 = $yypos1160;
    $99 = $1;
    $100 = (($99) + 12|0);
    HEAP32[$100>>2] = $98;
    $101 = $yythunkpos1160;
    $102 = $1;
    $103 = (($102) + 44|0);
    HEAP32[$103>>2] = $101;
    $104 = $1;
    $105 = (($104) + 12|0);
    $106 = HEAP32[$105>>2]|0;
    $yypos1161 = $106;
    $107 = $1;
    $108 = (($107) + 44|0);
    $109 = HEAP32[$108>>2]|0;
    $yythunkpos1161 = $109;
    $110 = $1;
    $111 = (_yy_Endline($110)|0);
    $112 = ($111|0)!=(0);
    if ($112) {
     label = 23;
     break;
    }
    $113 = $yypos1161;
    $114 = $1;
    $115 = (($114) + 12|0);
    HEAP32[$115>>2] = $113;
    $116 = $yythunkpos1161;
    $117 = $1;
    $118 = (($117) + 44|0);
    HEAP32[$118>>2] = $116;
    $119 = $1;
    $120 = (_yy_Inline($119)|0);
    $121 = ($120|0)!=(0);
    if (!($121)) {
     label = 25;
     break;
    }
    $122 = $1;
    $123 = $1;
    $124 = (($123) + 28|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = $1;
    $127 = (($126) + 32|0);
    $128 = HEAP32[$127>>2]|0;
    _yyDo($122,99,$125,$128,48856);
   }
   if ((label|0) == 20) {
   }
   else if ((label|0) == 23) {
   }
   else if ((label|0) == 25) {
   }
   $129 = $yypos1157;
   $130 = $1;
   $131 = (($130) + 12|0);
   HEAP32[$131>>2] = $129;
   $132 = $yythunkpos1157;
   $133 = $1;
   $134 = (($133) + 44|0);
   HEAP32[$134>>2] = $132;
   $135 = $1;
   $136 = (_yy_Sp($135)|0);
   $137 = ($136|0)!=(0);
   if (!($137)) {
    break;
   }
   $138 = $1;
   $139 = (_yy_Newline($138)|0);
   $140 = ($139|0)!=(0);
   if (!($140)) {
    break;
   }
   $141 = $1;
   $142 = $1;
   $143 = (($142) + 28|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = $1;
   $146 = (($145) + 32|0);
   $147 = HEAP32[$146>>2]|0;
   _yyDo($141,100,$144,$147,48872);
   $148 = $1;
   _yyDo($148,12,1,0,41392);
   $0 = 1;
   $155 = $0;
   STACKTOP = sp;return ($155|0);
  } else {
  }
 } while(0);
 $149 = $yypos0;
 $150 = $1;
 $151 = (($150) + 12|0);
 HEAP32[$151>>2] = $149;
 $152 = $yythunkpos0;
 $153 = $1;
 $154 = (($153) + 44|0);
 HEAP32[$154>>2] = $152;
 $0 = 0;
 $155 = $0;
 STACKTOP = sp;return ($155|0);
}
function _yy_1_DefinitionList($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_Definition($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos1143 = 0, $yypos1146 = 0, $yypos1147 = 0, $yypos1148 = 0, $yypos1150 = 0, $yypos1152 = 0, $yythunkpos0 = 0, $yythunkpos1143 = 0, $yythunkpos1146 = 0, $yythunkpos1147 = 0, $yythunkpos1148 = 0, $yythunkpos1150 = 0, $yythunkpos1152 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,2,0,41328);
 $9 = $1;
 $10 = (_yy_StartList($9)|0);
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $1;
   _yyDo($12,8,-2,0,41336);
   $13 = $1;
   $14 = (_yy_StartList($13)|0);
   $15 = ($14|0)!=(0);
   if (!($15)) {
    break;
   }
   $16 = $1;
   _yyDo($16,8,-1,0,41336);
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos1143 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos1143 = $22;
   $23 = $1;
   $24 = (_yy_BlankLine($23)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    $26 = $1;
    $27 = $1;
    $28 = (($27) + 28|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = $1;
    $31 = (($30) + 32|0);
    $32 = HEAP32[$31>>2]|0;
    _yyDo($26,101,$29,$32,48744);
   } else {
    $33 = $yypos1143;
    $34 = $1;
    $35 = (($34) + 12|0);
    HEAP32[$35>>2] = $33;
    $36 = $yythunkpos1143;
    $37 = $1;
    $38 = (($37) + 44|0);
    HEAP32[$38>>2] = $36;
   }
   $39 = $1;
   $40 = (_yy_NonindentSpace($39)|0);
   $41 = ($40|0)!=(0);
   if (!($41)) {
    break;
   }
   $42 = $1;
   $43 = (_yymatchChar($42,58)|0);
   $44 = ($43|0)!=(0);
   if (!($44)) {
    break;
   }
   $45 = $1;
   $46 = (_yy_Sp($45)|0);
   $47 = ($46|0)!=(0);
   if (!($47)) {
    break;
   }
   $48 = $1;
   $49 = (_yy_RawLine($48)|0);
   $50 = ($49|0)!=(0);
   if (!($50)) {
    break;
   }
   $51 = $1;
   $52 = $1;
   $53 = (($52) + 28|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $1;
   $56 = (($55) + 32|0);
   $57 = HEAP32[$56>>2]|0;
   _yyDo($51,102,$54,$57,48760);
   while(1) {
    $58 = $1;
    $59 = (($58) + 12|0);
    $60 = HEAP32[$59>>2]|0;
    $yypos1146 = $60;
    $61 = $1;
    $62 = (($61) + 44|0);
    $63 = HEAP32[$62>>2]|0;
    $yythunkpos1146 = $63;
    $64 = $1;
    $65 = (($64) + 12|0);
    $66 = HEAP32[$65>>2]|0;
    $yypos1147 = $66;
    $67 = $1;
    $68 = (($67) + 44|0);
    $69 = HEAP32[$68>>2]|0;
    $yythunkpos1147 = $69;
    $70 = $1;
    $71 = (_yymatchChar($70,58)|0);
    $72 = ($71|0)!=(0);
    if ($72) {
     label = 20;
     break;
    }
    $73 = $yypos1147;
    $74 = $1;
    $75 = (($74) + 12|0);
    HEAP32[$75>>2] = $73;
    $76 = $yythunkpos1147;
    $77 = $1;
    $78 = (($77) + 44|0);
    HEAP32[$78>>2] = $76;
    $79 = $1;
    $80 = (($79) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $yypos1148 = $81;
    $82 = $1;
    $83 = (($82) + 44|0);
    $84 = HEAP32[$83>>2]|0;
    $yythunkpos1148 = $84;
    $85 = $1;
    $86 = (_yy_BlankLine($85)|0);
    $87 = ($86|0)!=(0);
    if ($87) {
     label = 23;
     break;
    }
    $88 = $yypos1148;
    $89 = $1;
    $90 = (($89) + 12|0);
    HEAP32[$90>>2] = $88;
    $91 = $yythunkpos1148;
    $92 = $1;
    $93 = (($92) + 44|0);
    HEAP32[$93>>2] = $91;
    $94 = $1;
    $95 = (_yy_RawLine($94)|0);
    $96 = ($95|0)!=(0);
    if (!($96)) {
     label = 25;
     break;
    }
    $97 = $1;
    $98 = $1;
    $99 = (($98) + 28|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $1;
    $102 = (($101) + 32|0);
    $103 = HEAP32[$102>>2]|0;
    _yyDo($97,103,$100,$103,48776);
   }
   if ((label|0) == 20) {
   }
   else if ((label|0) == 23) {
   }
   else if ((label|0) == 25) {
   }
   $104 = $yypos1146;
   $105 = $1;
   $106 = (($105) + 12|0);
   HEAP32[$106>>2] = $104;
   $107 = $yythunkpos1146;
   $108 = $1;
   $109 = (($108) + 44|0);
   HEAP32[$109>>2] = $107;
   while(1) {
    $110 = $1;
    $111 = (($110) + 12|0);
    $112 = HEAP32[$111>>2]|0;
    $yypos1150 = $112;
    $113 = $1;
    $114 = (($113) + 44|0);
    $115 = HEAP32[$114>>2]|0;
    $yythunkpos1150 = $115;
    $116 = $1;
    $117 = (_yy_BlankLine($116)|0);
    $118 = ($117|0)!=(0);
    if (!($118)) {
     label = 29;
     break;
    }
    $119 = $1;
    $120 = $1;
    $121 = (($120) + 28|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = $1;
    $124 = (($123) + 32|0);
    $125 = HEAP32[$124>>2]|0;
    _yyDo($119,104,$122,$125,48792);
    $126 = $1;
    $127 = (_yy_IndentedLine($126)|0);
    $128 = ($127|0)!=(0);
    if (!($128)) {
     label = 31;
     break;
    }
    $129 = $1;
    $130 = $1;
    $131 = (($130) + 28|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = $1;
    $134 = (($133) + 32|0);
    $135 = HEAP32[$134>>2]|0;
    _yyDo($129,105,$132,$135,48808);
    while(1) {
     $136 = $1;
     $137 = (($136) + 12|0);
     $138 = HEAP32[$137>>2]|0;
     $yypos1152 = $138;
     $139 = $1;
     $140 = (($139) + 44|0);
     $141 = HEAP32[$140>>2]|0;
     $yythunkpos1152 = $141;
     $142 = $1;
     $143 = (_yy_IndentedLine($142)|0);
     $144 = ($143|0)!=(0);
     if (!($144)) {
      break;
     }
     $145 = $1;
     $146 = $1;
     $147 = (($146) + 28|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = $1;
     $150 = (($149) + 32|0);
     $151 = HEAP32[$150>>2]|0;
     _yyDo($145,105,$148,$151,48808);
    }
    $152 = $yypos1152;
    $153 = $1;
    $154 = (($153) + 12|0);
    HEAP32[$154>>2] = $152;
    $155 = $yythunkpos1152;
    $156 = $1;
    $157 = (($156) + 44|0);
    HEAP32[$157>>2] = $155;
    $158 = $1;
    $159 = $1;
    $160 = (($159) + 28|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = $1;
    $163 = (($162) + 32|0);
    $164 = HEAP32[$163>>2]|0;
    _yyDo($158,106,$161,$164,48824);
   }
   if ((label|0) == 29) {
   }
   else if ((label|0) == 31) {
   }
   $165 = $yypos1150;
   $166 = $1;
   $167 = (($166) + 12|0);
   HEAP32[$167>>2] = $165;
   $168 = $yythunkpos1150;
   $169 = $1;
   $170 = (($169) + 44|0);
   HEAP32[$170>>2] = $168;
   $171 = $1;
   $172 = $1;
   $173 = (($172) + 28|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = $1;
   $176 = (($175) + 32|0);
   $177 = HEAP32[$176>>2]|0;
   _yyDo($171,107,$174,$177,48840);
   $178 = $1;
   _yyDo($178,12,2,0,41392);
   $0 = 1;
   $185 = $0;
   STACKTOP = sp;return ($185|0);
  } else {
  }
 } while(0);
 $179 = $yypos0;
 $180 = $1;
 $181 = (($180) + 12|0);
 HEAP32[$181>>2] = $179;
 $182 = $yythunkpos0;
 $183 = $1;
 $184 = (($183) + 44|0);
 HEAP32[$184>>2] = $182;
 $0 = 0;
 $185 = $0;
 STACKTOP = sp;return ($185|0);
}
function _yy_2_DefinitionList($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_3_DefinitionList($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_mk_list(1,$9)|0);
 $11 = $0;
 $12 = (($11) + 48|0);
 HEAP32[$12>>2] = $10;
 $13 = $0;
 $14 = (($13) + 48|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP16[$15>>1] = 44;
 STACKTOP = sp;return;
}
function _yy_RawNoteReference($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos1251 = 0, $yypos1254 = 0, $yypos1255 = 0, $yypos1256 = 0, $yypos1257 = 0, $yypos1258 = 0, $yythunkpos0 = 0, $yythunkpos1251 = 0, $yythunkpos1254 = 0, $yythunkpos1255 = 0, $yythunkpos1256 = 0, $yythunkpos1257 = 0, $yythunkpos1258 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos1251 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos1251 = $13;
 $14 = $1;
 $15 = (_yymatchString($14,44608)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
   label = 7;
  } else {
   $17 = $yypos1251;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos1251;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yymatchString($23,45008)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    label = 7;
    break;
   } else {
    break;
   }
  }
 } while(0);
 do {
  if ((label|0) == 7) {
   $26 = $1;
   $27 = $1;
   $28 = (($27) + 28|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $1;
   $31 = (($30) + 32|0);
   $32 = HEAP32[$31>>2]|0;
   (_yyText($26,$29,$32)|0);
   $33 = $1;
   $34 = (($33) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $1;
   $37 = (($36) + 28|0);
   HEAP32[$37>>2] = $35;
   $38 = $1;
   $39 = (($38) + 12|0);
   $40 = HEAP32[$39>>2]|0;
   $yypos1255 = $40;
   $41 = $1;
   $42 = (($41) + 44|0);
   $43 = HEAP32[$42>>2]|0;
   $yythunkpos1255 = $43;
   $44 = $1;
   $45 = (_yy_Newline($44)|0);
   $46 = ($45|0)!=(0);
   if ($46) {
    break;
   }
   $47 = $yypos1255;
   $48 = $1;
   $49 = (($48) + 12|0);
   HEAP32[$49>>2] = $47;
   $50 = $yythunkpos1255;
   $51 = $1;
   $52 = (($51) + 44|0);
   HEAP32[$52>>2] = $50;
   $53 = $1;
   $54 = (($53) + 12|0);
   $55 = HEAP32[$54>>2]|0;
   $yypos1256 = $55;
   $56 = $1;
   $57 = (($56) + 44|0);
   $58 = HEAP32[$57>>2]|0;
   $yythunkpos1256 = $58;
   $59 = $1;
   $60 = (_yymatchChar($59,93)|0);
   $61 = ($60|0)!=(0);
   if ($61) {
    break;
   }
   $62 = $yypos1256;
   $63 = $1;
   $64 = (($63) + 12|0);
   HEAP32[$64>>2] = $62;
   $65 = $yythunkpos1256;
   $66 = $1;
   $67 = (($66) + 44|0);
   HEAP32[$67>>2] = $65;
   $68 = $1;
   $69 = (_yymatchDot($68)|0);
   $70 = ($69|0)!=(0);
   if (!($70)) {
    break;
   }
   while(1) {
    $71 = $1;
    $72 = (($71) + 12|0);
    $73 = HEAP32[$72>>2]|0;
    $yypos1254 = $73;
    $74 = $1;
    $75 = (($74) + 44|0);
    $76 = HEAP32[$75>>2]|0;
    $yythunkpos1254 = $76;
    $77 = $1;
    $78 = (($77) + 12|0);
    $79 = HEAP32[$78>>2]|0;
    $yypos1257 = $79;
    $80 = $1;
    $81 = (($80) + 44|0);
    $82 = HEAP32[$81>>2]|0;
    $yythunkpos1257 = $82;
    $83 = $1;
    $84 = (_yy_Newline($83)|0);
    $85 = ($84|0)!=(0);
    if ($85) {
     label = 19;
     break;
    }
    $86 = $yypos1257;
    $87 = $1;
    $88 = (($87) + 12|0);
    HEAP32[$88>>2] = $86;
    $89 = $yythunkpos1257;
    $90 = $1;
    $91 = (($90) + 44|0);
    HEAP32[$91>>2] = $89;
    $92 = $1;
    $93 = (($92) + 12|0);
    $94 = HEAP32[$93>>2]|0;
    $yypos1258 = $94;
    $95 = $1;
    $96 = (($95) + 44|0);
    $97 = HEAP32[$96>>2]|0;
    $yythunkpos1258 = $97;
    $98 = $1;
    $99 = (_yymatchChar($98,93)|0);
    $100 = ($99|0)!=(0);
    if ($100) {
     label = 22;
     break;
    }
    $101 = $yypos1258;
    $102 = $1;
    $103 = (($102) + 12|0);
    HEAP32[$103>>2] = $101;
    $104 = $yythunkpos1258;
    $105 = $1;
    $106 = (($105) + 44|0);
    HEAP32[$106>>2] = $104;
    $107 = $1;
    $108 = (_yymatchDot($107)|0);
    $109 = ($108|0)!=(0);
    if (!($109)) {
     label = 24;
     break;
    }
   }
   if ((label|0) == 19) {
   }
   else if ((label|0) == 22) {
   }
   else if ((label|0) == 24) {
   }
   $110 = $yypos1254;
   $111 = $1;
   $112 = (($111) + 12|0);
   HEAP32[$112>>2] = $110;
   $113 = $yythunkpos1254;
   $114 = $1;
   $115 = (($114) + 44|0);
   HEAP32[$115>>2] = $113;
   $116 = $1;
   $117 = $1;
   $118 = (($117) + 28|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $1;
   $121 = (($120) + 32|0);
   $122 = HEAP32[$121>>2]|0;
   (_yyText($116,$119,$122)|0);
   $123 = $1;
   $124 = (($123) + 12|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = $1;
   $127 = (($126) + 32|0);
   HEAP32[$127>>2] = $125;
   $128 = $1;
   $129 = (_yymatchChar($128,93)|0);
   $130 = ($129|0)!=(0);
   if (!($130)) {
    break;
   }
   $131 = $1;
   $132 = $1;
   $133 = (($132) + 28|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = $1;
   $136 = (($135) + 32|0);
   $137 = HEAP32[$136>>2]|0;
   _yyDo($131,108,$134,$137,48504);
   $0 = 1;
   $144 = $0;
   STACKTOP = sp;return ($144|0);
  }
 } while(0);
 $138 = $yypos0;
 $139 = $1;
 $140 = (($139) + 12|0);
 HEAP32[$140>>2] = $138;
 $141 = $yythunkpos0;
 $142 = $1;
 $143 = (($142) + 44|0);
 HEAP32[$143>>2] = $141;
 $0 = 0;
 $144 = $0;
 STACKTOP = sp;return ($144|0);
}
function _yy_GlossaryTerm($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos1245 = 0, $yypos1246 = 0, $yypos1247 = 0, $yypos1248 = 0, $yypos1249 = 0, $yythunkpos0 = 0, $yythunkpos1245 = 0, $yythunkpos1246 = 0, $yythunkpos1247 = 0, $yythunkpos1248 = 0, $yythunkpos1249 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = $1;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($12) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 (_yyText($8,$11,$14)|0);
 $15 = $1;
 $16 = (($15) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = (($18) + 28|0);
 HEAP32[$19>>2] = $17;
 $20 = $1;
 $21 = (($20) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $yypos1246 = $22;
 $23 = $1;
 $24 = (($23) + 44|0);
 $25 = HEAP32[$24>>2]|0;
 $yythunkpos1246 = $25;
 $26 = $1;
 $27 = (_yy_Newline($26)|0);
 $28 = ($27|0)!=(0);
 do {
  if ($28) {
  } else {
   $29 = $yypos1246;
   $30 = $1;
   $31 = (($30) + 12|0);
   HEAP32[$31>>2] = $29;
   $32 = $yythunkpos1246;
   $33 = $1;
   $34 = (($33) + 44|0);
   HEAP32[$34>>2] = $32;
   $35 = $1;
   $36 = (($35) + 12|0);
   $37 = HEAP32[$36>>2]|0;
   $yypos1247 = $37;
   $38 = $1;
   $39 = (($38) + 44|0);
   $40 = HEAP32[$39>>2]|0;
   $yythunkpos1247 = $40;
   $41 = $1;
   $42 = (_yymatchChar($41,40)|0);
   $43 = ($42|0)!=(0);
   if ($43) {
    break;
   }
   $44 = $yypos1247;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos1247;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchDot($50)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   while(1) {
    $53 = $1;
    $54 = (($53) + 12|0);
    $55 = HEAP32[$54>>2]|0;
    $yypos1245 = $55;
    $56 = $1;
    $57 = (($56) + 44|0);
    $58 = HEAP32[$57>>2]|0;
    $yythunkpos1245 = $58;
    $59 = $1;
    $60 = (($59) + 12|0);
    $61 = HEAP32[$60>>2]|0;
    $yypos1248 = $61;
    $62 = $1;
    $63 = (($62) + 44|0);
    $64 = HEAP32[$63>>2]|0;
    $yythunkpos1248 = $64;
    $65 = $1;
    $66 = (_yy_Newline($65)|0);
    $67 = ($66|0)!=(0);
    if ($67) {
     label = 13;
     break;
    }
    $68 = $yypos1248;
    $69 = $1;
    $70 = (($69) + 12|0);
    HEAP32[$70>>2] = $68;
    $71 = $yythunkpos1248;
    $72 = $1;
    $73 = (($72) + 44|0);
    HEAP32[$73>>2] = $71;
    $74 = $1;
    $75 = (($74) + 12|0);
    $76 = HEAP32[$75>>2]|0;
    $yypos1249 = $76;
    $77 = $1;
    $78 = (($77) + 44|0);
    $79 = HEAP32[$78>>2]|0;
    $yythunkpos1249 = $79;
    $80 = $1;
    $81 = (_yymatchChar($80,40)|0);
    $82 = ($81|0)!=(0);
    if ($82) {
     label = 16;
     break;
    }
    $83 = $yypos1249;
    $84 = $1;
    $85 = (($84) + 12|0);
    HEAP32[$85>>2] = $83;
    $86 = $yythunkpos1249;
    $87 = $1;
    $88 = (($87) + 44|0);
    HEAP32[$88>>2] = $86;
    $89 = $1;
    $90 = (_yymatchDot($89)|0);
    $91 = ($90|0)!=(0);
    if (!($91)) {
     label = 18;
     break;
    }
   }
   if ((label|0) == 13) {
   }
   else if ((label|0) == 16) {
   }
   else if ((label|0) == 18) {
   }
   $92 = $yypos1245;
   $93 = $1;
   $94 = (($93) + 12|0);
   HEAP32[$94>>2] = $92;
   $95 = $yythunkpos1245;
   $96 = $1;
   $97 = (($96) + 44|0);
   HEAP32[$97>>2] = $95;
   $98 = $1;
   $99 = $1;
   $100 = (($99) + 28|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = $1;
   $103 = (($102) + 32|0);
   $104 = HEAP32[$103>>2]|0;
   (_yyText($98,$101,$104)|0);
   $105 = $1;
   $106 = (($105) + 12|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $1;
   $109 = (($108) + 32|0);
   HEAP32[$109>>2] = $107;
   $110 = $1;
   $111 = $1;
   $112 = (($111) + 28|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = $1;
   $115 = (($114) + 32|0);
   $116 = HEAP32[$115>>2]|0;
   _yyDo($110,109,$113,$116,48648);
   $0 = 1;
   $123 = $0;
   STACKTOP = sp;return ($123|0);
  }
 } while(0);
 $117 = $yypos0;
 $118 = $1;
 $119 = (($118) + 12|0);
 HEAP32[$119>>2] = $117;
 $120 = $yythunkpos0;
 $121 = $1;
 $122 = (($121) + 44|0);
 HEAP32[$122>>2] = $120;
 $0 = 0;
 $123 = $0;
 STACKTOP = sp;return ($123|0);
}
function _yy_1_Glossary($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -8|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_GlossarySortKey($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $yypos0 = 0, $yypos1240 = 0, $yypos1241 = 0;
 var $yypos1242 = 0, $yythunkpos0 = 0, $yythunkpos1240 = 0, $yythunkpos1241 = 0, $yythunkpos1242 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,40)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = $1;
   $13 = (($12) + 28|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $1;
   $16 = (($15) + 32|0);
   $17 = HEAP32[$16>>2]|0;
   (_yyText($11,$14,$17)|0);
   $18 = $1;
   $19 = (($18) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $1;
   $22 = (($21) + 28|0);
   HEAP32[$22>>2] = $20;
   while(1) {
    $23 = $1;
    $24 = (($23) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $yypos1240 = $25;
    $26 = $1;
    $27 = (($26) + 44|0);
    $28 = HEAP32[$27>>2]|0;
    $yythunkpos1240 = $28;
    $29 = $1;
    $30 = (($29) + 12|0);
    $31 = HEAP32[$30>>2]|0;
    $yypos1241 = $31;
    $32 = $1;
    $33 = (($32) + 44|0);
    $34 = HEAP32[$33>>2]|0;
    $yythunkpos1241 = $34;
    $35 = $1;
    $36 = (_yymatchChar($35,41)|0);
    $37 = ($36|0)!=(0);
    if ($37) {
     label = 7;
     break;
    }
    $38 = $yypos1241;
    $39 = $1;
    $40 = (($39) + 12|0);
    HEAP32[$40>>2] = $38;
    $41 = $yythunkpos1241;
    $42 = $1;
    $43 = (($42) + 44|0);
    HEAP32[$43>>2] = $41;
    $44 = $1;
    $45 = (($44) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $yypos1242 = $46;
    $47 = $1;
    $48 = (($47) + 44|0);
    $49 = HEAP32[$48>>2]|0;
    $yythunkpos1242 = $49;
    $50 = $1;
    $51 = (_yy_Newline($50)|0);
    $52 = ($51|0)!=(0);
    if ($52) {
     label = 10;
     break;
    }
    $53 = $yypos1242;
    $54 = $1;
    $55 = (($54) + 12|0);
    HEAP32[$55>>2] = $53;
    $56 = $yythunkpos1242;
    $57 = $1;
    $58 = (($57) + 44|0);
    HEAP32[$58>>2] = $56;
    $59 = $1;
    $60 = (_yymatchDot($59)|0);
    $61 = ($60|0)!=(0);
    if (!($61)) {
     label = 12;
     break;
    }
   }
   if ((label|0) == 7) {
   }
   else if ((label|0) == 10) {
   }
   else if ((label|0) == 12) {
   }
   $62 = $yypos1240;
   $63 = $1;
   $64 = (($63) + 12|0);
   HEAP32[$64>>2] = $62;
   $65 = $yythunkpos1240;
   $66 = $1;
   $67 = (($66) + 44|0);
   HEAP32[$67>>2] = $65;
   $68 = $1;
   $69 = $1;
   $70 = (($69) + 28|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $1;
   $73 = (($72) + 32|0);
   $74 = HEAP32[$73>>2]|0;
   (_yyText($68,$71,$74)|0);
   $75 = $1;
   $76 = (($75) + 12|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $1;
   $79 = (($78) + 32|0);
   HEAP32[$79>>2] = $77;
   $80 = $1;
   $81 = (_yymatchChar($80,41)|0);
   $82 = ($81|0)!=(0);
   if (!($82)) {
    break;
   }
   $83 = $1;
   $84 = $1;
   $85 = (($84) + 28|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = $1;
   $88 = (($87) + 32|0);
   $89 = HEAP32[$88>>2]|0;
   _yyDo($83,110,$86,$89,48624);
   $0 = 1;
   $96 = $0;
   STACKTOP = sp;return ($96|0);
  } else {
  }
 } while(0);
 $90 = $yypos0;
 $91 = $1;
 $92 = (($91) + 12|0);
 HEAP32[$92>>2] = $90;
 $93 = $yythunkpos0;
 $94 = $1;
 $95 = (($94) + 44|0);
 HEAP32[$95>>2] = $93;
 $0 = 0;
 $96 = $0;
 STACKTOP = sp;return ($96|0);
}
function _yy_2_Glossary($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -8|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_RawNoteBlock($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos1231 = 0;
 var $yypos1232 = 0, $yypos1233 = 0, $yypos1234 = 0, $yypos1235 = 0, $yypos1237 = 0, $yythunkpos0 = 0, $yythunkpos1231 = 0, $yythunkpos1232 = 0, $yythunkpos1233 = 0, $yythunkpos1234 = 0, $yythunkpos1235 = 0, $yythunkpos1237 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 $9 = $1;
 $10 = (_yy_StartList($9)|0);
 $11 = ($10|0)!=(0);
 L1: do {
  if ($11) {
   $12 = $1;
   _yyDo($12,8,-1,0,41336);
   $13 = $1;
   $14 = (($13) + 12|0);
   $15 = HEAP32[$14>>2]|0;
   $yypos1232 = $15;
   $16 = $1;
   $17 = (($16) + 44|0);
   $18 = HEAP32[$17>>2]|0;
   $yythunkpos1232 = $18;
   $19 = $1;
   $20 = (_yy_BlankLine($19)|0);
   $21 = ($20|0)!=(0);
   if ($21) {
    break;
   }
   $22 = $yypos1232;
   $23 = $1;
   $24 = (($23) + 12|0);
   HEAP32[$24>>2] = $22;
   $25 = $yythunkpos1232;
   $26 = $1;
   $27 = (($26) + 44|0);
   HEAP32[$27>>2] = $25;
   $28 = $1;
   $29 = (($28) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $yypos1233 = $30;
   $31 = $1;
   $32 = (($31) + 44|0);
   $33 = HEAP32[$32>>2]|0;
   $yythunkpos1233 = $33;
   $34 = $1;
   $35 = (_yy_NonindentSpace($34)|0);
   $36 = ($35|0)!=(0);
   do {
    if ($36) {
     $37 = $1;
     $38 = (_yy_RawNoteReference($37)|0);
     $39 = ($38|0)!=(0);
     if (!($39)) {
      break;
     }
     $40 = $1;
     $41 = (_yymatchChar($40,58)|0);
     $42 = ($41|0)!=(0);
     if ($42) {
      break L1;
     } else {
      break;
     }
    } else {
    }
   } while(0);
   $43 = $yypos1233;
   $44 = $1;
   $45 = (($44) + 12|0);
   HEAP32[$45>>2] = $43;
   $46 = $yythunkpos1233;
   $47 = $1;
   $48 = (($47) + 44|0);
   HEAP32[$48>>2] = $46;
   $49 = $1;
   $50 = (_yy_OptionallyIndentedLine($49)|0);
   $51 = ($50|0)!=(0);
   if (!($51)) {
    break;
   }
   $52 = $1;
   $53 = $1;
   $54 = (($53) + 28|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = $1;
   $57 = (($56) + 32|0);
   $58 = HEAP32[$57>>2]|0;
   _yyDo($52,111,$55,$58,48432);
   L20: while(1) {
    $59 = $1;
    $60 = (($59) + 12|0);
    $61 = HEAP32[$60>>2]|0;
    $yypos1231 = $61;
    $62 = $1;
    $63 = (($62) + 44|0);
    $64 = HEAP32[$63>>2]|0;
    $yythunkpos1231 = $64;
    $65 = $1;
    $66 = (($65) + 12|0);
    $67 = HEAP32[$66>>2]|0;
    $yypos1234 = $67;
    $68 = $1;
    $69 = (($68) + 44|0);
    $70 = HEAP32[$69>>2]|0;
    $yythunkpos1234 = $70;
    $71 = $1;
    $72 = (_yy_BlankLine($71)|0);
    $73 = ($72|0)!=(0);
    if ($73) {
     label = 18;
     break;
    }
    $74 = $yypos1234;
    $75 = $1;
    $76 = (($75) + 12|0);
    HEAP32[$76>>2] = $74;
    $77 = $yythunkpos1234;
    $78 = $1;
    $79 = (($78) + 44|0);
    HEAP32[$79>>2] = $77;
    $80 = $1;
    $81 = (($80) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $yypos1235 = $82;
    $83 = $1;
    $84 = (($83) + 44|0);
    $85 = HEAP32[$84>>2]|0;
    $yythunkpos1235 = $85;
    $86 = $1;
    $87 = (_yy_NonindentSpace($86)|0);
    $88 = ($87|0)!=(0);
    do {
     if ($88) {
      $89 = $1;
      $90 = (_yy_RawNoteReference($89)|0);
      $91 = ($90|0)!=(0);
      if (!($91)) {
       break;
      }
      $92 = $1;
      $93 = (_yymatchChar($92,58)|0);
      $94 = ($93|0)!=(0);
      if ($94) {
       label = 25;
       break L20;
      }
     } else {
     }
    } while(0);
    $95 = $yypos1235;
    $96 = $1;
    $97 = (($96) + 12|0);
    HEAP32[$97>>2] = $95;
    $98 = $yythunkpos1235;
    $99 = $1;
    $100 = (($99) + 44|0);
    HEAP32[$100>>2] = $98;
    $101 = $1;
    $102 = (_yy_OptionallyIndentedLine($101)|0);
    $103 = ($102|0)!=(0);
    if (!($103)) {
     label = 27;
     break;
    }
    $104 = $1;
    $105 = $1;
    $106 = (($105) + 28|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = $1;
    $109 = (($108) + 32|0);
    $110 = HEAP32[$109>>2]|0;
    _yyDo($104,111,$107,$110,48432);
   }
   if ((label|0) == 18) {
   }
   else if ((label|0) == 25) {
   }
   else if ((label|0) == 27) {
   }
   $111 = $yypos1231;
   $112 = $1;
   $113 = (($112) + 12|0);
   HEAP32[$113>>2] = $111;
   $114 = $yythunkpos1231;
   $115 = $1;
   $116 = (($115) + 44|0);
   HEAP32[$116>>2] = $114;
   $117 = $1;
   $118 = $1;
   $119 = (($118) + 28|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = $1;
   $122 = (($121) + 32|0);
   $123 = HEAP32[$122>>2]|0;
   (_yyText($117,$120,$123)|0);
   $124 = $1;
   $125 = (($124) + 12|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = $1;
   $128 = (($127) + 28|0);
   HEAP32[$128>>2] = $126;
   while(1) {
    $129 = $1;
    $130 = (($129) + 12|0);
    $131 = HEAP32[$130>>2]|0;
    $yypos1237 = $131;
    $132 = $1;
    $133 = (($132) + 44|0);
    $134 = HEAP32[$133>>2]|0;
    $yythunkpos1237 = $134;
    $135 = $1;
    $136 = (_yy_BlankLine($135)|0);
    $137 = ($136|0)!=(0);
    if (!($137)) {
     break;
    }
   }
   $138 = $yypos1237;
   $139 = $1;
   $140 = (($139) + 12|0);
   HEAP32[$140>>2] = $138;
   $141 = $yythunkpos1237;
   $142 = $1;
   $143 = (($142) + 44|0);
   HEAP32[$143>>2] = $141;
   $144 = $1;
   $145 = $1;
   $146 = (($145) + 28|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = $1;
   $149 = (($148) + 32|0);
   $150 = HEAP32[$149>>2]|0;
   (_yyText($144,$147,$150)|0);
   $151 = $1;
   $152 = (($151) + 12|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = $1;
   $155 = (($154) + 32|0);
   HEAP32[$155>>2] = $153;
   $156 = $1;
   $157 = $1;
   $158 = (($157) + 28|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = $1;
   $161 = (($160) + 32|0);
   $162 = HEAP32[$161>>2]|0;
   _yyDo($156,112,$159,$162,48456);
   $163 = $1;
   $164 = $1;
   $165 = (($164) + 28|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = $1;
   $168 = (($167) + 32|0);
   $169 = HEAP32[$168>>2]|0;
   _yyDo($163,113,$166,$169,48480);
   $170 = $1;
   _yyDo($170,12,1,0,41392);
   $0 = 1;
   $177 = $0;
   STACKTOP = sp;return ($177|0);
  } else {
  }
 } while(0);
 $171 = $yypos0;
 $172 = $1;
 $173 = (($172) + 12|0);
 HEAP32[$173>>2] = $171;
 $174 = $yythunkpos0;
 $175 = $1;
 $176 = (($175) + 44|0);
 HEAP32[$176>>2] = $174;
 $0 = 0;
 $177 = $0;
 STACKTOP = sp;return ($177|0);
}
function _yy_3_Glossary($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -8|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_Indent($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1913 = 0, $yythunkpos0 = 0, $yythunkpos1913 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos1913 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos1913 = $13;
 $14 = $1;
 $15 = (_yymatchChar($14,9)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
  } else {
   $17 = $yypos1913;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos1913;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yymatchString($23,47880)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    break;
   }
   $26 = $yypos0;
   $27 = $1;
   $28 = (($27) + 12|0);
   HEAP32[$28>>2] = $26;
   $29 = $yythunkpos0;
   $30 = $1;
   $31 = (($30) + 44|0);
   HEAP32[$31>>2] = $29;
   $0 = 0;
   $32 = $0;
   STACKTOP = sp;return ($32|0);
  }
 } while(0);
 $0 = 1;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _yy_4_Glossary($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -8|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_5_Glossary($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $label = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = HEAP32[$12>>2]|0;
 $14 = $3;
 $15 = (($14) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_mk_pos_str($11,$13,$16)|0);
 $label = $17;
 $18 = $label;
 HEAP16[$18>>1] = 66;
 $19 = $label;
 $20 = $0;
 $21 = (($20) + 52|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + -8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (_cons($19,$24)|0);
 $26 = $0;
 $27 = (($26) + 52|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + -8|0);
 HEAP32[$29>>2] = $25;
 $30 = $0;
 $31 = (($30) + 52|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + -8|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $3;
 $36 = HEAP32[$35>>2]|0;
 $37 = $3;
 $38 = (($37) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (_mk_pos_list(69,$34,$36,$39)|0);
 $41 = $0;
 $42 = (($41) + 48|0);
 HEAP32[$42>>2] = $40;
 $43 = $0;
 $44 = (($43) + 52|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + -4|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47) + 4|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (___strdup($49)|0);
 $51 = $0;
 $52 = (($51) + 48|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (($53) + 4|0);
 HEAP32[$54>>2] = $50;
 $55 = $0;
 $56 = (($55) + 52|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (($57) + -4|0);
 $59 = HEAP32[$58>>2]|0;
 _free_node($59);
 STACKTOP = sp;return;
}
function _yy_1_Note($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_2_Note($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_3_Note($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $label = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = HEAP32[$12>>2]|0;
 $14 = $3;
 $15 = (($14) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_mk_pos_str($11,$13,$16)|0);
 $label = $17;
 $18 = $label;
 HEAP16[$18>>1] = 65;
 $19 = $label;
 $20 = $0;
 $21 = (($20) + 52|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + -4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (_cons($19,$24)|0);
 $26 = $0;
 $27 = (($26) + 52|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + -4|0);
 HEAP32[$29>>2] = $25;
 $30 = $0;
 $31 = (($30) + 52|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + -4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $3;
 $36 = HEAP32[$35>>2]|0;
 $37 = $3;
 $38 = (($37) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (_mk_pos_list(62,$34,$36,$39)|0);
 $41 = $0;
 $42 = (($41) + 48|0);
 HEAP32[$42>>2] = $40;
 $43 = $0;
 $44 = (($43) + 52|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + -8|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47) + 4|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (___strdup($49)|0);
 $51 = $0;
 $52 = (($51) + 48|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (($53) + 4|0);
 HEAP32[$54>>2] = $50;
 $55 = $0;
 $56 = (($55) + 52|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (($57) + -8|0);
 $59 = HEAP32[$58>>2]|0;
 _free_node($59);
 STACKTOP = sp;return;
}
function _yy_Label($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos1396 = 0, $yypos1397 = 0, $yypos1399 = 0, $yypos1400 = 0, $yypos1401 = 0, $yypos1403 = 0;
 var $yypos1404 = 0, $yythunkpos0 = 0, $yythunkpos1396 = 0, $yythunkpos1397 = 0, $yythunkpos1399 = 0, $yythunkpos1400 = 0, $yythunkpos1401 = 0, $yythunkpos1403 = 0, $yythunkpos1404 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 $9 = $1;
 $10 = $1;
 $11 = (($10) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $1;
 $14 = (($13) + 32|0);
 $15 = HEAP32[$14>>2]|0;
 (_yyText($9,$12,$15)|0);
 $16 = $1;
 $17 = (($16) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $1;
 $20 = (($19) + 28|0);
 HEAP32[$20>>2] = $18;
 $21 = $1;
 $22 = (_yymatchChar($21,91)|0);
 $23 = ($22|0)!=(0);
 L2: do {
  if ($23) {
   $24 = $1;
   $25 = (($24) + 12|0);
   $26 = HEAP32[$25>>2]|0;
   $yypos1396 = $26;
   $27 = $1;
   $28 = (($27) + 44|0);
   $29 = HEAP32[$28>>2]|0;
   $yythunkpos1396 = $29;
   $30 = $1;
   $31 = (_yymatchChar($30,91)|0);
   $32 = ($31|0)!=(0);
   if ($32) {
    break;
   }
   $33 = $yypos1396;
   $34 = $1;
   $35 = (($34) + 12|0);
   HEAP32[$35>>2] = $33;
   $36 = $yythunkpos1396;
   $37 = $1;
   $38 = (($37) + 44|0);
   HEAP32[$38>>2] = $36;
   $39 = $1;
   $40 = (($39) + 12|0);
   $41 = HEAP32[$40>>2]|0;
   $yypos1397 = $41;
   $42 = $1;
   $43 = (($42) + 44|0);
   $44 = HEAP32[$43>>2]|0;
   $yythunkpos1397 = $44;
   $45 = $1;
   $46 = (($45) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $yypos1399 = $47;
   $48 = $1;
   $49 = (($48) + 44|0);
   $50 = HEAP32[$49>>2]|0;
   $yythunkpos1399 = $50;
   $51 = $1;
   $52 = (_yymatchChar($51,94)|0);
   $53 = ($52|0)!=(0);
   do {
    if ($53) {
     label = 16;
    } else {
     $54 = $yypos1399;
     $55 = $1;
     $56 = (($55) + 12|0);
     HEAP32[$56>>2] = $54;
     $57 = $yythunkpos1399;
     $58 = $1;
     $59 = (($58) + 44|0);
     HEAP32[$59>>2] = $57;
     $60 = $1;
     $61 = (($60) + 12|0);
     $62 = HEAP32[$61>>2]|0;
     $yypos1400 = $62;
     $63 = $1;
     $64 = (($63) + 44|0);
     $65 = HEAP32[$64>>2]|0;
     $yythunkpos1400 = $65;
     $66 = $1;
     $67 = (_yymatchChar($66,35)|0);
     $68 = ($67|0)!=(0);
     if ($68) {
      label = 16;
      break;
     }
     $69 = $yypos1400;
     $70 = $1;
     $71 = (($70) + 12|0);
     HEAP32[$71>>2] = $69;
     $72 = $yythunkpos1400;
     $73 = $1;
     $74 = (($73) + 44|0);
     HEAP32[$74>>2] = $72;
     $75 = $1;
     $76 = $1;
     $77 = (($76) + 28|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = $1;
     $80 = (($79) + 32|0);
     $81 = HEAP32[$80>>2]|0;
     (_yyText($75,$78,$81)|0);
     $82 = $1;
     $83 = (($82) + 64|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = (($84) + 12|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = (_extension(32,$86)|0);
     if ($87) {
      break;
     } else {
      label = 16;
      break;
     }
    }
   } while(0);
   do {
    if ((label|0) == 16) {
     $88 = $yypos1397;
     $89 = $1;
     $90 = (($89) + 12|0);
     HEAP32[$90>>2] = $88;
     $91 = $yythunkpos1397;
     $92 = $1;
     $93 = (($92) + 44|0);
     HEAP32[$93>>2] = $91;
     $94 = $1;
     $95 = (($94) + 12|0);
     $96 = HEAP32[$95>>2]|0;
     $yypos1401 = $96;
     $97 = $1;
     $98 = (($97) + 44|0);
     $99 = HEAP32[$98>>2]|0;
     $yythunkpos1401 = $99;
     $100 = $1;
     $101 = (_yymatchDot($100)|0);
     $102 = ($101|0)!=(0);
     if (!($102)) {
      break L2;
     }
     $103 = $yypos1401;
     $104 = $1;
     $105 = (($104) + 12|0);
     HEAP32[$105>>2] = $103;
     $106 = $yythunkpos1401;
     $107 = $1;
     $108 = (($107) + 44|0);
     HEAP32[$108>>2] = $106;
     $109 = $1;
     $110 = $1;
     $111 = (($110) + 28|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = $1;
     $114 = (($113) + 32|0);
     $115 = HEAP32[$114>>2]|0;
     (_yyText($109,$112,$115)|0);
     $116 = $1;
     $117 = (($116) + 64|0);
     $118 = HEAP32[$117>>2]|0;
     $119 = (($118) + 12|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = (_extension(32,$120)|0);
     if ($121) {
      break L2;
     } else {
      break;
     }
    }
   } while(0);
   $122 = $1;
   $123 = (_yy_StartList($122)|0);
   $124 = ($123|0)!=(0);
   if (!($124)) {
    break;
   }
   $125 = $1;
   _yyDo($125,8,-1,0,41336);
   while(1) {
    $126 = $1;
    $127 = (($126) + 12|0);
    $128 = HEAP32[$127>>2]|0;
    $yypos1403 = $128;
    $129 = $1;
    $130 = (($129) + 44|0);
    $131 = HEAP32[$130>>2]|0;
    $yythunkpos1403 = $131;
    $132 = $1;
    $133 = (($132) + 12|0);
    $134 = HEAP32[$133>>2]|0;
    $yypos1404 = $134;
    $135 = $1;
    $136 = (($135) + 44|0);
    $137 = HEAP32[$136>>2]|0;
    $yythunkpos1404 = $137;
    $138 = $1;
    $139 = (_yymatchChar($138,93)|0);
    $140 = ($139|0)!=(0);
    if ($140) {
     label = 26;
     break;
    }
    $141 = $yypos1404;
    $142 = $1;
    $143 = (($142) + 12|0);
    HEAP32[$143>>2] = $141;
    $144 = $yythunkpos1404;
    $145 = $1;
    $146 = (($145) + 44|0);
    HEAP32[$146>>2] = $144;
    $147 = $1;
    $148 = (_yy_Inline($147)|0);
    $149 = ($148|0)!=(0);
    if (!($149)) {
     label = 28;
     break;
    }
    $150 = $1;
    $151 = $1;
    $152 = (($151) + 28|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = $1;
    $155 = (($154) + 32|0);
    $156 = HEAP32[$155>>2]|0;
    _yyDo($150,114,$153,$156,44816);
   }
   if ((label|0) == 26) {
   }
   else if ((label|0) == 28) {
   }
   $157 = $yypos1403;
   $158 = $1;
   $159 = (($158) + 12|0);
   HEAP32[$159>>2] = $157;
   $160 = $yythunkpos1403;
   $161 = $1;
   $162 = (($161) + 44|0);
   HEAP32[$162>>2] = $160;
   $163 = $1;
   $164 = (_yymatchChar($163,93)|0);
   $165 = ($164|0)!=(0);
   if (!($165)) {
    break;
   }
   $166 = $1;
   $167 = $1;
   $168 = (($167) + 28|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = $1;
   $171 = (($170) + 32|0);
   $172 = HEAP32[$171>>2]|0;
   (_yyText($166,$169,$172)|0);
   $173 = $1;
   $174 = (($173) + 12|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = $1;
   $177 = (($176) + 32|0);
   HEAP32[$177>>2] = $175;
   $178 = $1;
   $179 = $1;
   $180 = (($179) + 28|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = $1;
   $183 = (($182) + 32|0);
   $184 = HEAP32[$183>>2]|0;
   _yyDo($178,115,$181,$184,44832);
   $185 = $1;
   _yyDo($185,12,1,0,41392);
   $0 = 1;
   $192 = $0;
   STACKTOP = sp;return ($192|0);
  } else {
  }
 } while(0);
 $186 = $yypos0;
 $187 = $1;
 $188 = (($187) + 12|0);
 HEAP32[$188>>2] = $186;
 $189 = $yythunkpos0;
 $190 = $1;
 $191 = (($190) + 44|0);
 HEAP32[$191>>2] = $189;
 $0 = 0;
 $192 = $0;
 STACKTOP = sp;return ($192|0);
}
function _yy_Spnl($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos2157 = 0, $yythunkpos0 = 0, $yythunkpos2157 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_Sp($8)|0);
 $10 = ($9|0)!=(0);
 if (!($10)) {
  $29 = $yypos0;
  $30 = $1;
  $31 = (($30) + 12|0);
  HEAP32[$31>>2] = $29;
  $32 = $yythunkpos0;
  $33 = $1;
  $34 = (($33) + 44|0);
  HEAP32[$34>>2] = $32;
  $0 = 0;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 }
 $11 = $1;
 $12 = (($11) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $yypos2157 = $13;
 $14 = $1;
 $15 = (($14) + 44|0);
 $16 = HEAP32[$15>>2]|0;
 $yythunkpos2157 = $16;
 $17 = $1;
 $18 = (_yy_Newline($17)|0);
 $19 = ($18|0)!=(0);
 do {
  if ($19) {
   $20 = $1;
   $21 = (_yy_Sp($20)|0);
   $22 = ($21|0)!=(0);
   if ($22) {
    break;
   } else {
    label = 8;
    break;
   }
  } else {
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $23 = $yypos2157;
  $24 = $1;
  $25 = (($24) + 12|0);
  HEAP32[$25>>2] = $23;
  $26 = $yythunkpos2157;
  $27 = $1;
  $28 = (($27) + 44|0);
  HEAP32[$28>>2] = $26;
 }
 $0 = 1;
 $35 = $0;
 STACKTOP = sp;return ($35|0);
}
function _yy_RefSrc($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos1320 = 0, $yypos1323 = 0, $yypos1324 = 0, $yypos1325 = 0, $yypos1327 = 0;
 var $yythunkpos0 = 0, $yythunkpos1320 = 0, $yythunkpos1323 = 0, $yythunkpos1324 = 0, $yythunkpos1325 = 0, $yythunkpos1327 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos1320 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos1320 = $13;
 $14 = $1;
 $15 = (_yymatchChar($14,60)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
   $17 = $1;
   $18 = $1;
   $19 = (($18) + 28|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $1;
   $22 = (($21) + 32|0);
   $23 = HEAP32[$22>>2]|0;
   (_yyText($17,$20,$23)|0);
   $24 = $1;
   $25 = (($24) + 12|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $1;
   $28 = (($27) + 28|0);
   HEAP32[$28>>2] = $26;
   $29 = $1;
   $30 = (($29) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $yypos1324 = $31;
   $32 = $1;
   $33 = (($32) + 44|0);
   $34 = HEAP32[$33>>2]|0;
   $yythunkpos1324 = $34;
   $35 = $1;
   $36 = (_yymatchChar($35,62)|0);
   $37 = ($36|0)!=(0);
   if ($37) {
    label = 20;
    break;
   }
   $38 = $yypos1324;
   $39 = $1;
   $40 = (($39) + 12|0);
   HEAP32[$40>>2] = $38;
   $41 = $yythunkpos1324;
   $42 = $1;
   $43 = (($42) + 44|0);
   HEAP32[$43>>2] = $41;
   $44 = $1;
   $45 = (_yy_Nonspacechar($44)|0);
   $46 = ($45|0)!=(0);
   if (!($46)) {
    label = 20;
    break;
   }
   while(1) {
    $47 = $1;
    $48 = (($47) + 12|0);
    $49 = HEAP32[$48>>2]|0;
    $yypos1323 = $49;
    $50 = $1;
    $51 = (($50) + 44|0);
    $52 = HEAP32[$51>>2]|0;
    $yythunkpos1323 = $52;
    $53 = $1;
    $54 = (($53) + 12|0);
    $55 = HEAP32[$54>>2]|0;
    $yypos1325 = $55;
    $56 = $1;
    $57 = (($56) + 44|0);
    $58 = HEAP32[$57>>2]|0;
    $yythunkpos1325 = $58;
    $59 = $1;
    $60 = (_yymatchChar($59,62)|0);
    $61 = ($60|0)!=(0);
    if ($61) {
     label = 12;
     break;
    }
    $62 = $yypos1325;
    $63 = $1;
    $64 = (($63) + 12|0);
    HEAP32[$64>>2] = $62;
    $65 = $yythunkpos1325;
    $66 = $1;
    $67 = (($66) + 44|0);
    HEAP32[$67>>2] = $65;
    $68 = $1;
    $69 = (_yy_Nonspacechar($68)|0);
    $70 = ($69|0)!=(0);
    if (!($70)) {
     label = 14;
     break;
    }
   }
   if ((label|0) == 12) {
   }
   else if ((label|0) == 14) {
   }
   $71 = $yypos1323;
   $72 = $1;
   $73 = (($72) + 12|0);
   HEAP32[$73>>2] = $71;
   $74 = $yythunkpos1323;
   $75 = $1;
   $76 = (($75) + 44|0);
   HEAP32[$76>>2] = $74;
   $77 = $1;
   $78 = $1;
   $79 = (($78) + 28|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $1;
   $82 = (($81) + 32|0);
   $83 = HEAP32[$82>>2]|0;
   (_yyText($77,$80,$83)|0);
   $84 = $1;
   $85 = (($84) + 12|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = $1;
   $88 = (($87) + 32|0);
   HEAP32[$88>>2] = $86;
   $89 = $1;
   $90 = (_yymatchChar($89,62)|0);
   $91 = ($90|0)!=(0);
   if ($91) {
    break;
   } else {
    label = 20;
    break;
   }
  } else {
   label = 20;
  }
 } while(0);
 if ((label|0) == 20) {
  $92 = $yypos1320;
  $93 = $1;
  $94 = (($93) + 12|0);
  HEAP32[$94>>2] = $92;
  $95 = $yythunkpos1320;
  $96 = $1;
  $97 = (($96) + 44|0);
  HEAP32[$97>>2] = $95;
  $98 = $1;
  $99 = $1;
  $100 = (($99) + 28|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = $1;
  $103 = (($102) + 32|0);
  $104 = HEAP32[$103>>2]|0;
  (_yyText($98,$101,$104)|0);
  $105 = $1;
  $106 = (($105) + 12|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = $1;
  $109 = (($108) + 28|0);
  HEAP32[$109>>2] = $107;
  $110 = $1;
  $111 = (_yy_Nonspacechar($110)|0);
  $112 = ($111|0)!=(0);
  if (!($112)) {
   $147 = $yypos0;
   $148 = $1;
   $149 = (($148) + 12|0);
   HEAP32[$149>>2] = $147;
   $150 = $yythunkpos0;
   $151 = $1;
   $152 = (($151) + 44|0);
   HEAP32[$152>>2] = $150;
   $0 = 0;
   $153 = $0;
   STACKTOP = sp;return ($153|0);
  }
  while(1) {
   $113 = $1;
   $114 = (($113) + 12|0);
   $115 = HEAP32[$114>>2]|0;
   $yypos1327 = $115;
   $116 = $1;
   $117 = (($116) + 44|0);
   $118 = HEAP32[$117>>2]|0;
   $yythunkpos1327 = $118;
   $119 = $1;
   $120 = (_yy_Nonspacechar($119)|0);
   $121 = ($120|0)!=(0);
   if (!($121)) {
    break;
   }
  }
  $122 = $yypos1327;
  $123 = $1;
  $124 = (($123) + 12|0);
  HEAP32[$124>>2] = $122;
  $125 = $yythunkpos1327;
  $126 = $1;
  $127 = (($126) + 44|0);
  HEAP32[$127>>2] = $125;
  $128 = $1;
  $129 = $1;
  $130 = (($129) + 28|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = $1;
  $133 = (($132) + 32|0);
  $134 = HEAP32[$133>>2]|0;
  (_yyText($128,$131,$134)|0);
  $135 = $1;
  $136 = (($135) + 12|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $1;
  $139 = (($138) + 32|0);
  HEAP32[$139>>2] = $137;
 }
 $140 = $1;
 $141 = $1;
 $142 = (($141) + 28|0);
 $143 = HEAP32[$142>>2]|0;
 $144 = $1;
 $145 = (($144) + 32|0);
 $146 = HEAP32[$145>>2]|0;
 _yyDo($140,116,$143,$146,48368);
 $0 = 1;
 $153 = $0;
 STACKTOP = sp;return ($153|0);
}
function _yy_RefTitle($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1315 = 0;
 var $yythunkpos0 = 0, $yythunkpos1315 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos1315 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos1315 = $13;
 $14 = $1;
 $15 = (_yy_RefTitleSingle($14)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
  } else {
   $17 = $yypos1315;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos1315;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yy_RefTitleDouble($23)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    break;
   }
   $26 = $yypos1315;
   $27 = $1;
   $28 = (($27) + 12|0);
   HEAP32[$28>>2] = $26;
   $29 = $yythunkpos1315;
   $30 = $1;
   $31 = (($30) + 44|0);
   HEAP32[$31>>2] = $29;
   $32 = $1;
   $33 = (_yy_RefTitleParens($32)|0);
   $34 = ($33|0)!=(0);
   if ($34) {
    break;
   }
   $35 = $yypos1315;
   $36 = $1;
   $37 = (($36) + 12|0);
   HEAP32[$37>>2] = $35;
   $38 = $yythunkpos1315;
   $39 = $1;
   $40 = (($39) + 44|0);
   HEAP32[$40>>2] = $38;
   $41 = $1;
   $42 = (_yy_EmptyTitle($41)|0);
   $43 = ($42|0)!=(0);
   if ($43) {
    break;
   }
   $51 = $yypos0;
   $52 = $1;
   $53 = (($52) + 12|0);
   HEAP32[$53>>2] = $51;
   $54 = $yythunkpos0;
   $55 = $1;
   $56 = (($55) + 44|0);
   HEAP32[$56>>2] = $54;
   $0 = 0;
   $57 = $0;
   STACKTOP = sp;return ($57|0);
  }
 } while(0);
 $44 = $1;
 $45 = $1;
 $46 = (($45) + 28|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $1;
 $49 = (($48) + 32|0);
 $50 = HEAP32[$49>>2]|0;
 _yyDo($44,117,$47,$50,48352);
 $0 = 1;
 $57 = $0;
 STACKTOP = sp;return ($57|0);
}
function _yy_Attributes($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos1313 = 0, $yythunkpos0 = 0, $yythunkpos1313 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 $9 = $1;
 $10 = (_yy_StartList($9)|0);
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $1;
   _yyDo($12,8,-1,0,41336);
   $13 = $1;
   $14 = (_yy_Attribute($13)|0);
   $15 = ($14|0)!=(0);
   if (!($15)) {
    break;
   }
   $16 = $1;
   $17 = $1;
   $18 = (($17) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $1;
   $21 = (($20) + 32|0);
   $22 = HEAP32[$21>>2]|0;
   _yyDo($16,118,$19,$22,48272);
   while(1) {
    $23 = $1;
    $24 = (($23) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $yypos1313 = $25;
    $26 = $1;
    $27 = (($26) + 44|0);
    $28 = HEAP32[$27>>2]|0;
    $yythunkpos1313 = $28;
    $29 = $1;
    $30 = (_yy_Attribute($29)|0);
    $31 = ($30|0)!=(0);
    if (!($31)) {
     break;
    }
    $32 = $1;
    $33 = $1;
    $34 = (($33) + 28|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $1;
    $37 = (($36) + 32|0);
    $38 = HEAP32[$37>>2]|0;
    _yyDo($32,118,$35,$38,48272);
   }
   $39 = $yypos1313;
   $40 = $1;
   $41 = (($40) + 12|0);
   HEAP32[$41>>2] = $39;
   $42 = $yythunkpos1313;
   $43 = $1;
   $44 = (($43) + 44|0);
   HEAP32[$44>>2] = $42;
   $45 = $1;
   $46 = $1;
   $47 = (($46) + 28|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $1;
   $50 = (($49) + 32|0);
   $51 = HEAP32[$50>>2]|0;
   _yyDo($45,119,$48,$51,48288);
   $52 = $1;
   _yyDo($52,12,1,0,41392);
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_1_LinkReference($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_reverse_list($7)|0);
 $9 = $0;
 $10 = (($9) + 52|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + -16|0);
 HEAP32[$12>>2] = $8;
 STACKTOP = sp;return;
}
function _yy_2_LinkReference($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, $clean = 0, $text = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = (_g_string_new(41432)|0);
 $text = $5;
 $6 = $text;
 $7 = $0;
 $8 = (($7) + 52|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + -12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 _print_raw_node_tree($6,$13);
 $14 = $text;
 $15 = HEAP32[$14>>2]|0;
 $16 = (_clean_string($15)|0);
 $clean = $16;
 $17 = $0;
 $18 = (($17) + 52|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + -16|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $23 = $clean;
  $24 = $0;
  $25 = (($24) + 52|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + -8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $0;
  $32 = (($31) + 52|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + -4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (_mk_link(0,$23,$30,$37,0)|0);
  $39 = $0;
  $40 = (($39) + 48|0);
  HEAP32[$40>>2] = $38;
 } else {
  $41 = $clean;
  $42 = $0;
  $43 = (($42) + 52|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + -8|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $0;
  $50 = (($49) + 52|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + -4|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $0;
  $57 = (($56) + 52|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (($58) + -16|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (_mk_link(0,$41,$48,$55,$60)|0);
  $62 = $0;
  $63 = (($62) + 48|0);
  HEAP32[$63>>2] = $61;
 }
 $64 = $text;
 (_g_string_free($64,1)|0);
 $65 = $0;
 $66 = (($65) + 52|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = (($67) + -8|0);
 $69 = HEAP32[$68>>2]|0;
 _free_node($69);
 $70 = $0;
 $71 = (($70) + 52|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = (($72) + -4|0);
 $74 = HEAP32[$73>>2]|0;
 _free_node($74);
 $75 = $0;
 $76 = (($75) + 52|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (($77) + -12|0);
 $79 = HEAP32[$78>>2]|0;
 _free_node_tree($79);
 $80 = $clean;
 _free($80);
 $81 = $0;
 $82 = (($81) + 48|0);
 $83 = HEAP32[$82>>2]|0;
 HEAP16[$83>>1] = 61;
 STACKTOP = sp;return;
}
function _yy_1_Abbreviation($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 $14 = $0;
 $15 = (($14) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP16[$16>>1] = 82;
 $17 = $0;
 $18 = (($17) + 52|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + -4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $0;
 $23 = (($22) + 48|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + 12|0);
 HEAP32[$25>>2] = $21;
 STACKTOP = sp;return;
}
function _yy_1_HorizontalRule($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = (_mk_node(47)|0);
 $6 = $0;
 $7 = (($6) + 48|0);
 HEAP32[$7>>2] = $5;
 STACKTOP = sp;return;
}
function _yy_1_HeadingSection($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_HeadingSectionBlock($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos2285 = 0, $yypos2286 = 0, $yypos2287 = 0, $yypos2306 = 0, $yythunkpos0 = 0, $yythunkpos2285 = 0, $yythunkpos2286 = 0, $yythunkpos2287 = 0, $yythunkpos2306 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 while(1) {
  $8 = $1;
  $9 = (($8) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $yypos2285 = $10;
  $11 = $1;
  $12 = (($11) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $yythunkpos2285 = $13;
  $14 = $1;
  $15 = (_yy_BlankLine($14)|0);
  $16 = ($15|0)!=(0);
  if (!($16)) {
   break;
  }
 }
 $17 = $yypos2285;
 $18 = $1;
 $19 = (($18) + 12|0);
 HEAP32[$19>>2] = $17;
 $20 = $yythunkpos2285;
 $21 = $1;
 $22 = (($21) + 44|0);
 HEAP32[$22>>2] = $20;
 $23 = $1;
 $24 = (($23) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $yypos2286 = $25;
 $26 = $1;
 $27 = (($26) + 44|0);
 $28 = HEAP32[$27>>2]|0;
 $yythunkpos2286 = $28;
 $29 = $1;
 $30 = (_yy_Heading($29)|0);
 $31 = ($30|0)!=(0);
 L6: do {
  if ($31) {
  } else {
   $32 = $yypos2286;
   $33 = $1;
   $34 = (($33) + 12|0);
   HEAP32[$34>>2] = $32;
   $35 = $yythunkpos2286;
   $36 = $1;
   $37 = (($36) + 44|0);
   HEAP32[$37>>2] = $35;
   $38 = $1;
   $39 = (($38) + 12|0);
   $40 = HEAP32[$39>>2]|0;
   $yypos2287 = $40;
   $41 = $1;
   $42 = (($41) + 44|0);
   $43 = HEAP32[$42>>2]|0;
   $yythunkpos2287 = $43;
   $44 = $1;
   $45 = (_yy_BlockQuote($44)|0);
   $46 = ($45|0)!=(0);
   L10: do {
    if ($46) {
    } else {
     $47 = $yypos2287;
     $48 = $1;
     $49 = (($48) + 12|0);
     HEAP32[$49>>2] = $47;
     $50 = $yythunkpos2287;
     $51 = $1;
     $52 = (($51) + 44|0);
     HEAP32[$52>>2] = $50;
     $53 = $1;
     $54 = $1;
     $55 = (($54) + 28|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = $1;
     $58 = (($57) + 32|0);
     $59 = HEAP32[$58>>2]|0;
     (_yyText($53,$56,$59)|0);
     $60 = $1;
     $61 = (($60) + 64|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = (($62) + 12|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = (_extension(1,$64)|0);
     do {
      if ($65) {
      } else {
       $66 = $1;
       $67 = (_yy_Fenced($66)|0);
       $68 = ($67|0)!=(0);
       if ($68) {
        break L10;
       } else {
        break;
       }
      }
     } while(0);
     $69 = $yypos2287;
     $70 = $1;
     $71 = (($70) + 12|0);
     HEAP32[$71>>2] = $69;
     $72 = $yythunkpos2287;
     $73 = $1;
     $74 = (($73) + 44|0);
     HEAP32[$74>>2] = $72;
     $75 = $1;
     $76 = (_yy_Verbatim($75)|0);
     $77 = ($76|0)!=(0);
     if ($77) {
      break;
     }
     $78 = $yypos2287;
     $79 = $1;
     $80 = (($79) + 12|0);
     HEAP32[$80>>2] = $78;
     $81 = $yythunkpos2287;
     $82 = $1;
     $83 = (($82) + 44|0);
     HEAP32[$83>>2] = $81;
     $84 = $1;
     $85 = $1;
     $86 = (($85) + 28|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = $1;
     $89 = (($88) + 32|0);
     $90 = HEAP32[$89>>2]|0;
     (_yyText($84,$87,$90)|0);
     $91 = $1;
     $92 = (($91) + 64|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = (($93) + 12|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = (_extension(1,$95)|0);
     do {
      if ($96) {
      } else {
       $97 = $1;
       $98 = (_yy_DefinitionList($97)|0);
       $99 = ($98|0)!=(0);
       if ($99) {
        break L10;
       } else {
        break;
       }
      }
     } while(0);
     $100 = $yypos2287;
     $101 = $1;
     $102 = (($101) + 12|0);
     HEAP32[$102>>2] = $100;
     $103 = $yythunkpos2287;
     $104 = $1;
     $105 = (($104) + 44|0);
     HEAP32[$105>>2] = $103;
     $106 = $1;
     $107 = $1;
     $108 = (($107) + 28|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = $1;
     $111 = (($110) + 32|0);
     $112 = HEAP32[$111>>2]|0;
     (_yyText($106,$109,$112)|0);
     $113 = $1;
     $114 = (($113) + 64|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = (($115) + 12|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = (_extension(1,$117)|0);
     do {
      if ($118) {
      } else {
       $119 = $1;
       $120 = (_yy_Glossary($119)|0);
       $121 = ($120|0)!=(0);
       if ($121) {
        break L10;
       } else {
        break;
       }
      }
     } while(0);
     $122 = $yypos2287;
     $123 = $1;
     $124 = (($123) + 12|0);
     HEAP32[$124>>2] = $122;
     $125 = $yythunkpos2287;
     $126 = $1;
     $127 = (($126) + 44|0);
     HEAP32[$127>>2] = $125;
     $128 = $1;
     $129 = (_yy_Note($128)|0);
     $130 = ($129|0)!=(0);
     if ($130) {
      break;
     }
     $131 = $yypos2287;
     $132 = $1;
     $133 = (($132) + 12|0);
     HEAP32[$133>>2] = $131;
     $134 = $yythunkpos2287;
     $135 = $1;
     $136 = (($135) + 44|0);
     HEAP32[$136>>2] = $134;
     $137 = $1;
     $138 = (_yy_LinkReference($137)|0);
     $139 = ($138|0)!=(0);
     if ($139) {
      break;
     }
     $140 = $yypos2287;
     $141 = $1;
     $142 = (($141) + 12|0);
     HEAP32[$142>>2] = $140;
     $143 = $yythunkpos2287;
     $144 = $1;
     $145 = (($144) + 44|0);
     HEAP32[$145>>2] = $143;
     $146 = $1;
     $147 = $1;
     $148 = (($147) + 28|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = $1;
     $151 = (($150) + 32|0);
     $152 = HEAP32[$151>>2]|0;
     (_yyText($146,$149,$152)|0);
     $153 = $1;
     $154 = (($153) + 64|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = (($155) + 12|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = (_extension(1,$157)|0);
     do {
      if ($158) {
      } else {
       $159 = $1;
       $160 = (_yy_Abbreviation($159)|0);
       $161 = ($160|0)!=(0);
       if ($161) {
        break L10;
       } else {
        break;
       }
      }
     } while(0);
     $162 = $yypos2287;
     $163 = $1;
     $164 = (($163) + 12|0);
     HEAP32[$164>>2] = $162;
     $165 = $yythunkpos2287;
     $166 = $1;
     $167 = (($166) + 44|0);
     HEAP32[$167>>2] = $165;
     $168 = $1;
     $169 = (_yy_HorizontalRule($168)|0);
     $170 = ($169|0)!=(0);
     if ($170) {
      break;
     }
     $171 = $yypos2287;
     $172 = $1;
     $173 = (($172) + 12|0);
     HEAP32[$173>>2] = $171;
     $174 = $yythunkpos2287;
     $175 = $1;
     $176 = (($175) + 44|0);
     HEAP32[$176>>2] = $174;
     $177 = $1;
     $178 = (_yy_OrderedList($177)|0);
     $179 = ($178|0)!=(0);
     if ($179) {
      break;
     }
     $180 = $yypos2287;
     $181 = $1;
     $182 = (($181) + 12|0);
     HEAP32[$182>>2] = $180;
     $183 = $yythunkpos2287;
     $184 = $1;
     $185 = (($184) + 44|0);
     HEAP32[$185>>2] = $183;
     $186 = $1;
     $187 = (_yy_BulletList($186)|0);
     $188 = ($187|0)!=(0);
     if ($188) {
      break;
     }
     $189 = $yypos2287;
     $190 = $1;
     $191 = (($190) + 12|0);
     HEAP32[$191>>2] = $189;
     $192 = $yythunkpos2287;
     $193 = $1;
     $194 = (($193) + 44|0);
     HEAP32[$194>>2] = $192;
     $195 = $1;
     $196 = (_yy_HtmlBlock($195)|0);
     $197 = ($196|0)!=(0);
     if ($197) {
      break;
     }
     $198 = $yypos2287;
     $199 = $1;
     $200 = (($199) + 12|0);
     HEAP32[$200>>2] = $198;
     $201 = $yythunkpos2287;
     $202 = $1;
     $203 = (($202) + 44|0);
     HEAP32[$203>>2] = $201;
     $204 = $1;
     $205 = (_yy_MarkdownHtmlBlock($204)|0);
     $206 = ($205|0)!=(0);
     if ($206) {
      break;
     }
     $207 = $yypos2287;
     $208 = $1;
     $209 = (($208) + 12|0);
     HEAP32[$209>>2] = $207;
     $210 = $yythunkpos2287;
     $211 = $1;
     $212 = (($211) + 44|0);
     HEAP32[$212>>2] = $210;
     $213 = $1;
     $214 = (_yy_StyleBlock($213)|0);
     $215 = ($214|0)!=(0);
     if ($215) {
      break;
     }
     $216 = $yypos2287;
     $217 = $1;
     $218 = (($217) + 12|0);
     HEAP32[$218>>2] = $216;
     $219 = $yythunkpos2287;
     $220 = $1;
     $221 = (($220) + 44|0);
     HEAP32[$221>>2] = $219;
     $222 = $1;
     $223 = $1;
     $224 = (($223) + 28|0);
     $225 = HEAP32[$224>>2]|0;
     $226 = $1;
     $227 = (($226) + 32|0);
     $228 = HEAP32[$227>>2]|0;
     (_yyText($222,$225,$228)|0);
     $229 = $1;
     $230 = (($229) + 64|0);
     $231 = HEAP32[$230>>2]|0;
     $232 = (($231) + 12|0);
     $233 = HEAP32[$232>>2]|0;
     $234 = (_extension(1,$233)|0);
     do {
      if ($234) {
      } else {
       $235 = $1;
       $236 = (_yy_Table($235)|0);
       $237 = ($236|0)!=(0);
       if ($237) {
        break L10;
       } else {
        break;
       }
      }
     } while(0);
     $238 = $yypos2287;
     $239 = $1;
     $240 = (($239) + 12|0);
     HEAP32[$240>>2] = $238;
     $241 = $yythunkpos2287;
     $242 = $1;
     $243 = (($242) + 44|0);
     HEAP32[$243>>2] = $241;
     $244 = $1;
     $245 = $1;
     $246 = (($245) + 28|0);
     $247 = HEAP32[$246>>2]|0;
     $248 = $1;
     $249 = (($248) + 32|0);
     $250 = HEAP32[$249>>2]|0;
     (_yyText($244,$247,$250)|0);
     $251 = $1;
     $252 = (($251) + 64|0);
     $253 = HEAP32[$252>>2]|0;
     $254 = (($253) + 12|0);
     $255 = HEAP32[$254>>2]|0;
     $256 = (_extension(1,$255)|0);
     do {
      if ($256) {
      } else {
       $257 = $1;
       $258 = (_yy_ImageBlock($257)|0);
       $259 = ($258|0)!=(0);
       if ($259) {
        break L10;
       } else {
        break;
       }
      }
     } while(0);
     $260 = $yypos2287;
     $261 = $1;
     $262 = (($261) + 12|0);
     HEAP32[$262>>2] = $260;
     $263 = $yythunkpos2287;
     $264 = $1;
     $265 = (($264) + 44|0);
     HEAP32[$265>>2] = $263;
     $266 = $1;
     $267 = $1;
     $268 = (($267) + 28|0);
     $269 = HEAP32[$268>>2]|0;
     $270 = $1;
     $271 = (($270) + 32|0);
     $272 = HEAP32[$271>>2]|0;
     (_yyText($266,$269,$272)|0);
     $273 = $1;
     $274 = (($273) + 64|0);
     $275 = HEAP32[$274>>2]|0;
     $276 = (($275) + 12|0);
     $277 = HEAP32[$276>>2]|0;
     $278 = (_extension(1,$277)|0);
     do {
      if ($278) {
      } else {
       $279 = $1;
       $280 = (_yy_TOC($279)|0);
       $281 = ($280|0)!=(0);
       if ($281) {
        break L10;
       } else {
        break;
       }
      }
     } while(0);
     $282 = $yypos2287;
     $283 = $1;
     $284 = (($283) + 12|0);
     HEAP32[$284>>2] = $282;
     $285 = $yythunkpos2287;
     $286 = $1;
     $287 = (($286) + 44|0);
     HEAP32[$287>>2] = $285;
     $288 = $1;
     $289 = (($288) + 12|0);
     $290 = HEAP32[$289>>2]|0;
     $yypos2306 = $290;
     $291 = $1;
     $292 = (($291) + 44|0);
     $293 = HEAP32[$292>>2]|0;
     $yythunkpos2306 = $293;
     $294 = $1;
     $295 = (_yy_Sp($294)|0);
     $296 = ($295|0)!=(0);
     do {
      if ($296) {
       $297 = $1;
       $298 = (_yy_HtmlBlockInTags($297)|0);
       $299 = ($298|0)!=(0);
       if ($299) {
        break;
       } else {
        label = 78;
        break;
       }
      } else {
       label = 78;
      }
     } while(0);
     do {
      if ((label|0) == 78) {
       $300 = $yypos2306;
       $301 = $1;
       $302 = (($301) + 12|0);
       HEAP32[$302>>2] = $300;
       $303 = $yythunkpos2306;
       $304 = $1;
       $305 = (($304) + 44|0);
       HEAP32[$305>>2] = $303;
       $306 = $1;
       $307 = (_yy_Para($306)|0);
       $308 = ($307|0)!=(0);
       if ($308) {
        break L10;
       } else {
        break;
       }
      }
     } while(0);
     $309 = $yypos2287;
     $310 = $1;
     $311 = (($310) + 12|0);
     HEAP32[$311>>2] = $309;
     $312 = $yythunkpos2287;
     $313 = $1;
     $314 = (($313) + 44|0);
     HEAP32[$314>>2] = $312;
     $315 = $1;
     $316 = (_yy_Plain($315)|0);
     $317 = ($316|0)!=(0);
     if ($317) {
      break;
     } else {
      break L6;
     }
    }
   } while(0);
   $0 = 1;
   $324 = $0;
   STACKTOP = sp;return ($324|0);
  }
 } while(0);
 $318 = $yypos0;
 $319 = $1;
 $320 = (($319) + 12|0);
 HEAP32[$320>>2] = $318;
 $321 = $yythunkpos0;
 $322 = $1;
 $323 = (($322) + 44|0);
 HEAP32[$323>>2] = $321;
 $0 = 0;
 $324 = $0;
 STACKTOP = sp;return ($324|0);
}
function _yy_2_HeadingSection($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_3_HeadingSection($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_mk_pos_list(9,$9,$11,$14)|0);
 $16 = $0;
 $17 = (($16) + 48|0);
 HEAP32[$17>>2] = $15;
 STACKTOP = sp;return;
}
function _yy_AtxHeading($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos2276 = 0, $yypos2277 = 0, $yypos2279 = 0;
 var $yypos2282 = 0, $yythunkpos0 = 0, $yythunkpos2276 = 0, $yythunkpos2277 = 0, $yythunkpos2279 = 0, $yythunkpos2282 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,3,0,41328);
 $9 = $1;
 $10 = (_yy_AtxStart($9)|0);
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $1;
   _yyDo($12,8,-3,0,41336);
   $13 = $1;
   $14 = (_yy_Sp($13)|0);
   $15 = ($14|0)!=(0);
   if (!($15)) {
    break;
   }
   $16 = $1;
   $17 = (_yy_StartList($16)|0);
   $18 = ($17|0)!=(0);
   if (!($18)) {
    break;
   }
   $19 = $1;
   _yyDo($19,8,-2,0,41336);
   $20 = $1;
   $21 = (_yy_AtxInline($20)|0);
   $22 = ($21|0)!=(0);
   if (!($22)) {
    break;
   }
   $23 = $1;
   $24 = $1;
   $25 = (($24) + 28|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $1;
   $28 = (($27) + 32|0);
   $29 = HEAP32[$28>>2]|0;
   _yyDo($23,120,$26,$29,46416);
   while(1) {
    $30 = $1;
    $31 = (($30) + 12|0);
    $32 = HEAP32[$31>>2]|0;
    $yypos2276 = $32;
    $33 = $1;
    $34 = (($33) + 44|0);
    $35 = HEAP32[$34>>2]|0;
    $yythunkpos2276 = $35;
    $36 = $1;
    $37 = (_yy_AtxInline($36)|0);
    $38 = ($37|0)!=(0);
    if (!($38)) {
     break;
    }
    $39 = $1;
    $40 = $1;
    $41 = (($40) + 28|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = $1;
    $44 = (($43) + 32|0);
    $45 = HEAP32[$44>>2]|0;
    _yyDo($39,120,$42,$45,46416);
   }
   $46 = $yypos2276;
   $47 = $1;
   $48 = (($47) + 12|0);
   HEAP32[$48>>2] = $46;
   $49 = $yythunkpos2276;
   $50 = $1;
   $51 = (($50) + 44|0);
   HEAP32[$51>>2] = $49;
   $52 = $1;
   $53 = (($52) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $yypos2277 = $54;
   $55 = $1;
   $56 = (($55) + 44|0);
   $57 = HEAP32[$56>>2]|0;
   $yythunkpos2277 = $57;
   $58 = $1;
   $59 = (_yy_Sp($58)|0);
   $60 = ($59|0)!=(0);
   do {
    if ($60) {
     $61 = $1;
     $62 = (_yy_AutoLabel($61)|0);
     $63 = ($62|0)!=(0);
     if ($63) {
      $64 = $1;
      _yyDo($64,8,-1,0,41336);
      $65 = $1;
      $66 = $1;
      $67 = (($66) + 28|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = $1;
      $70 = (($69) + 32|0);
      $71 = HEAP32[$70>>2]|0;
      _yyDo($65,121,$68,$71,46432);
      break;
     } else {
      label = 18;
      break;
     }
    } else {
     label = 18;
    }
   } while(0);
   if ((label|0) == 18) {
    $72 = $yypos2277;
    $73 = $1;
    $74 = (($73) + 12|0);
    HEAP32[$74>>2] = $72;
    $75 = $yythunkpos2277;
    $76 = $1;
    $77 = (($76) + 44|0);
    HEAP32[$77>>2] = $75;
   }
   $78 = $1;
   $79 = (($78) + 12|0);
   $80 = HEAP32[$79>>2]|0;
   $yypos2279 = $80;
   $81 = $1;
   $82 = (($81) + 44|0);
   $83 = HEAP32[$82>>2]|0;
   $yythunkpos2279 = $83;
   $84 = $1;
   $85 = (_yy_Sp($84)|0);
   $86 = ($85|0)!=(0);
   do {
    if ($86) {
     while(1) {
      $87 = $1;
      $88 = (($87) + 12|0);
      $89 = HEAP32[$88>>2]|0;
      $yypos2282 = $89;
      $90 = $1;
      $91 = (($90) + 44|0);
      $92 = HEAP32[$91>>2]|0;
      $yythunkpos2282 = $92;
      $93 = $1;
      $94 = (_yymatchChar($93,35)|0);
      $95 = ($94|0)!=(0);
      if (!($95)) {
       break;
      }
     }
     $96 = $yypos2282;
     $97 = $1;
     $98 = (($97) + 12|0);
     HEAP32[$98>>2] = $96;
     $99 = $yythunkpos2282;
     $100 = $1;
     $101 = (($100) + 44|0);
     HEAP32[$101>>2] = $99;
     $102 = $1;
     $103 = (_yy_Sp($102)|0);
     $104 = ($103|0)!=(0);
     if ($104) {
      break;
     } else {
      label = 28;
      break;
     }
    } else {
     label = 28;
    }
   } while(0);
   if ((label|0) == 28) {
    $105 = $yypos2279;
    $106 = $1;
    $107 = (($106) + 12|0);
    HEAP32[$107>>2] = $105;
    $108 = $yythunkpos2279;
    $109 = $1;
    $110 = (($109) + 44|0);
    HEAP32[$110>>2] = $108;
   }
   $111 = $1;
   $112 = (_yy_Sp($111)|0);
   $113 = ($112|0)!=(0);
   if (!($113)) {
    break;
   }
   $114 = $1;
   $115 = $1;
   $116 = (($115) + 28|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = $1;
   $119 = (($118) + 32|0);
   $120 = HEAP32[$119>>2]|0;
   (_yyText($114,$117,$120)|0);
   $121 = $1;
   $122 = (($121) + 12|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = $1;
   $125 = (($124) + 28|0);
   HEAP32[$125>>2] = $123;
   $126 = $1;
   $127 = (_yy_Newline($126)|0);
   $128 = ($127|0)!=(0);
   if (!($128)) {
    break;
   }
   $129 = $1;
   $130 = $1;
   $131 = (($130) + 28|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = $1;
   $134 = (($133) + 32|0);
   $135 = HEAP32[$134>>2]|0;
   (_yyText($129,$132,$135)|0);
   $136 = $1;
   $137 = (($136) + 12|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = $1;
   $140 = (($139) + 32|0);
   HEAP32[$140>>2] = $138;
   $141 = $1;
   $142 = $1;
   $143 = (($142) + 28|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = $1;
   $146 = (($145) + 32|0);
   $147 = HEAP32[$146>>2]|0;
   _yyDo($141,122,$144,$147,46448);
   $148 = $1;
   _yyDo($148,12,3,0,41392);
   $0 = 1;
   $155 = $0;
   STACKTOP = sp;return ($155|0);
  } else {
  }
 } while(0);
 $149 = $yypos0;
 $150 = $1;
 $151 = (($150) + 12|0);
 HEAP32[$151>>2] = $149;
 $152 = $yythunkpos0;
 $153 = $1;
 $154 = (($153) + 44|0);
 HEAP32[$154>>2] = $152;
 $0 = 0;
 $155 = $0;
 STACKTOP = sp;return ($155|0);
}
function _yy_Enumerator($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1095 = 0, $yypos1097 = 0;
 var $yythunkpos0 = 0, $yythunkpos1095 = 0, $yythunkpos1097 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_NonindentSpace($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = (_yymatchClass($11,44248,44288)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   while(1) {
    $14 = $1;
    $15 = (($14) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $yypos1095 = $16;
    $17 = $1;
    $18 = (($17) + 44|0);
    $19 = HEAP32[$18>>2]|0;
    $yythunkpos1095 = $19;
    $20 = $1;
    $21 = (_yymatchClass($20,44248,44288)|0);
    $22 = ($21|0)!=(0);
    if (!($22)) {
     break;
    }
   }
   $23 = $yypos1095;
   $24 = $1;
   $25 = (($24) + 12|0);
   HEAP32[$25>>2] = $23;
   $26 = $yythunkpos1095;
   $27 = $1;
   $28 = (($27) + 44|0);
   HEAP32[$28>>2] = $26;
   $29 = $1;
   $30 = (_yymatchChar($29,46)|0);
   $31 = ($30|0)!=(0);
   if (!($31)) {
    break;
   }
   $32 = $1;
   $33 = (_yy_Spacechar($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos1097 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos1097 = $40;
    $41 = $1;
    $42 = (_yy_Spacechar($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos1097;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos1097;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $0 = 1;
   $56 = $0;
   STACKTOP = sp;return ($56|0);
  } else {
  }
 } while(0);
 $50 = $yypos0;
 $51 = $1;
 $52 = (($51) + 12|0);
 HEAP32[$52>>2] = $50;
 $53 = $yythunkpos0;
 $54 = $1;
 $55 = (($54) + 44|0);
 HEAP32[$55>>2] = $53;
 $0 = 0;
 $56 = $0;
 STACKTOP = sp;return ($56|0);
}
function _yy_ListTight($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos1120 = 0, $yypos1122 = 0, $yypos1123 = 0, $yypos1124 = 0, $yypos1128 = 0, $yypos1129 = 0;
 var $yythunkpos0 = 0, $yythunkpos1120 = 0, $yythunkpos1122 = 0, $yythunkpos1123 = 0, $yythunkpos1124 = 0, $yythunkpos1128 = 0, $yythunkpos1129 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 $9 = $1;
 $10 = (_yy_StartList($9)|0);
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $1;
   _yyDo($12,8,-1,0,41336);
   $13 = $1;
   $14 = (_yy_ListItemTight($13)|0);
   $15 = ($14|0)!=(0);
   if (!($15)) {
    break;
   }
   $16 = $1;
   $17 = $1;
   $18 = (($17) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $1;
   $21 = (($20) + 32|0);
   $22 = HEAP32[$21>>2]|0;
   _yyDo($16,123,$19,$22,47952);
   while(1) {
    $23 = $1;
    $24 = (($23) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $yypos1120 = $25;
    $26 = $1;
    $27 = (($26) + 44|0);
    $28 = HEAP32[$27>>2]|0;
    $yythunkpos1120 = $28;
    $29 = $1;
    $30 = (_yy_ListItemTight($29)|0);
    $31 = ($30|0)!=(0);
    if (!($31)) {
     break;
    }
    $32 = $1;
    $33 = $1;
    $34 = (($33) + 28|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $1;
    $37 = (($36) + 32|0);
    $38 = HEAP32[$37>>2]|0;
    _yyDo($32,123,$35,$38,47952);
   }
   $39 = $yypos1120;
   $40 = $1;
   $41 = (($40) + 12|0);
   HEAP32[$41>>2] = $39;
   $42 = $yythunkpos1120;
   $43 = $1;
   $44 = (($43) + 44|0);
   HEAP32[$44>>2] = $42;
   while(1) {
    $45 = $1;
    $46 = (($45) + 12|0);
    $47 = HEAP32[$46>>2]|0;
    $yypos1122 = $47;
    $48 = $1;
    $49 = (($48) + 44|0);
    $50 = HEAP32[$49>>2]|0;
    $yythunkpos1122 = $50;
    $51 = $1;
    $52 = (_yy_BlankLine($51)|0);
    $53 = ($52|0)!=(0);
    if (!($53)) {
     break;
    }
   }
   $54 = $yypos1122;
   $55 = $1;
   $56 = (($55) + 12|0);
   HEAP32[$56>>2] = $54;
   $57 = $yythunkpos1122;
   $58 = $1;
   $59 = (($58) + 44|0);
   HEAP32[$59>>2] = $57;
   $60 = $1;
   $61 = (($60) + 12|0);
   $62 = HEAP32[$61>>2]|0;
   $yypos1123 = $62;
   $63 = $1;
   $64 = (($63) + 44|0);
   $65 = HEAP32[$64>>2]|0;
   $yythunkpos1123 = $65;
   $66 = $1;
   $67 = (($66) + 12|0);
   $68 = HEAP32[$67>>2]|0;
   $yypos1124 = $68;
   $69 = $1;
   $70 = (($69) + 44|0);
   $71 = HEAP32[$70>>2]|0;
   $yythunkpos1124 = $71;
   $72 = $1;
   $73 = (_yy_Bullet($72)|0);
   $74 = ($73|0)!=(0);
   L17: do {
    if ($74) {
    } else {
     $75 = $yypos1124;
     $76 = $1;
     $77 = (($76) + 12|0);
     HEAP32[$77>>2] = $75;
     $78 = $yythunkpos1124;
     $79 = $1;
     $80 = (($79) + 44|0);
     HEAP32[$80>>2] = $78;
     $81 = $1;
     $82 = (_yy_Enumerator($81)|0);
     $83 = ($82|0)!=(0);
     if ($83) {
      break;
     }
     $84 = $yypos1124;
     $85 = $1;
     $86 = (($85) + 12|0);
     HEAP32[$86>>2] = $84;
     $87 = $yythunkpos1124;
     $88 = $1;
     $89 = (($88) + 44|0);
     HEAP32[$89>>2] = $87;
     $90 = $1;
     $91 = (_yy_BulletNoSpace($90)|0);
     $92 = ($91|0)!=(0);
     do {
      if ($92) {
       $93 = $1;
       $94 = (($93) + 12|0);
       $95 = HEAP32[$94>>2]|0;
       $yypos1128 = $95;
       $96 = $1;
       $97 = (($96) + 44|0);
       $98 = HEAP32[$97>>2]|0;
       $yythunkpos1128 = $98;
       $99 = $1;
       $100 = (_yy_EmptyList($99)|0);
       $101 = ($100|0)!=(0);
       if ($101) {
        $102 = $yypos1128;
        $103 = $1;
        $104 = (($103) + 12|0);
        HEAP32[$104>>2] = $102;
        $105 = $yythunkpos1128;
        $106 = $1;
        $107 = (($106) + 44|0);
        HEAP32[$107>>2] = $105;
        break L17;
       } else {
        break;
       }
      } else {
      }
     } while(0);
     $108 = $yypos1124;
     $109 = $1;
     $110 = (($109) + 12|0);
     HEAP32[$110>>2] = $108;
     $111 = $yythunkpos1124;
     $112 = $1;
     $113 = (($112) + 44|0);
     HEAP32[$113>>2] = $111;
     $114 = $1;
     $115 = (_yy_EnumeratorNoSpace($114)|0);
     $116 = ($115|0)!=(0);
     do {
      if ($116) {
       $117 = $1;
       $118 = (($117) + 12|0);
       $119 = HEAP32[$118>>2]|0;
       $yypos1129 = $119;
       $120 = $1;
       $121 = (($120) + 44|0);
       $122 = HEAP32[$121>>2]|0;
       $yythunkpos1129 = $122;
       $123 = $1;
       $124 = (_yy_EmptyList($123)|0);
       $125 = ($124|0)!=(0);
       if ($125) {
        $126 = $yypos1129;
        $127 = $1;
        $128 = (($127) + 12|0);
        HEAP32[$128>>2] = $126;
        $129 = $yythunkpos1129;
        $130 = $1;
        $131 = (($130) + 44|0);
        HEAP32[$131>>2] = $129;
        break L17;
       } else {
        break;
       }
      } else {
      }
     } while(0);
     $132 = $yypos1123;
     $133 = $1;
     $134 = (($133) + 12|0);
     HEAP32[$134>>2] = $132;
     $135 = $yythunkpos1123;
     $136 = $1;
     $137 = (($136) + 44|0);
     HEAP32[$137>>2] = $135;
     $138 = $1;
     $139 = $1;
     $140 = (($139) + 28|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = $1;
     $143 = (($142) + 32|0);
     $144 = HEAP32[$143>>2]|0;
     _yyDo($138,124,$141,$144,47968);
     $145 = $1;
     _yyDo($145,12,1,0,41392);
     $0 = 1;
     $152 = $0;
     STACKTOP = sp;return ($152|0);
    }
   } while(0);
  } else {
  }
 } while(0);
 $146 = $yypos0;
 $147 = $1;
 $148 = (($147) + 12|0);
 HEAP32[$148>>2] = $146;
 $149 = $yythunkpos0;
 $150 = $1;
 $151 = (($150) + 44|0);
 HEAP32[$151>>2] = $149;
 $0 = 0;
 $152 = $0;
 STACKTOP = sp;return ($152|0);
}
function _yy_ListLoose($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $yypos0 = 0, $yypos1113 = 0, $yypos1115 = 0, $yypos1117 = 0, $yythunkpos0 = 0, $yythunkpos1113 = 0, $yythunkpos1115 = 0, $yythunkpos1117 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,2,0,41328);
 $9 = $1;
 $10 = (_yy_StartList($9)|0);
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $1;
   _yyDo($12,8,-2,0,41336);
   $13 = $1;
   $14 = (_yy_ListItem($13)|0);
   $15 = ($14|0)!=(0);
   if (!($15)) {
    break;
   }
   $16 = $1;
   _yyDo($16,8,-1,0,41336);
   while(1) {
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos1115 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos1115 = $22;
    $23 = $1;
    $24 = (_yy_BlankLine($23)|0);
    $25 = ($24|0)!=(0);
    if (!($25)) {
     break;
    }
   }
   $26 = $yypos1115;
   $27 = $1;
   $28 = (($27) + 12|0);
   HEAP32[$28>>2] = $26;
   $29 = $yythunkpos1115;
   $30 = $1;
   $31 = (($30) + 44|0);
   HEAP32[$31>>2] = $29;
   $32 = $1;
   $33 = $1;
   $34 = (($33) + 28|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $1;
   $37 = (($36) + 32|0);
   $38 = HEAP32[$37>>2]|0;
   _yyDo($32,125,$35,$38,47680);
   while(1) {
    $39 = $1;
    $40 = (($39) + 12|0);
    $41 = HEAP32[$40>>2]|0;
    $yypos1113 = $41;
    $42 = $1;
    $43 = (($42) + 44|0);
    $44 = HEAP32[$43>>2]|0;
    $yythunkpos1113 = $44;
    $45 = $1;
    $46 = (_yy_ListItem($45)|0);
    $47 = ($46|0)!=(0);
    if (!($47)) {
     break;
    }
    $48 = $1;
    _yyDo($48,8,-1,0,41336);
    while(1) {
     $49 = $1;
     $50 = (($49) + 12|0);
     $51 = HEAP32[$50>>2]|0;
     $yypos1117 = $51;
     $52 = $1;
     $53 = (($52) + 44|0);
     $54 = HEAP32[$53>>2]|0;
     $yythunkpos1117 = $54;
     $55 = $1;
     $56 = (_yy_BlankLine($55)|0);
     $57 = ($56|0)!=(0);
     if (!($57)) {
      break;
     }
    }
    $58 = $yypos1117;
    $59 = $1;
    $60 = (($59) + 12|0);
    HEAP32[$60>>2] = $58;
    $61 = $yythunkpos1117;
    $62 = $1;
    $63 = (($62) + 44|0);
    HEAP32[$63>>2] = $61;
    $64 = $1;
    $65 = $1;
    $66 = (($65) + 28|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = $1;
    $69 = (($68) + 32|0);
    $70 = HEAP32[$69>>2]|0;
    _yyDo($64,125,$67,$70,47680);
   }
   $71 = $yypos1113;
   $72 = $1;
   $73 = (($72) + 12|0);
   HEAP32[$73>>2] = $71;
   $74 = $yythunkpos1113;
   $75 = $1;
   $76 = (($75) + 44|0);
   HEAP32[$76>>2] = $74;
   $77 = $1;
   $78 = $1;
   $79 = (($78) + 28|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $1;
   $82 = (($81) + 32|0);
   $83 = HEAP32[$82>>2]|0;
   _yyDo($77,126,$80,$83,47696);
   $84 = $1;
   _yyDo($84,12,2,0,41392);
   $0 = 1;
   $91 = $0;
   STACKTOP = sp;return ($91|0);
  } else {
  }
 } while(0);
 $85 = $yypos0;
 $86 = $1;
 $87 = (($86) + 12|0);
 HEAP32[$87>>2] = $85;
 $88 = $yythunkpos0;
 $89 = $1;
 $90 = (($89) + 44|0);
 HEAP32[$90>>2] = $88;
 $0 = 0;
 $91 = $0;
 STACKTOP = sp;return ($91|0);
}
function _yy_1_OrderedList($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP16[$7>>1] = 48;
 STACKTOP = sp;return;
}
function _yy_Bullet($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1136 = 0;
 var $yypos1137 = 0, $yypos1141 = 0, $yythunkpos0 = 0, $yythunkpos1136 = 0, $yythunkpos1137 = 0, $yythunkpos1141 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos1136 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos1136 = $13;
 $14 = $1;
 $15 = (_yy_HorizontalRule($14)|0);
 $16 = ($15|0)!=(0);
 L1: do {
  if ($16) {
  } else {
   $17 = $yypos1136;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos1136;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yy_NonindentSpace($23)|0);
   $25 = ($24|0)!=(0);
   if (!($25)) {
    break;
   }
   $26 = $1;
   $27 = (($26) + 12|0);
   $28 = HEAP32[$27>>2]|0;
   $yypos1137 = $28;
   $29 = $1;
   $30 = (($29) + 44|0);
   $31 = HEAP32[$30>>2]|0;
   $yythunkpos1137 = $31;
   $32 = $1;
   $33 = (_yymatchChar($32,43)|0);
   $34 = ($33|0)!=(0);
   do {
    if ($34) {
    } else {
     $35 = $yypos1137;
     $36 = $1;
     $37 = (($36) + 12|0);
     HEAP32[$37>>2] = $35;
     $38 = $yythunkpos1137;
     $39 = $1;
     $40 = (($39) + 44|0);
     HEAP32[$40>>2] = $38;
     $41 = $1;
     $42 = (_yymatchChar($41,42)|0);
     $43 = ($42|0)!=(0);
     if ($43) {
      break;
     }
     $44 = $yypos1137;
     $45 = $1;
     $46 = (($45) + 12|0);
     HEAP32[$46>>2] = $44;
     $47 = $yythunkpos1137;
     $48 = $1;
     $49 = (($48) + 44|0);
     HEAP32[$49>>2] = $47;
     $50 = $1;
     $51 = (_yymatchChar($50,45)|0);
     $52 = ($51|0)!=(0);
     if ($52) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $53 = $1;
   $54 = (_yy_Spacechar($53)|0);
   $55 = ($54|0)!=(0);
   if (!($55)) {
    break;
   }
   while(1) {
    $56 = $1;
    $57 = (($56) + 12|0);
    $58 = HEAP32[$57>>2]|0;
    $yypos1141 = $58;
    $59 = $1;
    $60 = (($59) + 44|0);
    $61 = HEAP32[$60>>2]|0;
    $yythunkpos1141 = $61;
    $62 = $1;
    $63 = (_yy_Spacechar($62)|0);
    $64 = ($63|0)!=(0);
    if (!($64)) {
     break;
    }
   }
   $65 = $yypos1141;
   $66 = $1;
   $67 = (($66) + 12|0);
   HEAP32[$67>>2] = $65;
   $68 = $yythunkpos1141;
   $69 = $1;
   $70 = (($69) + 44|0);
   HEAP32[$70>>2] = $68;
   $0 = 1;
   $77 = $0;
   STACKTOP = sp;return ($77|0);
  }
 } while(0);
 $71 = $yypos0;
 $72 = $1;
 $73 = (($72) + 12|0);
 HEAP32[$73>>2] = $71;
 $74 = $yythunkpos0;
 $75 = $1;
 $76 = (($75) + 44|0);
 HEAP32[$76>>2] = $74;
 $0 = 0;
 $77 = $0;
 STACKTOP = sp;return ($77|0);
}
function _yy_1_BulletList($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP16[$7>>1] = 49;
 STACKTOP = sp;return;
}
function _yy_MarkdownHtmlTagOpen($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos1654 = 0, $yypos1656 = 0, $yypos1657 = 0, $yypos1659 = 0, $yythunkpos0 = 0, $yythunkpos1654 = 0;
 var $yythunkpos1656 = 0, $yythunkpos1657 = 0, $yythunkpos1659 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 $9 = $1;
 $10 = (_yy_StartList($9)|0);
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $1;
   _yyDo($12,8,-1,0,41336);
   $13 = $1;
   $14 = (_yymatchChar($13,60)|0);
   $15 = ($14|0)!=(0);
   if (!($15)) {
    break;
   }
   $16 = $1;
   $17 = $1;
   $18 = (($17) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $1;
   $21 = (($20) + 32|0);
   $22 = HEAP32[$21>>2]|0;
   _yyDo($16,127,$19,$22,42424);
   $23 = $1;
   $24 = (_yy_Spnl($23)|0);
   $25 = ($24|0)!=(0);
   if (!($25)) {
    break;
   }
   $26 = $1;
   $27 = $1;
   $28 = (($27) + 28|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $1;
   $31 = (($30) + 32|0);
   $32 = HEAP32[$31>>2]|0;
   (_yyText($26,$29,$32)|0);
   $33 = $1;
   $34 = (($33) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $1;
   $37 = (($36) + 28|0);
   HEAP32[$37>>2] = $35;
   $38 = $1;
   $39 = (_yy_HtmlBlockType($38)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $41 = $1;
   $42 = $1;
   $43 = (($42) + 28|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $1;
   $46 = (($45) + 32|0);
   $47 = HEAP32[$46>>2]|0;
   (_yyText($41,$44,$47)|0);
   $48 = $1;
   $49 = (($48) + 12|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $1;
   $52 = (($51) + 32|0);
   HEAP32[$52>>2] = $50;
   $53 = $1;
   $54 = $1;
   $55 = (($54) + 28|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $1;
   $58 = (($57) + 32|0);
   $59 = HEAP32[$58>>2]|0;
   _yyDo($53,128,$56,$59,42456);
   $60 = $1;
   $61 = (($60) + 12|0);
   $62 = HEAP32[$61>>2]|0;
   $yypos1654 = $62;
   $63 = $1;
   $64 = (($63) + 44|0);
   $65 = HEAP32[$64>>2]|0;
   $yythunkpos1654 = $65;
   $66 = $1;
   $67 = (_yy_Spacechar($66)|0);
   $68 = ($67|0)!=(0);
   if (!($68)) {
    break;
   }
   $69 = $yypos1654;
   $70 = $1;
   $71 = (($70) + 12|0);
   HEAP32[$71>>2] = $69;
   $72 = $yythunkpos1654;
   $73 = $1;
   $74 = (($73) + 44|0);
   HEAP32[$74>>2] = $72;
   $75 = $1;
   $76 = (_yy_Spnl($75)|0);
   $77 = ($76|0)!=(0);
   if (!($77)) {
    break;
   }
   while(1) {
    $78 = $1;
    $79 = (($78) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $yypos1656 = $80;
    $81 = $1;
    $82 = (($81) + 44|0);
    $83 = HEAP32[$82>>2]|0;
    $yythunkpos1656 = $83;
    $84 = $1;
    $85 = (($84) + 12|0);
    $86 = HEAP32[$85>>2]|0;
    $yypos1657 = $86;
    $87 = $1;
    $88 = (($87) + 44|0);
    $89 = HEAP32[$88>>2]|0;
    $yythunkpos1657 = $89;
    $90 = $1;
    $91 = (_yy_MarkdownHtmlAttribute($90)|0);
    $92 = ($91|0)!=(0);
    if ($92) {
     label = 18;
     break;
    }
    $93 = $yypos1657;
    $94 = $1;
    $95 = (($94) + 12|0);
    HEAP32[$95>>2] = $93;
    $96 = $yythunkpos1657;
    $97 = $1;
    $98 = (($97) + 44|0);
    HEAP32[$98>>2] = $96;
    $99 = $1;
    $100 = $1;
    $101 = (($100) + 28|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = $1;
    $104 = (($103) + 32|0);
    $105 = HEAP32[$104>>2]|0;
    (_yyText($99,$102,$105)|0);
    $106 = $1;
    $107 = (($106) + 12|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = $1;
    $110 = (($109) + 28|0);
    HEAP32[$110>>2] = $108;
    $111 = $1;
    $112 = (_yy_HtmlAttribute($111)|0);
    $113 = ($112|0)!=(0);
    if (!($113)) {
     label = 21;
     break;
    }
    $114 = $1;
    $115 = $1;
    $116 = (($115) + 28|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = $1;
    $119 = (($118) + 32|0);
    $120 = HEAP32[$119>>2]|0;
    (_yyText($114,$117,$120)|0);
    $121 = $1;
    $122 = (($121) + 12|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = $1;
    $125 = (($124) + 32|0);
    HEAP32[$125>>2] = $123;
    $126 = $1;
    $127 = $1;
    $128 = (($127) + 28|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = $1;
    $131 = (($130) + 32|0);
    $132 = HEAP32[$131>>2]|0;
    _yyDo($126,129,$129,$132,42488);
   }
   if ((label|0) == 18) {
   }
   else if ((label|0) == 21) {
   }
   $133 = $yypos1656;
   $134 = $1;
   $135 = (($134) + 12|0);
   HEAP32[$135>>2] = $133;
   $136 = $yythunkpos1656;
   $137 = $1;
   $138 = (($137) + 44|0);
   HEAP32[$138>>2] = $136;
   $139 = $1;
   $140 = (_yy_MarkdownHtmlAttribute($139)|0);
   $141 = ($140|0)!=(0);
   if (!($141)) {
    break;
   }
   while(1) {
    $142 = $1;
    $143 = (($142) + 12|0);
    $144 = HEAP32[$143>>2]|0;
    $yypos1659 = $144;
    $145 = $1;
    $146 = (($145) + 44|0);
    $147 = HEAP32[$146>>2]|0;
    $yythunkpos1659 = $147;
    $148 = $1;
    $149 = $1;
    $150 = (($149) + 28|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = $1;
    $153 = (($152) + 32|0);
    $154 = HEAP32[$153>>2]|0;
    (_yyText($148,$151,$154)|0);
    $155 = $1;
    $156 = (($155) + 12|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = $1;
    $159 = (($158) + 28|0);
    HEAP32[$159>>2] = $157;
    $160 = $1;
    $161 = (_yy_HtmlAttribute($160)|0);
    $162 = ($161|0)!=(0);
    if (!($162)) {
     break;
    }
    $163 = $1;
    $164 = $1;
    $165 = (($164) + 28|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = $1;
    $168 = (($167) + 32|0);
    $169 = HEAP32[$168>>2]|0;
    (_yyText($163,$166,$169)|0);
    $170 = $1;
    $171 = (($170) + 12|0);
    $172 = HEAP32[$171>>2]|0;
    $173 = $1;
    $174 = (($173) + 32|0);
    HEAP32[$174>>2] = $172;
    $175 = $1;
    $176 = $1;
    $177 = (($176) + 28|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = $1;
    $180 = (($179) + 32|0);
    $181 = HEAP32[$180>>2]|0;
    _yyDo($175,130,$178,$181,42520);
   }
   $182 = $yypos1659;
   $183 = $1;
   $184 = (($183) + 12|0);
   HEAP32[$184>>2] = $182;
   $185 = $yythunkpos1659;
   $186 = $1;
   $187 = (($186) + 44|0);
   HEAP32[$187>>2] = $185;
   $188 = $1;
   $189 = (_yymatchChar($188,62)|0);
   $190 = ($189|0)!=(0);
   if (!($190)) {
    break;
   }
   $191 = $1;
   $192 = $1;
   $193 = (($192) + 28|0);
   $194 = HEAP32[$193>>2]|0;
   $195 = $1;
   $196 = (($195) + 32|0);
   $197 = HEAP32[$196>>2]|0;
   _yyDo($191,131,$194,$197,42552);
   $198 = $1;
   $199 = $1;
   $200 = (($199) + 28|0);
   $201 = HEAP32[$200>>2]|0;
   $202 = $1;
   $203 = (($202) + 32|0);
   $204 = HEAP32[$203>>2]|0;
   _yyDo($198,132,$201,$204,42584);
   $205 = $1;
   _yyDo($205,12,1,0,41392);
   $0 = 1;
   $212 = $0;
   STACKTOP = sp;return ($212|0);
  } else {
  }
 } while(0);
 $206 = $yypos0;
 $207 = $1;
 $208 = (($207) + 12|0);
 HEAP32[$208>>2] = $206;
 $209 = $yythunkpos0;
 $210 = $1;
 $211 = (($210) + 44|0);
 HEAP32[$211>>2] = $209;
 $0 = 0;
 $212 = $0;
 STACKTOP = sp;return ($212|0);
}
function _yy_HtmlComment($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos2074 = 0, $yypos2075 = 0, $yythunkpos0 = 0, $yythunkpos2074 = 0, $yythunkpos2075 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchString($8,42136)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos2074 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos2074 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos2075 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos2075 = $22;
    $23 = $1;
    $24 = (_yymatchString($23,42144)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
     label = 6;
     break;
    }
    $26 = $yypos2075;
    $27 = $1;
    $28 = (($27) + 12|0);
    HEAP32[$28>>2] = $26;
    $29 = $yythunkpos2075;
    $30 = $1;
    $31 = (($30) + 44|0);
    HEAP32[$31>>2] = $29;
    $32 = $1;
    $33 = (_yymatchDot($32)|0);
    $34 = ($33|0)!=(0);
    if (!($34)) {
     label = 8;
     break;
    }
   }
   if ((label|0) == 6) {
   }
   else if ((label|0) == 8) {
   }
   $35 = $yypos2074;
   $36 = $1;
   $37 = (($36) + 12|0);
   HEAP32[$37>>2] = $35;
   $38 = $yythunkpos2074;
   $39 = $1;
   $40 = (($39) + 44|0);
   HEAP32[$40>>2] = $38;
   $41 = $1;
   $42 = (_yymatchString($41,42144)|0);
   $43 = ($42|0)!=(0);
   if (!($43)) {
    break;
   }
   $0 = 1;
   $50 = $0;
   STACKTOP = sp;return ($50|0);
  } else {
  }
 } while(0);
 $44 = $yypos0;
 $45 = $1;
 $46 = (($45) + 12|0);
 HEAP32[$46>>2] = $44;
 $47 = $yythunkpos0;
 $48 = $1;
 $49 = (($48) + 44|0);
 HEAP32[$49>>2] = $47;
 $0 = 0;
 $50 = $0;
 STACKTOP = sp;return ($50|0);
}
function _yy_HtmlBlockSelfClosing($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos386 = 0, $yythunkpos0 = 0, $yythunkpos386 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yy_HtmlBlockType($14)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (_yy_Spnl($17)|0);
   $19 = ($18|0)!=(0);
   if (!($19)) {
    break;
   }
   while(1) {
    $20 = $1;
    $21 = (($20) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $yypos386 = $22;
    $23 = $1;
    $24 = (($23) + 44|0);
    $25 = HEAP32[$24>>2]|0;
    $yythunkpos386 = $25;
    $26 = $1;
    $27 = (_yy_HtmlAttribute($26)|0);
    $28 = ($27|0)!=(0);
    if (!($28)) {
     break;
    }
   }
   $29 = $yypos386;
   $30 = $1;
   $31 = (($30) + 12|0);
   HEAP32[$31>>2] = $29;
   $32 = $yythunkpos386;
   $33 = $1;
   $34 = (($33) + 44|0);
   HEAP32[$34>>2] = $32;
   $35 = $1;
   $36 = (_yymatchChar($35,47)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yy_Spnl($38)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $41 = $1;
   $42 = (_yymatchChar($41,62)|0);
   $43 = ($42|0)!=(0);
   if (!($43)) {
    break;
   }
   $0 = 1;
   $50 = $0;
   STACKTOP = sp;return ($50|0);
  } else {
  }
 } while(0);
 $44 = $yypos0;
 $45 = $1;
 $46 = (($45) + 12|0);
 HEAP32[$46>>2] = $44;
 $47 = $yythunkpos0;
 $48 = $1;
 $49 = (($48) + 44|0);
 HEAP32[$49>>2] = $47;
 $0 = 0;
 $50 = $0;
 STACKTOP = sp;return ($50|0);
}
function _yy_1_HtmlBlock($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 64|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_extension(256,$9)|0);
 if ($10) {
  $11 = (_mk_list(1,0)|0);
  $12 = $0;
  $13 = (($12) + 48|0);
  HEAP32[$13>>2] = $11;
  STACKTOP = sp;return;
 }
 $14 = $1;
 $15 = $3;
 $16 = HEAP32[$15>>2]|0;
 $17 = $3;
 $18 = (($17) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (_mk_pos_str($14,$16,$19)|0);
 $21 = $0;
 $22 = (($21) + 48|0);
 HEAP32[$22>>2] = $20;
 $23 = $0;
 $24 = (($23) + 64|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (_extension(512,$27)|0);
 if ($28) {
  $29 = $0;
  $30 = (($29) + 48|0);
  $31 = HEAP32[$30>>2]|0;
  HEAP16[$31>>1] = 40;
 } else {
  $32 = $0;
  $33 = (($32) + 48|0);
  $34 = HEAP32[$33>>2]|0;
  HEAP16[$34>>1] = 51;
 }
 STACKTOP = sp;return;
}
function _yy_1_MarkdownHtmlBlock($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 $14 = $0;
 $15 = (($14) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP16[$16>>1] = 40;
 STACKTOP = sp;return;
}
function _yy_InStyleTags($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos296 = 0, $yypos297 = 0, $yythunkpos0 = 0, $yythunkpos296 = 0, $yythunkpos297 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_StyleOpen($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos296 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos296 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos297 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos297 = $22;
    $23 = $1;
    $24 = (_yy_StyleClose($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
     label = 6;
     break;
    }
    $26 = $yypos297;
    $27 = $1;
    $28 = (($27) + 12|0);
    HEAP32[$28>>2] = $26;
    $29 = $yythunkpos297;
    $30 = $1;
    $31 = (($30) + 44|0);
    HEAP32[$31>>2] = $29;
    $32 = $1;
    $33 = (_yymatchDot($32)|0);
    $34 = ($33|0)!=(0);
    if (!($34)) {
     label = 8;
     break;
    }
   }
   if ((label|0) == 6) {
   }
   else if ((label|0) == 8) {
   }
   $35 = $yypos296;
   $36 = $1;
   $37 = (($36) + 12|0);
   HEAP32[$37>>2] = $35;
   $38 = $yythunkpos296;
   $39 = $1;
   $40 = (($39) + 44|0);
   HEAP32[$40>>2] = $38;
   $41 = $1;
   $42 = (_yy_StyleClose($41)|0);
   $43 = ($42|0)!=(0);
   if (!($43)) {
    break;
   }
   $0 = 1;
   $50 = $0;
   STACKTOP = sp;return ($50|0);
  } else {
  }
 } while(0);
 $44 = $yypos0;
 $45 = $1;
 $46 = (($45) + 12|0);
 HEAP32[$46>>2] = $44;
 $47 = $yythunkpos0;
 $48 = $1;
 $49 = (($48) + 44|0);
 HEAP32[$49>>2] = $47;
 $0 = 0;
 $50 = $0;
 STACKTOP = sp;return ($50|0);
}
function _yy_1_StyleBlock($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 64|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_extension(128,$9)|0);
 if ($10) {
  $11 = (_mk_list(1,0)|0);
  $12 = $0;
  $13 = (($12) + 48|0);
  HEAP32[$13>>2] = $11;
  STACKTOP = sp;return;
 } else {
  $14 = $1;
  $15 = (_mk_str($14)|0);
  $16 = $0;
  $17 = (($16) + 48|0);
  HEAP32[$17>>2] = $15;
  $18 = $0;
  $19 = (($18) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  HEAP16[$20>>1] = 51;
  STACKTOP = sp;return;
 }
}
function _yy_TableCaption($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $yypos0 = 0, $yypos292 = 0, $yythunkpos0 = 0, $yythunkpos292 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,3,0,41328);
 $9 = $1;
 $10 = (_yy_StartList($9)|0);
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $1;
   _yyDo($12,8,-3,0,41336);
   $13 = $1;
   $14 = (_yy_Label($13)|0);
   $15 = ($14|0)!=(0);
   if (!($15)) {
    break;
   }
   $16 = $1;
   _yyDo($16,8,-2,0,41336);
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos292 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos292 = $22;
   $23 = $1;
   $24 = (_yy_AutoLabel($23)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    $26 = $1;
    _yyDo($26,8,-1,0,41336);
    $27 = $1;
    $28 = $1;
    $29 = (($28) + 28|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = $1;
    $32 = (($31) + 32|0);
    $33 = HEAP32[$32>>2]|0;
    _yyDo($27,133,$30,$33,47560);
   } else {
    $34 = $yypos292;
    $35 = $1;
    $36 = (($35) + 12|0);
    HEAP32[$36>>2] = $34;
    $37 = $yythunkpos292;
    $38 = $1;
    $39 = (($38) + 44|0);
    HEAP32[$39>>2] = $37;
   }
   $40 = $1;
   $41 = (_yy_Sp($40)|0);
   $42 = ($41|0)!=(0);
   if (!($42)) {
    break;
   }
   $43 = $1;
   $44 = (_yy_Newline($43)|0);
   $45 = ($44|0)!=(0);
   if (!($45)) {
    break;
   }
   $46 = $1;
   $47 = $1;
   $48 = (($47) + 28|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $1;
   $51 = (($50) + 32|0);
   $52 = HEAP32[$51>>2]|0;
   _yyDo($46,134,$49,$52,47584);
   $53 = $1;
   _yyDo($53,12,3,0,41392);
   $0 = 1;
   $60 = $0;
   STACKTOP = sp;return ($60|0);
  } else {
  }
 } while(0);
 $54 = $yypos0;
 $55 = $1;
 $56 = (($55) + 12|0);
 HEAP32[$56>>2] = $54;
 $57 = $yythunkpos0;
 $58 = $1;
 $59 = (($58) + 44|0);
 HEAP32[$59>>2] = $57;
 $0 = 0;
 $60 = $0;
 STACKTOP = sp;return ($60|0);
}
function _yy_1_Table($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_TableBody($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos290 = 0, $yythunkpos0 = 0, $yythunkpos290 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 $9 = $1;
 $10 = (_yy_StartList($9)|0);
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $1;
   _yyDo($12,8,-1,0,41336);
   $13 = $1;
   $14 = (_yy_TableRow($13)|0);
   $15 = ($14|0)!=(0);
   if (!($15)) {
    break;
   }
   $16 = $1;
   $17 = $1;
   $18 = (($17) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $1;
   $21 = (($20) + 32|0);
   $22 = HEAP32[$21>>2]|0;
   _yyDo($16,135,$19,$22,47424);
   while(1) {
    $23 = $1;
    $24 = (($23) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $yypos290 = $25;
    $26 = $1;
    $27 = (($26) + 44|0);
    $28 = HEAP32[$27>>2]|0;
    $yythunkpos290 = $28;
    $29 = $1;
    $30 = (_yy_TableRow($29)|0);
    $31 = ($30|0)!=(0);
    if (!($31)) {
     break;
    }
    $32 = $1;
    $33 = $1;
    $34 = (($33) + 28|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $1;
    $37 = (($36) + 32|0);
    $38 = HEAP32[$37>>2]|0;
    _yyDo($32,135,$35,$38,47424);
   }
   $39 = $yypos290;
   $40 = $1;
   $41 = (($40) + 12|0);
   HEAP32[$41>>2] = $39;
   $42 = $yythunkpos290;
   $43 = $1;
   $44 = (($43) + 44|0);
   HEAP32[$44>>2] = $42;
   $45 = $1;
   $46 = $1;
   $47 = (($46) + 28|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $1;
   $50 = (($49) + 32|0);
   $51 = HEAP32[$50>>2]|0;
   _yyDo($45,136,$48,$51,47440);
   $52 = $1;
   _yyDo($52,12,1,0,41392);
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_2_Table($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP16[$7>>1] = 60;
 $8 = $0;
 $9 = (($8) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = (($11) + 52|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + -8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_cons($10,$15)|0);
 $17 = $0;
 $18 = (($17) + 52|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + -8|0);
 HEAP32[$20>>2] = $16;
 STACKTOP = sp;return;
}
function _yy_SeparatorLine($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos277 = 0, $yypos278 = 0, $yypos281 = 0, $yypos282 = 0, $yypos284 = 0, $yypos285 = 0, $yypos287 = 0, $yythunkpos0 = 0, $yythunkpos277 = 0;
 var $yythunkpos278 = 0, $yythunkpos281 = 0, $yythunkpos282 = 0, $yythunkpos284 = 0, $yythunkpos285 = 0, $yythunkpos287 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 $9 = $1;
 $10 = (_yy_StartList($9)|0);
 $11 = ($10|0)!=(0);
 L1: do {
  if ($11) {
   $12 = $1;
   _yyDo($12,8,-1,0,41336);
   $13 = $1;
   $14 = (($13) + 12|0);
   $15 = HEAP32[$14>>2]|0;
   $yypos277 = $15;
   $16 = $1;
   $17 = (($16) + 44|0);
   $18 = HEAP32[$17>>2]|0;
   $yythunkpos277 = $18;
   $19 = $1;
   $20 = (_yy_TableLine($19)|0);
   $21 = ($20|0)!=(0);
   if (!($21)) {
    break;
   }
   $22 = $yypos277;
   $23 = $1;
   $24 = (($23) + 12|0);
   HEAP32[$24>>2] = $22;
   $25 = $yythunkpos277;
   $26 = $1;
   $27 = (($26) + 44|0);
   HEAP32[$27>>2] = $25;
   $28 = $1;
   $29 = (($28) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $yypos278 = $30;
   $31 = $1;
   $32 = (($31) + 44|0);
   $33 = HEAP32[$32>>2]|0;
   $yythunkpos278 = $33;
   $34 = $1;
   $35 = (_yy_CellDivider($34)|0);
   $36 = ($35|0)!=(0);
   if ($36) {
   } else {
    $37 = $yypos278;
    $38 = $1;
    $39 = (($38) + 12|0);
    HEAP32[$39>>2] = $37;
    $40 = $yythunkpos278;
    $41 = $1;
    $42 = (($41) + 44|0);
    HEAP32[$42>>2] = $40;
   }
   $43 = $1;
   $44 = (($43) + 12|0);
   $45 = HEAP32[$44>>2]|0;
   $yypos282 = $45;
   $46 = $1;
   $47 = (($46) + 44|0);
   $48 = HEAP32[$47>>2]|0;
   $yythunkpos282 = $48;
   $49 = $1;
   $50 = (($49) + 12|0);
   $51 = HEAP32[$50>>2]|0;
   $yypos284 = $51;
   $52 = $1;
   $53 = (($52) + 44|0);
   $54 = HEAP32[$53>>2]|0;
   $yythunkpos284 = $54;
   $55 = $1;
   $56 = (_yy_HeaderAlignmentCell($55)|0);
   $57 = ($56|0)!=(0);
   do {
    if ($57) {
     $58 = $yypos284;
     $59 = $1;
     $60 = (($59) + 12|0);
     HEAP32[$60>>2] = $58;
     $61 = $yythunkpos284;
     $62 = $1;
     $63 = (($62) + 44|0);
     HEAP32[$63>>2] = $61;
     $64 = $1;
     $65 = (_yy_AlignmentCell($64)|0);
     $66 = ($65|0)!=(0);
     if ($66) {
      $67 = $1;
      $68 = $1;
      $69 = (($68) + 28|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = $1;
      $72 = (($71) + 32|0);
      $73 = HEAP32[$72>>2]|0;
      _yyDo($67,137,$70,$73,47168);
      break;
     } else {
      label = 14;
      break;
     }
    } else {
     label = 14;
    }
   } while(0);
   do {
    if ((label|0) == 14) {
     $74 = $yypos282;
     $75 = $1;
     $76 = (($75) + 12|0);
     HEAP32[$76>>2] = $74;
     $77 = $yythunkpos282;
     $78 = $1;
     $79 = (($78) + 44|0);
     HEAP32[$79>>2] = $77;
     $80 = $1;
     $81 = (_yy_AlignmentCell($80)|0);
     $82 = ($81|0)!=(0);
     if ($82) {
      $83 = $1;
      $84 = $1;
      $85 = (($84) + 28|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = $1;
      $88 = (($87) + 32|0);
      $89 = HEAP32[$88>>2]|0;
      _yyDo($83,138,$86,$89,47192);
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   while(1) {
    $90 = $1;
    $91 = (($90) + 12|0);
    $92 = HEAP32[$91>>2]|0;
    $yypos281 = $92;
    $93 = $1;
    $94 = (($93) + 44|0);
    $95 = HEAP32[$94>>2]|0;
    $yythunkpos281 = $95;
    $96 = $1;
    $97 = (($96) + 12|0);
    $98 = HEAP32[$97>>2]|0;
    $yypos285 = $98;
    $99 = $1;
    $100 = (($99) + 44|0);
    $101 = HEAP32[$100>>2]|0;
    $yythunkpos285 = $101;
    $102 = $1;
    $103 = (($102) + 12|0);
    $104 = HEAP32[$103>>2]|0;
    $yypos287 = $104;
    $105 = $1;
    $106 = (($105) + 44|0);
    $107 = HEAP32[$106>>2]|0;
    $yythunkpos287 = $107;
    $108 = $1;
    $109 = (_yy_HeaderAlignmentCell($108)|0);
    $110 = ($109|0)!=(0);
    do {
     if ($110) {
      $111 = $yypos287;
      $112 = $1;
      $113 = (($112) + 12|0);
      HEAP32[$113>>2] = $111;
      $114 = $yythunkpos287;
      $115 = $1;
      $116 = (($115) + 44|0);
      HEAP32[$116>>2] = $114;
      $117 = $1;
      $118 = (_yy_AlignmentCell($117)|0);
      $119 = ($118|0)!=(0);
      if ($119) {
       $120 = $1;
       $121 = $1;
       $122 = (($121) + 28|0);
       $123 = HEAP32[$122>>2]|0;
       $124 = $1;
       $125 = (($124) + 32|0);
       $126 = HEAP32[$125>>2]|0;
       _yyDo($120,137,$123,$126,47168);
       break;
      } else {
       label = 23;
       break;
      }
     } else {
      label = 23;
     }
    } while(0);
    if ((label|0) == 23) {
     label = 0;
     $127 = $yypos285;
     $128 = $1;
     $129 = (($128) + 12|0);
     HEAP32[$129>>2] = $127;
     $130 = $yythunkpos285;
     $131 = $1;
     $132 = (($131) + 44|0);
     HEAP32[$132>>2] = $130;
     $133 = $1;
     $134 = (_yy_AlignmentCell($133)|0);
     $135 = ($134|0)!=(0);
     if (!($135)) {
      break;
     }
     $136 = $1;
     $137 = $1;
     $138 = (($137) + 28|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = $1;
     $141 = (($140) + 32|0);
     $142 = HEAP32[$141>>2]|0;
     _yyDo($136,138,$139,$142,47192);
    }
   }
   $143 = $yypos281;
   $144 = $1;
   $145 = (($144) + 12|0);
   HEAP32[$145>>2] = $143;
   $146 = $yythunkpos281;
   $147 = $1;
   $148 = (($147) + 44|0);
   HEAP32[$148>>2] = $146;
   $149 = $1;
   $150 = (_yy_Sp($149)|0);
   $151 = ($150|0)!=(0);
   if (!($151)) {
    break;
   }
   $152 = $1;
   $153 = (_yy_Newline($152)|0);
   $154 = ($153|0)!=(0);
   if (!($154)) {
    break;
   }
   $155 = $1;
   $156 = $1;
   $157 = (($156) + 28|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = $1;
   $160 = (($159) + 32|0);
   $161 = HEAP32[$160>>2]|0;
   _yyDo($155,139,$158,$161,47216);
   $162 = $1;
   _yyDo($162,12,1,0,41392);
   $0 = 1;
   $169 = $0;
   STACKTOP = sp;return ($169|0);
  } else {
  }
 } while(0);
 $163 = $yypos0;
 $164 = $1;
 $165 = (($164) + 12|0);
 HEAP32[$165>>2] = $163;
 $166 = $yythunkpos0;
 $167 = $1;
 $168 = (($167) + 44|0);
 HEAP32[$168>>2] = $166;
 $0 = 0;
 $169 = $0;
 STACKTOP = sp;return ($169|0);
}
function _yy_3_Table($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $11 = $0;
  $12 = (($11) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $0;
  $15 = (($14) + 52|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + -8|0);
  HEAP32[$17>>2] = $13;
  STACKTOP = sp;return;
 } else {
  $18 = $0;
  $19 = (($18) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $0;
  $22 = (($21) + 52|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + -8|0);
  $25 = HEAP32[$24>>2]|0;
  _append_list($20,$25);
  STACKTOP = sp;return;
 }
}
function _yy_4_Table($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -8|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_5_Table($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -8|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_6_Table($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_7_Table($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $0;
  $12 = (($11) + 52|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + -4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $0;
  $17 = (($16) + 52|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + -8|0);
  $20 = HEAP32[$19>>2]|0;
  _append_list($15,$20);
 }
 $21 = $0;
 $22 = (($21) + 52|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + -8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $3;
 $27 = HEAP32[$26>>2]|0;
 $28 = $3;
 $29 = (($28) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (_mk_pos_list(52,$25,$27,$30)|0);
 $32 = $0;
 $33 = (($32) + 48|0);
 HEAP32[$33>>2] = $31;
 STACKTOP = sp;return;
}
function _yy_Image($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1828 = 0, $yythunkpos0 = 0, $yythunkpos1828 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,33)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = (($11) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $yypos1828 = $13;
   $14 = $1;
   $15 = (($14) + 44|0);
   $16 = HEAP32[$15>>2]|0;
   $yythunkpos1828 = $16;
   $17 = $1;
   $18 = (_yy_AutoLink($17)|0);
   $19 = ($18|0)!=(0);
   if ($19) {
    break;
   }
   $20 = $yypos1828;
   $21 = $1;
   $22 = (($21) + 12|0);
   HEAP32[$22>>2] = $20;
   $23 = $yythunkpos1828;
   $24 = $1;
   $25 = (($24) + 44|0);
   HEAP32[$25>>2] = $23;
   $26 = $1;
   $27 = (_yy_Link($26)|0);
   $28 = ($27|0)!=(0);
   if (!($28)) {
    break;
   }
   $29 = $1;
   $30 = $1;
   $31 = (($30) + 28|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $1;
   $34 = (($33) + 32|0);
   $35 = HEAP32[$34>>2]|0;
   _yyDo($29,140,$32,$35,44936);
   $0 = 1;
   $42 = $0;
   STACKTOP = sp;return ($42|0);
  } else {
  }
 } while(0);
 $36 = $yypos0;
 $37 = $1;
 $38 = (($37) + 12|0);
 HEAP32[$38>>2] = $36;
 $39 = $yythunkpos0;
 $40 = $1;
 $41 = (($40) + 44|0);
 HEAP32[$41>>2] = $39;
 $0 = 0;
 $42 = $0;
 STACKTOP = sp;return ($42|0);
}
function _yy_1_ImageBlock($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = ($9|0)==(28);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = $0;
 $12 = (($11) + 48|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP16[$13>>1] = 29;
 STACKTOP = sp;return;
}
function _yy_1_TOC($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = (_mk_node(86)|0);
 $6 = $0;
 $7 = (($6) + 48|0);
 HEAP32[$7>>2] = $5;
 $8 = (_mk_node(40)|0);
 $9 = $0;
 $10 = (($9) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 12|0);
 HEAP32[$12>>2] = $8;
 $13 = $0;
 $14 = (($13) + 64|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (_markdown_to_string($17,0,13)|0);
 $19 = $0;
 $20 = (($19) + 48|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + 4|0);
 HEAP32[$24>>2] = $18;
 STACKTOP = sp;return;
}
function _yy_HtmlBlockAddress($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1043 = 0, $yypos1044 = 0, $yypos1046 = 0, $yythunkpos0 = 0, $yythunkpos1043 = 0, $yythunkpos1044 = 0, $yythunkpos1046 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenAddress($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos1043 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos1043 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos1044 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos1044 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockAddress($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos1044;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos1044;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos1046 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos1046 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseAddress($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos1046;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos1046;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos1043;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos1043;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseAddress($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockArticle($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1029 = 0, $yypos1030 = 0, $yypos1032 = 0, $yythunkpos0 = 0, $yythunkpos1029 = 0, $yythunkpos1030 = 0, $yythunkpos1032 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenArticle($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos1029 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos1029 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos1030 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos1030 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockArticle($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos1030;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos1030;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos1032 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos1032 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseArticle($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos1032;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos1032;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos1029;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos1029;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseArticle($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockAside($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1015 = 0, $yypos1016 = 0, $yypos1018 = 0, $yythunkpos0 = 0, $yythunkpos1015 = 0, $yythunkpos1016 = 0, $yythunkpos1018 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenAside($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos1015 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos1015 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos1016 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos1016 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockAside($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos1016;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos1016;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos1018 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos1018 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseAside($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos1018;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos1018;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos1015;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos1015;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseAside($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockCanvas($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos987 = 0, $yypos988 = 0, $yypos990 = 0, $yythunkpos0 = 0, $yythunkpos987 = 0, $yythunkpos988 = 0, $yythunkpos990 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenCanvas($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos987 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos987 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos988 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos988 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockCanvas($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos988;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos988;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos990 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos990 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseCanvas($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos990;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos990;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos987;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos987;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseCanvas($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockBlockquote($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1001 = 0, $yypos1002 = 0, $yypos1004 = 0, $yythunkpos0 = 0, $yythunkpos1001 = 0, $yythunkpos1002 = 0, $yythunkpos1004 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenBlockquote($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos1001 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos1001 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos1002 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos1002 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockBlockquote($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos1002;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos1002;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos1004 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos1004 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseBlockquote($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos1004;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos1004;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos1001;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos1001;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseBlockquote($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockCenter($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos973 = 0, $yypos974 = 0, $yypos976 = 0, $yythunkpos0 = 0, $yythunkpos973 = 0, $yythunkpos974 = 0, $yythunkpos976 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenCenter($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos973 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos973 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos974 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos974 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockCenter($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos974;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos974;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos976 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos976 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseCenter($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos976;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos976;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos973;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos973;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseCenter($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockDir($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos959 = 0, $yypos960 = 0, $yypos962 = 0, $yythunkpos0 = 0, $yythunkpos959 = 0, $yythunkpos960 = 0, $yythunkpos962 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenDir($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos959 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos959 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos960 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos960 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockDir($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos960;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos960;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos962 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos962 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseDir($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos962;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos962;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos959;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos959;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseDir($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockDiv($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos945 = 0, $yypos946 = 0, $yypos948 = 0, $yythunkpos0 = 0, $yythunkpos945 = 0, $yythunkpos946 = 0, $yythunkpos948 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenDiv($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos945 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos945 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos946 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos946 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockDiv($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos946;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos946;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos948 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos948 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseDiv($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos948;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos948;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos945;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos945;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseDiv($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockDl($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos931 = 0, $yypos932 = 0, $yypos934 = 0, $yythunkpos0 = 0, $yythunkpos931 = 0, $yythunkpos932 = 0, $yythunkpos934 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenDl($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos931 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos931 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos932 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos932 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockDl($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos932;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos932;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos934 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos934 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseDl($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos934;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos934;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos931;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos931;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseDl($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockFieldset($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos917 = 0, $yypos918 = 0, $yypos920 = 0, $yythunkpos0 = 0, $yythunkpos917 = 0, $yythunkpos918 = 0, $yythunkpos920 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenFieldset($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos917 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos917 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos918 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos918 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockFieldset($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos918;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos918;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos920 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos920 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseFieldset($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos920;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos920;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos917;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos917;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseFieldset($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockFigure($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos903 = 0, $yypos904 = 0, $yypos906 = 0, $yythunkpos0 = 0, $yythunkpos903 = 0, $yythunkpos904 = 0, $yythunkpos906 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenFigure($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos903 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos903 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos904 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos904 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockFigure($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos904;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos904;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos906 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos906 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseFigure($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos906;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos906;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos903;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos903;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseFigure($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockFooter($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos889 = 0, $yypos890 = 0, $yypos892 = 0, $yythunkpos0 = 0, $yythunkpos889 = 0, $yythunkpos890 = 0, $yythunkpos892 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenFooter($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos889 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos889 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos890 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos890 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockFooter($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos890;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos890;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos892 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos892 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseFooter($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos892;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos892;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos889;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos889;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseFooter($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockForm($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos875 = 0, $yypos876 = 0, $yypos878 = 0, $yythunkpos0 = 0, $yythunkpos875 = 0, $yythunkpos876 = 0, $yythunkpos878 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenForm($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos875 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos875 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos876 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos876 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockForm($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos876;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos876;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos878 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos878 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseForm($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos878;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos878;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos875;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos875;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseForm($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockHeader($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos861 = 0, $yypos862 = 0, $yypos864 = 0, $yythunkpos0 = 0, $yythunkpos861 = 0, $yythunkpos862 = 0, $yythunkpos864 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenHeader($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos861 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos861 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos862 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos862 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockHeader($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos862;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos862;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos864 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos864 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseHeader($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos864;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos864;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos861;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos861;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseHeader($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockHgroup($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos847 = 0, $yypos848 = 0, $yypos850 = 0, $yythunkpos0 = 0, $yythunkpos847 = 0, $yythunkpos848 = 0, $yythunkpos850 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenHgroup($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos847 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos847 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos848 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos848 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockHgroup($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos848;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos848;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos850 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos850 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseHgroup($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos850;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos850;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos847;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos847;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseHgroup($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockH1($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos833 = 0, $yypos834 = 0, $yypos836 = 0, $yythunkpos0 = 0, $yythunkpos833 = 0, $yythunkpos834 = 0, $yythunkpos836 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenH1($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos833 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos833 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos834 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos834 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockH1($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos834;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos834;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos836 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos836 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseH1($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos836;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos836;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos833;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos833;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseH1($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockH2($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos819 = 0, $yypos820 = 0, $yypos822 = 0, $yythunkpos0 = 0, $yythunkpos819 = 0, $yythunkpos820 = 0, $yythunkpos822 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenH2($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos819 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos819 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos820 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos820 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockH2($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos820;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos820;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos822 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos822 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseH2($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos822;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos822;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos819;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos819;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseH2($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockH3($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos805 = 0, $yypos806 = 0, $yypos808 = 0, $yythunkpos0 = 0, $yythunkpos805 = 0, $yythunkpos806 = 0, $yythunkpos808 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenH3($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos805 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos805 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos806 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos806 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockH3($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos806;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos806;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos808 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos808 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseH3($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos808;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos808;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos805;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos805;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseH3($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockH4($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos791 = 0, $yypos792 = 0, $yypos794 = 0, $yythunkpos0 = 0, $yythunkpos791 = 0, $yythunkpos792 = 0, $yythunkpos794 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenH4($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos791 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos791 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos792 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos792 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockH4($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos792;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos792;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos794 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos794 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseH4($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos794;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos794;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos791;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos791;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseH4($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockH5($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos777 = 0, $yypos778 = 0, $yypos780 = 0, $yythunkpos0 = 0, $yythunkpos777 = 0, $yythunkpos778 = 0, $yythunkpos780 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenH5($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos777 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos777 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos778 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos778 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockH5($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos778;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos778;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos780 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos780 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseH5($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos780;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos780;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos777;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos777;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseH5($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockH6($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos763 = 0, $yypos764 = 0, $yypos766 = 0, $yythunkpos0 = 0, $yythunkpos763 = 0, $yythunkpos764 = 0, $yythunkpos766 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenH6($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos763 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos763 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos764 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos764 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockH6($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos764;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos764;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos766 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos766 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseH6($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos766;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos766;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos763;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos763;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseH6($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockMenu($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos749 = 0, $yypos750 = 0, $yypos752 = 0, $yythunkpos0 = 0, $yythunkpos749 = 0, $yythunkpos750 = 0, $yythunkpos752 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenMenu($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos749 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos749 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos750 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos750 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockMenu($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos750;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos750;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos752 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos752 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseMenu($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos752;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos752;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos749;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos749;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseMenu($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockNoframes($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos735 = 0, $yypos736 = 0, $yypos738 = 0, $yythunkpos0 = 0, $yythunkpos735 = 0, $yythunkpos736 = 0, $yythunkpos738 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenNoframes($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos735 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos735 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos736 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos736 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockNoframes($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos736;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos736;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos738 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos738 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseNoframes($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos738;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos738;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos735;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos735;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseNoframes($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockNoscript($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos721 = 0, $yypos722 = 0, $yypos724 = 0, $yythunkpos0 = 0, $yythunkpos721 = 0, $yythunkpos722 = 0, $yythunkpos724 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenNoscript($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos721 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos721 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos722 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos722 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockNoscript($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos722;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos722;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos724 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos724 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseNoscript($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos724;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos724;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos721;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos721;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseNoscript($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockOl($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos707 = 0, $yypos708 = 0, $yypos710 = 0, $yythunkpos0 = 0, $yythunkpos707 = 0, $yythunkpos708 = 0, $yythunkpos710 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenOl($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos707 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos707 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos708 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos708 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockOl($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos708;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos708;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos710 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos710 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseOl($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos710;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos710;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos707;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos707;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseOl($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockP($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos693 = 0, $yypos694 = 0, $yypos696 = 0, $yythunkpos0 = 0, $yythunkpos693 = 0, $yythunkpos694 = 0, $yythunkpos696 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenP($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos693 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos693 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos694 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos694 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockP($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos694;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos694;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos696 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos696 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseP($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos696;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos696;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos693;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos693;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseP($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockPre($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos679 = 0, $yypos680 = 0, $yypos682 = 0, $yythunkpos0 = 0, $yythunkpos679 = 0, $yythunkpos680 = 0, $yythunkpos682 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenPre($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos679 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos679 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos680 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos680 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockPre($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos680;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos680;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos682 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos682 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockClosePre($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos682;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos682;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos679;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos679;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockClosePre($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockProgress($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos665 = 0, $yypos666 = 0, $yypos668 = 0, $yythunkpos0 = 0, $yythunkpos665 = 0, $yythunkpos666 = 0, $yythunkpos668 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenProgress($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos665 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos665 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos666 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos666 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockProgress($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos666;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos666;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos668 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos668 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseProgress($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos668;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos668;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos665;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos665;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseProgress($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockSection($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos651 = 0, $yypos652 = 0, $yypos654 = 0, $yythunkpos0 = 0, $yythunkpos651 = 0, $yythunkpos652 = 0, $yythunkpos654 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenSection($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos651 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos651 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos652 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos652 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockSection($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos652;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos652;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos654 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos654 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseSection($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos654;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos654;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos651;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos651;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseSection($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockTable($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos637 = 0, $yypos638 = 0, $yypos640 = 0, $yythunkpos0 = 0, $yythunkpos637 = 0, $yythunkpos638 = 0, $yythunkpos640 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenTable($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos637 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos637 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos638 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos638 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockTable($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos638;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos638;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos640 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos640 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseTable($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos640;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos640;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos637;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos637;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseTable($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockUl($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos623 = 0, $yypos624 = 0, $yypos626 = 0, $yythunkpos0 = 0, $yythunkpos623 = 0, $yythunkpos624 = 0, $yythunkpos626 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenUl($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos623 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos623 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos624 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos624 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockUl($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos624;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos624;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos626 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos626 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseUl($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos626;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos626;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos623;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos623;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseUl($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockVideo($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos609 = 0, $yypos610 = 0, $yypos612 = 0, $yythunkpos0 = 0, $yythunkpos609 = 0, $yythunkpos610 = 0, $yythunkpos612 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenVideo($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos609 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos609 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos610 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos610 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockVideo($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos610;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos610;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos612 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos612 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseVideo($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos612;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos612;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos609;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos609;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseVideo($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockDd($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos595 = 0, $yypos596 = 0, $yypos598 = 0, $yythunkpos0 = 0, $yythunkpos595 = 0, $yythunkpos596 = 0, $yythunkpos598 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenDd($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos595 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos595 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos596 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos596 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockDd($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos596;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos596;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos598 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos598 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseDd($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos598;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos598;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos595;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos595;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseDd($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockDt($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos581 = 0, $yypos582 = 0, $yypos584 = 0, $yythunkpos0 = 0, $yythunkpos581 = 0, $yythunkpos582 = 0, $yythunkpos584 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenDt($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos581 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos581 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos582 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos582 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockDt($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos582;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos582;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos584 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos584 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseDt($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos584;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos584;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos581;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos581;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseDt($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockFrameset($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos567 = 0, $yypos568 = 0, $yypos570 = 0, $yythunkpos0 = 0, $yythunkpos567 = 0, $yythunkpos568 = 0, $yythunkpos570 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenFrameset($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos567 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos567 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos568 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos568 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockFrameset($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos568;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos568;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos570 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos570 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseFrameset($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos570;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos570;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos567;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos567;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseFrameset($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockLi($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos553 = 0, $yypos554 = 0, $yypos556 = 0, $yythunkpos0 = 0, $yythunkpos553 = 0, $yythunkpos554 = 0, $yythunkpos556 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenLi($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos553 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos553 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos554 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos554 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockLi($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos554;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos554;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos556 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos556 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseLi($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos556;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos556;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos553;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos553;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseLi($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockTbody($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos539 = 0, $yypos540 = 0, $yypos542 = 0, $yythunkpos0 = 0, $yythunkpos539 = 0, $yythunkpos540 = 0, $yythunkpos542 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenTbody($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos539 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos539 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos540 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos540 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockTbody($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos540;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos540;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos542 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos542 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseTbody($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos542;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos542;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos539;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos539;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseTbody($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockTd($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos525 = 0, $yypos526 = 0, $yypos528 = 0, $yythunkpos0 = 0, $yythunkpos525 = 0, $yythunkpos526 = 0, $yythunkpos528 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenTd($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos525 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos525 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos526 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos526 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockTd($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos526;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos526;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos528 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos528 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseTd($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos528;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos528;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos525;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos525;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseTd($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockTfoot($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos511 = 0, $yypos512 = 0, $yypos514 = 0, $yythunkpos0 = 0, $yythunkpos511 = 0, $yythunkpos512 = 0, $yythunkpos514 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenTfoot($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos511 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos511 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos512 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos512 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockTfoot($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos512;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos512;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos514 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos514 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseTfoot($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos514;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos514;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos511;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos511;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseTfoot($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockTh($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos497 = 0, $yypos498 = 0, $yypos500 = 0, $yythunkpos0 = 0, $yythunkpos497 = 0, $yythunkpos498 = 0, $yythunkpos500 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenTh($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos497 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos497 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos498 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos498 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockTh($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos498;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos498;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos500 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos500 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseTh($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos500;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos500;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos497;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos497;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseTh($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockThead($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos483 = 0, $yypos484 = 0, $yypos486 = 0, $yythunkpos0 = 0, $yythunkpos483 = 0, $yythunkpos484 = 0, $yythunkpos486 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenThead($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos483 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos483 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos484 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos484 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockThead($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos484;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos484;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos486 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos486 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseThead($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos486;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos486;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos483;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos483;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseThead($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockTr($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos469 = 0, $yypos470 = 0, $yypos472 = 0, $yythunkpos0 = 0, $yythunkpos469 = 0, $yythunkpos470 = 0, $yythunkpos472 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenTr($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos469 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos469 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos470 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos470 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockTr($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
    } else {
     $26 = $yypos470;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos470;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $yypos472 = $34;
     $35 = $1;
     $36 = (($35) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $yythunkpos472 = $37;
     $38 = $1;
     $39 = (_yy_HtmlBlockCloseTr($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 9;
      break;
     }
     $41 = $yypos472;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos472;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchDot($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      label = 11;
      break;
     }
    }
   }
   if ((label|0) == 9) {
   }
   else if ((label|0) == 11) {
   }
   $50 = $yypos469;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos469;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_HtmlBlockCloseTr($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  } else {
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_HtmlBlockScript($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos2057 = 0, $yypos2058 = 0, $yythunkpos0 = 0, $yythunkpos2057 = 0, $yythunkpos2058 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenScript($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos2057 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos2057 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos2058 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos2058 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockCloseScript($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
     label = 6;
     break;
    }
    $26 = $yypos2058;
    $27 = $1;
    $28 = (($27) + 12|0);
    HEAP32[$28>>2] = $26;
    $29 = $yythunkpos2058;
    $30 = $1;
    $31 = (($30) + 44|0);
    HEAP32[$31>>2] = $29;
    $32 = $1;
    $33 = (_yymatchDot($32)|0);
    $34 = ($33|0)!=(0);
    if (!($34)) {
     label = 8;
     break;
    }
   }
   if ((label|0) == 6) {
   }
   else if ((label|0) == 8) {
   }
   $35 = $yypos2057;
   $36 = $1;
   $37 = (($36) + 12|0);
   HEAP32[$37>>2] = $35;
   $38 = $yythunkpos2057;
   $39 = $1;
   $40 = (($39) + 44|0);
   HEAP32[$40>>2] = $38;
   $41 = $1;
   $42 = (_yy_HtmlBlockCloseScript($41)|0);
   $43 = ($42|0)!=(0);
   if (!($43)) {
    break;
   }
   $0 = 1;
   $50 = $0;
   STACKTOP = sp;return ($50|0);
  } else {
  }
 } while(0);
 $44 = $yypos0;
 $45 = $1;
 $46 = (($45) + 12|0);
 HEAP32[$46>>2] = $44;
 $47 = $yythunkpos0;
 $48 = $1;
 $49 = (($48) + 44|0);
 HEAP32[$49>>2] = $47;
 $0 = 0;
 $50 = $0;
 STACKTOP = sp;return ($50|0);
}
function _yy_HtmlBlockHead($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos449 = 0, $yypos450 = 0, $yythunkpos0 = 0, $yythunkpos449 = 0, $yythunkpos450 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenHead($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos449 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos449 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos450 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos450 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockCloseHead($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
     label = 6;
     break;
    }
    $26 = $yypos450;
    $27 = $1;
    $28 = (($27) + 12|0);
    HEAP32[$28>>2] = $26;
    $29 = $yythunkpos450;
    $30 = $1;
    $31 = (($30) + 44|0);
    HEAP32[$31>>2] = $29;
    $32 = $1;
    $33 = (_yymatchDot($32)|0);
    $34 = ($33|0)!=(0);
    if (!($34)) {
     label = 8;
     break;
    }
   }
   if ((label|0) == 6) {
   }
   else if ((label|0) == 8) {
   }
   $35 = $yypos449;
   $36 = $1;
   $37 = (($36) + 12|0);
   HEAP32[$37>>2] = $35;
   $38 = $yythunkpos449;
   $39 = $1;
   $40 = (($39) + 44|0);
   HEAP32[$40>>2] = $38;
   $41 = $1;
   $42 = (_yy_HtmlBlockCloseHead($41)|0);
   $43 = ($42|0)!=(0);
   if (!($43)) {
    break;
   }
   $0 = 1;
   $50 = $0;
   STACKTOP = sp;return ($50|0);
  } else {
  }
 } while(0);
 $44 = $yypos0;
 $45 = $1;
 $46 = (($45) + 12|0);
 HEAP32[$46>>2] = $44;
 $47 = $yythunkpos0;
 $48 = $1;
 $49 = (($48) + 44|0);
 HEAP32[$49>>2] = $47;
 $0 = 0;
 $50 = $0;
 STACKTOP = sp;return ($50|0);
}
function _yy_HtmlBlockMain($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos437 = 0, $yypos438 = 0, $yythunkpos0 = 0, $yythunkpos437 = 0, $yythunkpos438 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenMain($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos437 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos437 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos438 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos438 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockCloseMain($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
     label = 6;
     break;
    }
    $26 = $yypos438;
    $27 = $1;
    $28 = (($27) + 12|0);
    HEAP32[$28>>2] = $26;
    $29 = $yythunkpos438;
    $30 = $1;
    $31 = (($30) + 44|0);
    HEAP32[$31>>2] = $29;
    $32 = $1;
    $33 = (_yymatchDot($32)|0);
    $34 = ($33|0)!=(0);
    if (!($34)) {
     label = 8;
     break;
    }
   }
   if ((label|0) == 6) {
   }
   else if ((label|0) == 8) {
   }
   $35 = $yypos437;
   $36 = $1;
   $37 = (($36) + 12|0);
   HEAP32[$37>>2] = $35;
   $38 = $yythunkpos437;
   $39 = $1;
   $40 = (($39) + 44|0);
   HEAP32[$40>>2] = $38;
   $41 = $1;
   $42 = (_yy_HtmlBlockCloseMain($41)|0);
   $43 = ($42|0)!=(0);
   if (!($43)) {
    break;
   }
   $0 = 1;
   $50 = $0;
   STACKTOP = sp;return ($50|0);
  } else {
  }
 } while(0);
 $44 = $yypos0;
 $45 = $1;
 $46 = (($45) + 12|0);
 HEAP32[$46>>2] = $44;
 $47 = $yythunkpos0;
 $48 = $1;
 $49 = (($48) + 44|0);
 HEAP32[$49>>2] = $47;
 $0 = 0;
 $50 = $0;
 STACKTOP = sp;return ($50|0);
}
function _yy_HtmlBlockNav($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos425 = 0, $yypos426 = 0, $yythunkpos0 = 0, $yythunkpos425 = 0, $yythunkpos426 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenNav($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos425 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos425 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos426 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos426 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockCloseNav($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
     label = 6;
     break;
    }
    $26 = $yypos426;
    $27 = $1;
    $28 = (($27) + 12|0);
    HEAP32[$28>>2] = $26;
    $29 = $yythunkpos426;
    $30 = $1;
    $31 = (($30) + 44|0);
    HEAP32[$31>>2] = $29;
    $32 = $1;
    $33 = (_yymatchDot($32)|0);
    $34 = ($33|0)!=(0);
    if (!($34)) {
     label = 8;
     break;
    }
   }
   if ((label|0) == 6) {
   }
   else if ((label|0) == 8) {
   }
   $35 = $yypos425;
   $36 = $1;
   $37 = (($36) + 12|0);
   HEAP32[$37>>2] = $35;
   $38 = $yythunkpos425;
   $39 = $1;
   $40 = (($39) + 44|0);
   HEAP32[$40>>2] = $38;
   $41 = $1;
   $42 = (_yy_HtmlBlockCloseNav($41)|0);
   $43 = ($42|0)!=(0);
   if (!($43)) {
    break;
   }
   $0 = 1;
   $50 = $0;
   STACKTOP = sp;return ($50|0);
  } else {
  }
 } while(0);
 $44 = $yypos0;
 $45 = $1;
 $46 = (($45) + 12|0);
 HEAP32[$46>>2] = $44;
 $47 = $yythunkpos0;
 $48 = $1;
 $49 = (($48) + 44|0);
 HEAP32[$49>>2] = $47;
 $0 = 0;
 $50 = $0;
 STACKTOP = sp;return ($50|0);
}
function _yy_HtmlBlockDel($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos413 = 0, $yypos414 = 0, $yythunkpos0 = 0, $yythunkpos413 = 0, $yythunkpos414 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenDel($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos413 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos413 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos414 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos414 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockCloseDel($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
     label = 6;
     break;
    }
    $26 = $yypos414;
    $27 = $1;
    $28 = (($27) + 12|0);
    HEAP32[$28>>2] = $26;
    $29 = $yythunkpos414;
    $30 = $1;
    $31 = (($30) + 44|0);
    HEAP32[$31>>2] = $29;
    $32 = $1;
    $33 = (_yymatchDot($32)|0);
    $34 = ($33|0)!=(0);
    if (!($34)) {
     label = 8;
     break;
    }
   }
   if ((label|0) == 6) {
   }
   else if ((label|0) == 8) {
   }
   $35 = $yypos413;
   $36 = $1;
   $37 = (($36) + 12|0);
   HEAP32[$37>>2] = $35;
   $38 = $yythunkpos413;
   $39 = $1;
   $40 = (($39) + 44|0);
   HEAP32[$40>>2] = $38;
   $41 = $1;
   $42 = (_yy_HtmlBlockCloseDel($41)|0);
   $43 = ($42|0)!=(0);
   if (!($43)) {
    break;
   }
   $0 = 1;
   $50 = $0;
   STACKTOP = sp;return ($50|0);
  } else {
  }
 } while(0);
 $44 = $yypos0;
 $45 = $1;
 $46 = (($45) + 12|0);
 HEAP32[$46>>2] = $44;
 $47 = $yythunkpos0;
 $48 = $1;
 $49 = (($48) + 44|0);
 HEAP32[$49>>2] = $47;
 $0 = 0;
 $50 = $0;
 STACKTOP = sp;return ($50|0);
}
function _yy_HtmlBlockIns($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos401 = 0, $yypos402 = 0, $yythunkpos0 = 0, $yythunkpos401 = 0, $yythunkpos402 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenIns($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos401 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos401 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos402 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos402 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockCloseIns($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
     label = 6;
     break;
    }
    $26 = $yypos402;
    $27 = $1;
    $28 = (($27) + 12|0);
    HEAP32[$28>>2] = $26;
    $29 = $yythunkpos402;
    $30 = $1;
    $31 = (($30) + 44|0);
    HEAP32[$31>>2] = $29;
    $32 = $1;
    $33 = (_yymatchDot($32)|0);
    $34 = ($33|0)!=(0);
    if (!($34)) {
     label = 8;
     break;
    }
   }
   if ((label|0) == 6) {
   }
   else if ((label|0) == 8) {
   }
   $35 = $yypos401;
   $36 = $1;
   $37 = (($36) + 12|0);
   HEAP32[$37>>2] = $35;
   $38 = $yythunkpos401;
   $39 = $1;
   $40 = (($39) + 44|0);
   HEAP32[$40>>2] = $38;
   $41 = $1;
   $42 = (_yy_HtmlBlockCloseIns($41)|0);
   $43 = ($42|0)!=(0);
   if (!($43)) {
    break;
   }
   $0 = 1;
   $50 = $0;
   STACKTOP = sp;return ($50|0);
  } else {
  }
 } while(0);
 $44 = $yypos0;
 $45 = $1;
 $46 = (($45) + 12|0);
 HEAP32[$46>>2] = $44;
 $47 = $yythunkpos0;
 $48 = $1;
 $49 = (($48) + 44|0);
 HEAP32[$49>>2] = $47;
 $0 = 0;
 $50 = $0;
 STACKTOP = sp;return ($50|0);
}
function _yy_HtmlBlockMark($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos389 = 0, $yypos390 = 0, $yythunkpos0 = 0, $yythunkpos389 = 0, $yythunkpos390 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_HtmlBlockOpenMark($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   while(1) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $yypos389 = $13;
    $14 = $1;
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $yythunkpos389 = $16;
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos390 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos390 = $22;
    $23 = $1;
    $24 = (_yy_HtmlBlockCloseMark($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
     label = 6;
     break;
    }
    $26 = $yypos390;
    $27 = $1;
    $28 = (($27) + 12|0);
    HEAP32[$28>>2] = $26;
    $29 = $yythunkpos390;
    $30 = $1;
    $31 = (($30) + 44|0);
    HEAP32[$31>>2] = $29;
    $32 = $1;
    $33 = (_yymatchDot($32)|0);
    $34 = ($33|0)!=(0);
    if (!($34)) {
     label = 8;
     break;
    }
   }
   if ((label|0) == 6) {
   }
   else if ((label|0) == 8) {
   }
   $35 = $yypos389;
   $36 = $1;
   $37 = (($36) + 12|0);
   HEAP32[$37>>2] = $35;
   $38 = $yythunkpos389;
   $39 = $1;
   $40 = (($39) + 44|0);
   HEAP32[$40>>2] = $38;
   $41 = $1;
   $42 = (_yy_HtmlBlockCloseMark($41)|0);
   $43 = ($42|0)!=(0);
   if (!($43)) {
    break;
   }
   $0 = 1;
   $50 = $0;
   STACKTOP = sp;return ($50|0);
  } else {
  }
 } while(0);
 $44 = $yypos0;
 $45 = $1;
 $46 = (($45) + 12|0);
 HEAP32[$46>>2] = $44;
 $47 = $yythunkpos0;
 $48 = $1;
 $49 = (($48) + 44|0);
 HEAP32[$49>>2] = $47;
 $0 = 0;
 $50 = $0;
 STACKTOP = sp;return ($50|0);
}
function _yy_Inlines($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $yypos0 = 0, $yypos1891 = 0, $yypos1892 = 0, $yypos1894 = 0, $yypos1895 = 0, $yypos1896 = 0, $yypos1898 = 0, $yypos1899 = 0, $yypos1900 = 0, $yythunkpos0 = 0, $yythunkpos1891 = 0, $yythunkpos1892 = 0, $yythunkpos1894 = 0, $yythunkpos1895 = 0, $yythunkpos1896 = 0, $yythunkpos1898 = 0, $yythunkpos1899 = 0, $yythunkpos1900 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,2,0,41328);
 $9 = $1;
 $10 = (_yy_StartList($9)|0);
 $11 = ($10|0)!=(0);
 L1: do {
  if ($11) {
   $12 = $1;
   _yyDo($12,8,-2,0,41336);
   $13 = $1;
   $14 = (($13) + 12|0);
   $15 = HEAP32[$14>>2]|0;
   $yypos1892 = $15;
   $16 = $1;
   $17 = (($16) + 44|0);
   $18 = HEAP32[$17>>2]|0;
   $yythunkpos1892 = $18;
   $19 = $1;
   $20 = (($19) + 12|0);
   $21 = HEAP32[$20>>2]|0;
   $yypos1894 = $21;
   $22 = $1;
   $23 = (($22) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   $yythunkpos1894 = $24;
   $25 = $1;
   $26 = (_yy_Endline($25)|0);
   $27 = ($26|0)!=(0);
   do {
    if ($27) {
     label = 9;
    } else {
     $28 = $yypos1894;
     $29 = $1;
     $30 = (($29) + 12|0);
     HEAP32[$30>>2] = $28;
     $31 = $yythunkpos1894;
     $32 = $1;
     $33 = (($32) + 44|0);
     HEAP32[$33>>2] = $31;
     $34 = $1;
     $35 = (_yy_Inline($34)|0);
     $36 = ($35|0)!=(0);
     if ($36) {
      $37 = $1;
      $38 = $1;
      $39 = (($38) + 28|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = $1;
      $42 = (($41) + 32|0);
      $43 = HEAP32[$42>>2]|0;
      _yyDo($37,141,$40,$43,46952);
      break;
     } else {
      label = 9;
      break;
     }
    }
   } while(0);
   do {
    if ((label|0) == 9) {
     $44 = $yypos1892;
     $45 = $1;
     $46 = (($45) + 12|0);
     HEAP32[$46>>2] = $44;
     $47 = $yythunkpos1892;
     $48 = $1;
     $49 = (($48) + 44|0);
     HEAP32[$49>>2] = $47;
     $50 = $1;
     $51 = (_yy_Endline($50)|0);
     $52 = ($51|0)!=(0);
     if (!($52)) {
      break L1;
     }
     $53 = $1;
     _yyDo($53,8,-1,0,41336);
     $54 = $1;
     $55 = (($54) + 12|0);
     $56 = HEAP32[$55>>2]|0;
     $yypos1895 = $56;
     $57 = $1;
     $58 = (($57) + 44|0);
     $59 = HEAP32[$58>>2]|0;
     $yythunkpos1895 = $59;
     $60 = $1;
     $61 = (_yy_Inline($60)|0);
     $62 = ($61|0)!=(0);
     if ($62) {
      $63 = $yypos1895;
      $64 = $1;
      $65 = (($64) + 12|0);
      HEAP32[$65>>2] = $63;
      $66 = $yythunkpos1895;
      $67 = $1;
      $68 = (($67) + 44|0);
      HEAP32[$68>>2] = $66;
      $69 = $1;
      $70 = $1;
      $71 = (($70) + 28|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = $1;
      $74 = (($73) + 32|0);
      $75 = HEAP32[$74>>2]|0;
      _yyDo($69,142,$72,$75,46968);
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   while(1) {
    $76 = $1;
    $77 = (($76) + 12|0);
    $78 = HEAP32[$77>>2]|0;
    $yypos1891 = $78;
    $79 = $1;
    $80 = (($79) + 44|0);
    $81 = HEAP32[$80>>2]|0;
    $yythunkpos1891 = $81;
    $82 = $1;
    $83 = (($82) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    $yypos1896 = $84;
    $85 = $1;
    $86 = (($85) + 44|0);
    $87 = HEAP32[$86>>2]|0;
    $yythunkpos1896 = $87;
    $88 = $1;
    $89 = (($88) + 12|0);
    $90 = HEAP32[$89>>2]|0;
    $yypos1898 = $90;
    $91 = $1;
    $92 = (($91) + 44|0);
    $93 = HEAP32[$92>>2]|0;
    $yythunkpos1898 = $93;
    $94 = $1;
    $95 = (_yy_Endline($94)|0);
    $96 = ($95|0)!=(0);
    do {
     if ($96) {
      label = 21;
     } else {
      $97 = $yypos1898;
      $98 = $1;
      $99 = (($98) + 12|0);
      HEAP32[$99>>2] = $97;
      $100 = $yythunkpos1898;
      $101 = $1;
      $102 = (($101) + 44|0);
      HEAP32[$102>>2] = $100;
      $103 = $1;
      $104 = (_yy_Inline($103)|0);
      $105 = ($104|0)!=(0);
      if ($105) {
       $106 = $1;
       $107 = $1;
       $108 = (($107) + 28|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = $1;
       $111 = (($110) + 32|0);
       $112 = HEAP32[$111>>2]|0;
       _yyDo($106,141,$109,$112,46952);
       break;
      } else {
       label = 21;
       break;
      }
     }
    } while(0);
    if ((label|0) == 21) {
     label = 0;
     $113 = $yypos1896;
     $114 = $1;
     $115 = (($114) + 12|0);
     HEAP32[$115>>2] = $113;
     $116 = $yythunkpos1896;
     $117 = $1;
     $118 = (($117) + 44|0);
     HEAP32[$118>>2] = $116;
     $119 = $1;
     $120 = (_yy_Endline($119)|0);
     $121 = ($120|0)!=(0);
     if (!($121)) {
      label = 22;
      break;
     }
     $122 = $1;
     _yyDo($122,8,-1,0,41336);
     $123 = $1;
     $124 = (($123) + 12|0);
     $125 = HEAP32[$124>>2]|0;
     $yypos1899 = $125;
     $126 = $1;
     $127 = (($126) + 44|0);
     $128 = HEAP32[$127>>2]|0;
     $yythunkpos1899 = $128;
     $129 = $1;
     $130 = (_yy_Inline($129)|0);
     $131 = ($130|0)!=(0);
     if (!($131)) {
      label = 24;
      break;
     }
     $132 = $yypos1899;
     $133 = $1;
     $134 = (($133) + 12|0);
     HEAP32[$134>>2] = $132;
     $135 = $yythunkpos1899;
     $136 = $1;
     $137 = (($136) + 44|0);
     HEAP32[$137>>2] = $135;
     $138 = $1;
     $139 = $1;
     $140 = (($139) + 28|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = $1;
     $143 = (($142) + 32|0);
     $144 = HEAP32[$143>>2]|0;
     _yyDo($138,142,$141,$144,46968);
    }
   }
   if ((label|0) == 22) {
   }
   else if ((label|0) == 24) {
   }
   $145 = $yypos1891;
   $146 = $1;
   $147 = (($146) + 12|0);
   HEAP32[$147>>2] = $145;
   $148 = $yythunkpos1891;
   $149 = $1;
   $150 = (($149) + 44|0);
   HEAP32[$150>>2] = $148;
   $151 = $1;
   $152 = (($151) + 12|0);
   $153 = HEAP32[$152>>2]|0;
   $yypos1900 = $153;
   $154 = $1;
   $155 = (($154) + 44|0);
   $156 = HEAP32[$155>>2]|0;
   $yythunkpos1900 = $156;
   $157 = $1;
   $158 = (_yy_voidEndline($157)|0);
   $159 = ($158|0)!=(0);
   if ($159) {
   } else {
    $160 = $yypos1900;
    $161 = $1;
    $162 = (($161) + 12|0);
    HEAP32[$162>>2] = $160;
    $163 = $yythunkpos1900;
    $164 = $1;
    $165 = (($164) + 44|0);
    HEAP32[$165>>2] = $163;
   }
   $166 = $1;
   $167 = $1;
   $168 = (($167) + 28|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = $1;
   $171 = (($170) + 32|0);
   $172 = HEAP32[$171>>2]|0;
   _yyDo($166,143,$169,$172,46984);
   $173 = $1;
   _yyDo($173,12,2,0,41392);
   $0 = 1;
   $180 = $0;
   STACKTOP = sp;return ($180|0);
  } else {
  }
 } while(0);
 $174 = $yypos0;
 $175 = $1;
 $176 = (($175) + 12|0);
 HEAP32[$176>>2] = $174;
 $177 = $yythunkpos0;
 $178 = $1;
 $179 = (($178) + 44|0);
 HEAP32[$179>>2] = $177;
 $0 = 0;
 $180 = $0;
 STACKTOP = sp;return ($180|0);
}
function _yy_1_Para($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = (($10) + 48|0);
 HEAP32[$11>>2] = $9;
 $12 = $0;
 $13 = (($12) + 48|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP16[$14>>1] = 5;
 STACKTOP = sp;return;
}
function _yy_1_Plain($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = (($10) + 48|0);
 HEAP32[$11>>2] = $9;
 $12 = $0;
 $13 = (($12) + 48|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP16[$14>>1] = 6;
 STACKTOP = sp;return;
}
function _yy_CriticAddition($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $yypos0 = 0, $yypos56 = 0, $yypos57 = 0, $yythunkpos0 = 0, $yythunkpos56 = 0, $yythunkpos57 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchString($8,46032)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = $1;
   $13 = (($12) + 28|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $1;
   $16 = (($15) + 32|0);
   $17 = HEAP32[$16>>2]|0;
   (_yyText($11,$14,$17)|0);
   $18 = $1;
   $19 = (($18) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $1;
   $22 = (($21) + 28|0);
   HEAP32[$22>>2] = $20;
   while(1) {
    $23 = $1;
    $24 = (($23) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $yypos56 = $25;
    $26 = $1;
    $27 = (($26) + 44|0);
    $28 = HEAP32[$27>>2]|0;
    $yythunkpos56 = $28;
    $29 = $1;
    $30 = (($29) + 12|0);
    $31 = HEAP32[$30>>2]|0;
    $yypos57 = $31;
    $32 = $1;
    $33 = (($32) + 44|0);
    $34 = HEAP32[$33>>2]|0;
    $yythunkpos57 = $34;
    $35 = $1;
    $36 = (_yymatchString($35,46040)|0);
    $37 = ($36|0)!=(0);
    if ($37) {
     label = 7;
     break;
    }
    $38 = $yypos57;
    $39 = $1;
    $40 = (($39) + 12|0);
    HEAP32[$40>>2] = $38;
    $41 = $yythunkpos57;
    $42 = $1;
    $43 = (($42) + 44|0);
    HEAP32[$43>>2] = $41;
    $44 = $1;
    $45 = (_yymatchDot($44)|0);
    $46 = ($45|0)!=(0);
    if (!($46)) {
     label = 9;
     break;
    }
   }
   if ((label|0) == 7) {
   }
   else if ((label|0) == 9) {
   }
   $47 = $yypos56;
   $48 = $1;
   $49 = (($48) + 12|0);
   HEAP32[$49>>2] = $47;
   $50 = $yythunkpos56;
   $51 = $1;
   $52 = (($51) + 44|0);
   HEAP32[$52>>2] = $50;
   $53 = $1;
   $54 = $1;
   $55 = (($54) + 28|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $1;
   $58 = (($57) + 32|0);
   $59 = HEAP32[$58>>2]|0;
   (_yyText($53,$56,$59)|0);
   $60 = $1;
   $61 = (($60) + 12|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $1;
   $64 = (($63) + 32|0);
   HEAP32[$64>>2] = $62;
   $65 = $1;
   $66 = (_yymatchString($65,46040)|0);
   $67 = ($66|0)!=(0);
   if (!($67)) {
    break;
   }
   $68 = $1;
   $69 = $1;
   $70 = (($69) + 28|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $1;
   $73 = (($72) + 32|0);
   $74 = HEAP32[$73>>2]|0;
   _yyDo($68,144,$71,$74,46048);
   $0 = 1;
   $81 = $0;
   STACKTOP = sp;return ($81|0);
  } else {
  }
 } while(0);
 $75 = $yypos0;
 $76 = $1;
 $77 = (($76) + 12|0);
 HEAP32[$77>>2] = $75;
 $78 = $yythunkpos0;
 $79 = $1;
 $80 = (($79) + 44|0);
 HEAP32[$80>>2] = $78;
 $0 = 0;
 $81 = $0;
 STACKTOP = sp;return ($81|0);
}
function _yy_CriticDeletion($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $yypos0 = 0, $yypos52 = 0, $yypos53 = 0, $yythunkpos0 = 0, $yythunkpos52 = 0, $yythunkpos53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchString($8,45992)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = $1;
   $13 = (($12) + 28|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $1;
   $16 = (($15) + 32|0);
   $17 = HEAP32[$16>>2]|0;
   (_yyText($11,$14,$17)|0);
   $18 = $1;
   $19 = (($18) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $1;
   $22 = (($21) + 28|0);
   HEAP32[$22>>2] = $20;
   while(1) {
    $23 = $1;
    $24 = (($23) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $yypos52 = $25;
    $26 = $1;
    $27 = (($26) + 44|0);
    $28 = HEAP32[$27>>2]|0;
    $yythunkpos52 = $28;
    $29 = $1;
    $30 = (($29) + 12|0);
    $31 = HEAP32[$30>>2]|0;
    $yypos53 = $31;
    $32 = $1;
    $33 = (($32) + 44|0);
    $34 = HEAP32[$33>>2]|0;
    $yythunkpos53 = $34;
    $35 = $1;
    $36 = (_yymatchString($35,46000)|0);
    $37 = ($36|0)!=(0);
    if ($37) {
     label = 7;
     break;
    }
    $38 = $yypos53;
    $39 = $1;
    $40 = (($39) + 12|0);
    HEAP32[$40>>2] = $38;
    $41 = $yythunkpos53;
    $42 = $1;
    $43 = (($42) + 44|0);
    HEAP32[$43>>2] = $41;
    $44 = $1;
    $45 = (_yymatchDot($44)|0);
    $46 = ($45|0)!=(0);
    if (!($46)) {
     label = 9;
     break;
    }
   }
   if ((label|0) == 7) {
   }
   else if ((label|0) == 9) {
   }
   $47 = $yypos52;
   $48 = $1;
   $49 = (($48) + 12|0);
   HEAP32[$49>>2] = $47;
   $50 = $yythunkpos52;
   $51 = $1;
   $52 = (($51) + 44|0);
   HEAP32[$52>>2] = $50;
   $53 = $1;
   $54 = $1;
   $55 = (($54) + 28|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $1;
   $58 = (($57) + 32|0);
   $59 = HEAP32[$58>>2]|0;
   (_yyText($53,$56,$59)|0);
   $60 = $1;
   $61 = (($60) + 12|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $1;
   $64 = (($63) + 32|0);
   HEAP32[$64>>2] = $62;
   $65 = $1;
   $66 = (_yymatchString($65,46000)|0);
   $67 = ($66|0)!=(0);
   if (!($67)) {
    break;
   }
   $68 = $1;
   $69 = $1;
   $70 = (($69) + 28|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $1;
   $73 = (($72) + 32|0);
   $74 = HEAP32[$73>>2]|0;
   _yyDo($68,145,$71,$74,46008);
   $0 = 1;
   $81 = $0;
   STACKTOP = sp;return ($81|0);
  } else {
  }
 } while(0);
 $75 = $yypos0;
 $76 = $1;
 $77 = (($76) + 12|0);
 HEAP32[$77>>2] = $75;
 $78 = $yythunkpos0;
 $79 = $1;
 $80 = (($79) + 44|0);
 HEAP32[$80>>2] = $78;
 $0 = 0;
 $81 = $0;
 STACKTOP = sp;return ($81|0);
}
function _yy_CriticSubstitution($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yythunkpos0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 $9 = $1;
 $10 = (_yy_StartList($9)|0);
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $1;
   _yyDo($12,8,-1,0,41336);
   $13 = $1;
   $14 = (_yymatchString($13,45848)|0);
   $15 = ($14|0)!=(0);
   if (!($15)) {
    break;
   }
   $16 = $1;
   $17 = (_yy_CriticSubstDel($16)|0);
   $18 = ($17|0)!=(0);
   if (!($18)) {
    break;
   }
   $19 = $1;
   $20 = $1;
   $21 = (($20) + 28|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $1;
   $24 = (($23) + 32|0);
   $25 = HEAP32[$24>>2]|0;
   _yyDo($19,146,$22,$25,45856);
   $26 = $1;
   $27 = (_yymatchString($26,45880)|0);
   $28 = ($27|0)!=(0);
   if (!($28)) {
    break;
   }
   $29 = $1;
   $30 = (_yy_CriticSubstAdd($29)|0);
   $31 = ($30|0)!=(0);
   if (!($31)) {
    break;
   }
   $32 = $1;
   $33 = $1;
   $34 = (($33) + 28|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $1;
   $37 = (($36) + 32|0);
   $38 = HEAP32[$37>>2]|0;
   _yyDo($32,147,$35,$38,45888);
   $39 = $1;
   $40 = (_yymatchString($39,45912)|0);
   $41 = ($40|0)!=(0);
   if (!($41)) {
    break;
   }
   $42 = $1;
   $43 = $1;
   $44 = (($43) + 28|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $1;
   $47 = (($46) + 32|0);
   $48 = HEAP32[$47>>2]|0;
   _yyDo($42,148,$45,$48,45920);
   $49 = $1;
   _yyDo($49,12,1,0,41392);
   $0 = 1;
   $56 = $0;
   STACKTOP = sp;return ($56|0);
  } else {
  }
 } while(0);
 $50 = $yypos0;
 $51 = $1;
 $52 = (($51) + 12|0);
 HEAP32[$52>>2] = $50;
 $53 = $yythunkpos0;
 $54 = $1;
 $55 = (($54) + 44|0);
 HEAP32[$55>>2] = $53;
 $0 = 0;
 $56 = $0;
 STACKTOP = sp;return ($56|0);
}
function _yy_CriticHighlight($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $yypos0 = 0, $yypos47 = 0, $yypos48 = 0, $yythunkpos0 = 0, $yythunkpos47 = 0, $yythunkpos48 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchString($8,45808)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = $1;
   $13 = (($12) + 28|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $1;
   $16 = (($15) + 32|0);
   $17 = HEAP32[$16>>2]|0;
   (_yyText($11,$14,$17)|0);
   $18 = $1;
   $19 = (($18) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $1;
   $22 = (($21) + 28|0);
   HEAP32[$22>>2] = $20;
   while(1) {
    $23 = $1;
    $24 = (($23) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $yypos47 = $25;
    $26 = $1;
    $27 = (($26) + 44|0);
    $28 = HEAP32[$27>>2]|0;
    $yythunkpos47 = $28;
    $29 = $1;
    $30 = (($29) + 12|0);
    $31 = HEAP32[$30>>2]|0;
    $yypos48 = $31;
    $32 = $1;
    $33 = (($32) + 44|0);
    $34 = HEAP32[$33>>2]|0;
    $yythunkpos48 = $34;
    $35 = $1;
    $36 = (_yymatchString($35,45816)|0);
    $37 = ($36|0)!=(0);
    if ($37) {
     label = 7;
     break;
    }
    $38 = $yypos48;
    $39 = $1;
    $40 = (($39) + 12|0);
    HEAP32[$40>>2] = $38;
    $41 = $yythunkpos48;
    $42 = $1;
    $43 = (($42) + 44|0);
    HEAP32[$43>>2] = $41;
    $44 = $1;
    $45 = (_yymatchDot($44)|0);
    $46 = ($45|0)!=(0);
    if (!($46)) {
     label = 9;
     break;
    }
   }
   if ((label|0) == 7) {
   }
   else if ((label|0) == 9) {
   }
   $47 = $yypos47;
   $48 = $1;
   $49 = (($48) + 12|0);
   HEAP32[$49>>2] = $47;
   $50 = $yythunkpos47;
   $51 = $1;
   $52 = (($51) + 44|0);
   HEAP32[$52>>2] = $50;
   $53 = $1;
   $54 = $1;
   $55 = (($54) + 28|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $1;
   $58 = (($57) + 32|0);
   $59 = HEAP32[$58>>2]|0;
   (_yyText($53,$56,$59)|0);
   $60 = $1;
   $61 = (($60) + 12|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $1;
   $64 = (($63) + 32|0);
   HEAP32[$64>>2] = $62;
   $65 = $1;
   $66 = (_yymatchString($65,45816)|0);
   $67 = ($66|0)!=(0);
   if (!($67)) {
    break;
   }
   $68 = $1;
   $69 = $1;
   $70 = (($69) + 28|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $1;
   $73 = (($72) + 32|0);
   $74 = HEAP32[$73>>2]|0;
   _yyDo($68,149,$71,$74,45824);
   $0 = 1;
   $81 = $0;
   STACKTOP = sp;return ($81|0);
  } else {
  }
 } while(0);
 $75 = $yypos0;
 $76 = $1;
 $77 = (($76) + 12|0);
 HEAP32[$77>>2] = $75;
 $78 = $yythunkpos0;
 $79 = $1;
 $80 = (($79) + 44|0);
 HEAP32[$80>>2] = $78;
 $0 = 0;
 $81 = $0;
 STACKTOP = sp;return ($81|0);
}
function _yy_CriticComment($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $yypos0 = 0, $yypos43 = 0, $yypos44 = 0, $yythunkpos0 = 0, $yythunkpos43 = 0, $yythunkpos44 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchString($8,45768)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = $1;
   $13 = (($12) + 28|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $1;
   $16 = (($15) + 32|0);
   $17 = HEAP32[$16>>2]|0;
   (_yyText($11,$14,$17)|0);
   $18 = $1;
   $19 = (($18) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $1;
   $22 = (($21) + 28|0);
   HEAP32[$22>>2] = $20;
   while(1) {
    $23 = $1;
    $24 = (($23) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $yypos43 = $25;
    $26 = $1;
    $27 = (($26) + 44|0);
    $28 = HEAP32[$27>>2]|0;
    $yythunkpos43 = $28;
    $29 = $1;
    $30 = (($29) + 12|0);
    $31 = HEAP32[$30>>2]|0;
    $yypos44 = $31;
    $32 = $1;
    $33 = (($32) + 44|0);
    $34 = HEAP32[$33>>2]|0;
    $yythunkpos44 = $34;
    $35 = $1;
    $36 = (_yymatchString($35,45776)|0);
    $37 = ($36|0)!=(0);
    if ($37) {
     label = 7;
     break;
    }
    $38 = $yypos44;
    $39 = $1;
    $40 = (($39) + 12|0);
    HEAP32[$40>>2] = $38;
    $41 = $yythunkpos44;
    $42 = $1;
    $43 = (($42) + 44|0);
    HEAP32[$43>>2] = $41;
    $44 = $1;
    $45 = (_yymatchDot($44)|0);
    $46 = ($45|0)!=(0);
    if (!($46)) {
     label = 9;
     break;
    }
   }
   if ((label|0) == 7) {
   }
   else if ((label|0) == 9) {
   }
   $47 = $yypos43;
   $48 = $1;
   $49 = (($48) + 12|0);
   HEAP32[$49>>2] = $47;
   $50 = $yythunkpos43;
   $51 = $1;
   $52 = (($51) + 44|0);
   HEAP32[$52>>2] = $50;
   $53 = $1;
   $54 = $1;
   $55 = (($54) + 28|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $1;
   $58 = (($57) + 32|0);
   $59 = HEAP32[$58>>2]|0;
   (_yyText($53,$56,$59)|0);
   $60 = $1;
   $61 = (($60) + 12|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $1;
   $64 = (($63) + 32|0);
   HEAP32[$64>>2] = $62;
   $65 = $1;
   $66 = (_yymatchString($65,45776)|0);
   $67 = ($66|0)!=(0);
   if (!($67)) {
    break;
   }
   $68 = $1;
   $69 = $1;
   $70 = (($69) + 28|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $1;
   $73 = (($72) + 32|0);
   $74 = HEAP32[$73>>2]|0;
   _yyDo($68,150,$71,$74,45784);
   $0 = 1;
   $81 = $0;
   STACKTOP = sp;return ($81|0);
  } else {
  }
 } while(0);
 $75 = $yypos0;
 $76 = $1;
 $77 = (($76) + 12|0);
 HEAP32[$77>>2] = $75;
 $78 = $yythunkpos0;
 $79 = $1;
 $80 = (($79) + 44|0);
 HEAP32[$80>>2] = $78;
 $0 = 0;
 $81 = $0;
 STACKTOP = sp;return ($81|0);
}
function _yy_OPMLHeading($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos120 = 0, $yythunkpos0 = 0, $yythunkpos120 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos120 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos120 = $13;
 $14 = $1;
 $15 = (_yy_OPMLAtxHeading($14)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
  } else {
   $17 = $yypos120;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos120;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yy_OPMLSetextHeading($23)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    break;
   }
   $26 = $yypos0;
   $27 = $1;
   $28 = (($27) + 12|0);
   HEAP32[$28>>2] = $26;
   $29 = $yythunkpos0;
   $30 = $1;
   $31 = (($30) + 44|0);
   HEAP32[$31>>2] = $29;
   $0 = 0;
   $32 = $0;
   STACKTOP = sp;return ($32|0);
  }
 } while(0);
 $0 = 1;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _yy_1_OPMLHeadingSection($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_OPMLSectionBlock($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos117 = 0, $yypos118 = 0, $yythunkpos0 = 0, $yythunkpos117 = 0, $yythunkpos118 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 while(1) {
  $8 = $1;
  $9 = (($8) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $yypos117 = $10;
  $11 = $1;
  $12 = (($11) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $yythunkpos117 = $13;
  $14 = $1;
  $15 = (_yy_BlankLine($14)|0);
  $16 = ($15|0)!=(0);
  if (!($16)) {
   break;
  }
 }
 $17 = $yypos117;
 $18 = $1;
 $19 = (($18) + 12|0);
 HEAP32[$19>>2] = $17;
 $20 = $yythunkpos117;
 $21 = $1;
 $22 = (($21) + 44|0);
 HEAP32[$22>>2] = $20;
 $23 = $1;
 $24 = (($23) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $yypos118 = $25;
 $26 = $1;
 $27 = (($26) + 44|0);
 $28 = HEAP32[$27>>2]|0;
 $yythunkpos118 = $28;
 $29 = $1;
 $30 = (_yy_OPMLHeading($29)|0);
 $31 = ($30|0)!=(0);
 do {
  if ($31) {
  } else {
   $32 = $yypos118;
   $33 = $1;
   $34 = (($33) + 12|0);
   HEAP32[$34>>2] = $32;
   $35 = $yythunkpos118;
   $36 = $1;
   $37 = (($36) + 44|0);
   HEAP32[$37>>2] = $35;
   $38 = $1;
   $39 = (_yy_OPMLPlain($38)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_2_OPMLHeadingSection($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_3_OPMLHeadingSection($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_mk_list(9,$9)|0);
 $11 = $0;
 $12 = (($11) + 48|0);
 HEAP32[$12>>2] = $10;
 STACKTOP = sp;return;
}
function _yy_1_OPMLPlain($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_2_OPMLPlain($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_mk_list(6,$9)|0);
 $11 = $0;
 $12 = (($11) + 48|0);
 HEAP32[$12>>2] = $10;
 STACKTOP = sp;return;
}
function _yy_1_TOCHeadingSection($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_TOCSectionBlock($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos60 = 0, $yypos61 = 0, $yythunkpos0 = 0, $yythunkpos60 = 0, $yythunkpos61 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 while(1) {
  $8 = $1;
  $9 = (($8) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $yypos60 = $10;
  $11 = $1;
  $12 = (($11) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $yythunkpos60 = $13;
  $14 = $1;
  $15 = (_yy_BlankLine($14)|0);
  $16 = ($15|0)!=(0);
  if (!($16)) {
   break;
  }
 }
 $17 = $yypos60;
 $18 = $1;
 $19 = (($18) + 12|0);
 HEAP32[$19>>2] = $17;
 $20 = $yythunkpos60;
 $21 = $1;
 $22 = (($21) + 44|0);
 HEAP32[$22>>2] = $20;
 $23 = $1;
 $24 = (($23) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $yypos61 = $25;
 $26 = $1;
 $27 = (($26) + 44|0);
 $28 = HEAP32[$27>>2]|0;
 $yythunkpos61 = $28;
 $29 = $1;
 $30 = (_yy_Heading($29)|0);
 $31 = ($30|0)!=(0);
 do {
  if ($31) {
  } else {
   $32 = $yypos61;
   $33 = $1;
   $34 = (($33) + 12|0);
   HEAP32[$34>>2] = $32;
   $35 = $yythunkpos61;
   $36 = $1;
   $37 = (($36) + 44|0);
   HEAP32[$37>>2] = $35;
   $38 = $1;
   $39 = (_yy_TOCPlain($38)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_2_TOCHeadingSection($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_mk_list(9,$9)|0);
 $11 = $0;
 $12 = (($11) + 48|0);
 HEAP32[$12>>2] = $10;
 STACKTOP = sp;return;
}
function _yy_1_Line($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 STACKTOP = sp;return;
}
function _yy_Endline($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $yypos0 = 0, $yypos2193 = 0, $yythunkpos0 = 0, $yythunkpos2193 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos2193 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos2193 = $13;
 $14 = $1;
 $15 = (_yy_LineBreak($14)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
  } else {
   $17 = $yypos2193;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos2193;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yy_TerminalEndline($23)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    break;
   }
   $26 = $yypos2193;
   $27 = $1;
   $28 = (($27) + 12|0);
   HEAP32[$28>>2] = $26;
   $29 = $yythunkpos2193;
   $30 = $1;
   $31 = (($30) + 44|0);
   HEAP32[$31>>2] = $29;
   $32 = $1;
   $33 = (_yy_NormalEndline($32)|0);
   $34 = ($33|0)!=(0);
   if ($34) {
    break;
   }
   $35 = $yypos0;
   $36 = $1;
   $37 = (($36) + 12|0);
   HEAP32[$37>>2] = $35;
   $38 = $yythunkpos0;
   $39 = $1;
   $40 = (($39) + 44|0);
   HEAP32[$40>>2] = $38;
   $0 = 0;
   $41 = $0;
   STACKTOP = sp;return ($41|0);
  }
 } while(0);
 $0 = 1;
 $41 = $0;
 STACKTOP = sp;return ($41|0);
}
function _yy_AutoLabel($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos2252 = 0;
 var $yypos2253 = 0, $yypos2254 = 0, $yypos2255 = 0, $yypos2257 = 0, $yypos2258 = 0, $yypos2259 = 0, $yypos2260 = 0, $yypos2261 = 0, $yypos2262 = 0, $yypos2263 = 0, $yypos2264 = 0, $yythunkpos0 = 0, $yythunkpos2252 = 0, $yythunkpos2253 = 0, $yythunkpos2254 = 0, $yythunkpos2255 = 0, $yythunkpos2257 = 0, $yythunkpos2258 = 0, $yythunkpos2259 = 0, $yythunkpos2260 = 0;
 var $yythunkpos2261 = 0, $yythunkpos2262 = 0, $yythunkpos2263 = 0, $yythunkpos2264 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,91)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = $1;
   $13 = (($12) + 28|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $1;
   $16 = (($15) + 32|0);
   $17 = HEAP32[$16>>2]|0;
   (_yyText($11,$14,$17)|0);
   $18 = $1;
   $19 = (($18) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $1;
   $22 = (($21) + 28|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (($23) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $yypos2252 = $25;
   $26 = $1;
   $27 = (($26) + 44|0);
   $28 = HEAP32[$27>>2]|0;
   $yythunkpos2252 = $28;
   $29 = $1;
   $30 = (_yy_Newline($29)|0);
   $31 = ($30|0)!=(0);
   if ($31) {
    break;
   }
   $32 = $yypos2252;
   $33 = $1;
   $34 = (($33) + 12|0);
   HEAP32[$34>>2] = $32;
   $35 = $yythunkpos2252;
   $36 = $1;
   $37 = (($36) + 44|0);
   HEAP32[$37>>2] = $35;
   $38 = $1;
   $39 = (($38) + 12|0);
   $40 = HEAP32[$39>>2]|0;
   $yypos2253 = $40;
   $41 = $1;
   $42 = (($41) + 44|0);
   $43 = HEAP32[$42>>2]|0;
   $yythunkpos2253 = $43;
   $44 = $1;
   $45 = (_yymatchChar($44,94)|0);
   $46 = ($45|0)!=(0);
   if ($46) {
    break;
   }
   $47 = $yypos2253;
   $48 = $1;
   $49 = (($48) + 12|0);
   HEAP32[$49>>2] = $47;
   $50 = $yythunkpos2253;
   $51 = $1;
   $52 = (($51) + 44|0);
   HEAP32[$52>>2] = $50;
   $53 = $1;
   $54 = (($53) + 12|0);
   $55 = HEAP32[$54>>2]|0;
   $yypos2254 = $55;
   $56 = $1;
   $57 = (($56) + 44|0);
   $58 = HEAP32[$57>>2]|0;
   $yythunkpos2254 = $58;
   $59 = $1;
   $60 = (_yymatchChar($59,35)|0);
   $61 = ($60|0)!=(0);
   if ($61) {
    break;
   }
   $62 = $yypos2254;
   $63 = $1;
   $64 = (($63) + 12|0);
   HEAP32[$64>>2] = $62;
   $65 = $yythunkpos2254;
   $66 = $1;
   $67 = (($66) + 44|0);
   HEAP32[$67>>2] = $65;
   $68 = $1;
   $69 = (($68) + 12|0);
   $70 = HEAP32[$69>>2]|0;
   $yypos2255 = $70;
   $71 = $1;
   $72 = (($71) + 44|0);
   $73 = HEAP32[$72>>2]|0;
   $yythunkpos2255 = $73;
   $74 = $1;
   $75 = (_yymatchChar($74,37)|0);
   $76 = ($75|0)!=(0);
   if ($76) {
    break;
   }
   $77 = $yypos2255;
   $78 = $1;
   $79 = (($78) + 12|0);
   HEAP32[$79>>2] = $77;
   $80 = $yythunkpos2255;
   $81 = $1;
   $82 = (($81) + 44|0);
   HEAP32[$82>>2] = $80;
   $83 = $1;
   $84 = (_yymatchDot($83)|0);
   $85 = ($84|0)!=(0);
   if (!($85)) {
    break;
   }
   $86 = $1;
   $87 = (($86) + 12|0);
   $88 = HEAP32[$87>>2]|0;
   $yypos2258 = $88;
   $89 = $1;
   $90 = (($89) + 44|0);
   $91 = HEAP32[$90>>2]|0;
   $yythunkpos2258 = $91;
   $92 = $1;
   $93 = (_yy_Newline($92)|0);
   $94 = ($93|0)!=(0);
   if ($94) {
    break;
   }
   $95 = $yypos2258;
   $96 = $1;
   $97 = (($96) + 12|0);
   HEAP32[$97>>2] = $95;
   $98 = $yythunkpos2258;
   $99 = $1;
   $100 = (($99) + 44|0);
   HEAP32[$100>>2] = $98;
   $101 = $1;
   $102 = (($101) + 12|0);
   $103 = HEAP32[$102>>2]|0;
   $yypos2259 = $103;
   $104 = $1;
   $105 = (($104) + 44|0);
   $106 = HEAP32[$105>>2]|0;
   $yythunkpos2259 = $106;
   $107 = $1;
   $108 = (_yymatchChar($107,93)|0);
   $109 = ($108|0)!=(0);
   if ($109) {
    break;
   }
   $110 = $yypos2259;
   $111 = $1;
   $112 = (($111) + 12|0);
   HEAP32[$112>>2] = $110;
   $113 = $yythunkpos2259;
   $114 = $1;
   $115 = (($114) + 44|0);
   HEAP32[$115>>2] = $113;
   $116 = $1;
   $117 = (_yymatchDot($116)|0);
   $118 = ($117|0)!=(0);
   if (!($118)) {
    break;
   }
   while(1) {
    $119 = $1;
    $120 = (($119) + 12|0);
    $121 = HEAP32[$120>>2]|0;
    $yypos2257 = $121;
    $122 = $1;
    $123 = (($122) + 44|0);
    $124 = HEAP32[$123>>2]|0;
    $yythunkpos2257 = $124;
    $125 = $1;
    $126 = (($125) + 12|0);
    $127 = HEAP32[$126>>2]|0;
    $yypos2260 = $127;
    $128 = $1;
    $129 = (($128) + 44|0);
    $130 = HEAP32[$129>>2]|0;
    $yythunkpos2260 = $130;
    $131 = $1;
    $132 = (_yy_Newline($131)|0);
    $133 = ($132|0)!=(0);
    if ($133) {
     label = 29;
     break;
    }
    $134 = $yypos2260;
    $135 = $1;
    $136 = (($135) + 12|0);
    HEAP32[$136>>2] = $134;
    $137 = $yythunkpos2260;
    $138 = $1;
    $139 = (($138) + 44|0);
    HEAP32[$139>>2] = $137;
    $140 = $1;
    $141 = (($140) + 12|0);
    $142 = HEAP32[$141>>2]|0;
    $yypos2261 = $142;
    $143 = $1;
    $144 = (($143) + 44|0);
    $145 = HEAP32[$144>>2]|0;
    $yythunkpos2261 = $145;
    $146 = $1;
    $147 = (_yymatchChar($146,93)|0);
    $148 = ($147|0)!=(0);
    if ($148) {
     label = 32;
     break;
    }
    $149 = $yypos2261;
    $150 = $1;
    $151 = (($150) + 12|0);
    HEAP32[$151>>2] = $149;
    $152 = $yythunkpos2261;
    $153 = $1;
    $154 = (($153) + 44|0);
    HEAP32[$154>>2] = $152;
    $155 = $1;
    $156 = (_yymatchDot($155)|0);
    $157 = ($156|0)!=(0);
    if (!($157)) {
     label = 34;
     break;
    }
   }
   if ((label|0) == 29) {
   }
   else if ((label|0) == 32) {
   }
   else if ((label|0) == 34) {
   }
   $158 = $yypos2257;
   $159 = $1;
   $160 = (($159) + 12|0);
   HEAP32[$160>>2] = $158;
   $161 = $yythunkpos2257;
   $162 = $1;
   $163 = (($162) + 44|0);
   HEAP32[$163>>2] = $161;
   $164 = $1;
   $165 = $1;
   $166 = (($165) + 28|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = $1;
   $169 = (($168) + 32|0);
   $170 = HEAP32[$169>>2]|0;
   (_yyText($164,$167,$170)|0);
   $171 = $1;
   $172 = (($171) + 12|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = $1;
   $175 = (($174) + 32|0);
   HEAP32[$175>>2] = $173;
   $176 = $1;
   $177 = (_yymatchChar($176,93)|0);
   $178 = ($177|0)!=(0);
   if (!($178)) {
    break;
   }
   $179 = $1;
   $180 = (($179) + 12|0);
   $181 = HEAP32[$180>>2]|0;
   $yypos2262 = $181;
   $182 = $1;
   $183 = (($182) + 44|0);
   $184 = HEAP32[$183>>2]|0;
   $yythunkpos2262 = $184;
   $185 = $1;
   $186 = (($185) + 12|0);
   $187 = HEAP32[$186>>2]|0;
   $yypos2263 = $187;
   $188 = $1;
   $189 = (($188) + 44|0);
   $190 = HEAP32[$189>>2]|0;
   $yythunkpos2263 = $190;
   $191 = $1;
   $192 = (_yy_Sp($191)|0);
   $193 = ($192|0)!=(0);
   L50: do {
    if ($193) {
     $194 = $1;
     $195 = (($194) + 12|0);
     $196 = HEAP32[$195>>2]|0;
     $yypos2264 = $196;
     $197 = $1;
     $198 = (($197) + 44|0);
     $199 = HEAP32[$198>>2]|0;
     $yythunkpos2264 = $199;
     $200 = $1;
     $201 = (_yymatchChar($200,40)|0);
     $202 = ($201|0)!=(0);
     do {
      if ($202) {
      } else {
       $203 = $yypos2264;
       $204 = $1;
       $205 = (($204) + 12|0);
       HEAP32[$205>>2] = $203;
       $206 = $yythunkpos2264;
       $207 = $1;
       $208 = (($207) + 44|0);
       HEAP32[$208>>2] = $206;
       $209 = $1;
       $210 = (_yymatchChar($209,91)|0);
       $211 = ($210|0)!=(0);
       if ($211) {
        break;
       } else {
        break L50;
       }
      }
     } while(0);
     break L1;
    } else {
    }
   } while(0);
   $212 = $yypos2263;
   $213 = $1;
   $214 = (($213) + 12|0);
   HEAP32[$214>>2] = $212;
   $215 = $yythunkpos2263;
   $216 = $1;
   $217 = (($216) + 44|0);
   HEAP32[$217>>2] = $215;
   $218 = $yypos2262;
   $219 = $1;
   $220 = (($219) + 12|0);
   HEAP32[$220>>2] = $218;
   $221 = $yythunkpos2262;
   $222 = $1;
   $223 = (($222) + 44|0);
   HEAP32[$223>>2] = $221;
   $224 = $1;
   $225 = $1;
   $226 = (($225) + 28|0);
   $227 = HEAP32[$226>>2]|0;
   $228 = $1;
   $229 = (($228) + 32|0);
   $230 = HEAP32[$229>>2]|0;
   _yyDo($224,151,$227,$230,46072);
   $0 = 1;
   $237 = $0;
   STACKTOP = sp;return ($237|0);
  } else {
  }
 } while(0);
 $231 = $yypos0;
 $232 = $1;
 $233 = (($232) + 12|0);
 HEAP32[$233>>2] = $231;
 $234 = $yythunkpos0;
 $235 = $1;
 $236 = (($235) + 44|0);
 HEAP32[$236>>2] = $234;
 $0 = 0;
 $237 = $0;
 STACKTOP = sp;return ($237|0);
}
function _yy_Inline($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos2229 = 0;
 var $yythunkpos0 = 0, $yythunkpos2229 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos2229 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos2229 = $13;
 $14 = $1;
 $15 = $1;
 $16 = (($15) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = (($18) + 32|0);
 $20 = HEAP32[$19>>2]|0;
 (_yyText($14,$17,$20)|0);
 $21 = $1;
 $22 = (($21) + 64|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (_extension(4096,$25)|0);
 do {
  if ($26) {
   $27 = $1;
   $28 = (_yy_CriticMarkup($27)|0);
   $29 = ($28|0)!=(0);
   if ($29) {
    break;
   } else {
    label = 6;
    break;
   }
  } else {
   label = 6;
  }
 } while(0);
 L7: do {
  if ((label|0) == 6) {
   $30 = $yypos2229;
   $31 = $1;
   $32 = (($31) + 12|0);
   HEAP32[$32>>2] = $30;
   $33 = $yythunkpos2229;
   $34 = $1;
   $35 = (($34) + 44|0);
   HEAP32[$35>>2] = $33;
   $36 = $1;
   $37 = $1;
   $38 = (($37) + 28|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $1;
   $41 = (($40) + 32|0);
   $42 = HEAP32[$41>>2]|0;
   (_yyText($36,$39,$42)|0);
   $43 = $1;
   $44 = (($43) + 64|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($45) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (_extension(1,$47)|0);
   do {
    if ($48) {
    } else {
     $49 = $1;
     $50 = (_yy_DollarMath($49)|0);
     $51 = ($50|0)!=(0);
     if ($51) {
      break L7;
     } else {
      break;
     }
    }
   } while(0);
   $52 = $yypos2229;
   $53 = $1;
   $54 = (($53) + 12|0);
   HEAP32[$54>>2] = $52;
   $55 = $yythunkpos2229;
   $56 = $1;
   $57 = (($56) + 44|0);
   HEAP32[$57>>2] = $55;
   $58 = $1;
   $59 = (_yy_Str($58)|0);
   $60 = ($59|0)!=(0);
   if ($60) {
    break;
   }
   $61 = $yypos2229;
   $62 = $1;
   $63 = (($62) + 12|0);
   HEAP32[$63>>2] = $61;
   $64 = $yythunkpos2229;
   $65 = $1;
   $66 = (($65) + 44|0);
   HEAP32[$66>>2] = $64;
   $67 = $1;
   $68 = $1;
   $69 = (($68) + 28|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = $1;
   $72 = (($71) + 32|0);
   $73 = HEAP32[$72>>2]|0;
   (_yyText($67,$70,$73)|0);
   $74 = $1;
   $75 = (($74) + 64|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = (($76) + 12|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = (_extension(1,$78)|0);
   do {
    if ($79) {
    } else {
     $80 = $1;
     $81 = (_yy_MathSpan($80)|0);
     $82 = ($81|0)!=(0);
     if ($82) {
      break L7;
     } else {
      break;
     }
    }
   } while(0);
   $83 = $yypos2229;
   $84 = $1;
   $85 = (($84) + 12|0);
   HEAP32[$85>>2] = $83;
   $86 = $yythunkpos2229;
   $87 = $1;
   $88 = (($87) + 44|0);
   HEAP32[$88>>2] = $86;
   $89 = $1;
   $90 = (_yy_Endline($89)|0);
   $91 = ($90|0)!=(0);
   if ($91) {
    break;
   }
   $92 = $yypos2229;
   $93 = $1;
   $94 = (($93) + 12|0);
   HEAP32[$94>>2] = $92;
   $95 = $yythunkpos2229;
   $96 = $1;
   $97 = (($96) + 44|0);
   HEAP32[$97>>2] = $95;
   $98 = $1;
   $99 = (_yy_UlOrStarLine($98)|0);
   $100 = ($99|0)!=(0);
   if ($100) {
    break;
   }
   $101 = $yypos2229;
   $102 = $1;
   $103 = (($102) + 12|0);
   HEAP32[$103>>2] = $101;
   $104 = $yythunkpos2229;
   $105 = $1;
   $106 = (($105) + 44|0);
   HEAP32[$106>>2] = $104;
   $107 = $1;
   $108 = (_yy_Space($107)|0);
   $109 = ($108|0)!=(0);
   if ($109) {
    break;
   }
   $110 = $yypos2229;
   $111 = $1;
   $112 = (($111) + 12|0);
   HEAP32[$112>>2] = $110;
   $113 = $yythunkpos2229;
   $114 = $1;
   $115 = (($114) + 44|0);
   HEAP32[$115>>2] = $113;
   $116 = $1;
   $117 = (_yy_StrongAndEmph($116)|0);
   $118 = ($117|0)!=(0);
   if ($118) {
    break;
   }
   $119 = $yypos2229;
   $120 = $1;
   $121 = (($120) + 12|0);
   HEAP32[$121>>2] = $119;
   $122 = $yythunkpos2229;
   $123 = $1;
   $124 = (($123) + 44|0);
   HEAP32[$124>>2] = $122;
   $125 = $1;
   $126 = (_yy_Strong($125)|0);
   $127 = ($126|0)!=(0);
   if ($127) {
    break;
   }
   $128 = $yypos2229;
   $129 = $1;
   $130 = (($129) + 12|0);
   HEAP32[$130>>2] = $128;
   $131 = $yythunkpos2229;
   $132 = $1;
   $133 = (($132) + 44|0);
   HEAP32[$133>>2] = $131;
   $134 = $1;
   $135 = (_yy_Emph($134)|0);
   $136 = ($135|0)!=(0);
   if ($136) {
    break;
   }
   $137 = $yypos2229;
   $138 = $1;
   $139 = (($138) + 12|0);
   HEAP32[$139>>2] = $137;
   $140 = $yythunkpos2229;
   $141 = $1;
   $142 = (($141) + 44|0);
   HEAP32[$142>>2] = $140;
   $143 = $1;
   $144 = $1;
   $145 = (($144) + 28|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = $1;
   $148 = (($147) + 32|0);
   $149 = HEAP32[$148>>2]|0;
   (_yyText($143,$146,$149)|0);
   $150 = $1;
   $151 = (($150) + 64|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = (($152) + 12|0);
   $154 = HEAP32[$153>>2]|0;
   $155 = (_extension(1,$154)|0);
   do {
    if ($155) {
    } else {
     $156 = $1;
     $157 = (_yy_CitationReference($156)|0);
     $158 = ($157|0)!=(0);
     if ($158) {
      break L7;
     } else {
      break;
     }
    }
   } while(0);
   $159 = $yypos2229;
   $160 = $1;
   $161 = (($160) + 12|0);
   HEAP32[$161>>2] = $159;
   $162 = $yythunkpos2229;
   $163 = $1;
   $164 = (($163) + 44|0);
   HEAP32[$164>>2] = $162;
   $165 = $1;
   $166 = $1;
   $167 = (($166) + 28|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = $1;
   $170 = (($169) + 32|0);
   $171 = HEAP32[$170>>2]|0;
   (_yyText($165,$168,$171)|0);
   $172 = $1;
   $173 = (($172) + 64|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = (($174) + 12|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = (_extension(1,$176)|0);
   do {
    if ($177) {
    } else {
     $178 = $1;
     $179 = (_yy_Variable($178)|0);
     $180 = ($179|0)!=(0);
     if ($180) {
      break L7;
     } else {
      break;
     }
    }
   } while(0);
   $181 = $yypos2229;
   $182 = $1;
   $183 = (($182) + 12|0);
   HEAP32[$183>>2] = $181;
   $184 = $yythunkpos2229;
   $185 = $1;
   $186 = (($185) + 44|0);
   HEAP32[$186>>2] = $184;
   $187 = $1;
   $188 = (_yy_Image($187)|0);
   $189 = ($188|0)!=(0);
   if ($189) {
    break;
   }
   $190 = $yypos2229;
   $191 = $1;
   $192 = (($191) + 12|0);
   HEAP32[$192>>2] = $190;
   $193 = $yythunkpos2229;
   $194 = $1;
   $195 = (($194) + 44|0);
   HEAP32[$195>>2] = $193;
   $196 = $1;
   $197 = (_yy_Link($196)|0);
   $198 = ($197|0)!=(0);
   if ($198) {
    break;
   }
   $199 = $yypos2229;
   $200 = $1;
   $201 = (($200) + 12|0);
   HEAP32[$201>>2] = $199;
   $202 = $yythunkpos2229;
   $203 = $1;
   $204 = (($203) + 44|0);
   HEAP32[$204>>2] = $202;
   $205 = $1;
   $206 = (_yy_NoteReference($205)|0);
   $207 = ($206|0)!=(0);
   if ($207) {
    break;
   }
   $208 = $yypos2229;
   $209 = $1;
   $210 = (($209) + 12|0);
   HEAP32[$210>>2] = $208;
   $211 = $yythunkpos2229;
   $212 = $1;
   $213 = (($212) + 44|0);
   HEAP32[$213>>2] = $211;
   $214 = $1;
   $215 = (_yy_Code($214)|0);
   $216 = ($215|0)!=(0);
   if ($216) {
    break;
   }
   $217 = $yypos2229;
   $218 = $1;
   $219 = (($218) + 12|0);
   HEAP32[$219>>2] = $217;
   $220 = $yythunkpos2229;
   $221 = $1;
   $222 = (($221) + 44|0);
   HEAP32[$222>>2] = $220;
   $223 = $1;
   $224 = (_yy_MarkdownHtmlTagOpen($223)|0);
   $225 = ($224|0)!=(0);
   if ($225) {
    break;
   }
   $226 = $yypos2229;
   $227 = $1;
   $228 = (($227) + 12|0);
   HEAP32[$228>>2] = $226;
   $229 = $yythunkpos2229;
   $230 = $1;
   $231 = (($230) + 44|0);
   HEAP32[$231>>2] = $229;
   $232 = $1;
   $233 = (_yy_RawHtml($232)|0);
   $234 = ($233|0)!=(0);
   if ($234) {
    break;
   }
   $235 = $yypos2229;
   $236 = $1;
   $237 = (($236) + 12|0);
   HEAP32[$237>>2] = $235;
   $238 = $yythunkpos2229;
   $239 = $1;
   $240 = (($239) + 44|0);
   HEAP32[$240>>2] = $238;
   $241 = $1;
   $242 = (_yy_Entity($241)|0);
   $243 = ($242|0)!=(0);
   if ($243) {
    break;
   }
   $244 = $yypos2229;
   $245 = $1;
   $246 = (($245) + 12|0);
   HEAP32[$246>>2] = $244;
   $247 = $yythunkpos2229;
   $248 = $1;
   $249 = (($248) + 44|0);
   HEAP32[$249>>2] = $247;
   $250 = $1;
   $251 = (_yy_EscapedChar($250)|0);
   $252 = ($251|0)!=(0);
   if ($252) {
    break;
   }
   $253 = $yypos2229;
   $254 = $1;
   $255 = (($254) + 12|0);
   HEAP32[$255>>2] = $253;
   $256 = $yythunkpos2229;
   $257 = $1;
   $258 = (($257) + 44|0);
   HEAP32[$258>>2] = $256;
   $259 = $1;
   $260 = (_yy_Smart($259)|0);
   $261 = ($260|0)!=(0);
   if ($261) {
    break;
   }
   $262 = $yypos2229;
   $263 = $1;
   $264 = (($263) + 12|0);
   HEAP32[$264>>2] = $262;
   $265 = $yythunkpos2229;
   $266 = $1;
   $267 = (($266) + 44|0);
   HEAP32[$267>>2] = $265;
   $268 = $1;
   $269 = (_yy_Symbol($268)|0);
   $270 = ($269|0)!=(0);
   if ($270) {
    break;
   }
   $271 = $yypos0;
   $272 = $1;
   $273 = (($272) + 12|0);
   HEAP32[$273>>2] = $271;
   $274 = $yythunkpos0;
   $275 = $1;
   $276 = (($275) + 44|0);
   HEAP32[$276>>2] = $274;
   $0 = 0;
   $277 = $0;
   STACKTOP = sp;return ($277|0);
  }
 } while(0);
 $0 = 1;
 $277 = $0;
 STACKTOP = sp;return ($277|0);
}
function _yy_1_SetextHeading1($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -8|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_2_SetextHeading1($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = (($10) + 52|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + -8|0);
 $14 = HEAP32[$13>>2]|0;
 _append_list($9,$14);
 STACKTOP = sp;return;
}
function _yy_3_SetextHeading1($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_mk_pos_list(10,$9,$11,$14)|0);
 $16 = $0;
 $17 = (($16) + 48|0);
 HEAP32[$17>>2] = $15;
 STACKTOP = sp;return;
}
function _yy_1_SetextHeading2($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -8|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_2_SetextHeading2($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = (($10) + 52|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + -8|0);
 $14 = HEAP32[$13>>2]|0;
 _append_list($9,$14);
 STACKTOP = sp;return;
}
function _yy_3_SetextHeading2($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_mk_pos_list(11,$9,$11,$14)|0);
 $16 = $0;
 $17 = (($16) + 48|0);
 HEAP32[$17>>2] = $15;
 STACKTOP = sp;return;
}
function _yy_1_MetaDataValue($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 52|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + -4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_cons($11,$16)|0);
 $18 = $0;
 $19 = (($18) + 52|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + -4|0);
 HEAP32[$21>>2] = $17;
 STACKTOP = sp;return;
}
function _yy_SingleLineMetaKeyValue($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos2537 = 0, $yypos2538 = 0;
 var $yythunkpos0 = 0, $yythunkpos2537 = 0, $yythunkpos2538 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_MetaDataKey($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Sp($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,58)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (_yy_Sp($17)|0);
   $19 = ($18|0)!=(0);
   if (!($19)) {
    break;
   }
   while(1) {
    $20 = $1;
    $21 = (($20) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $yypos2537 = $22;
    $23 = $1;
    $24 = (($23) + 44|0);
    $25 = HEAP32[$24>>2]|0;
    $yythunkpos2537 = $25;
    $26 = $1;
    $27 = (($26) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $yypos2538 = $28;
    $29 = $1;
    $30 = (($29) + 44|0);
    $31 = HEAP32[$30>>2]|0;
    $yythunkpos2538 = $31;
    $32 = $1;
    $33 = (_yy_Newline($32)|0);
    $34 = ($33|0)!=(0);
    if ($34) {
     label = 12;
     break;
    }
    $35 = $yypos2538;
    $36 = $1;
    $37 = (($36) + 12|0);
    HEAP32[$37>>2] = $35;
    $38 = $yythunkpos2538;
    $39 = $1;
    $40 = (($39) + 44|0);
    HEAP32[$40>>2] = $38;
    $41 = $1;
    $42 = (_yymatchDot($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     label = 14;
     break;
    }
   }
   if ((label|0) == 12) {
   }
   else if ((label|0) == 14) {
   }
   $44 = $yypos2537;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos2537;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $0 = 1;
   $56 = $0;
   STACKTOP = sp;return ($56|0);
  } else {
  }
 } while(0);
 $50 = $yypos0;
 $51 = $1;
 $52 = (($51) + 12|0);
 HEAP32[$52>>2] = $50;
 $53 = $yythunkpos0;
 $54 = $1;
 $55 = (($54) + 44|0);
 HEAP32[$55>>2] = $53;
 $0 = 0;
 $56 = $0;
 STACKTOP = sp;return ($56|0);
}
function _yy_2_MetaDataValue($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $3;
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_mk_pos_str(42896,$6,$9)|0);
 $11 = $0;
 $12 = (($11) + 52|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_cons($10,$15)|0);
 $17 = $0;
 $18 = (($17) + 52|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + -4|0);
 HEAP32[$20>>2] = $16;
 STACKTOP = sp;return;
}
function _yy_3_MetaDataValue($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 52|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + -4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_cons($11,$16)|0);
 $18 = $0;
 $19 = (($18) + 52|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + -4|0);
 HEAP32[$21>>2] = $17;
 STACKTOP = sp;return;
}
function _yy_4_MetaDataValue($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_mk_str_from_list($9,0)|0);
 $11 = $0;
 $12 = (($11) + 48|0);
 HEAP32[$12>>2] = $10;
 $13 = $0;
 $14 = (($13) + 48|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP16[$15>>1] = 19;
 STACKTOP = sp;return;
}
function _yy_BlockQuoteMarker($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos2175 = 0, $yythunkpos0 = 0, $yythunkpos2175 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = $1;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($12) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 (_yyText($8,$11,$14)|0);
 $15 = $1;
 $16 = (($15) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = (($18) + 28|0);
 HEAP32[$19>>2] = $17;
 $20 = $1;
 $21 = (_yymatchChar($20,62)|0);
 $22 = ($21|0)!=(0);
 if (!($22)) {
  $57 = $yypos0;
  $58 = $1;
  $59 = (($58) + 12|0);
  HEAP32[$59>>2] = $57;
  $60 = $yythunkpos0;
  $61 = $1;
  $62 = (($61) + 44|0);
  HEAP32[$62>>2] = $60;
  $0 = 0;
  $63 = $0;
  STACKTOP = sp;return ($63|0);
 }
 $23 = $1;
 $24 = (($23) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $yypos2175 = $25;
 $26 = $1;
 $27 = (($26) + 44|0);
 $28 = HEAP32[$27>>2]|0;
 $yythunkpos2175 = $28;
 $29 = $1;
 $30 = (_yymatchChar($29,32)|0);
 $31 = ($30|0)!=(0);
 if ($31) {
 } else {
  $32 = $yypos2175;
  $33 = $1;
  $34 = (($33) + 12|0);
  HEAP32[$34>>2] = $32;
  $35 = $yythunkpos2175;
  $36 = $1;
  $37 = (($36) + 44|0);
  HEAP32[$37>>2] = $35;
 }
 $38 = $1;
 $39 = $1;
 $40 = (($39) + 28|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $1;
 $43 = (($42) + 32|0);
 $44 = HEAP32[$43>>2]|0;
 (_yyText($38,$41,$44)|0);
 $45 = $1;
 $46 = (($45) + 12|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $1;
 $49 = (($48) + 32|0);
 HEAP32[$49>>2] = $47;
 $50 = $1;
 $51 = $1;
 $52 = (($51) + 28|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $1;
 $55 = (($54) + 32|0);
 $56 = HEAP32[$55>>2]|0;
 _yyDo($50,152,$53,$56,49136);
 $0 = 1;
 $63 = $0;
 STACKTOP = sp;return ($63|0);
}
function _yy_1_BlockQuoteRaw($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -12|0);
 HEAP32[$17>>2] = $13;
 $18 = $0;
 $19 = (($18) + 52|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + -4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $0;
 $24 = (($23) + 52|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + -8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (_cons($22,$27)|0);
 $29 = $0;
 $30 = (($29) + 52|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + -8|0);
 HEAP32[$32>>2] = $28;
 STACKTOP = sp;return;
}
function _yy_2_BlockQuoteRaw($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -12|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_3_BlockQuoteRaw($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = (_mk_str(42896)|0);
 $6 = $0;
 $7 = (($6) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + -12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_cons($5,$10)|0);
 $12 = $0;
 $13 = (($12) + 52|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + -12|0);
 HEAP32[$15>>2] = $11;
 STACKTOP = sp;return;
}
function _yy_4_BlockQuoteRaw($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $raw = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = (($10) + 48|0);
 HEAP32[$11>>2] = $9;
 $12 = $0;
 $13 = (($12) + 52|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + -8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 _free_node_tree($18);
 $19 = $0;
 $20 = (($19) + 48|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + 16|0);
 HEAP32[$22>>2] = 0;
 $23 = $0;
 $24 = (($23) + 52|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + -12|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (_mk_str_from_list($27,1)|0);
 $raw = $28;
 $29 = $raw;
 HEAP16[$29>>1] = 40;
 $30 = $raw;
 $31 = $0;
 $32 = (($31) + 48|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + 12|0);
 HEAP32[$34>>2] = $30;
 STACKTOP = sp;return;
}
function _yy_1_FenceType($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 $14 = $0;
 $15 = (($14) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP16[$16>>1] = 42;
 STACKTOP = sp;return;
}
function _yy_1_VerbatimChunk($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = (_mk_str(42896)|0);
 $6 = $0;
 $7 = (($6) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + -4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_cons($5,$10)|0);
 $12 = $0;
 $13 = (($12) + 52|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + -4|0);
 HEAP32[$15>>2] = $11;
 STACKTOP = sp;return;
}
function _yy_NonblankIndentedLine($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1174 = 0, $yythunkpos0 = 0, $yythunkpos1174 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos1174 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos1174 = $13;
 $14 = $1;
 $15 = (_yy_BlankLine($14)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
  } else {
   $17 = $yypos1174;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos1174;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yy_IndentedLine($23)|0);
   $25 = ($24|0)!=(0);
   if (!($25)) {
    break;
   }
   $0 = 1;
   $32 = $0;
   STACKTOP = sp;return ($32|0);
  }
 } while(0);
 $26 = $yypos0;
 $27 = $1;
 $28 = (($27) + 12|0);
 HEAP32[$28>>2] = $26;
 $29 = $yythunkpos0;
 $30 = $1;
 $31 = (($30) + 44|0);
 HEAP32[$31>>2] = $29;
 $0 = 0;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _yy_2_VerbatimChunk($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_3_VerbatimChunk($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_mk_str_from_list($9,0)|0);
 $11 = $0;
 $12 = (($11) + 48|0);
 HEAP32[$12>>2] = $10;
 STACKTOP = sp;return;
}
function _yy_1_Term($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_2_Term($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_mk_list(45,$9)|0);
 $11 = $0;
 $12 = (($11) + 48|0);
 HEAP32[$12>>2] = $10;
 STACKTOP = sp;return;
}
function _yy_1_Definition($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = (_mk_str(42896)|0);
 $6 = $0;
 $7 = (($6) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + -4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_cons($5,$10)|0);
 $12 = $0;
 $13 = (($12) + 52|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + -4|0);
 HEAP32[$15>>2] = $11;
 STACKTOP = sp;return;
}
function _yy_2_Definition($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = (_mk_str($5)|0);
 $7 = $0;
 $8 = (($7) + 52|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + -8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_cons($6,$11)|0);
 $13 = $0;
 $14 = (($13) + 52|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + -8|0);
 HEAP32[$16>>2] = $12;
 STACKTOP = sp;return;
}
function _yy_3_Definition($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = (_mk_str($5)|0);
 $7 = $0;
 $8 = (($7) + 52|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + -8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_cons($6,$11)|0);
 $13 = $0;
 $14 = (($13) + 52|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + -8|0);
 HEAP32[$16>>2] = $12;
 STACKTOP = sp;return;
}
function _yy_4_Definition($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = (_mk_str(42896)|0);
 $6 = $0;
 $7 = (($6) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + -8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_cons($5,$10)|0);
 $12 = $0;
 $13 = (($12) + 52|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + -8|0);
 HEAP32[$15>>2] = $11;
 STACKTOP = sp;return;
}
function _yy_IndentedLine($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $yypos0 = 0, $yythunkpos0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_Indent($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Line($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $0 = 1;
   $20 = $0;
   STACKTOP = sp;return ($20|0);
  } else {
  }
 } while(0);
 $14 = $yypos0;
 $15 = $1;
 $16 = (($15) + 12|0);
 HEAP32[$16>>2] = $14;
 $17 = $yythunkpos0;
 $18 = $1;
 $19 = (($18) + 44|0);
 HEAP32[$19>>2] = $17;
 $0 = 0;
 $20 = $0;
 STACKTOP = sp;return ($20|0);
}
function _yy_5_Definition($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -8|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_6_Definition($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = (_mk_str(42896)|0);
 $6 = $0;
 $7 = (($6) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + -8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_cons($5,$10)|0);
 $12 = $0;
 $13 = (($12) + 52|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + -8|0);
 HEAP32[$15>>2] = $11;
 STACKTOP = sp;return;
}
function _yy_7_Definition($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $raw = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $0;
  $12 = (($11) + 52|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + -4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $0;
  $17 = (($16) + 52|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + -8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (_cons($15,$20)|0);
  $22 = $0;
  $23 = (($22) + 52|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + -8|0);
  HEAP32[$25>>2] = $21;
 }
 $26 = $0;
 $27 = (($26) + 52|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + -8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (_mk_str_from_list($30,0)|0);
 $raw = $31;
 $32 = $raw;
 HEAP16[$32>>1] = 40;
 $33 = $raw;
 $34 = $3;
 $35 = HEAP32[$34>>2]|0;
 $36 = $3;
 $37 = (($36) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (_mk_pos_list(46,$33,$35,$38)|0);
 $40 = $0;
 $41 = (($40) + 48|0);
 HEAP32[$41>>2] = $39;
 STACKTOP = sp;return;
}
function _yy_1_RawNoteReference($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 STACKTOP = sp;return;
}
function _yy_1_GlossaryTerm($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = (_mk_list(1,0)|0);
 $6 = $0;
 $7 = (($6) + 48|0);
 HEAP32[$7>>2] = $5;
 $8 = $0;
 $9 = (($8) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 4|0);
 HEAP32[$11>>2] = 0;
 $12 = $1;
 $13 = (_mk_str($12)|0);
 $14 = $0;
 $15 = (($14) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + 12|0);
 HEAP32[$17>>2] = $13;
 $18 = $0;
 $19 = (($18) + 48|0);
 $20 = HEAP32[$19>>2]|0;
 HEAP16[$20>>1] = 71;
 STACKTOP = sp;return;
}
function _yy_1_GlossarySortKey($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = (_mk_str($5)|0);
 $7 = $0;
 $8 = (($7) + 48|0);
 HEAP32[$8>>2] = $6;
 $9 = $0;
 $10 = (($9) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP16[$11>>1] = 70;
 STACKTOP = sp;return;
}
function _yy_OptionallyIndentedLine($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1909 = 0, $yythunkpos0 = 0, $yythunkpos1909 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos1909 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos1909 = $13;
 $14 = $1;
 $15 = (_yy_Indent($14)|0);
 $16 = ($15|0)!=(0);
 if ($16) {
 } else {
  $17 = $yypos1909;
  $18 = $1;
  $19 = (($18) + 12|0);
  HEAP32[$19>>2] = $17;
  $20 = $yythunkpos1909;
  $21 = $1;
  $22 = (($21) + 44|0);
  HEAP32[$22>>2] = $20;
 }
 $23 = $1;
 $24 = (_yy_Line($23)|0);
 $25 = ($24|0)!=(0);
 if ($25) {
  $0 = 1;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 $26 = $yypos0;
 $27 = $1;
 $28 = (($27) + 12|0);
 HEAP32[$28>>2] = $26;
 $29 = $yythunkpos0;
 $30 = $1;
 $31 = (($30) + 44|0);
 HEAP32[$31>>2] = $29;
 $0 = 0;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _yy_1_RawNoteBlock($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_2_RawNoteBlock($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 52|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + -4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_cons($11,$16)|0);
 $18 = $0;
 $19 = (($18) + 52|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + -4|0);
 HEAP32[$21>>2] = $17;
 STACKTOP = sp;return;
}
function _yy_3_RawNoteBlock($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_mk_str_from_list($9,1)|0);
 $11 = $0;
 $12 = (($11) + 48|0);
 HEAP32[$12>>2] = $10;
 $13 = $0;
 $14 = (($13) + 48|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP16[$15>>1] = 40;
 STACKTOP = sp;return;
}
function _yy_1_Label($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_2_Label($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_mk_pos_list(1,$9,$11,$14)|0);
 $16 = $0;
 $17 = (($16) + 48|0);
 HEAP32[$17>>2] = $15;
 STACKTOP = sp;return;
}
function _yy_Nonspacechar($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos2154 = 0, $yypos2155 = 0, $yythunkpos0 = 0, $yythunkpos2154 = 0, $yythunkpos2155 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos2154 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos2154 = $13;
 $14 = $1;
 $15 = (_yy_Spacechar($14)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
  } else {
   $17 = $yypos2154;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos2154;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (($23) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $yypos2155 = $25;
   $26 = $1;
   $27 = (($26) + 44|0);
   $28 = HEAP32[$27>>2]|0;
   $yythunkpos2155 = $28;
   $29 = $1;
   $30 = (_yy_Newline($29)|0);
   $31 = ($30|0)!=(0);
   if ($31) {
    break;
   }
   $32 = $yypos2155;
   $33 = $1;
   $34 = (($33) + 12|0);
   HEAP32[$34>>2] = $32;
   $35 = $yythunkpos2155;
   $36 = $1;
   $37 = (($36) + 44|0);
   HEAP32[$37>>2] = $35;
   $38 = $1;
   $39 = (_yymatchDot($38)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_1_RefSrc($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = (___strdup($5)|0);
 $tmp = $6;
 $7 = $tmp;
 $8 = HEAP8[$7>>0]|0;
 $9 = $8 << 24 >> 24;
 $10 = ($9|0)==(60);
 if ($10) {
  $11 = $tmp;
  $12 = (_strlen(($11|0))|0);
  $13 = (($12) - 1)|0;
  $14 = $tmp;
  $15 = (($14) + ($13)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = ($17|0)==(62);
  if ($18) {
   $19 = $tmp;
   $20 = (_strlen(($19|0))|0);
   $21 = (($20) - 1)|0;
   $22 = $tmp;
   $23 = (($22) + ($21)|0);
   HEAP8[$23>>0] = 0;
   $24 = $tmp;
   $25 = (($24) + 1|0);
   $26 = $3;
   $27 = HEAP32[$26>>2]|0;
   $28 = $3;
   $29 = (($28) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (_mk_pos_str($25,$27,$30)|0);
   $32 = $0;
   $33 = (($32) + 48|0);
   HEAP32[$33>>2] = $31;
   $43 = $0;
   $44 = (($43) + 48|0);
   $45 = HEAP32[$44>>2]|0;
   HEAP16[$45>>1] = 32;
   $46 = $tmp;
   _free($46);
   STACKTOP = sp;return;
  }
 }
 $34 = $1;
 $35 = $3;
 $36 = HEAP32[$35>>2]|0;
 $37 = $3;
 $38 = (($37) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (_mk_pos_str($34,$36,$39)|0);
 $41 = $0;
 $42 = (($41) + 48|0);
 HEAP32[$42>>2] = $40;
 $43 = $0;
 $44 = (($43) + 48|0);
 $45 = HEAP32[$44>>2]|0;
 HEAP16[$45>>1] = 32;
 $46 = $tmp;
 _free($46);
 STACKTOP = sp;return;
}
function _yy_RefTitleSingle($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos1286 = 0, $yypos1287 = 0, $yypos1288 = 0, $yypos1292 = 0, $yythunkpos0 = 0, $yythunkpos1286 = 0, $yythunkpos1287 = 0, $yythunkpos1288 = 0, $yythunkpos1292 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_Spnl($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = (_yymatchChar($11,39)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = $1;
   $16 = (($15) + 28|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $1;
   $19 = (($18) + 32|0);
   $20 = HEAP32[$19>>2]|0;
   (_yyText($14,$17,$20)|0);
   $21 = $1;
   $22 = (($21) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $1;
   $25 = (($24) + 28|0);
   HEAP32[$25>>2] = $23;
   L8: while(1) {
    $26 = $1;
    $27 = (($26) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $yypos1286 = $28;
    $29 = $1;
    $30 = (($29) + 44|0);
    $31 = HEAP32[$30>>2]|0;
    $yythunkpos1286 = $31;
    $32 = $1;
    $33 = (($32) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $yypos1287 = $34;
    $35 = $1;
    $36 = (($35) + 44|0);
    $37 = HEAP32[$36>>2]|0;
    $yythunkpos1287 = $37;
    $38 = $1;
    $39 = (($38) + 12|0);
    $40 = HEAP32[$39>>2]|0;
    $yypos1288 = $40;
    $41 = $1;
    $42 = (($41) + 44|0);
    $43 = HEAP32[$42>>2]|0;
    $yythunkpos1288 = $43;
    $44 = $1;
    $45 = (_yymatchChar($44,39)|0);
    $46 = ($45|0)!=(0);
    do {
     if ($46) {
      $47 = $1;
      $48 = (_yy_Sp($47)|0);
      $49 = ($48|0)!=(0);
      if (!($49)) {
       break;
      }
      $50 = $1;
      $51 = (_yy_Newline($50)|0);
      $52 = ($51|0)!=(0);
      if ($52) {
       label = 13;
       break L8;
      }
     } else {
     }
    } while(0);
    $53 = $yypos1288;
    $54 = $1;
    $55 = (($54) + 12|0);
    HEAP32[$55>>2] = $53;
    $56 = $yythunkpos1288;
    $57 = $1;
    $58 = (($57) + 44|0);
    HEAP32[$58>>2] = $56;
    $59 = $1;
    $60 = (_yy_Newline($59)|0);
    $61 = ($60|0)!=(0);
    if ($61) {
     label = 16;
     break;
    }
    $62 = $yypos1288;
    $63 = $1;
    $64 = (($63) + 12|0);
    HEAP32[$64>>2] = $62;
    $65 = $yythunkpos1288;
    $66 = $1;
    $67 = (($66) + 44|0);
    HEAP32[$67>>2] = $65;
    $68 = $1;
    $69 = $1;
    $70 = (($69) + 28|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = $1;
    $73 = (($72) + 32|0);
    $74 = HEAP32[$73>>2]|0;
    (_yyText($68,$71,$74)|0);
    $75 = $1;
    $76 = (($75) + 64|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (($77) + 12|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = (_extension(1,$79)|0);
    do {
     if ($80) {
     } else {
      $81 = $1;
      $82 = (_yymatchChar($81,39)|0);
      $83 = ($82|0)!=(0);
      if (!($83)) {
       break;
      }
      $84 = $1;
      $85 = (_yy_Sp($84)|0);
      $86 = ($85|0)!=(0);
      if (!($86)) {
       break;
      }
      $87 = $1;
      $88 = (_yy_AlphanumericAscii($87)|0);
      $89 = ($88|0)!=(0);
      if (!($89)) {
       break;
      }
      while(1) {
       $90 = $1;
       $91 = (($90) + 12|0);
       $92 = HEAP32[$91>>2]|0;
       $yypos1292 = $92;
       $93 = $1;
       $94 = (($93) + 44|0);
       $95 = HEAP32[$94>>2]|0;
       $yythunkpos1292 = $95;
       $96 = $1;
       $97 = (_yy_AlphanumericAscii($96)|0);
       $98 = ($97|0)!=(0);
       if (!($98)) {
        break;
       }
      }
      $99 = $yypos1292;
      $100 = $1;
      $101 = (($100) + 12|0);
      HEAP32[$101>>2] = $99;
      $102 = $yythunkpos1292;
      $103 = $1;
      $104 = (($103) + 44|0);
      HEAP32[$104>>2] = $102;
      $105 = $1;
      $106 = (_yymatchChar($105,61)|0);
      $107 = ($106|0)!=(0);
      if ($107) {
       label = 31;
       break L8;
      }
     }
    } while(0);
    $108 = $yypos1287;
    $109 = $1;
    $110 = (($109) + 12|0);
    HEAP32[$110>>2] = $108;
    $111 = $yythunkpos1287;
    $112 = $1;
    $113 = (($112) + 44|0);
    HEAP32[$113>>2] = $111;
    $114 = $1;
    $115 = (_yymatchDot($114)|0);
    $116 = ($115|0)!=(0);
    if (!($116)) {
     label = 34;
     break;
    }
   }
   if ((label|0) == 13) {
    label = 32;
   }
   else if ((label|0) == 16) {
    label = 32;
   }
   else if ((label|0) == 31) {
    label = 32;
   }
   else if ((label|0) == 34) {
   }
   if ((label|0) == 32) {
   }
   $117 = $yypos1286;
   $118 = $1;
   $119 = (($118) + 12|0);
   HEAP32[$119>>2] = $117;
   $120 = $yythunkpos1286;
   $121 = $1;
   $122 = (($121) + 44|0);
   HEAP32[$122>>2] = $120;
   $123 = $1;
   $124 = $1;
   $125 = (($124) + 28|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = $1;
   $128 = (($127) + 32|0);
   $129 = HEAP32[$128>>2]|0;
   (_yyText($123,$126,$129)|0);
   $130 = $1;
   $131 = (($130) + 12|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = $1;
   $134 = (($133) + 32|0);
   HEAP32[$134>>2] = $132;
   $135 = $1;
   $136 = (_yymatchChar($135,39)|0);
   $137 = ($136|0)!=(0);
   if (!($137)) {
    break;
   }
   $0 = 1;
   $144 = $0;
   STACKTOP = sp;return ($144|0);
  } else {
  }
 } while(0);
 $138 = $yypos0;
 $139 = $1;
 $140 = (($139) + 12|0);
 HEAP32[$140>>2] = $138;
 $141 = $yythunkpos0;
 $142 = $1;
 $143 = (($142) + 44|0);
 HEAP32[$143>>2] = $141;
 $0 = 0;
 $144 = $0;
 STACKTOP = sp;return ($144|0);
}
function _yy_RefTitleDouble($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos1277 = 0, $yypos1278 = 0, $yypos1279 = 0, $yypos1283 = 0, $yythunkpos0 = 0, $yythunkpos1277 = 0, $yythunkpos1278 = 0, $yythunkpos1279 = 0, $yythunkpos1283 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_Spnl($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = (_yymatchChar($11,34)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = $1;
   $16 = (($15) + 28|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $1;
   $19 = (($18) + 32|0);
   $20 = HEAP32[$19>>2]|0;
   (_yyText($14,$17,$20)|0);
   $21 = $1;
   $22 = (($21) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $1;
   $25 = (($24) + 28|0);
   HEAP32[$25>>2] = $23;
   L7: while(1) {
    $26 = $1;
    $27 = (($26) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $yypos1277 = $28;
    $29 = $1;
    $30 = (($29) + 44|0);
    $31 = HEAP32[$30>>2]|0;
    $yythunkpos1277 = $31;
    $32 = $1;
    $33 = (($32) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $yypos1278 = $34;
    $35 = $1;
    $36 = (($35) + 44|0);
    $37 = HEAP32[$36>>2]|0;
    $yythunkpos1278 = $37;
    $38 = $1;
    $39 = (($38) + 12|0);
    $40 = HEAP32[$39>>2]|0;
    $yypos1279 = $40;
    $41 = $1;
    $42 = (($41) + 44|0);
    $43 = HEAP32[$42>>2]|0;
    $yythunkpos1279 = $43;
    $44 = $1;
    $45 = (_yymatchChar($44,34)|0);
    $46 = ($45|0)!=(0);
    do {
     if ($46) {
      $47 = $1;
      $48 = (_yy_Sp($47)|0);
      $49 = ($48|0)!=(0);
      if (!($49)) {
       break;
      }
      $50 = $1;
      $51 = (_yy_Newline($50)|0);
      $52 = ($51|0)!=(0);
      if ($52) {
       label = 13;
       break L7;
      }
     } else {
     }
    } while(0);
    $53 = $yypos1279;
    $54 = $1;
    $55 = (($54) + 12|0);
    HEAP32[$55>>2] = $53;
    $56 = $yythunkpos1279;
    $57 = $1;
    $58 = (($57) + 44|0);
    HEAP32[$58>>2] = $56;
    $59 = $1;
    $60 = (_yy_Newline($59)|0);
    $61 = ($60|0)!=(0);
    if ($61) {
     label = 16;
     break;
    }
    $62 = $yypos1279;
    $63 = $1;
    $64 = (($63) + 12|0);
    HEAP32[$64>>2] = $62;
    $65 = $yythunkpos1279;
    $66 = $1;
    $67 = (($66) + 44|0);
    HEAP32[$67>>2] = $65;
    $68 = $1;
    $69 = $1;
    $70 = (($69) + 28|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = $1;
    $73 = (($72) + 32|0);
    $74 = HEAP32[$73>>2]|0;
    (_yyText($68,$71,$74)|0);
    $75 = $1;
    $76 = (($75) + 64|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (($77) + 12|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = (_extension(1,$79)|0);
    do {
     if ($80) {
     } else {
      $81 = $1;
      $82 = (_yymatchChar($81,34)|0);
      $83 = ($82|0)!=(0);
      if (!($83)) {
       break;
      }
      $84 = $1;
      $85 = (_yy_Sp($84)|0);
      $86 = ($85|0)!=(0);
      if (!($86)) {
       break;
      }
      $87 = $1;
      $88 = (_yy_AlphanumericAscii($87)|0);
      $89 = ($88|0)!=(0);
      if (!($89)) {
       break;
      }
      while(1) {
       $90 = $1;
       $91 = (($90) + 12|0);
       $92 = HEAP32[$91>>2]|0;
       $yypos1283 = $92;
       $93 = $1;
       $94 = (($93) + 44|0);
       $95 = HEAP32[$94>>2]|0;
       $yythunkpos1283 = $95;
       $96 = $1;
       $97 = (_yy_AlphanumericAscii($96)|0);
       $98 = ($97|0)!=(0);
       if (!($98)) {
        break;
       }
      }
      $99 = $yypos1283;
      $100 = $1;
      $101 = (($100) + 12|0);
      HEAP32[$101>>2] = $99;
      $102 = $yythunkpos1283;
      $103 = $1;
      $104 = (($103) + 44|0);
      HEAP32[$104>>2] = $102;
      $105 = $1;
      $106 = (_yymatchChar($105,61)|0);
      $107 = ($106|0)!=(0);
      if ($107) {
       label = 31;
       break L7;
      }
     }
    } while(0);
    $108 = $yypos1278;
    $109 = $1;
    $110 = (($109) + 12|0);
    HEAP32[$110>>2] = $108;
    $111 = $yythunkpos1278;
    $112 = $1;
    $113 = (($112) + 44|0);
    HEAP32[$113>>2] = $111;
    $114 = $1;
    $115 = (_yymatchDot($114)|0);
    $116 = ($115|0)!=(0);
    if (!($116)) {
     label = 34;
     break;
    }
   }
   if ((label|0) == 13) {
    label = 32;
   }
   else if ((label|0) == 16) {
    label = 32;
   }
   else if ((label|0) == 31) {
    label = 32;
   }
   else if ((label|0) == 34) {
   }
   if ((label|0) == 32) {
   }
   $117 = $yypos1277;
   $118 = $1;
   $119 = (($118) + 12|0);
   HEAP32[$119>>2] = $117;
   $120 = $yythunkpos1277;
   $121 = $1;
   $122 = (($121) + 44|0);
   HEAP32[$122>>2] = $120;
   $123 = $1;
   $124 = $1;
   $125 = (($124) + 28|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = $1;
   $128 = (($127) + 32|0);
   $129 = HEAP32[$128>>2]|0;
   (_yyText($123,$126,$129)|0);
   $130 = $1;
   $131 = (($130) + 12|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = $1;
   $134 = (($133) + 32|0);
   HEAP32[$134>>2] = $132;
   $135 = $1;
   $136 = (_yymatchChar($135,34)|0);
   $137 = ($136|0)!=(0);
   if (!($137)) {
    break;
   }
   $0 = 1;
   $144 = $0;
   STACKTOP = sp;return ($144|0);
  } else {
  }
 } while(0);
 $138 = $yypos0;
 $139 = $1;
 $140 = (($139) + 12|0);
 HEAP32[$140>>2] = $138;
 $141 = $yythunkpos0;
 $142 = $1;
 $143 = (($142) + 44|0);
 HEAP32[$143>>2] = $141;
 $0 = 0;
 $144 = $0;
 STACKTOP = sp;return ($144|0);
}
function _yy_RefTitleParens($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos1268 = 0, $yypos1269 = 0, $yypos1270 = 0, $yypos1274 = 0, $yythunkpos0 = 0, $yythunkpos1268 = 0, $yythunkpos1269 = 0, $yythunkpos1270 = 0, $yythunkpos1274 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_Spnl($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = (_yymatchChar($11,40)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = $1;
   $16 = (($15) + 28|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $1;
   $19 = (($18) + 32|0);
   $20 = HEAP32[$19>>2]|0;
   (_yyText($14,$17,$20)|0);
   $21 = $1;
   $22 = (($21) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $1;
   $25 = (($24) + 28|0);
   HEAP32[$25>>2] = $23;
   L8: while(1) {
    $26 = $1;
    $27 = (($26) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $yypos1268 = $28;
    $29 = $1;
    $30 = (($29) + 44|0);
    $31 = HEAP32[$30>>2]|0;
    $yythunkpos1268 = $31;
    $32 = $1;
    $33 = (($32) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $yypos1269 = $34;
    $35 = $1;
    $36 = (($35) + 44|0);
    $37 = HEAP32[$36>>2]|0;
    $yythunkpos1269 = $37;
    $38 = $1;
    $39 = (($38) + 12|0);
    $40 = HEAP32[$39>>2]|0;
    $yypos1270 = $40;
    $41 = $1;
    $42 = (($41) + 44|0);
    $43 = HEAP32[$42>>2]|0;
    $yythunkpos1270 = $43;
    $44 = $1;
    $45 = (_yymatchChar($44,41)|0);
    $46 = ($45|0)!=(0);
    do {
     if ($46) {
      $47 = $1;
      $48 = (_yy_Sp($47)|0);
      $49 = ($48|0)!=(0);
      if (!($49)) {
       break;
      }
      $50 = $1;
      $51 = (_yy_Newline($50)|0);
      $52 = ($51|0)!=(0);
      if ($52) {
       label = 13;
       break L8;
      }
     } else {
     }
    } while(0);
    $53 = $yypos1270;
    $54 = $1;
    $55 = (($54) + 12|0);
    HEAP32[$55>>2] = $53;
    $56 = $yythunkpos1270;
    $57 = $1;
    $58 = (($57) + 44|0);
    HEAP32[$58>>2] = $56;
    $59 = $1;
    $60 = (_yy_Newline($59)|0);
    $61 = ($60|0)!=(0);
    if ($61) {
     label = 16;
     break;
    }
    $62 = $yypos1270;
    $63 = $1;
    $64 = (($63) + 12|0);
    HEAP32[$64>>2] = $62;
    $65 = $yythunkpos1270;
    $66 = $1;
    $67 = (($66) + 44|0);
    HEAP32[$67>>2] = $65;
    $68 = $1;
    $69 = $1;
    $70 = (($69) + 28|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = $1;
    $73 = (($72) + 32|0);
    $74 = HEAP32[$73>>2]|0;
    (_yyText($68,$71,$74)|0);
    $75 = $1;
    $76 = (($75) + 64|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (($77) + 12|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = (_extension(1,$79)|0);
    do {
     if ($80) {
     } else {
      $81 = $1;
      $82 = (_yymatchChar($81,41)|0);
      $83 = ($82|0)!=(0);
      if (!($83)) {
       break;
      }
      $84 = $1;
      $85 = (_yy_Sp($84)|0);
      $86 = ($85|0)!=(0);
      if (!($86)) {
       break;
      }
      $87 = $1;
      $88 = (_yy_AlphanumericAscii($87)|0);
      $89 = ($88|0)!=(0);
      if (!($89)) {
       break;
      }
      while(1) {
       $90 = $1;
       $91 = (($90) + 12|0);
       $92 = HEAP32[$91>>2]|0;
       $yypos1274 = $92;
       $93 = $1;
       $94 = (($93) + 44|0);
       $95 = HEAP32[$94>>2]|0;
       $yythunkpos1274 = $95;
       $96 = $1;
       $97 = (_yy_AlphanumericAscii($96)|0);
       $98 = ($97|0)!=(0);
       if (!($98)) {
        break;
       }
      }
      $99 = $yypos1274;
      $100 = $1;
      $101 = (($100) + 12|0);
      HEAP32[$101>>2] = $99;
      $102 = $yythunkpos1274;
      $103 = $1;
      $104 = (($103) + 44|0);
      HEAP32[$104>>2] = $102;
      $105 = $1;
      $106 = (_yymatchChar($105,61)|0);
      $107 = ($106|0)!=(0);
      if ($107) {
       label = 31;
       break L8;
      }
     }
    } while(0);
    $108 = $yypos1269;
    $109 = $1;
    $110 = (($109) + 12|0);
    HEAP32[$110>>2] = $108;
    $111 = $yythunkpos1269;
    $112 = $1;
    $113 = (($112) + 44|0);
    HEAP32[$113>>2] = $111;
    $114 = $1;
    $115 = (_yymatchDot($114)|0);
    $116 = ($115|0)!=(0);
    if (!($116)) {
     label = 34;
     break;
    }
   }
   if ((label|0) == 13) {
    label = 32;
   }
   else if ((label|0) == 16) {
    label = 32;
   }
   else if ((label|0) == 31) {
    label = 32;
   }
   else if ((label|0) == 34) {
   }
   if ((label|0) == 32) {
   }
   $117 = $yypos1268;
   $118 = $1;
   $119 = (($118) + 12|0);
   HEAP32[$119>>2] = $117;
   $120 = $yythunkpos1268;
   $121 = $1;
   $122 = (($121) + 44|0);
   HEAP32[$122>>2] = $120;
   $123 = $1;
   $124 = $1;
   $125 = (($124) + 28|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = $1;
   $128 = (($127) + 32|0);
   $129 = HEAP32[$128>>2]|0;
   (_yyText($123,$126,$129)|0);
   $130 = $1;
   $131 = (($130) + 12|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = $1;
   $134 = (($133) + 32|0);
   HEAP32[$134>>2] = $132;
   $135 = $1;
   $136 = (_yymatchChar($135,41)|0);
   $137 = ($136|0)!=(0);
   if (!($137)) {
    break;
   }
   $0 = 1;
   $144 = $0;
   STACKTOP = sp;return ($144|0);
  } else {
  }
 } while(0);
 $138 = $yypos0;
 $139 = $1;
 $140 = (($139) + 12|0);
 HEAP32[$140>>2] = $138;
 $141 = $yythunkpos0;
 $142 = $1;
 $143 = (($142) + 44|0);
 HEAP32[$143>>2] = $141;
 $0 = 0;
 $144 = $0;
 STACKTOP = sp;return ($144|0);
}
function _yy_EmptyTitle($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $yypos0 = 0, $yythunkpos0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = $1;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($12) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 (_yyText($8,$11,$14)|0);
 $15 = $1;
 $16 = (($15) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = (($18) + 28|0);
 HEAP32[$19>>2] = $17;
 $20 = $1;
 $21 = (_yymatchString($20,41432)|0);
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = $1;
  $24 = $1;
  $25 = (($24) + 28|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $1;
  $28 = (($27) + 32|0);
  $29 = HEAP32[$28>>2]|0;
  (_yyText($23,$26,$29)|0);
  $30 = $1;
  $31 = (($30) + 12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $1;
  $34 = (($33) + 32|0);
  HEAP32[$34>>2] = $32;
  $0 = 1;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 } else {
  $35 = $yypos0;
  $36 = $1;
  $37 = (($36) + 12|0);
  HEAP32[$37>>2] = $35;
  $38 = $yythunkpos0;
  $39 = $1;
  $40 = (($39) + 44|0);
  HEAP32[$40>>2] = $38;
  $0 = 0;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 return (0)|0;
}
function _yy_1_RefTitle($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 $14 = $0;
 $15 = (($14) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP16[$16>>1] = 40;
 STACKTOP = sp;return;
}
function _yy_Attribute($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yythunkpos0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,2,0,41328);
 $9 = $1;
 $10 = (_yy_Spnl($9)|0);
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $1;
   $13 = (_yy_AttrKey($12)|0);
   $14 = ($13|0)!=(0);
   if (!($14)) {
    break;
   }
   $15 = $1;
   _yyDo($15,8,-2,0,41336);
   $16 = $1;
   $17 = (_yymatchChar($16,61)|0);
   $18 = ($17|0)!=(0);
   if (!($18)) {
    break;
   }
   $19 = $1;
   $20 = (_yy_AttrValue($19)|0);
   $21 = ($20|0)!=(0);
   if (!($21)) {
    break;
   }
   $22 = $1;
   _yyDo($22,8,-1,0,41336);
   $23 = $1;
   $24 = $1;
   $25 = (($24) + 28|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $1;
   $28 = (($27) + 32|0);
   $29 = HEAP32[$28>>2]|0;
   _yyDo($23,153,$26,$29,48304);
   $30 = $1;
   _yyDo($30,12,2,0,41392);
   $0 = 1;
   $37 = $0;
   STACKTOP = sp;return ($37|0);
  } else {
  }
 } while(0);
 $31 = $yypos0;
 $32 = $1;
 $33 = (($32) + 12|0);
 HEAP32[$33>>2] = $31;
 $34 = $yythunkpos0;
 $35 = $1;
 $36 = (($35) + 44|0);
 HEAP32[$36>>2] = $34;
 $0 = 0;
 $37 = $0;
 STACKTOP = sp;return ($37|0);
}
function _yy_1_Attributes($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_2_Attributes($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = (($10) + 48|0);
 HEAP32[$11>>2] = $9;
 STACKTOP = sp;return;
}
function _yy_AtxStart($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos2222 = 0, $yythunkpos0 = 0, $yythunkpos2222 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_NonindentSpace($8)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = $1;
   $13 = (($12) + 28|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $1;
   $16 = (($15) + 32|0);
   $17 = HEAP32[$16>>2]|0;
   (_yyText($11,$14,$17)|0);
   $18 = $1;
   $19 = (($18) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $1;
   $22 = (($21) + 28|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (($23) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $yypos2222 = $25;
   $26 = $1;
   $27 = (($26) + 44|0);
   $28 = HEAP32[$27>>2]|0;
   $yythunkpos2222 = $28;
   $29 = $1;
   $30 = (_yymatchString($29,46120)|0);
   $31 = ($30|0)!=(0);
   do {
    if ($31) {
    } else {
     $32 = $yypos2222;
     $33 = $1;
     $34 = (($33) + 12|0);
     HEAP32[$34>>2] = $32;
     $35 = $yythunkpos2222;
     $36 = $1;
     $37 = (($36) + 44|0);
     HEAP32[$37>>2] = $35;
     $38 = $1;
     $39 = (_yymatchString($38,46128)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      break;
     }
     $41 = $yypos2222;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos2222;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchString($47,46136)|0);
     $49 = ($48|0)!=(0);
     if ($49) {
      break;
     }
     $50 = $yypos2222;
     $51 = $1;
     $52 = (($51) + 12|0);
     HEAP32[$52>>2] = $50;
     $53 = $yythunkpos2222;
     $54 = $1;
     $55 = (($54) + 44|0);
     HEAP32[$55>>2] = $53;
     $56 = $1;
     $57 = (_yymatchString($56,46144)|0);
     $58 = ($57|0)!=(0);
     if ($58) {
      break;
     }
     $59 = $yypos2222;
     $60 = $1;
     $61 = (($60) + 12|0);
     HEAP32[$61>>2] = $59;
     $62 = $yythunkpos2222;
     $63 = $1;
     $64 = (($63) + 44|0);
     HEAP32[$64>>2] = $62;
     $65 = $1;
     $66 = (_yymatchString($65,46152)|0);
     $67 = ($66|0)!=(0);
     if ($67) {
      break;
     }
     $68 = $yypos2222;
     $69 = $1;
     $70 = (($69) + 12|0);
     HEAP32[$70>>2] = $68;
     $71 = $yythunkpos2222;
     $72 = $1;
     $73 = (($72) + 44|0);
     HEAP32[$73>>2] = $71;
     $74 = $1;
     $75 = (_yymatchChar($74,35)|0);
     $76 = ($75|0)!=(0);
     if ($76) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $77 = $1;
   $78 = $1;
   $79 = (($78) + 28|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $1;
   $82 = (($81) + 32|0);
   $83 = HEAP32[$82>>2]|0;
   (_yyText($77,$80,$83)|0);
   $84 = $1;
   $85 = (($84) + 12|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = $1;
   $88 = (($87) + 32|0);
   HEAP32[$88>>2] = $86;
   $89 = $1;
   $90 = $1;
   $91 = (($90) + 28|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = $1;
   $94 = (($93) + 32|0);
   $95 = HEAP32[$94>>2]|0;
   _yyDo($89,154,$92,$95,46160);
   $0 = 1;
   $102 = $0;
   STACKTOP = sp;return ($102|0);
  } else {
  }
 } while(0);
 $96 = $yypos0;
 $97 = $1;
 $98 = (($97) + 12|0);
 HEAP32[$98>>2] = $96;
 $99 = $yythunkpos0;
 $100 = $1;
 $101 = (($100) + 44|0);
 HEAP32[$101>>2] = $99;
 $0 = 0;
 $102 = $0;
 STACKTOP = sp;return ($102|0);
}
function _yy_AtxInline($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos2267 = 0, $yypos2268 = 0, $yypos2270 = 0, $yypos2271 = 0, $yypos2273 = 0, $yythunkpos0 = 0, $yythunkpos2267 = 0, $yythunkpos2268 = 0, $yythunkpos2270 = 0, $yythunkpos2271 = 0, $yythunkpos2273 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos2267 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos2267 = $13;
 $14 = $1;
 $15 = (_yy_Newline($14)|0);
 $16 = ($15|0)!=(0);
 L1: do {
  if ($16) {
  } else {
   $17 = $yypos2267;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos2267;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (($23) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $yypos2268 = $25;
   $26 = $1;
   $27 = (($26) + 44|0);
   $28 = HEAP32[$27>>2]|0;
   $yythunkpos2268 = $28;
   $29 = $1;
   $30 = $1;
   $31 = (($30) + 28|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $1;
   $34 = (($33) + 32|0);
   $35 = HEAP32[$34>>2]|0;
   (_yyText($29,$32,$35)|0);
   $36 = $1;
   $37 = (($36) + 64|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) + 12|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (_extension(1,$40)|0);
   do {
    if ($41) {
    } else {
     $42 = $1;
     $43 = (_yy_Sp($42)|0);
     $44 = ($43|0)!=(0);
     if (!($44)) {
      break;
     }
     $45 = $1;
     $46 = (_yy_AutoLabel($45)|0);
     $47 = ($46|0)!=(0);
     if (!($47)) {
      break;
     }
     $48 = $1;
     $49 = (_yy_Sp($48)|0);
     $50 = ($49|0)!=(0);
     if (!($50)) {
      break;
     }
     while(1) {
      $51 = $1;
      $52 = (($51) + 12|0);
      $53 = HEAP32[$52>>2]|0;
      $yypos2270 = $53;
      $54 = $1;
      $55 = (($54) + 44|0);
      $56 = HEAP32[$55>>2]|0;
      $yythunkpos2270 = $56;
      $57 = $1;
      $58 = (_yymatchChar($57,35)|0);
      $59 = ($58|0)!=(0);
      if (!($59)) {
       break;
      }
     }
     $60 = $yypos2270;
     $61 = $1;
     $62 = (($61) + 12|0);
     HEAP32[$62>>2] = $60;
     $63 = $yythunkpos2270;
     $64 = $1;
     $65 = (($64) + 44|0);
     HEAP32[$65>>2] = $63;
     $66 = $1;
     $67 = (_yy_Sp($66)|0);
     $68 = ($67|0)!=(0);
     if (!($68)) {
      break;
     }
     $69 = $1;
     $70 = (_yy_Newline($69)|0);
     $71 = ($70|0)!=(0);
     if ($71) {
      break L1;
     } else {
      break;
     }
    }
   } while(0);
   $72 = $yypos2268;
   $73 = $1;
   $74 = (($73) + 12|0);
   HEAP32[$74>>2] = $72;
   $75 = $yythunkpos2268;
   $76 = $1;
   $77 = (($76) + 44|0);
   HEAP32[$77>>2] = $75;
   $78 = $1;
   $79 = (($78) + 12|0);
   $80 = HEAP32[$79>>2]|0;
   $yypos2271 = $80;
   $81 = $1;
   $82 = (($81) + 44|0);
   $83 = HEAP32[$82>>2]|0;
   $yythunkpos2271 = $83;
   $84 = $1;
   $85 = (_yy_Sp($84)|0);
   $86 = ($85|0)!=(0);
   do {
    if ($86) {
     while(1) {
      $87 = $1;
      $88 = (($87) + 12|0);
      $89 = HEAP32[$88>>2]|0;
      $yypos2273 = $89;
      $90 = $1;
      $91 = (($90) + 44|0);
      $92 = HEAP32[$91>>2]|0;
      $yythunkpos2273 = $92;
      $93 = $1;
      $94 = (_yymatchChar($93,35)|0);
      $95 = ($94|0)!=(0);
      if (!($95)) {
       break;
      }
     }
     $96 = $yypos2273;
     $97 = $1;
     $98 = (($97) + 12|0);
     HEAP32[$98>>2] = $96;
     $99 = $yythunkpos2273;
     $100 = $1;
     $101 = (($100) + 44|0);
     HEAP32[$101>>2] = $99;
     $102 = $1;
     $103 = (_yy_Sp($102)|0);
     $104 = ($103|0)!=(0);
     if (!($104)) {
      break;
     }
     $105 = $1;
     $106 = (_yy_Newline($105)|0);
     $107 = ($106|0)!=(0);
     if ($107) {
      break L1;
     } else {
      break;
     }
    } else {
    }
   } while(0);
   $108 = $yypos2271;
   $109 = $1;
   $110 = (($109) + 12|0);
   HEAP32[$110>>2] = $108;
   $111 = $yythunkpos2271;
   $112 = $1;
   $113 = (($112) + 44|0);
   HEAP32[$113>>2] = $111;
   $114 = $1;
   $115 = (_yy_Inline($114)|0);
   $116 = ($115|0)!=(0);
   if (!($116)) {
    break;
   }
   $0 = 1;
   $123 = $0;
   STACKTOP = sp;return ($123|0);
  }
 } while(0);
 $117 = $yypos0;
 $118 = $1;
 $119 = (($118) + 12|0);
 HEAP32[$119>>2] = $117;
 $120 = $yythunkpos0;
 $121 = $1;
 $122 = (($121) + 44|0);
 HEAP32[$122>>2] = $120;
 $0 = 0;
 $123 = $0;
 STACKTOP = sp;return ($123|0);
}
function _yy_1_AtxHeading($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -8|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_2_AtxHeading($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = (($10) + 52|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + -8|0);
 $14 = HEAP32[$13>>2]|0;
 _append_list($9,$14);
 STACKTOP = sp;return;
}
function _yy_3_AtxHeading($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 << 16 >> 16;
 $12 = $0;
 $13 = (($12) + 52|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + -8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $3;
 $18 = HEAP32[$17>>2]|0;
 $19 = $3;
 $20 = (($19) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (_mk_pos_list($11,$16,$18,$21)|0);
 $23 = $0;
 $24 = (($23) + 48|0);
 HEAP32[$24>>2] = $22;
 $25 = $0;
 $26 = (($25) + 52|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + -12|0);
 $29 = HEAP32[$28>>2]|0;
 _free($29);
 STACKTOP = sp;return;
}
function _yy_ListItemTight($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos1099 = 0;
 var $yypos1103 = 0, $yypos1104 = 0, $yypos1105 = 0, $yypos1108 = 0, $yypos1109 = 0, $yypos1110 = 0, $yythunkpos0 = 0, $yythunkpos1099 = 0, $yythunkpos1103 = 0, $yythunkpos1104 = 0, $yythunkpos1105 = 0, $yythunkpos1108 = 0, $yythunkpos1109 = 0, $yythunkpos1110 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 $9 = $1;
 $10 = (($9) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $yypos1099 = $11;
 $12 = $1;
 $13 = (($12) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $yythunkpos1099 = $14;
 $15 = $1;
 $16 = (_yy_Bullet($15)|0);
 $17 = ($16|0)!=(0);
 L1: do {
  if ($17) {
   label = 17;
  } else {
   $18 = $yypos1099;
   $19 = $1;
   $20 = (($19) + 12|0);
   HEAP32[$20>>2] = $18;
   $21 = $yythunkpos1099;
   $22 = $1;
   $23 = (($22) + 44|0);
   HEAP32[$23>>2] = $21;
   $24 = $1;
   $25 = (_yy_Enumerator($24)|0);
   $26 = ($25|0)!=(0);
   if ($26) {
    label = 17;
    break;
   }
   $27 = $yypos1099;
   $28 = $1;
   $29 = (($28) + 12|0);
   HEAP32[$29>>2] = $27;
   $30 = $yythunkpos1099;
   $31 = $1;
   $32 = (($31) + 44|0);
   HEAP32[$32>>2] = $30;
   $33 = $1;
   $34 = (_yy_BulletNoSpace($33)|0);
   $35 = ($34|0)!=(0);
   do {
    if ($35) {
     $36 = $1;
     $37 = (($36) + 12|0);
     $38 = HEAP32[$37>>2]|0;
     $yypos1103 = $38;
     $39 = $1;
     $40 = (($39) + 44|0);
     $41 = HEAP32[$40>>2]|0;
     $yythunkpos1103 = $41;
     $42 = $1;
     $43 = (_yy_EmptyList($42)|0);
     $44 = ($43|0)!=(0);
     if ($44) {
      $45 = $yypos1103;
      $46 = $1;
      $47 = (($46) + 12|0);
      HEAP32[$47>>2] = $45;
      $48 = $yythunkpos1103;
      $49 = $1;
      $50 = (($49) + 44|0);
      HEAP32[$50>>2] = $48;
      label = 17;
      break L1;
     } else {
      break;
     }
    } else {
    }
   } while(0);
   $51 = $yypos1099;
   $52 = $1;
   $53 = (($52) + 12|0);
   HEAP32[$53>>2] = $51;
   $54 = $yythunkpos1099;
   $55 = $1;
   $56 = (($55) + 44|0);
   HEAP32[$56>>2] = $54;
   $57 = $1;
   $58 = (_yy_EnumeratorNoSpace($57)|0);
   $59 = ($58|0)!=(0);
   if (!($59)) {
    break;
   }
   $60 = $1;
   $61 = (($60) + 12|0);
   $62 = HEAP32[$61>>2]|0;
   $yypos1104 = $62;
   $63 = $1;
   $64 = (($63) + 44|0);
   $65 = HEAP32[$64>>2]|0;
   $yythunkpos1104 = $65;
   $66 = $1;
   $67 = (_yy_EmptyList($66)|0);
   $68 = ($67|0)!=(0);
   if ($68) {
    $69 = $yypos1104;
    $70 = $1;
    $71 = (($70) + 12|0);
    HEAP32[$71>>2] = $69;
    $72 = $yythunkpos1104;
    $73 = $1;
    $74 = (($73) + 44|0);
    HEAP32[$74>>2] = $72;
    label = 17;
    break;
   } else {
    break;
   }
  }
 } while(0);
 do {
  if ((label|0) == 17) {
   $75 = $1;
   $76 = (_yy_StartList($75)|0);
   $77 = ($76|0)!=(0);
   if (!($77)) {
    break;
   }
   $78 = $1;
   _yyDo($78,8,-1,0,41336);
   $79 = $1;
   $80 = (($79) + 12|0);
   $81 = HEAP32[$80>>2]|0;
   $yypos1105 = $81;
   $82 = $1;
   $83 = (($82) + 44|0);
   $84 = HEAP32[$83>>2]|0;
   $yythunkpos1105 = $84;
   $85 = $1;
   $86 = (_yy_EmptyList($85)|0);
   $87 = ($86|0)!=(0);
   if ($87) {
    $88 = $1;
    $89 = $1;
    $90 = (($89) + 28|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = $1;
    $93 = (($92) + 32|0);
    $94 = HEAP32[$93>>2]|0;
    _yyDo($88,155,$91,$94,47984);
   } else {
    $95 = $yypos1105;
    $96 = $1;
    $97 = (($96) + 12|0);
    HEAP32[$97>>2] = $95;
    $98 = $yythunkpos1105;
    $99 = $1;
    $100 = (($99) + 44|0);
    HEAP32[$100>>2] = $98;
    $101 = $1;
    $102 = (_yy_ListBlock($101)|0);
    $103 = ($102|0)!=(0);
    if (!($103)) {
     break;
    }
    $104 = $1;
    $105 = $1;
    $106 = (($105) + 28|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = $1;
    $109 = (($108) + 32|0);
    $110 = HEAP32[$109>>2]|0;
    _yyDo($104,156,$107,$110,48008);
    while(1) {
     $111 = $1;
     $112 = (($111) + 12|0);
     $113 = HEAP32[$112>>2]|0;
     $yypos1108 = $113;
     $114 = $1;
     $115 = (($114) + 44|0);
     $116 = HEAP32[$115>>2]|0;
     $yythunkpos1108 = $116;
     $117 = $1;
     $118 = (($117) + 12|0);
     $119 = HEAP32[$118>>2]|0;
     $yypos1109 = $119;
     $120 = $1;
     $121 = (($120) + 44|0);
     $122 = HEAP32[$121>>2]|0;
     $yythunkpos1109 = $122;
     $123 = $1;
     $124 = (_yy_BlankLine($123)|0);
     $125 = ($124|0)!=(0);
     if ($125) {
      label = 27;
      break;
     }
     $126 = $yypos1109;
     $127 = $1;
     $128 = (($127) + 12|0);
     HEAP32[$128>>2] = $126;
     $129 = $yythunkpos1109;
     $130 = $1;
     $131 = (($130) + 44|0);
     HEAP32[$131>>2] = $129;
     $132 = $1;
     $133 = (_yy_ListContinuationBlock($132)|0);
     $134 = ($133|0)!=(0);
     if (!($134)) {
      label = 29;
      break;
     }
     $135 = $1;
     $136 = $1;
     $137 = (($136) + 28|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = $1;
     $140 = (($139) + 32|0);
     $141 = HEAP32[$140>>2]|0;
     _yyDo($135,157,$138,$141,48032);
    }
    if ((label|0) == 27) {
    }
    else if ((label|0) == 29) {
    }
    $142 = $yypos1108;
    $143 = $1;
    $144 = (($143) + 12|0);
    HEAP32[$144>>2] = $142;
    $145 = $yythunkpos1108;
    $146 = $1;
    $147 = (($146) + 44|0);
    HEAP32[$147>>2] = $145;
    $148 = $1;
    $149 = (($148) + 12|0);
    $150 = HEAP32[$149>>2]|0;
    $yypos1110 = $150;
    $151 = $1;
    $152 = (($151) + 44|0);
    $153 = HEAP32[$152>>2]|0;
    $yythunkpos1110 = $153;
    $154 = $1;
    $155 = (_yy_ListContinuationBlock($154)|0);
    $156 = ($155|0)!=(0);
    if ($156) {
     break;
    }
    $157 = $yypos1110;
    $158 = $1;
    $159 = (($158) + 12|0);
    HEAP32[$159>>2] = $157;
    $160 = $yythunkpos1110;
    $161 = $1;
    $162 = (($161) + 44|0);
    HEAP32[$162>>2] = $160;
   }
   $163 = $1;
   $164 = $1;
   $165 = (($164) + 28|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = $1;
   $168 = (($167) + 32|0);
   $169 = HEAP32[$168>>2]|0;
   _yyDo($163,158,$166,$169,48056);
   $170 = $1;
   _yyDo($170,12,1,0,41392);
   $0 = 1;
   $177 = $0;
   STACKTOP = sp;return ($177|0);
  }
 } while(0);
 $171 = $yypos0;
 $172 = $1;
 $173 = (($172) + 12|0);
 HEAP32[$173>>2] = $171;
 $174 = $yythunkpos0;
 $175 = $1;
 $176 = (($175) + 44|0);
 HEAP32[$176>>2] = $174;
 $0 = 0;
 $177 = $0;
 STACKTOP = sp;return ($177|0);
}
function _yy_1_ListTight($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_BulletNoSpace($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos1131 = 0, $yypos1132 = 0, $yythunkpos0 = 0, $yythunkpos1131 = 0, $yythunkpos1132 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos1131 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos1131 = $13;
 $14 = $1;
 $15 = (_yy_HorizontalRule($14)|0);
 $16 = ($15|0)!=(0);
 L1: do {
  if ($16) {
  } else {
   $17 = $yypos1131;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos1131;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yy_NonindentSpace($23)|0);
   $25 = ($24|0)!=(0);
   if (!($25)) {
    break;
   }
   $26 = $1;
   $27 = (($26) + 12|0);
   $28 = HEAP32[$27>>2]|0;
   $yypos1132 = $28;
   $29 = $1;
   $30 = (($29) + 44|0);
   $31 = HEAP32[$30>>2]|0;
   $yythunkpos1132 = $31;
   $32 = $1;
   $33 = (_yymatchChar($32,43)|0);
   $34 = ($33|0)!=(0);
   do {
    if ($34) {
    } else {
     $35 = $yypos1132;
     $36 = $1;
     $37 = (($36) + 12|0);
     HEAP32[$37>>2] = $35;
     $38 = $yythunkpos1132;
     $39 = $1;
     $40 = (($39) + 44|0);
     HEAP32[$40>>2] = $38;
     $41 = $1;
     $42 = (_yymatchChar($41,42)|0);
     $43 = ($42|0)!=(0);
     if ($43) {
      break;
     }
     $44 = $yypos1132;
     $45 = $1;
     $46 = (($45) + 12|0);
     HEAP32[$46>>2] = $44;
     $47 = $yythunkpos1132;
     $48 = $1;
     $49 = (($48) + 44|0);
     HEAP32[$49>>2] = $47;
     $50 = $1;
     $51 = (_yymatchChar($50,45)|0);
     $52 = ($51|0)!=(0);
     if ($52) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_EmptyList($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yythunkpos0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_BlankLine($8)|0);
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $1;
  $12 = $1;
  $13 = (($12) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $1;
  $16 = (($15) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  _yyDo($11,159,$14,$17,47936);
  $0 = 1;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $18 = $yypos0;
 $19 = $1;
 $20 = (($19) + 12|0);
 HEAP32[$20>>2] = $18;
 $21 = $yythunkpos0;
 $22 = $1;
 $23 = (($22) + 44|0);
 HEAP32[$23>>2] = $21;
 $0 = 0;
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function _yy_EnumeratorNoSpace($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0;
 var $yypos1091 = 0, $yythunkpos0 = 0, $yythunkpos1091 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_NonindentSpace($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = (_yymatchClass($11,44248,44288)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   while(1) {
    $14 = $1;
    $15 = (($14) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $yypos1091 = $16;
    $17 = $1;
    $18 = (($17) + 44|0);
    $19 = HEAP32[$18>>2]|0;
    $yythunkpos1091 = $19;
    $20 = $1;
    $21 = (_yymatchClass($20,44248,44288)|0);
    $22 = ($21|0)!=(0);
    if (!($22)) {
     break;
    }
   }
   $23 = $yypos1091;
   $24 = $1;
   $25 = (($24) + 12|0);
   HEAP32[$25>>2] = $23;
   $26 = $yythunkpos1091;
   $27 = $1;
   $28 = (($27) + 44|0);
   HEAP32[$28>>2] = $26;
   $29 = $1;
   $30 = (_yymatchChar($29,46)|0);
   $31 = ($30|0)!=(0);
   if (!($31)) {
    break;
   }
   $0 = 1;
   $38 = $0;
   STACKTOP = sp;return ($38|0);
  } else {
  }
 } while(0);
 $32 = $yypos0;
 $33 = $1;
 $34 = (($33) + 12|0);
 HEAP32[$34>>2] = $32;
 $35 = $yythunkpos0;
 $36 = $1;
 $37 = (($36) + 44|0);
 HEAP32[$37>>2] = $35;
 $0 = 0;
 $38 = $0;
 STACKTOP = sp;return ($38|0);
}
function _yy_2_ListTight($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_mk_pos_list(1,$9,$11,$14)|0);
 $16 = $0;
 $17 = (($16) + 48|0);
 HEAP32[$17>>2] = $15;
 STACKTOP = sp;return;
}
function _yy_ListItem($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos1079 = 0, $yypos1083 = 0, $yypos1084 = 0, $yypos1085 = 0, $yypos1088 = 0, $yythunkpos0 = 0, $yythunkpos1079 = 0;
 var $yythunkpos1083 = 0, $yythunkpos1084 = 0, $yythunkpos1085 = 0, $yythunkpos1088 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 $9 = $1;
 $10 = $1;
 $11 = (($10) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $1;
 $14 = (($13) + 32|0);
 $15 = HEAP32[$14>>2]|0;
 (_yyText($9,$12,$15)|0);
 $16 = $1;
 $17 = (($16) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $1;
 $20 = (($19) + 28|0);
 HEAP32[$20>>2] = $18;
 $21 = $1;
 $22 = (($21) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $yypos1079 = $23;
 $24 = $1;
 $25 = (($24) + 44|0);
 $26 = HEAP32[$25>>2]|0;
 $yythunkpos1079 = $26;
 $27 = $1;
 $28 = (_yy_Bullet($27)|0);
 $29 = ($28|0)!=(0);
 L2: do {
  if ($29) {
   label = 18;
  } else {
   $30 = $yypos1079;
   $31 = $1;
   $32 = (($31) + 12|0);
   HEAP32[$32>>2] = $30;
   $33 = $yythunkpos1079;
   $34 = $1;
   $35 = (($34) + 44|0);
   HEAP32[$35>>2] = $33;
   $36 = $1;
   $37 = (_yy_Enumerator($36)|0);
   $38 = ($37|0)!=(0);
   if ($38) {
    label = 18;
    break;
   }
   $39 = $yypos1079;
   $40 = $1;
   $41 = (($40) + 12|0);
   HEAP32[$41>>2] = $39;
   $42 = $yythunkpos1079;
   $43 = $1;
   $44 = (($43) + 44|0);
   HEAP32[$44>>2] = $42;
   $45 = $1;
   $46 = (_yy_BulletNoSpace($45)|0);
   $47 = ($46|0)!=(0);
   do {
    if ($47) {
     $48 = $1;
     $49 = (($48) + 12|0);
     $50 = HEAP32[$49>>2]|0;
     $yypos1083 = $50;
     $51 = $1;
     $52 = (($51) + 44|0);
     $53 = HEAP32[$52>>2]|0;
     $yythunkpos1083 = $53;
     $54 = $1;
     $55 = (_yy_EmptyList($54)|0);
     $56 = ($55|0)!=(0);
     if ($56) {
      $57 = $yypos1083;
      $58 = $1;
      $59 = (($58) + 12|0);
      HEAP32[$59>>2] = $57;
      $60 = $yythunkpos1083;
      $61 = $1;
      $62 = (($61) + 44|0);
      HEAP32[$62>>2] = $60;
      label = 18;
      break L2;
     } else {
      break;
     }
    } else {
    }
   } while(0);
   $63 = $yypos1079;
   $64 = $1;
   $65 = (($64) + 12|0);
   HEAP32[$65>>2] = $63;
   $66 = $yythunkpos1079;
   $67 = $1;
   $68 = (($67) + 44|0);
   HEAP32[$68>>2] = $66;
   $69 = $1;
   $70 = (_yy_EnumeratorNoSpace($69)|0);
   $71 = ($70|0)!=(0);
   if (!($71)) {
    break;
   }
   $72 = $1;
   $73 = (($72) + 12|0);
   $74 = HEAP32[$73>>2]|0;
   $yypos1084 = $74;
   $75 = $1;
   $76 = (($75) + 44|0);
   $77 = HEAP32[$76>>2]|0;
   $yythunkpos1084 = $77;
   $78 = $1;
   $79 = (_yy_EmptyList($78)|0);
   $80 = ($79|0)!=(0);
   if ($80) {
    $81 = $yypos1084;
    $82 = $1;
    $83 = (($82) + 12|0);
    HEAP32[$83>>2] = $81;
    $84 = $yythunkpos1084;
    $85 = $1;
    $86 = (($85) + 44|0);
    HEAP32[$86>>2] = $84;
    label = 18;
    break;
   } else {
    break;
   }
  }
 } while(0);
 do {
  if ((label|0) == 18) {
   $87 = $1;
   $88 = $1;
   $89 = (($88) + 28|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = $1;
   $92 = (($91) + 32|0);
   $93 = HEAP32[$92>>2]|0;
   (_yyText($87,$90,$93)|0);
   $94 = $1;
   $95 = (($94) + 12|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = $1;
   $98 = (($97) + 32|0);
   HEAP32[$98>>2] = $96;
   $99 = $1;
   $100 = (_yy_StartList($99)|0);
   $101 = ($100|0)!=(0);
   if (!($101)) {
    break;
   }
   $102 = $1;
   _yyDo($102,8,-1,0,41336);
   $103 = $1;
   $104 = (($103) + 12|0);
   $105 = HEAP32[$104>>2]|0;
   $yypos1085 = $105;
   $106 = $1;
   $107 = (($106) + 44|0);
   $108 = HEAP32[$107>>2]|0;
   $yythunkpos1085 = $108;
   $109 = $1;
   $110 = (_yy_EmptyList($109)|0);
   $111 = ($110|0)!=(0);
   if ($111) {
    $112 = $1;
    $113 = $1;
    $114 = (($113) + 28|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = $1;
    $117 = (($116) + 32|0);
    $118 = HEAP32[$117>>2]|0;
    _yyDo($112,160,$115,$118,47720);
   } else {
    $119 = $yypos1085;
    $120 = $1;
    $121 = (($120) + 12|0);
    HEAP32[$121>>2] = $119;
    $122 = $yythunkpos1085;
    $123 = $1;
    $124 = (($123) + 44|0);
    HEAP32[$124>>2] = $122;
    $125 = $1;
    $126 = (_yy_ListBlock($125)|0);
    $127 = ($126|0)!=(0);
    if (!($127)) {
     break;
    }
    $128 = $1;
    $129 = $1;
    $130 = (($129) + 28|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = $1;
    $133 = (($132) + 32|0);
    $134 = HEAP32[$133>>2]|0;
    _yyDo($128,161,$131,$134,47736);
    while(1) {
     $135 = $1;
     $136 = (($135) + 12|0);
     $137 = HEAP32[$136>>2]|0;
     $yypos1088 = $137;
     $138 = $1;
     $139 = (($138) + 44|0);
     $140 = HEAP32[$139>>2]|0;
     $yythunkpos1088 = $140;
     $141 = $1;
     $142 = (_yy_ListContinuationBlock($141)|0);
     $143 = ($142|0)!=(0);
     if (!($143)) {
      break;
     }
     $144 = $1;
     $145 = $1;
     $146 = (($145) + 28|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = $1;
     $149 = (($148) + 32|0);
     $150 = HEAP32[$149>>2]|0;
     _yyDo($144,162,$147,$150,47752);
    }
    $151 = $yypos1088;
    $152 = $1;
    $153 = (($152) + 12|0);
    HEAP32[$153>>2] = $151;
    $154 = $yythunkpos1088;
    $155 = $1;
    $156 = (($155) + 44|0);
    HEAP32[$156>>2] = $154;
   }
   $157 = $1;
   $158 = $1;
   $159 = (($158) + 28|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = $1;
   $162 = (($161) + 32|0);
   $163 = HEAP32[$162>>2]|0;
   _yyDo($157,163,$160,$163,47768);
   $164 = $1;
   _yyDo($164,12,1,0,41392);
   $0 = 1;
   $171 = $0;
   STACKTOP = sp;return ($171|0);
  }
 } while(0);
 $165 = $yypos0;
 $166 = $1;
 $167 = (($166) + 12|0);
 HEAP32[$167>>2] = $165;
 $168 = $yythunkpos0;
 $169 = $1;
 $170 = (($169) + 44|0);
 HEAP32[$170>>2] = $168;
 $0 = 0;
 $171 = $0;
 STACKTOP = sp;return ($171|0);
}
function _yy_1_ListLoose($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $li = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $li = $11;
 $12 = $li;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_strlen(($14|0))|0);
 $size = $15;
 $16 = $li;
 $17 = (($16) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $size;
 $20 = (($19) + 3)|0;
 $21 = (_realloc($18,$20)|0);
 $22 = $li;
 $23 = (($22) + 4|0);
 HEAP32[$23>>2] = $21;
 $24 = $li;
 $25 = (($24) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $size;
 $28 = (($26) + ($27)|0);
 (_strncat($28,47712,2)|0);
 $29 = $0;
 $30 = (($29) + 52|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + -4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $0;
 $35 = (($34) + 52|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + -8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (_cons($33,$38)|0);
 $40 = $0;
 $41 = (($40) + 52|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) + -8|0);
 HEAP32[$43>>2] = $39;
 STACKTOP = sp;return;
}
function _yy_2_ListLoose($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_mk_pos_list(1,$9,$11,$14)|0);
 $16 = $0;
 $17 = (($16) + 48|0);
 HEAP32[$17>>2] = $15;
 STACKTOP = sp;return;
}
function _yy_1_MarkdownHtmlTagOpen($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = (_mk_str(42664)|0);
 $6 = $0;
 $7 = (($6) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + -4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_cons($5,$10)|0);
 $12 = $0;
 $13 = (($12) + 52|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + -4|0);
 HEAP32[$15>>2] = $11;
 STACKTOP = sp;return;
}
function _yy_HtmlBlockType($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos307 = 0, $yythunkpos0 = 0, $yythunkpos307 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos307 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos307 = $13;
 $14 = $1;
 $15 = (_yymatchString($14,41512)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
  } else {
   $17 = $yypos307;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos307;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yymatchString($23,41520)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    break;
   }
   $26 = $yypos307;
   $27 = $1;
   $28 = (($27) + 12|0);
   HEAP32[$28>>2] = $26;
   $29 = $yythunkpos307;
   $30 = $1;
   $31 = (($30) + 44|0);
   HEAP32[$31>>2] = $29;
   $32 = $1;
   $33 = (_yymatchString($32,41536)|0);
   $34 = ($33|0)!=(0);
   if ($34) {
    break;
   }
   $35 = $yypos307;
   $36 = $1;
   $37 = (($36) + 12|0);
   HEAP32[$37>>2] = $35;
   $38 = $yythunkpos307;
   $39 = $1;
   $40 = (($39) + 44|0);
   HEAP32[$40>>2] = $38;
   $41 = $1;
   $42 = (_yymatchString($41,41544)|0);
   $43 = ($42|0)!=(0);
   if ($43) {
    break;
   }
   $44 = $yypos307;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos307;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchString($50,41552)|0);
   $52 = ($51|0)!=(0);
   if ($52) {
    break;
   }
   $53 = $yypos307;
   $54 = $1;
   $55 = (($54) + 12|0);
   HEAP32[$55>>2] = $53;
   $56 = $yythunkpos307;
   $57 = $1;
   $58 = (($57) + 44|0);
   HEAP32[$58>>2] = $56;
   $59 = $1;
   $60 = (_yymatchString($59,41560)|0);
   $61 = ($60|0)!=(0);
   if ($61) {
    break;
   }
   $62 = $yypos307;
   $63 = $1;
   $64 = (($63) + 12|0);
   HEAP32[$64>>2] = $62;
   $65 = $yythunkpos307;
   $66 = $1;
   $67 = (($66) + 44|0);
   HEAP32[$67>>2] = $65;
   $68 = $1;
   $69 = (_yymatchString($68,41568)|0);
   $70 = ($69|0)!=(0);
   if ($70) {
    break;
   }
   $71 = $yypos307;
   $72 = $1;
   $73 = (($72) + 12|0);
   HEAP32[$73>>2] = $71;
   $74 = $yythunkpos307;
   $75 = $1;
   $76 = (($75) + 44|0);
   HEAP32[$76>>2] = $74;
   $77 = $1;
   $78 = (_yymatchString($77,41584)|0);
   $79 = ($78|0)!=(0);
   if ($79) {
    break;
   }
   $80 = $yypos307;
   $81 = $1;
   $82 = (($81) + 12|0);
   HEAP32[$82>>2] = $80;
   $83 = $yythunkpos307;
   $84 = $1;
   $85 = (($84) + 44|0);
   HEAP32[$85>>2] = $83;
   $86 = $1;
   $87 = (_yymatchString($86,41592)|0);
   $88 = ($87|0)!=(0);
   if ($88) {
    break;
   }
   $89 = $yypos307;
   $90 = $1;
   $91 = (($90) + 12|0);
   HEAP32[$91>>2] = $89;
   $92 = $yythunkpos307;
   $93 = $1;
   $94 = (($93) + 44|0);
   HEAP32[$94>>2] = $92;
   $95 = $1;
   $96 = (_yymatchString($95,41600)|0);
   $97 = ($96|0)!=(0);
   if ($97) {
    break;
   }
   $98 = $yypos307;
   $99 = $1;
   $100 = (($99) + 12|0);
   HEAP32[$100>>2] = $98;
   $101 = $yythunkpos307;
   $102 = $1;
   $103 = (($102) + 44|0);
   HEAP32[$103>>2] = $101;
   $104 = $1;
   $105 = (_yymatchString($104,41608)|0);
   $106 = ($105|0)!=(0);
   if ($106) {
    break;
   }
   $107 = $yypos307;
   $108 = $1;
   $109 = (($108) + 12|0);
   HEAP32[$109>>2] = $107;
   $110 = $yythunkpos307;
   $111 = $1;
   $112 = (($111) + 44|0);
   HEAP32[$112>>2] = $110;
   $113 = $1;
   $114 = (_yymatchString($113,41616)|0);
   $115 = ($114|0)!=(0);
   if ($115) {
    break;
   }
   $116 = $yypos307;
   $117 = $1;
   $118 = (($117) + 12|0);
   HEAP32[$118>>2] = $116;
   $119 = $yythunkpos307;
   $120 = $1;
   $121 = (($120) + 44|0);
   HEAP32[$121>>2] = $119;
   $122 = $1;
   $123 = (_yymatchString($122,41624)|0);
   $124 = ($123|0)!=(0);
   if ($124) {
    break;
   }
   $125 = $yypos307;
   $126 = $1;
   $127 = (($126) + 12|0);
   HEAP32[$127>>2] = $125;
   $128 = $yythunkpos307;
   $129 = $1;
   $130 = (($129) + 44|0);
   HEAP32[$130>>2] = $128;
   $131 = $1;
   $132 = (_yymatchString($131,41632)|0);
   $133 = ($132|0)!=(0);
   if ($133) {
    break;
   }
   $134 = $yypos307;
   $135 = $1;
   $136 = (($135) + 12|0);
   HEAP32[$136>>2] = $134;
   $137 = $yythunkpos307;
   $138 = $1;
   $139 = (($138) + 44|0);
   HEAP32[$139>>2] = $137;
   $140 = $1;
   $141 = (_yymatchString($140,41640)|0);
   $142 = ($141|0)!=(0);
   if ($142) {
    break;
   }
   $143 = $yypos307;
   $144 = $1;
   $145 = (($144) + 12|0);
   HEAP32[$145>>2] = $143;
   $146 = $yythunkpos307;
   $147 = $1;
   $148 = (($147) + 44|0);
   HEAP32[$148>>2] = $146;
   $149 = $1;
   $150 = (_yymatchString($149,41648)|0);
   $151 = ($150|0)!=(0);
   if ($151) {
    break;
   }
   $152 = $yypos307;
   $153 = $1;
   $154 = (($153) + 12|0);
   HEAP32[$154>>2] = $152;
   $155 = $yythunkpos307;
   $156 = $1;
   $157 = (($156) + 44|0);
   HEAP32[$157>>2] = $155;
   $158 = $1;
   $159 = (_yymatchString($158,41656)|0);
   $160 = ($159|0)!=(0);
   if ($160) {
    break;
   }
   $161 = $yypos307;
   $162 = $1;
   $163 = (($162) + 12|0);
   HEAP32[$163>>2] = $161;
   $164 = $yythunkpos307;
   $165 = $1;
   $166 = (($165) + 44|0);
   HEAP32[$166>>2] = $164;
   $167 = $1;
   $168 = (_yymatchString($167,41664)|0);
   $169 = ($168|0)!=(0);
   if ($169) {
    break;
   }
   $170 = $yypos307;
   $171 = $1;
   $172 = (($171) + 12|0);
   HEAP32[$172>>2] = $170;
   $173 = $yythunkpos307;
   $174 = $1;
   $175 = (($174) + 44|0);
   HEAP32[$175>>2] = $173;
   $176 = $1;
   $177 = (_yymatchString($176,41680)|0);
   $178 = ($177|0)!=(0);
   if ($178) {
    break;
   }
   $179 = $yypos307;
   $180 = $1;
   $181 = (($180) + 12|0);
   HEAP32[$181>>2] = $179;
   $182 = $yythunkpos307;
   $183 = $1;
   $184 = (($183) + 44|0);
   HEAP32[$184>>2] = $182;
   $185 = $1;
   $186 = (_yymatchString($185,41696)|0);
   $187 = ($186|0)!=(0);
   if ($187) {
    break;
   }
   $188 = $yypos307;
   $189 = $1;
   $190 = (($189) + 12|0);
   HEAP32[$190>>2] = $188;
   $191 = $yythunkpos307;
   $192 = $1;
   $193 = (($192) + 44|0);
   HEAP32[$193>>2] = $191;
   $194 = $1;
   $195 = (_yymatchString($194,41704)|0);
   $196 = ($195|0)!=(0);
   if ($196) {
    break;
   }
   $197 = $yypos307;
   $198 = $1;
   $199 = (($198) + 12|0);
   HEAP32[$199>>2] = $197;
   $200 = $yythunkpos307;
   $201 = $1;
   $202 = (($201) + 44|0);
   HEAP32[$202>>2] = $200;
   $203 = $1;
   $204 = (_yymatchChar($203,112)|0);
   $205 = ($204|0)!=(0);
   if ($205) {
    break;
   }
   $206 = $yypos307;
   $207 = $1;
   $208 = (($207) + 12|0);
   HEAP32[$208>>2] = $206;
   $209 = $yythunkpos307;
   $210 = $1;
   $211 = (($210) + 44|0);
   HEAP32[$211>>2] = $209;
   $212 = $1;
   $213 = (_yymatchString($212,41712)|0);
   $214 = ($213|0)!=(0);
   if ($214) {
    break;
   }
   $215 = $yypos307;
   $216 = $1;
   $217 = (($216) + 12|0);
   HEAP32[$217>>2] = $215;
   $218 = $yythunkpos307;
   $219 = $1;
   $220 = (($219) + 44|0);
   HEAP32[$220>>2] = $218;
   $221 = $1;
   $222 = (_yymatchString($221,41720)|0);
   $223 = ($222|0)!=(0);
   if ($223) {
    break;
   }
   $224 = $yypos307;
   $225 = $1;
   $226 = (($225) + 12|0);
   HEAP32[$226>>2] = $224;
   $227 = $yythunkpos307;
   $228 = $1;
   $229 = (($228) + 44|0);
   HEAP32[$229>>2] = $227;
   $230 = $1;
   $231 = (_yymatchString($230,41728)|0);
   $232 = ($231|0)!=(0);
   if ($232) {
    break;
   }
   $233 = $yypos307;
   $234 = $1;
   $235 = (($234) + 12|0);
   HEAP32[$235>>2] = $233;
   $236 = $yythunkpos307;
   $237 = $1;
   $238 = (($237) + 44|0);
   HEAP32[$238>>2] = $236;
   $239 = $1;
   $240 = (_yymatchString($239,41736)|0);
   $241 = ($240|0)!=(0);
   if ($241) {
    break;
   }
   $242 = $yypos307;
   $243 = $1;
   $244 = (($243) + 12|0);
   HEAP32[$244>>2] = $242;
   $245 = $yythunkpos307;
   $246 = $1;
   $247 = (($246) + 44|0);
   HEAP32[$247>>2] = $245;
   $248 = $1;
   $249 = (_yymatchString($248,41744)|0);
   $250 = ($249|0)!=(0);
   if ($250) {
    break;
   }
   $251 = $yypos307;
   $252 = $1;
   $253 = (($252) + 12|0);
   HEAP32[$253>>2] = $251;
   $254 = $yythunkpos307;
   $255 = $1;
   $256 = (($255) + 44|0);
   HEAP32[$256>>2] = $254;
   $257 = $1;
   $258 = (_yymatchString($257,41760)|0);
   $259 = ($258|0)!=(0);
   if ($259) {
    break;
   }
   $260 = $yypos307;
   $261 = $1;
   $262 = (($261) + 12|0);
   HEAP32[$262>>2] = $260;
   $263 = $yythunkpos307;
   $264 = $1;
   $265 = (($264) + 44|0);
   HEAP32[$265>>2] = $263;
   $266 = $1;
   $267 = (_yymatchString($266,41768)|0);
   $268 = ($267|0)!=(0);
   if ($268) {
    break;
   }
   $269 = $yypos307;
   $270 = $1;
   $271 = (($270) + 12|0);
   HEAP32[$271>>2] = $269;
   $272 = $yythunkpos307;
   $273 = $1;
   $274 = (($273) + 44|0);
   HEAP32[$274>>2] = $272;
   $275 = $1;
   $276 = (_yymatchString($275,41776)|0);
   $277 = ($276|0)!=(0);
   if ($277) {
    break;
   }
   $278 = $yypos307;
   $279 = $1;
   $280 = (($279) + 12|0);
   HEAP32[$280>>2] = $278;
   $281 = $yythunkpos307;
   $282 = $1;
   $283 = (($282) + 44|0);
   HEAP32[$283>>2] = $281;
   $284 = $1;
   $285 = (_yymatchString($284,41784)|0);
   $286 = ($285|0)!=(0);
   if ($286) {
    break;
   }
   $287 = $yypos307;
   $288 = $1;
   $289 = (($288) + 12|0);
   HEAP32[$289>>2] = $287;
   $290 = $yythunkpos307;
   $291 = $1;
   $292 = (($291) + 44|0);
   HEAP32[$292>>2] = $290;
   $293 = $1;
   $294 = (_yymatchString($293,41792)|0);
   $295 = ($294|0)!=(0);
   if ($295) {
    break;
   }
   $296 = $yypos307;
   $297 = $1;
   $298 = (($297) + 12|0);
   HEAP32[$298>>2] = $296;
   $299 = $yythunkpos307;
   $300 = $1;
   $301 = (($300) + 44|0);
   HEAP32[$301>>2] = $299;
   $302 = $1;
   $303 = (_yymatchString($302,41800)|0);
   $304 = ($303|0)!=(0);
   if ($304) {
    break;
   }
   $305 = $yypos307;
   $306 = $1;
   $307 = (($306) + 12|0);
   HEAP32[$307>>2] = $305;
   $308 = $yythunkpos307;
   $309 = $1;
   $310 = (($309) + 44|0);
   HEAP32[$310>>2] = $308;
   $311 = $1;
   $312 = (_yymatchString($311,41808)|0);
   $313 = ($312|0)!=(0);
   if ($313) {
    break;
   }
   $314 = $yypos307;
   $315 = $1;
   $316 = (($315) + 12|0);
   HEAP32[$316>>2] = $314;
   $317 = $yythunkpos307;
   $318 = $1;
   $319 = (($318) + 44|0);
   HEAP32[$319>>2] = $317;
   $320 = $1;
   $321 = (_yymatchString($320,41816)|0);
   $322 = ($321|0)!=(0);
   if ($322) {
    break;
   }
   $323 = $yypos307;
   $324 = $1;
   $325 = (($324) + 12|0);
   HEAP32[$325>>2] = $323;
   $326 = $yythunkpos307;
   $327 = $1;
   $328 = (($327) + 44|0);
   HEAP32[$328>>2] = $326;
   $329 = $1;
   $330 = (_yymatchString($329,41824)|0);
   $331 = ($330|0)!=(0);
   if ($331) {
    break;
   }
   $332 = $yypos307;
   $333 = $1;
   $334 = (($333) + 12|0);
   HEAP32[$334>>2] = $332;
   $335 = $yythunkpos307;
   $336 = $1;
   $337 = (($336) + 44|0);
   HEAP32[$337>>2] = $335;
   $338 = $1;
   $339 = (_yymatchString($338,41832)|0);
   $340 = ($339|0)!=(0);
   if ($340) {
    break;
   }
   $341 = $yypos307;
   $342 = $1;
   $343 = (($342) + 12|0);
   HEAP32[$343>>2] = $341;
   $344 = $yythunkpos307;
   $345 = $1;
   $346 = (($345) + 44|0);
   HEAP32[$346>>2] = $344;
   $347 = $1;
   $348 = (_yymatchString($347,41848)|0);
   $349 = ($348|0)!=(0);
   if ($349) {
    break;
   }
   $350 = $yypos307;
   $351 = $1;
   $352 = (($351) + 12|0);
   HEAP32[$352>>2] = $350;
   $353 = $yythunkpos307;
   $354 = $1;
   $355 = (($354) + 44|0);
   HEAP32[$355>>2] = $353;
   $356 = $1;
   $357 = (_yymatchString($356,41856)|0);
   $358 = ($357|0)!=(0);
   if ($358) {
    break;
   }
   $359 = $yypos307;
   $360 = $1;
   $361 = (($360) + 12|0);
   HEAP32[$361>>2] = $359;
   $362 = $yythunkpos307;
   $363 = $1;
   $364 = (($363) + 44|0);
   HEAP32[$364>>2] = $362;
   $365 = $1;
   $366 = (_yymatchString($365,41864)|0);
   $367 = ($366|0)!=(0);
   if ($367) {
    break;
   }
   $368 = $yypos307;
   $369 = $1;
   $370 = (($369) + 12|0);
   HEAP32[$370>>2] = $368;
   $371 = $yythunkpos307;
   $372 = $1;
   $373 = (($372) + 44|0);
   HEAP32[$373>>2] = $371;
   $374 = $1;
   $375 = (_yymatchString($374,41872)|0);
   $376 = ($375|0)!=(0);
   if ($376) {
    break;
   }
   $377 = $yypos307;
   $378 = $1;
   $379 = (($378) + 12|0);
   HEAP32[$379>>2] = $377;
   $380 = $yythunkpos307;
   $381 = $1;
   $382 = (($381) + 44|0);
   HEAP32[$382>>2] = $380;
   $383 = $1;
   $384 = (_yymatchString($383,41880)|0);
   $385 = ($384|0)!=(0);
   if ($385) {
    break;
   }
   $386 = $yypos307;
   $387 = $1;
   $388 = (($387) + 12|0);
   HEAP32[$388>>2] = $386;
   $389 = $yythunkpos307;
   $390 = $1;
   $391 = (($390) + 44|0);
   HEAP32[$391>>2] = $389;
   $392 = $1;
   $393 = (_yymatchString($392,41896)|0);
   $394 = ($393|0)!=(0);
   if ($394) {
    break;
   }
   $395 = $yypos307;
   $396 = $1;
   $397 = (($396) + 12|0);
   HEAP32[$397>>2] = $395;
   $398 = $yythunkpos307;
   $399 = $1;
   $400 = (($399) + 44|0);
   HEAP32[$400>>2] = $398;
   $401 = $1;
   $402 = (_yymatchString($401,41904)|0);
   $403 = ($402|0)!=(0);
   if ($403) {
    break;
   }
   $404 = $yypos307;
   $405 = $1;
   $406 = (($405) + 12|0);
   HEAP32[$406>>2] = $404;
   $407 = $yythunkpos307;
   $408 = $1;
   $409 = (($408) + 44|0);
   HEAP32[$409>>2] = $407;
   $410 = $1;
   $411 = (_yymatchString($410,41912)|0);
   $412 = ($411|0)!=(0);
   if ($412) {
    break;
   }
   $413 = $yypos307;
   $414 = $1;
   $415 = (($414) + 12|0);
   HEAP32[$415>>2] = $413;
   $416 = $yythunkpos307;
   $417 = $1;
   $418 = (($417) + 44|0);
   HEAP32[$418>>2] = $416;
   $419 = $1;
   $420 = (_yymatchString($419,41920)|0);
   $421 = ($420|0)!=(0);
   if ($421) {
    break;
   }
   $422 = $yypos307;
   $423 = $1;
   $424 = (($423) + 12|0);
   HEAP32[$424>>2] = $422;
   $425 = $yythunkpos307;
   $426 = $1;
   $427 = (($426) + 44|0);
   HEAP32[$427>>2] = $425;
   $428 = $1;
   $429 = (_yymatchString($428,41928)|0);
   $430 = ($429|0)!=(0);
   if ($430) {
    break;
   }
   $431 = $yypos307;
   $432 = $1;
   $433 = (($432) + 12|0);
   HEAP32[$433>>2] = $431;
   $434 = $yythunkpos307;
   $435 = $1;
   $436 = (($435) + 44|0);
   HEAP32[$436>>2] = $434;
   $437 = $1;
   $438 = (_yymatchString($437,41936)|0);
   $439 = ($438|0)!=(0);
   if ($439) {
    break;
   }
   $440 = $yypos307;
   $441 = $1;
   $442 = (($441) + 12|0);
   HEAP32[$442>>2] = $440;
   $443 = $yythunkpos307;
   $444 = $1;
   $445 = (($444) + 44|0);
   HEAP32[$445>>2] = $443;
   $446 = $1;
   $447 = (_yymatchString($446,41944)|0);
   $448 = ($447|0)!=(0);
   if ($448) {
    break;
   }
   $449 = $yypos307;
   $450 = $1;
   $451 = (($450) + 12|0);
   HEAP32[$451>>2] = $449;
   $452 = $yythunkpos307;
   $453 = $1;
   $454 = (($453) + 44|0);
   HEAP32[$454>>2] = $452;
   $455 = $1;
   $456 = (_yymatchString($455,41952)|0);
   $457 = ($456|0)!=(0);
   if ($457) {
    break;
   }
   $458 = $yypos307;
   $459 = $1;
   $460 = (($459) + 12|0);
   HEAP32[$460>>2] = $458;
   $461 = $yythunkpos307;
   $462 = $1;
   $463 = (($462) + 44|0);
   HEAP32[$463>>2] = $461;
   $464 = $1;
   $465 = (_yymatchString($464,41960)|0);
   $466 = ($465|0)!=(0);
   if ($466) {
    break;
   }
   $467 = $yypos307;
   $468 = $1;
   $469 = (($468) + 12|0);
   HEAP32[$469>>2] = $467;
   $470 = $yythunkpos307;
   $471 = $1;
   $472 = (($471) + 44|0);
   HEAP32[$472>>2] = $470;
   $473 = $1;
   $474 = (_yymatchString($473,41968)|0);
   $475 = ($474|0)!=(0);
   if ($475) {
    break;
   }
   $476 = $yypos307;
   $477 = $1;
   $478 = (($477) + 12|0);
   HEAP32[$478>>2] = $476;
   $479 = $yythunkpos307;
   $480 = $1;
   $481 = (($480) + 44|0);
   HEAP32[$481>>2] = $479;
   $482 = $1;
   $483 = (_yymatchString($482,41976)|0);
   $484 = ($483|0)!=(0);
   if ($484) {
    break;
   }
   $485 = $yypos307;
   $486 = $1;
   $487 = (($486) + 12|0);
   HEAP32[$487>>2] = $485;
   $488 = $yythunkpos307;
   $489 = $1;
   $490 = (($489) + 44|0);
   HEAP32[$490>>2] = $488;
   $491 = $1;
   $492 = (_yymatchString($491,41992)|0);
   $493 = ($492|0)!=(0);
   if ($493) {
    break;
   }
   $494 = $yypos307;
   $495 = $1;
   $496 = (($495) + 12|0);
   HEAP32[$496>>2] = $494;
   $497 = $yythunkpos307;
   $498 = $1;
   $499 = (($498) + 44|0);
   HEAP32[$499>>2] = $497;
   $500 = $1;
   $501 = (_yymatchString($500,42008)|0);
   $502 = ($501|0)!=(0);
   if ($502) {
    break;
   }
   $503 = $yypos307;
   $504 = $1;
   $505 = (($504) + 12|0);
   HEAP32[$505>>2] = $503;
   $506 = $yythunkpos307;
   $507 = $1;
   $508 = (($507) + 44|0);
   HEAP32[$508>>2] = $506;
   $509 = $1;
   $510 = (_yymatchString($509,42016)|0);
   $511 = ($510|0)!=(0);
   if ($511) {
    break;
   }
   $512 = $yypos307;
   $513 = $1;
   $514 = (($513) + 12|0);
   HEAP32[$514>>2] = $512;
   $515 = $yythunkpos307;
   $516 = $1;
   $517 = (($516) + 44|0);
   HEAP32[$517>>2] = $515;
   $518 = $1;
   $519 = (_yymatchChar($518,80)|0);
   $520 = ($519|0)!=(0);
   if ($520) {
    break;
   }
   $521 = $yypos307;
   $522 = $1;
   $523 = (($522) + 12|0);
   HEAP32[$523>>2] = $521;
   $524 = $yythunkpos307;
   $525 = $1;
   $526 = (($525) + 44|0);
   HEAP32[$526>>2] = $524;
   $527 = $1;
   $528 = (_yymatchString($527,42024)|0);
   $529 = ($528|0)!=(0);
   if ($529) {
    break;
   }
   $530 = $yypos307;
   $531 = $1;
   $532 = (($531) + 12|0);
   HEAP32[$532>>2] = $530;
   $533 = $yythunkpos307;
   $534 = $1;
   $535 = (($534) + 44|0);
   HEAP32[$535>>2] = $533;
   $536 = $1;
   $537 = (_yymatchString($536,42032)|0);
   $538 = ($537|0)!=(0);
   if ($538) {
    break;
   }
   $539 = $yypos307;
   $540 = $1;
   $541 = (($540) + 12|0);
   HEAP32[$541>>2] = $539;
   $542 = $yythunkpos307;
   $543 = $1;
   $544 = (($543) + 44|0);
   HEAP32[$544>>2] = $542;
   $545 = $1;
   $546 = (_yymatchString($545,42040)|0);
   $547 = ($546|0)!=(0);
   if ($547) {
    break;
   }
   $548 = $yypos307;
   $549 = $1;
   $550 = (($549) + 12|0);
   HEAP32[$550>>2] = $548;
   $551 = $yythunkpos307;
   $552 = $1;
   $553 = (($552) + 44|0);
   HEAP32[$553>>2] = $551;
   $554 = $1;
   $555 = (_yymatchString($554,42048)|0);
   $556 = ($555|0)!=(0);
   if ($556) {
    break;
   }
   $557 = $yypos307;
   $558 = $1;
   $559 = (($558) + 12|0);
   HEAP32[$559>>2] = $557;
   $560 = $yythunkpos307;
   $561 = $1;
   $562 = (($561) + 44|0);
   HEAP32[$562>>2] = $560;
   $563 = $1;
   $564 = (_yymatchString($563,42056)|0);
   $565 = ($564|0)!=(0);
   if ($565) {
    break;
   }
   $566 = $yypos307;
   $567 = $1;
   $568 = (($567) + 12|0);
   HEAP32[$568>>2] = $566;
   $569 = $yythunkpos307;
   $570 = $1;
   $571 = (($570) + 44|0);
   HEAP32[$571>>2] = $569;
   $572 = $1;
   $573 = (_yymatchString($572,42072)|0);
   $574 = ($573|0)!=(0);
   if ($574) {
    break;
   }
   $575 = $yypos307;
   $576 = $1;
   $577 = (($576) + 12|0);
   HEAP32[$577>>2] = $575;
   $578 = $yythunkpos307;
   $579 = $1;
   $580 = (($579) + 44|0);
   HEAP32[$580>>2] = $578;
   $581 = $1;
   $582 = (_yymatchString($581,42080)|0);
   $583 = ($582|0)!=(0);
   if ($583) {
    break;
   }
   $584 = $yypos307;
   $585 = $1;
   $586 = (($585) + 12|0);
   HEAP32[$586>>2] = $584;
   $587 = $yythunkpos307;
   $588 = $1;
   $589 = (($588) + 44|0);
   HEAP32[$589>>2] = $587;
   $590 = $1;
   $591 = (_yymatchString($590,42088)|0);
   $592 = ($591|0)!=(0);
   if ($592) {
    break;
   }
   $593 = $yypos307;
   $594 = $1;
   $595 = (($594) + 12|0);
   HEAP32[$595>>2] = $593;
   $596 = $yythunkpos307;
   $597 = $1;
   $598 = (($597) + 44|0);
   HEAP32[$598>>2] = $596;
   $599 = $1;
   $600 = (_yymatchString($599,42096)|0);
   $601 = ($600|0)!=(0);
   if ($601) {
    break;
   }
   $602 = $yypos307;
   $603 = $1;
   $604 = (($603) + 12|0);
   HEAP32[$604>>2] = $602;
   $605 = $yythunkpos307;
   $606 = $1;
   $607 = (($606) + 44|0);
   HEAP32[$607>>2] = $605;
   $608 = $1;
   $609 = (_yymatchString($608,42104)|0);
   $610 = ($609|0)!=(0);
   if ($610) {
    break;
   }
   $611 = $yypos307;
   $612 = $1;
   $613 = (($612) + 12|0);
   HEAP32[$613>>2] = $611;
   $614 = $yythunkpos307;
   $615 = $1;
   $616 = (($615) + 44|0);
   HEAP32[$616>>2] = $614;
   $617 = $1;
   $618 = (_yymatchString($617,42112)|0);
   $619 = ($618|0)!=(0);
   if ($619) {
    break;
   }
   $620 = $yypos307;
   $621 = $1;
   $622 = (($621) + 12|0);
   HEAP32[$622>>2] = $620;
   $623 = $yythunkpos307;
   $624 = $1;
   $625 = (($624) + 44|0);
   HEAP32[$625>>2] = $623;
   $626 = $1;
   $627 = (_yymatchString($626,42120)|0);
   $628 = ($627|0)!=(0);
   if ($628) {
    break;
   }
   $629 = $yypos307;
   $630 = $1;
   $631 = (($630) + 12|0);
   HEAP32[$631>>2] = $629;
   $632 = $yythunkpos307;
   $633 = $1;
   $634 = (($633) + 44|0);
   HEAP32[$634>>2] = $632;
   $635 = $1;
   $636 = (_yymatchString($635,42128)|0);
   $637 = ($636|0)!=(0);
   if ($637) {
    break;
   }
   $638 = $yypos0;
   $639 = $1;
   $640 = (($639) + 12|0);
   HEAP32[$640>>2] = $638;
   $641 = $yythunkpos0;
   $642 = $1;
   $643 = (($642) + 44|0);
   HEAP32[$643>>2] = $641;
   $0 = 0;
   $644 = $0;
   STACKTOP = sp;return ($644|0);
  }
 } while(0);
 $0 = 1;
 $644 = $0;
 STACKTOP = sp;return ($644|0);
}
function _yy_2_MarkdownHtmlTagOpen($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = (_mk_str($5)|0);
 $7 = $0;
 $8 = (($7) + 52|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + -4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_cons($6,$11)|0);
 $13 = $0;
 $14 = (($13) + 52|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + -4|0);
 HEAP32[$16>>2] = $12;
 STACKTOP = sp;return;
}
function _yy_MarkdownHtmlAttribute($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, $yypos0 = 0, $yypos378 = 0, $yypos380 = 0, $yypos382 = 0, $yythunkpos0 = 0, $yythunkpos378 = 0, $yythunkpos380 = 0, $yythunkpos382 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos378 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos378 = $13;
 $14 = $1;
 $15 = (_yymatchString($14,42632)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
   label = 7;
  } else {
   $17 = $yypos378;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos378;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yymatchString($23,42648)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    label = 7;
    break;
   } else {
    break;
   }
  }
 } while(0);
 do {
  if ((label|0) == 7) {
   $26 = $1;
   $27 = (_yy_Spnl($26)|0);
   $28 = ($27|0)!=(0);
   if (!($28)) {
    break;
   }
   $29 = $1;
   $30 = (_yymatchChar($29,61)|0);
   $31 = ($30|0)!=(0);
   if (!($31)) {
    break;
   }
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   $35 = $1;
   $36 = (($35) + 12|0);
   $37 = HEAP32[$36>>2]|0;
   $yypos380 = $37;
   $38 = $1;
   $39 = (($38) + 44|0);
   $40 = HEAP32[$39>>2]|0;
   $yythunkpos380 = $40;
   $41 = $1;
   $42 = (_yymatchChar($41,34)|0);
   $43 = ($42|0)!=(0);
   do {
    if ($43) {
     $44 = $1;
     $45 = (_yy_Spnl($44)|0);
     $46 = ($45|0)!=(0);
     if ($46) {
      break;
     } else {
      label = 18;
      break;
     }
    } else {
     label = 18;
    }
   } while(0);
   if ((label|0) == 18) {
    $47 = $yypos380;
    $48 = $1;
    $49 = (($48) + 12|0);
    HEAP32[$49>>2] = $47;
    $50 = $yythunkpos380;
    $51 = $1;
    $52 = (($51) + 44|0);
    HEAP32[$52>>2] = $50;
   }
   $53 = $1;
   $54 = (_yymatchChar($53,49)|0);
   $55 = ($54|0)!=(0);
   if (!($55)) {
    break;
   }
   $56 = $1;
   $57 = (($56) + 12|0);
   $58 = HEAP32[$57>>2]|0;
   $yypos382 = $58;
   $59 = $1;
   $60 = (($59) + 44|0);
   $61 = HEAP32[$60>>2]|0;
   $yythunkpos382 = $61;
   $62 = $1;
   $63 = (_yy_Spnl($62)|0);
   $64 = ($63|0)!=(0);
   do {
    if ($64) {
     $65 = $1;
     $66 = (_yymatchChar($65,34)|0);
     $67 = ($66|0)!=(0);
     if ($67) {
      break;
     } else {
      label = 26;
      break;
     }
    } else {
     label = 26;
    }
   } while(0);
   if ((label|0) == 26) {
    $68 = $yypos382;
    $69 = $1;
    $70 = (($69) + 12|0);
    HEAP32[$70>>2] = $68;
    $71 = $yythunkpos382;
    $72 = $1;
    $73 = (($72) + 44|0);
    HEAP32[$73>>2] = $71;
   }
   $74 = $1;
   $75 = (_yy_Spnl($74)|0);
   $76 = ($75|0)!=(0);
   if (!($76)) {
    break;
   }
   $0 = 1;
   $83 = $0;
   STACKTOP = sp;return ($83|0);
  }
 } while(0);
 $77 = $yypos0;
 $78 = $1;
 $79 = (($78) + 12|0);
 HEAP32[$79>>2] = $77;
 $80 = $yythunkpos0;
 $81 = $1;
 $82 = (($81) + 44|0);
 HEAP32[$82>>2] = $80;
 $0 = 0;
 $83 = $0;
 STACKTOP = sp;return ($83|0);
}
function _yy_HtmlAttribute($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos2078 = 0, $yypos2079 = 0, $yypos2081 = 0, $yypos2083 = 0, $yypos2085 = 0, $yypos2088 = 0, $yypos2089 = 0, $yypos2090 = 0, $yythunkpos0 = 0;
 var $yythunkpos2078 = 0, $yythunkpos2079 = 0, $yythunkpos2081 = 0, $yythunkpos2083 = 0, $yythunkpos2085 = 0, $yythunkpos2088 = 0, $yythunkpos2089 = 0, $yythunkpos2090 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos2079 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos2079 = $13;
 $14 = $1;
 $15 = (_yy_AlphanumericAscii($14)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
   label = 7;
  } else {
   $17 = $yypos2079;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos2079;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yymatchChar($23,45)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    label = 7;
    break;
   } else {
    break;
   }
  }
 } while(0);
 do {
  if ((label|0) == 7) {
   while(1) {
    $26 = $1;
    $27 = (($26) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $yypos2078 = $28;
    $29 = $1;
    $30 = (($29) + 44|0);
    $31 = HEAP32[$30>>2]|0;
    $yythunkpos2078 = $31;
    $32 = $1;
    $33 = (($32) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $yypos2081 = $34;
    $35 = $1;
    $36 = (($35) + 44|0);
    $37 = HEAP32[$36>>2]|0;
    $yythunkpos2081 = $37;
    $38 = $1;
    $39 = (_yy_AlphanumericAscii($38)|0);
    $40 = ($39|0)!=(0);
    if ($40) {
    } else {
     $41 = $yypos2081;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos2081;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchChar($47,45)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      break;
     }
    }
   }
   $50 = $yypos2078;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos2078;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yy_Spnl($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $59 = $1;
   $60 = (($59) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $yypos2083 = $61;
   $62 = $1;
   $63 = (($62) + 44|0);
   $64 = HEAP32[$63>>2]|0;
   $yythunkpos2083 = $64;
   $65 = $1;
   $66 = (_yymatchChar($65,61)|0);
   $67 = ($66|0)!=(0);
   do {
    if ($67) {
     $68 = $1;
     $69 = (_yy_Spnl($68)|0);
     $70 = ($69|0)!=(0);
     if (!($70)) {
      label = 38;
      break;
     }
     $71 = $1;
     $72 = (($71) + 12|0);
     $73 = HEAP32[$72>>2]|0;
     $yypos2085 = $73;
     $74 = $1;
     $75 = (($74) + 44|0);
     $76 = HEAP32[$75>>2]|0;
     $yythunkpos2085 = $76;
     $77 = $1;
     $78 = (_yy_Quoted($77)|0);
     $79 = ($78|0)!=(0);
     if ($79) {
     } else {
      $80 = $yypos2085;
      $81 = $1;
      $82 = (($81) + 12|0);
      HEAP32[$82>>2] = $80;
      $83 = $yythunkpos2085;
      $84 = $1;
      $85 = (($84) + 44|0);
      HEAP32[$85>>2] = $83;
      $86 = $1;
      $87 = (($86) + 12|0);
      $88 = HEAP32[$87>>2]|0;
      $yypos2089 = $88;
      $89 = $1;
      $90 = (($89) + 44|0);
      $91 = HEAP32[$90>>2]|0;
      $yythunkpos2089 = $91;
      $92 = $1;
      $93 = (_yymatchChar($92,62)|0);
      $94 = ($93|0)!=(0);
      if ($94) {
       label = 38;
       break;
      }
      $95 = $yypos2089;
      $96 = $1;
      $97 = (($96) + 12|0);
      HEAP32[$97>>2] = $95;
      $98 = $yythunkpos2089;
      $99 = $1;
      $100 = (($99) + 44|0);
      HEAP32[$100>>2] = $98;
      $101 = $1;
      $102 = (_yy_Nonspacechar($101)|0);
      $103 = ($102|0)!=(0);
      if (!($103)) {
       label = 38;
       break;
      }
      while(1) {
       $104 = $1;
       $105 = (($104) + 12|0);
       $106 = HEAP32[$105>>2]|0;
       $yypos2088 = $106;
       $107 = $1;
       $108 = (($107) + 44|0);
       $109 = HEAP32[$108>>2]|0;
       $yythunkpos2088 = $109;
       $110 = $1;
       $111 = (($110) + 12|0);
       $112 = HEAP32[$111>>2]|0;
       $yypos2090 = $112;
       $113 = $1;
       $114 = (($113) + 44|0);
       $115 = HEAP32[$114>>2]|0;
       $yythunkpos2090 = $115;
       $116 = $1;
       $117 = (_yymatchChar($116,62)|0);
       $118 = ($117|0)!=(0);
       if ($118) {
        label = 32;
        break;
       }
       $119 = $yypos2090;
       $120 = $1;
       $121 = (($120) + 12|0);
       HEAP32[$121>>2] = $119;
       $122 = $yythunkpos2090;
       $123 = $1;
       $124 = (($123) + 44|0);
       HEAP32[$124>>2] = $122;
       $125 = $1;
       $126 = (_yy_Nonspacechar($125)|0);
       $127 = ($126|0)!=(0);
       if (!($127)) {
        label = 34;
        break;
       }
      }
      if ((label|0) == 32) {
      }
      else if ((label|0) == 34) {
      }
      $128 = $yypos2088;
      $129 = $1;
      $130 = (($129) + 12|0);
      HEAP32[$130>>2] = $128;
      $131 = $yythunkpos2088;
      $132 = $1;
      $133 = (($132) + 44|0);
      HEAP32[$133>>2] = $131;
     }
    } else {
     label = 38;
    }
   } while(0);
   if ((label|0) == 38) {
    $134 = $yypos2083;
    $135 = $1;
    $136 = (($135) + 12|0);
    HEAP32[$136>>2] = $134;
    $137 = $yythunkpos2083;
    $138 = $1;
    $139 = (($138) + 44|0);
    HEAP32[$139>>2] = $137;
   }
   $140 = $1;
   $141 = (_yy_Spnl($140)|0);
   $142 = ($141|0)!=(0);
   if (!($142)) {
    break;
   }
   $0 = 1;
   $149 = $0;
   STACKTOP = sp;return ($149|0);
  }
 } while(0);
 $143 = $yypos0;
 $144 = $1;
 $145 = (($144) + 12|0);
 HEAP32[$145>>2] = $143;
 $146 = $yythunkpos0;
 $147 = $1;
 $148 = (($147) + 44|0);
 HEAP32[$148>>2] = $146;
 $0 = 0;
 $149 = $0;
 STACKTOP = sp;return ($149|0);
}
function _yy_3_MarkdownHtmlTagOpen($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = (_mk_str(42624)|0);
 $6 = $0;
 $7 = (($6) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + -4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_cons($5,$10)|0);
 $12 = $0;
 $13 = (($12) + 52|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + -4|0);
 HEAP32[$15>>2] = $11;
 $16 = $1;
 $17 = (_mk_str($16)|0);
 $18 = $0;
 $19 = (($18) + 52|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + -4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (_cons($17,$22)|0);
 $24 = $0;
 $25 = (($24) + 52|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + -4|0);
 HEAP32[$27>>2] = $23;
 STACKTOP = sp;return;
}
function _yy_4_MarkdownHtmlTagOpen($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = (_mk_str(42624)|0);
 $6 = $0;
 $7 = (($6) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + -4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_cons($5,$10)|0);
 $12 = $0;
 $13 = (($12) + 52|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + -4|0);
 HEAP32[$15>>2] = $11;
 $16 = $1;
 $17 = (_mk_str($16)|0);
 $18 = $0;
 $19 = (($18) + 52|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + -4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (_cons($17,$22)|0);
 $24 = $0;
 $25 = (($24) + 52|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + -4|0);
 HEAP32[$27>>2] = $23;
 STACKTOP = sp;return;
}
function _yy_5_MarkdownHtmlTagOpen($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = (_mk_str(42616)|0);
 $6 = $0;
 $7 = (($6) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + -4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_cons($5,$10)|0);
 $12 = $0;
 $13 = (($12) + 52|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + -4|0);
 HEAP32[$15>>2] = $11;
 STACKTOP = sp;return;
}
function _yy_6_MarkdownHtmlTagOpen($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_mk_str_from_list($9,0)|0);
 $11 = $0;
 $12 = (($11) + 48|0);
 HEAP32[$12>>2] = $10;
 $13 = $0;
 $14 = (($13) + 48|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP16[$15>>1] = 32;
 STACKTOP = sp;return;
}
function _yy_StyleOpen($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos302 = 0, $yypos305 = 0, $yythunkpos0 = 0, $yythunkpos302 = 0, $yythunkpos305 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos302 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos302 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,47624)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos302;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos302;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,47632)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos305 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos305 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos305;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos305;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_StyleClose($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos299 = 0, $yythunkpos0 = 0, $yythunkpos299 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos299 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos299 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,47624)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos299;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos299;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,47632)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_1_TableCaption($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = (($10) + 52|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + -12|0);
 HEAP32[$13>>2] = $9;
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -12|0);
 $18 = HEAP32[$17>>2]|0;
 HEAP16[$18>>1] = 54;
 STACKTOP = sp;return;
}
function _yy_2_TableCaption($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = (($10) + 48|0);
 HEAP32[$11>>2] = $9;
 $12 = $0;
 $13 = (($12) + 48|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP16[$14>>1] = 53;
 $15 = $0;
 $16 = (($15) + 52|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + -12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $21 = $0;
 $22 = (($21) + 52|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + -12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP16[$25>>1]|0;
 $27 = $26 << 16 >> 16;
 $28 = ($27|0)==(54);
 if (!($28)) {
  STACKTOP = sp;return;
 }
 $29 = $0;
 $30 = (($29) + 48|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + 12|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $0;
 $35 = (($34) + 52|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + -12|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + 16|0);
 HEAP32[$39>>2] = $33;
 $40 = $0;
 $41 = (($40) + 52|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) + -12|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $0;
 $46 = (($45) + 48|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47) + 12|0);
 HEAP32[$48>>2] = $44;
 STACKTOP = sp;return;
}
function _yy_TableRow($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos270 = 0, $yypos271 = 0, $yypos272 = 0, $yypos275 = 0;
 var $yythunkpos0 = 0, $yythunkpos270 = 0, $yythunkpos271 = 0, $yythunkpos272 = 0, $yythunkpos275 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 $9 = $1;
 $10 = (_yy_StartList($9)|0);
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $1;
   _yyDo($12,8,-1,0,41336);
   $13 = $1;
   $14 = (($13) + 12|0);
   $15 = HEAP32[$14>>2]|0;
   $yypos270 = $15;
   $16 = $1;
   $17 = (($16) + 44|0);
   $18 = HEAP32[$17>>2]|0;
   $yythunkpos270 = $18;
   $19 = $1;
   $20 = (_yy_SeparatorLine($19)|0);
   $21 = ($20|0)!=(0);
   if ($21) {
    break;
   }
   $22 = $yypos270;
   $23 = $1;
   $24 = (($23) + 12|0);
   HEAP32[$24>>2] = $22;
   $25 = $yythunkpos270;
   $26 = $1;
   $27 = (($26) + 44|0);
   HEAP32[$27>>2] = $25;
   $28 = $1;
   $29 = (($28) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $yypos271 = $30;
   $31 = $1;
   $32 = (($31) + 44|0);
   $33 = HEAP32[$32>>2]|0;
   $yythunkpos271 = $33;
   $34 = $1;
   $35 = (_yy_TableLine($34)|0);
   $36 = ($35|0)!=(0);
   if (!($36)) {
    break;
   }
   $37 = $yypos271;
   $38 = $1;
   $39 = (($38) + 12|0);
   HEAP32[$39>>2] = $37;
   $40 = $yythunkpos271;
   $41 = $1;
   $42 = (($41) + 44|0);
   HEAP32[$42>>2] = $40;
   $43 = $1;
   $44 = (($43) + 12|0);
   $45 = HEAP32[$44>>2]|0;
   $yypos272 = $45;
   $46 = $1;
   $47 = (($46) + 44|0);
   $48 = HEAP32[$47>>2]|0;
   $yythunkpos272 = $48;
   $49 = $1;
   $50 = (_yy_CellDivider($49)|0);
   $51 = ($50|0)!=(0);
   if ($51) {
   } else {
    $52 = $yypos272;
    $53 = $1;
    $54 = (($53) + 12|0);
    HEAP32[$54>>2] = $52;
    $55 = $yythunkpos272;
    $56 = $1;
    $57 = (($56) + 44|0);
    HEAP32[$57>>2] = $55;
   }
   $58 = $1;
   $59 = (_yy_TableCell($58)|0);
   $60 = ($59|0)!=(0);
   if (!($60)) {
    break;
   }
   $61 = $1;
   $62 = $1;
   $63 = (($62) + 28|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $1;
   $66 = (($65) + 32|0);
   $67 = HEAP32[$66>>2]|0;
   _yyDo($61,164,$64,$67,47456);
   while(1) {
    $68 = $1;
    $69 = (($68) + 12|0);
    $70 = HEAP32[$69>>2]|0;
    $yypos275 = $70;
    $71 = $1;
    $72 = (($71) + 44|0);
    $73 = HEAP32[$72>>2]|0;
    $yythunkpos275 = $73;
    $74 = $1;
    $75 = (_yy_TableCell($74)|0);
    $76 = ($75|0)!=(0);
    if (!($76)) {
     break;
    }
    $77 = $1;
    $78 = $1;
    $79 = (($78) + 28|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $1;
    $82 = (($81) + 32|0);
    $83 = HEAP32[$82>>2]|0;
    _yyDo($77,164,$80,$83,47456);
   }
   $84 = $yypos275;
   $85 = $1;
   $86 = (($85) + 12|0);
   HEAP32[$86>>2] = $84;
   $87 = $yythunkpos275;
   $88 = $1;
   $89 = (($88) + 44|0);
   HEAP32[$89>>2] = $87;
   $90 = $1;
   $91 = (_yy_Sp($90)|0);
   $92 = ($91|0)!=(0);
   if (!($92)) {
    break;
   }
   $93 = $1;
   $94 = $1;
   $95 = (($94) + 28|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = $1;
   $98 = (($97) + 32|0);
   $99 = HEAP32[$98>>2]|0;
   (_yyText($93,$96,$99)|0);
   $100 = $1;
   $101 = (($100) + 12|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = $1;
   $104 = (($103) + 28|0);
   HEAP32[$104>>2] = $102;
   $105 = $1;
   $106 = (_yy_Newline($105)|0);
   $107 = ($106|0)!=(0);
   if (!($107)) {
    break;
   }
   $108 = $1;
   $109 = $1;
   $110 = (($109) + 28|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = $1;
   $113 = (($112) + 32|0);
   $114 = HEAP32[$113>>2]|0;
   (_yyText($108,$111,$114)|0);
   $115 = $1;
   $116 = (($115) + 12|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = $1;
   $119 = (($118) + 32|0);
   HEAP32[$119>>2] = $117;
   $120 = $1;
   $121 = $1;
   $122 = (($121) + 28|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = $1;
   $125 = (($124) + 32|0);
   $126 = HEAP32[$125>>2]|0;
   _yyDo($120,165,$123,$126,47472);
   $127 = $1;
   _yyDo($127,12,1,0,41392);
   $0 = 1;
   $134 = $0;
   STACKTOP = sp;return ($134|0);
  } else {
  }
 } while(0);
 $128 = $yypos0;
 $129 = $1;
 $130 = (($129) + 12|0);
 HEAP32[$130>>2] = $128;
 $131 = $yythunkpos0;
 $132 = $1;
 $133 = (($132) + 44|0);
 HEAP32[$133>>2] = $131;
 $0 = 0;
 $134 = $0;
 STACKTOP = sp;return ($134|0);
}
function _yy_1_TableBody($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_2_TableBody($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_mk_pos_list(59,$9,$11,$14)|0);
 $16 = $0;
 $17 = (($16) + 48|0);
 HEAP32[$17>>2] = $15;
 STACKTOP = sp;return;
}
function _yy_TableLine($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos266 = 0, $yypos267 = 0, $yypos268 = 0, $yythunkpos0 = 0, $yythunkpos266 = 0, $yythunkpos267 = 0, $yythunkpos268 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 while(1) {
  $8 = $1;
  $9 = (($8) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $yypos266 = $10;
  $11 = $1;
  $12 = (($11) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $yythunkpos266 = $13;
  $14 = $1;
  $15 = (($14) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $yypos267 = $16;
  $17 = $1;
  $18 = (($17) + 44|0);
  $19 = HEAP32[$18>>2]|0;
  $yythunkpos267 = $19;
  $20 = $1;
  $21 = (_yy_Newline($20)|0);
  $22 = ($21|0)!=(0);
  if ($22) {
   label = 4;
   break;
  }
  $23 = $yypos267;
  $24 = $1;
  $25 = (($24) + 12|0);
  HEAP32[$25>>2] = $23;
  $26 = $yythunkpos267;
  $27 = $1;
  $28 = (($27) + 44|0);
  HEAP32[$28>>2] = $26;
  $29 = $1;
  $30 = (($29) + 12|0);
  $31 = HEAP32[$30>>2]|0;
  $yypos268 = $31;
  $32 = $1;
  $33 = (($32) + 44|0);
  $34 = HEAP32[$33>>2]|0;
  $yythunkpos268 = $34;
  $35 = $1;
  $36 = (_yy_CellDivider($35)|0);
  $37 = ($36|0)!=(0);
  if ($37) {
   label = 7;
   break;
  }
  $38 = $yypos268;
  $39 = $1;
  $40 = (($39) + 12|0);
  HEAP32[$40>>2] = $38;
  $41 = $yythunkpos268;
  $42 = $1;
  $43 = (($42) + 44|0);
  HEAP32[$43>>2] = $41;
  $44 = $1;
  $45 = (_yymatchDot($44)|0);
  $46 = ($45|0)!=(0);
  if (!($46)) {
   label = 9;
   break;
  }
 }
 if ((label|0) == 4) {
 }
 else if ((label|0) == 7) {
 }
 else if ((label|0) == 9) {
 }
 $47 = $yypos266;
 $48 = $1;
 $49 = (($48) + 12|0);
 HEAP32[$49>>2] = $47;
 $50 = $yythunkpos266;
 $51 = $1;
 $52 = (($51) + 44|0);
 HEAP32[$52>>2] = $50;
 $53 = $1;
 $54 = (_yy_CellDivider($53)|0);
 $55 = ($54|0)!=(0);
 if ($55) {
  $0 = 1;
  $62 = $0;
  STACKTOP = sp;return ($62|0);
 }
 $56 = $yypos0;
 $57 = $1;
 $58 = (($57) + 12|0);
 HEAP32[$58>>2] = $56;
 $59 = $yythunkpos0;
 $60 = $1;
 $61 = (($60) + 44|0);
 HEAP32[$61>>2] = $59;
 $0 = 0;
 $62 = $0;
 STACKTOP = sp;return ($62|0);
}
function _yy_CellDivider($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yythunkpos0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,124)|0);
 $10 = ($9|0)!=(0);
 if ($10) {
  $0 = 1;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 $11 = $yypos0;
 $12 = $1;
 $13 = (($12) + 12|0);
 HEAP32[$13>>2] = $11;
 $14 = $yythunkpos0;
 $15 = $1;
 $16 = (($15) + 44|0);
 HEAP32[$16>>2] = $14;
 $0 = 0;
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _yy_HeaderAlignmentCell($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos234 = 0, $yypos237 = 0, $yythunkpos0 = 0, $yythunkpos234 = 0, $yythunkpos237 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_Sp($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = (($11) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $yypos234 = $13;
   $14 = $1;
   $15 = (($14) + 44|0);
   $16 = HEAP32[$15>>2]|0;
   $yythunkpos234 = $16;
   $17 = $1;
   $18 = (_yymatchChar($17,58)|0);
   $19 = ($18|0)!=(0);
   if ($19) {
   } else {
    $20 = $yypos234;
    $21 = $1;
    $22 = (($21) + 12|0);
    HEAP32[$22>>2] = $20;
    $23 = $yythunkpos234;
    $24 = $1;
    $25 = (($24) + 44|0);
    HEAP32[$25>>2] = $23;
   }
   $26 = $1;
   $27 = (_yymatchChar($26,61)|0);
   $28 = ($27|0)!=(0);
   if (!($28)) {
    break;
   }
   while(1) {
    $29 = $1;
    $30 = (($29) + 12|0);
    $31 = HEAP32[$30>>2]|0;
    $yypos237 = $31;
    $32 = $1;
    $33 = (($32) + 44|0);
    $34 = HEAP32[$33>>2]|0;
    $yythunkpos237 = $34;
    $35 = $1;
    $36 = (_yymatchChar($35,61)|0);
    $37 = ($36|0)!=(0);
    if (!($37)) {
     break;
    }
   }
   $38 = $yypos237;
   $39 = $1;
   $40 = (($39) + 12|0);
   HEAP32[$40>>2] = $38;
   $41 = $yythunkpos237;
   $42 = $1;
   $43 = (($42) + 44|0);
   HEAP32[$43>>2] = $41;
   $0 = 1;
   $50 = $0;
   STACKTOP = sp;return ($50|0);
  } else {
  }
 } while(0);
 $44 = $yypos0;
 $45 = $1;
 $46 = (($45) + 12|0);
 HEAP32[$46>>2] = $44;
 $47 = $yythunkpos0;
 $48 = $1;
 $49 = (($48) + 44|0);
 HEAP32[$49>>2] = $47;
 $0 = 0;
 $50 = $0;
 STACKTOP = sp;return ($50|0);
}
function _yy_AlignmentCell($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos224 = 0, $yypos225 = 0, $yypos231 = 0, $yythunkpos0 = 0, $yythunkpos224 = 0, $yythunkpos225 = 0, $yythunkpos231 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_Sp($8)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (($11) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $yypos224 = $13;
   $14 = $1;
   $15 = (($14) + 44|0);
   $16 = HEAP32[$15>>2]|0;
   $yythunkpos224 = $16;
   $17 = $1;
   $18 = (_yy_CellDivider($17)|0);
   $19 = ($18|0)!=(0);
   if ($19) {
    break;
   }
   $20 = $yypos224;
   $21 = $1;
   $22 = (($21) + 12|0);
   HEAP32[$22>>2] = $20;
   $23 = $yythunkpos224;
   $24 = $1;
   $25 = (($24) + 44|0);
   HEAP32[$25>>2] = $23;
   $26 = $1;
   $27 = (($26) + 12|0);
   $28 = HEAP32[$27>>2]|0;
   $yypos225 = $28;
   $29 = $1;
   $30 = (($29) + 44|0);
   $31 = HEAP32[$30>>2]|0;
   $yythunkpos225 = $31;
   $32 = $1;
   $33 = (_yy_LeftAlignWrap($32)|0);
   $34 = ($33|0)!=(0);
   do {
    if ($34) {
    } else {
     $35 = $yypos225;
     $36 = $1;
     $37 = (($36) + 12|0);
     HEAP32[$37>>2] = $35;
     $38 = $yythunkpos225;
     $39 = $1;
     $40 = (($39) + 44|0);
     HEAP32[$40>>2] = $38;
     $41 = $1;
     $42 = (_yy_CenterAlignWrap($41)|0);
     $43 = ($42|0)!=(0);
     if ($43) {
      break;
     }
     $44 = $yypos225;
     $45 = $1;
     $46 = (($45) + 12|0);
     HEAP32[$46>>2] = $44;
     $47 = $yythunkpos225;
     $48 = $1;
     $49 = (($48) + 44|0);
     HEAP32[$49>>2] = $47;
     $50 = $1;
     $51 = (_yy_RightAlignWrap($50)|0);
     $52 = ($51|0)!=(0);
     if ($52) {
      break;
     }
     $53 = $yypos225;
     $54 = $1;
     $55 = (($54) + 12|0);
     HEAP32[$55>>2] = $53;
     $56 = $yythunkpos225;
     $57 = $1;
     $58 = (($57) + 44|0);
     HEAP32[$58>>2] = $56;
     $59 = $1;
     $60 = (_yy_LeftAlign($59)|0);
     $61 = ($60|0)!=(0);
     if ($61) {
      break;
     }
     $62 = $yypos225;
     $63 = $1;
     $64 = (($63) + 12|0);
     HEAP32[$64>>2] = $62;
     $65 = $yythunkpos225;
     $66 = $1;
     $67 = (($66) + 44|0);
     HEAP32[$67>>2] = $65;
     $68 = $1;
     $69 = (_yy_CenterAlign($68)|0);
     $70 = ($69|0)!=(0);
     if ($70) {
      break;
     }
     $71 = $yypos225;
     $72 = $1;
     $73 = (($72) + 12|0);
     HEAP32[$73>>2] = $71;
     $74 = $yythunkpos225;
     $75 = $1;
     $76 = (($75) + 44|0);
     HEAP32[$76>>2] = $74;
     $77 = $1;
     $78 = (_yy_RightAlign($77)|0);
     $79 = ($78|0)!=(0);
     if ($79) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $80 = $1;
   $81 = (_yy_Sp($80)|0);
   $82 = ($81|0)!=(0);
   if (!($82)) {
    break;
   }
   $83 = $1;
   $84 = (($83) + 12|0);
   $85 = HEAP32[$84>>2]|0;
   $yypos231 = $85;
   $86 = $1;
   $87 = (($86) + 44|0);
   $88 = HEAP32[$87>>2]|0;
   $yythunkpos231 = $88;
   $89 = $1;
   $90 = (_yy_CellDivider($89)|0);
   $91 = ($90|0)!=(0);
   if ($91) {
   } else {
    $92 = $yypos231;
    $93 = $1;
    $94 = (($93) + 12|0);
    HEAP32[$94>>2] = $92;
    $95 = $yythunkpos231;
    $96 = $1;
    $97 = (($96) + 44|0);
    HEAP32[$97>>2] = $95;
   }
   $0 = 1;
   $104 = $0;
   STACKTOP = sp;return ($104|0);
  } else {
  }
 } while(0);
 $98 = $yypos0;
 $99 = $1;
 $100 = (($99) + 12|0);
 HEAP32[$100>>2] = $98;
 $101 = $yythunkpos0;
 $102 = $1;
 $103 = (($102) + 44|0);
 HEAP32[$103>>2] = $101;
 $0 = 0;
 $104 = $0;
 STACKTOP = sp;return ($104|0);
}
function _yy_1_SeparatorLine($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $3;
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_mk_pos_str(47240,$6,$9)|0);
 $11 = $0;
 $12 = (($11) + 52|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_cons($10,$15)|0);
 $17 = $0;
 $18 = (($17) + 52|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + -4|0);
 HEAP32[$20>>2] = $16;
 $21 = $0;
 $22 = (($21) + 48|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $0;
 $25 = (($24) + 52|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + -4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (_cons($23,$28)|0);
 $30 = $0;
 $31 = (($30) + 52|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + -4|0);
 HEAP32[$33>>2] = $29;
 STACKTOP = sp;return;
}
function _yy_2_SeparatorLine($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_3_SeparatorLine($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_mk_str_from_list($9,0)|0);
 $11 = $0;
 $12 = (($11) + 48|0);
 HEAP32[$12>>2] = $10;
 $13 = $0;
 $14 = (($13) + 48|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP16[$15>>1] = 55;
 STACKTOP = sp;return;
}
function _yy_AutoLink($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1411 = 0, $yythunkpos0 = 0, $yythunkpos1411 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos1411 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos1411 = $13;
 $14 = $1;
 $15 = (_yy_AutoLinkUrl($14)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
  } else {
   $17 = $yypos1411;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos1411;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yy_AutoLinkEmail($23)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    break;
   }
   $26 = $yypos0;
   $27 = $1;
   $28 = (($27) + 12|0);
   HEAP32[$28>>2] = $26;
   $29 = $yythunkpos0;
   $30 = $1;
   $31 = (($30) + 44|0);
   HEAP32[$31>>2] = $29;
   $0 = 0;
   $32 = $0;
   STACKTOP = sp;return ($32|0);
  }
 } while(0);
 $0 = 1;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _yy_Link($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $yypos0 = 0, $yypos1824 = 0, $yythunkpos0 = 0, $yythunkpos1824 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos1824 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos1824 = $13;
 $14 = $1;
 $15 = (_yy_ExplicitLink($14)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
  } else {
   $17 = $yypos1824;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos1824;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yy_ReferenceLink($23)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    break;
   }
   $26 = $yypos1824;
   $27 = $1;
   $28 = (($27) + 12|0);
   HEAP32[$28>>2] = $26;
   $29 = $yythunkpos1824;
   $30 = $1;
   $31 = (($30) + 44|0);
   HEAP32[$31>>2] = $29;
   $32 = $1;
   $33 = (_yy_AutoLink($32)|0);
   $34 = ($33|0)!=(0);
   if ($34) {
    break;
   }
   $35 = $yypos0;
   $36 = $1;
   $37 = (($36) + 12|0);
   HEAP32[$37>>2] = $35;
   $38 = $yythunkpos0;
   $39 = $1;
   $40 = (($39) + 44|0);
   HEAP32[$40>>2] = $38;
   $0 = 0;
   $41 = $0;
   STACKTOP = sp;return ($41|0);
  }
 } while(0);
 $0 = 1;
 $41 = $0;
 STACKTOP = sp;return ($41|0);
}
function _yy_1_Image($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP16[$7>>1] = 28;
 STACKTOP = sp;return;
}
function _yy_HtmlBlockOpenAddress($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos1051 = 0, $yypos1054 = 0, $yythunkpos0 = 0, $yythunkpos1051 = 0, $yythunkpos1054 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos1051 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos1051 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,41512)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos1051;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos1051;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,41824)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos1054 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos1054 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos1054;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos1054;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseAddress($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1048 = 0, $yythunkpos0 = 0, $yythunkpos1048 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos1048 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos1048 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,41512)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos1048;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos1048;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,41824)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenArticle($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos1037 = 0, $yypos1040 = 0, $yythunkpos0 = 0, $yythunkpos1037 = 0, $yythunkpos1040 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos1037 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos1037 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,42408)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos1037;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos1037;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,42416)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos1040 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos1040 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos1040;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos1040;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseArticle($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1034 = 0, $yythunkpos0 = 0, $yythunkpos1034 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos1034 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos1034 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,42408)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos1034;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos1034;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,42416)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenAside($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos1023 = 0, $yypos1026 = 0, $yythunkpos0 = 0, $yythunkpos1023 = 0, $yythunkpos1026 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos1023 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos1023 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,42392)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos1023;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos1023;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,42400)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos1026 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos1026 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos1026;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos1026;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseAside($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1020 = 0, $yythunkpos0 = 0, $yythunkpos1020 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos1020 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos1020 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,42392)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos1020;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos1020;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,42400)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenCanvas($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos995 = 0, $yypos998 = 0, $yythunkpos0 = 0, $yythunkpos995 = 0, $yythunkpos998 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos995 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos995 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,42376)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos995;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos995;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,42384)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos998 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos998 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos998;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos998;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseCanvas($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos992 = 0, $yythunkpos0 = 0, $yythunkpos992 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos992 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos992 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,42376)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos992;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos992;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,42384)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenBlockquote($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos1009 = 0, $yypos1012 = 0, $yythunkpos0 = 0, $yythunkpos1009 = 0, $yythunkpos1012 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos1009 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos1009 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,41520)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos1009;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos1009;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,41832)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos1012 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos1012 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos1012;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos1012;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseBlockquote($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1006 = 0, $yythunkpos0 = 0, $yythunkpos1006 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos1006 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos1006 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,41520)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos1006;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos1006;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,41832)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenCenter($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos981 = 0, $yypos984 = 0, $yythunkpos0 = 0, $yythunkpos981 = 0, $yythunkpos984 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos981 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos981 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,41536)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos981;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos981;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,41848)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos984 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos984 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos984;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos984;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseCenter($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos978 = 0, $yythunkpos0 = 0, $yythunkpos978 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos978 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos978 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,41536)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos978;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos978;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,41848)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenDir($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos967 = 0, $yypos970 = 0, $yythunkpos0 = 0, $yythunkpos967 = 0, $yythunkpos970 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos967 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos967 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,41544)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos967;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos967;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,41856)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos970 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos970 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos970;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos970;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseDir($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos964 = 0, $yythunkpos0 = 0, $yythunkpos964 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos964 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos964 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,41544)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos964;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos964;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,41856)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenDiv($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos953 = 0, $yypos956 = 0, $yythunkpos0 = 0, $yythunkpos953 = 0, $yythunkpos956 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos953 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos953 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,41552)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos953;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos953;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,41864)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos956 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos956 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos956;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos956;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseDiv($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos950 = 0, $yythunkpos0 = 0, $yythunkpos950 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos950 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos950 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,41552)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos950;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos950;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,41864)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenDl($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos939 = 0, $yypos942 = 0, $yythunkpos0 = 0, $yythunkpos939 = 0, $yythunkpos942 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos939 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos939 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,41560)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos939;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos939;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,41872)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos942 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos942 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos942;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos942;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseDl($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos936 = 0, $yythunkpos0 = 0, $yythunkpos936 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos936 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos936 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,41560)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos936;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos936;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,41872)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenFieldset($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos925 = 0, $yypos928 = 0, $yythunkpos0 = 0, $yythunkpos925 = 0, $yythunkpos928 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos925 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos925 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,41568)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos925;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos925;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,41880)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos928 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos928 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos928;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos928;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseFieldset($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos922 = 0, $yythunkpos0 = 0, $yythunkpos922 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos922 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos922 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,41568)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos922;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos922;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,41880)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenFigure($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos911 = 0, $yypos914 = 0, $yythunkpos0 = 0, $yythunkpos911 = 0, $yythunkpos914 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos911 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos911 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,42360)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos911;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos911;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,42368)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos914 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos914 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos914;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos914;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseFigure($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos908 = 0, $yythunkpos0 = 0, $yythunkpos908 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos908 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos908 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,42360)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos908;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos908;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,42368)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenFooter($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos897 = 0, $yypos900 = 0, $yythunkpos0 = 0, $yythunkpos897 = 0, $yythunkpos900 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos897 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos897 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,42344)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos897;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos897;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,42352)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos900 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos900 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos900;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos900;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseFooter($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos894 = 0, $yythunkpos0 = 0, $yythunkpos894 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos894 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos894 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,42344)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos894;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos894;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,42352)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenForm($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos883 = 0, $yypos886 = 0, $yythunkpos0 = 0, $yythunkpos883 = 0, $yythunkpos886 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos883 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos883 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,41584)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos883;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos883;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,41896)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos886 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos886 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos886;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos886;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseForm($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos880 = 0, $yythunkpos0 = 0, $yythunkpos880 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos880 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos880 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,41584)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos880;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos880;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,41896)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenHeader($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos869 = 0, $yypos872 = 0, $yythunkpos0 = 0, $yythunkpos869 = 0, $yythunkpos872 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos869 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos869 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,42328)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos869;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos869;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,42336)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos872 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos872 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos872;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos872;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseHeader($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos866 = 0, $yythunkpos0 = 0, $yythunkpos866 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos866 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos866 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,42328)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos866;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos866;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,42336)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenHgroup($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos855 = 0, $yypos858 = 0, $yythunkpos0 = 0, $yythunkpos855 = 0, $yythunkpos858 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos855 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos855 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,42312)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos855;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos855;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,42320)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos858 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos858 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos858;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos858;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseHgroup($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos852 = 0, $yythunkpos0 = 0, $yythunkpos852 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos852 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos852 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,42312)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos852;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos852;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,42320)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenH1($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos841 = 0, $yypos844 = 0, $yythunkpos0 = 0, $yythunkpos841 = 0, $yythunkpos844 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos841 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos841 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,41592)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos841;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos841;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,41904)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos844 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos844 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos844;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos844;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseH1($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos838 = 0, $yythunkpos0 = 0, $yythunkpos838 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos838 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos838 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,41592)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos838;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos838;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,41904)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenH2($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos827 = 0, $yypos830 = 0, $yythunkpos0 = 0, $yythunkpos827 = 0, $yythunkpos830 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos827 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos827 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,41600)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos827;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos827;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,41912)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos830 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos830 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos830;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos830;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseH2($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos824 = 0, $yythunkpos0 = 0, $yythunkpos824 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos824 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos824 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,41600)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos824;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos824;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,41912)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenH3($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos813 = 0, $yypos816 = 0, $yythunkpos0 = 0, $yythunkpos813 = 0, $yythunkpos816 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos813 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos813 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,41608)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos813;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos813;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,41920)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos816 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos816 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos816;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos816;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseH3($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos810 = 0, $yythunkpos0 = 0, $yythunkpos810 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos810 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos810 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,41608)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos810;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos810;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,41920)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenH4($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos799 = 0, $yypos802 = 0, $yythunkpos0 = 0, $yythunkpos799 = 0, $yythunkpos802 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos799 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos799 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,41616)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos799;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos799;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,41928)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos802 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos802 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos802;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos802;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseH4($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos796 = 0, $yythunkpos0 = 0, $yythunkpos796 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos796 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos796 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,41616)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos796;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos796;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,41928)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenH5($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos785 = 0, $yypos788 = 0, $yythunkpos0 = 0, $yythunkpos785 = 0, $yythunkpos788 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos785 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos785 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,41624)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos785;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos785;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,41936)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos788 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos788 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos788;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos788;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseH5($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos782 = 0, $yythunkpos0 = 0, $yythunkpos782 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos782 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos782 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,41624)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos782;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos782;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,41936)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenH6($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos771 = 0, $yypos774 = 0, $yythunkpos0 = 0, $yythunkpos771 = 0, $yythunkpos774 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos771 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos771 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,41632)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos771;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos771;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,41944)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos774 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos774 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos774;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos774;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseH6($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos768 = 0, $yythunkpos0 = 0, $yythunkpos768 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos768 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos768 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,41632)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos768;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos768;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,41944)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenMenu($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos757 = 0, $yypos760 = 0, $yythunkpos0 = 0, $yythunkpos757 = 0, $yythunkpos760 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos757 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos757 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,41656)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos757;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos757;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,41968)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos760 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos760 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos760;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos760;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseMenu($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos754 = 0, $yythunkpos0 = 0, $yythunkpos754 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos754 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos754 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,41656)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos754;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos754;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,41968)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenNoframes($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos743 = 0, $yypos746 = 0, $yythunkpos0 = 0, $yythunkpos743 = 0, $yythunkpos746 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos743 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos743 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,41664)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos743;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos743;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,41976)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos746 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos746 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos746;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos746;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseNoframes($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos740 = 0, $yythunkpos0 = 0, $yythunkpos740 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos740 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos740 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,41664)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos740;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos740;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,41976)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenNoscript($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos729 = 0, $yypos732 = 0, $yythunkpos0 = 0, $yythunkpos729 = 0, $yythunkpos732 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos729 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos729 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,41680)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos729;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos729;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,41992)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos732 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos732 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos732;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos732;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseNoscript($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos726 = 0, $yythunkpos0 = 0, $yythunkpos726 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos726 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos726 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,41680)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos726;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos726;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,41992)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenOl($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos715 = 0, $yypos718 = 0, $yythunkpos0 = 0, $yythunkpos715 = 0, $yythunkpos718 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos715 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos715 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,41696)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos715;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos715;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,42008)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos718 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos718 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos718;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos718;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseOl($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos712 = 0, $yythunkpos0 = 0, $yythunkpos712 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos712 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos712 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,41696)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos712;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos712;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,42008)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenP($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos701 = 0, $yypos704 = 0, $yythunkpos0 = 0, $yythunkpos701 = 0, $yythunkpos704 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos701 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos701 = $19;
   $20 = $1;
   $21 = (_yymatchChar($20,112)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos701;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos701;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchChar($29,80)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos704 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos704 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos704;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos704;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseP($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos698 = 0, $yythunkpos0 = 0, $yythunkpos698 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos698 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos698 = $22;
   $23 = $1;
   $24 = (_yymatchChar($23,112)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos698;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos698;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchChar($32,80)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenPre($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos687 = 0, $yypos690 = 0, $yythunkpos0 = 0, $yythunkpos687 = 0, $yythunkpos690 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos687 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos687 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,41704)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos687;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos687;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,42016)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos690 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos690 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos690;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos690;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockClosePre($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos684 = 0, $yythunkpos0 = 0, $yythunkpos684 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos684 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos684 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,41704)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos684;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos684;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,42016)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenProgress($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos673 = 0, $yypos676 = 0, $yythunkpos0 = 0, $yythunkpos673 = 0, $yythunkpos676 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos673 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos673 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,42280)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos673;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos673;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,42296)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos676 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos676 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos676;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos676;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseProgress($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos670 = 0, $yythunkpos0 = 0, $yythunkpos670 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos670 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos670 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,42280)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos670;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos670;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,42296)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenSection($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos659 = 0, $yypos662 = 0, $yythunkpos0 = 0, $yythunkpos659 = 0, $yythunkpos662 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos659 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos659 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,42264)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos659;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos659;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,42272)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos662 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos662 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos662;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos662;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseSection($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos656 = 0, $yythunkpos0 = 0, $yythunkpos656 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos656 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos656 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,42264)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos656;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos656;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,42272)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenTable($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos645 = 0, $yypos648 = 0, $yythunkpos0 = 0, $yythunkpos645 = 0, $yythunkpos648 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos645 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos645 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,41712)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos645;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos645;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,42024)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos648 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos648 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos648;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos648;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseTable($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos642 = 0, $yythunkpos0 = 0, $yythunkpos642 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos642 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos642 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,41712)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos642;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos642;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,42024)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenUl($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos631 = 0, $yypos634 = 0, $yythunkpos0 = 0, $yythunkpos631 = 0, $yythunkpos634 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos631 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos631 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,41720)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos631;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos631;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,42032)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos634 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos634 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos634;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos634;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseUl($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos628 = 0, $yythunkpos0 = 0, $yythunkpos628 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos628 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos628 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,41720)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos628;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos628;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,42032)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenVideo($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos617 = 0, $yypos620 = 0, $yythunkpos0 = 0, $yythunkpos617 = 0, $yythunkpos620 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos617 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos617 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,42248)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos617;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos617;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,42256)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos620 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos620 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos620;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos620;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseVideo($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos614 = 0, $yythunkpos0 = 0, $yythunkpos614 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos614 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos614 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,42248)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos614;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos614;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,42256)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenDd($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos603 = 0, $yypos606 = 0, $yythunkpos0 = 0, $yythunkpos603 = 0, $yythunkpos606 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos603 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos603 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,41728)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos603;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos603;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,42040)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos606 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos606 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos606;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos606;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseDd($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos600 = 0, $yythunkpos0 = 0, $yythunkpos600 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos600 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos600 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,41728)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos600;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos600;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,42040)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenDt($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos589 = 0, $yypos592 = 0, $yythunkpos0 = 0, $yythunkpos589 = 0, $yythunkpos592 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos589 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos589 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,41736)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos589;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos589;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,42048)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos592 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos592 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos592;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos592;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseDt($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos586 = 0, $yythunkpos0 = 0, $yythunkpos586 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos586 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos586 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,41736)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos586;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos586;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,42048)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenFrameset($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos575 = 0, $yypos578 = 0, $yythunkpos0 = 0, $yythunkpos575 = 0, $yythunkpos578 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos575 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos575 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,41744)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos575;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos575;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,42056)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos578 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos578 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos578;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos578;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseFrameset($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos572 = 0, $yythunkpos0 = 0, $yythunkpos572 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos572 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos572 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,41744)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos572;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos572;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,42056)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenLi($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos561 = 0, $yypos564 = 0, $yythunkpos0 = 0, $yythunkpos561 = 0, $yythunkpos564 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos561 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos561 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,41760)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos561;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos561;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,42072)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos564 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos564 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos564;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos564;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseLi($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos558 = 0, $yythunkpos0 = 0, $yythunkpos558 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos558 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos558 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,41760)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos558;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos558;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,42072)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenTbody($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos547 = 0, $yypos550 = 0, $yythunkpos0 = 0, $yythunkpos547 = 0, $yythunkpos550 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos547 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos547 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,41768)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos547;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos547;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,42080)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos550 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos550 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos550;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos550;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseTbody($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos544 = 0, $yythunkpos0 = 0, $yythunkpos544 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos544 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos544 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,41768)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos544;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos544;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,42080)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenTd($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos533 = 0, $yypos536 = 0, $yythunkpos0 = 0, $yythunkpos533 = 0, $yythunkpos536 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos533 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos533 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,41776)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos533;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos533;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,42088)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos536 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos536 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos536;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos536;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseTd($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos530 = 0, $yythunkpos0 = 0, $yythunkpos530 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos530 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos530 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,41776)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos530;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos530;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,42088)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenTfoot($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos519 = 0, $yypos522 = 0, $yythunkpos0 = 0, $yythunkpos519 = 0, $yythunkpos522 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos519 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos519 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,41784)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos519;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos519;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,42096)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos522 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos522 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos522;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos522;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseTfoot($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos516 = 0, $yythunkpos0 = 0, $yythunkpos516 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos516 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos516 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,41784)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos516;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos516;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,42096)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenTh($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos505 = 0, $yypos508 = 0, $yythunkpos0 = 0, $yythunkpos505 = 0, $yythunkpos508 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos505 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos505 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,41792)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos505;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos505;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,42104)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos508 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos508 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos508;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos508;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseTh($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos502 = 0, $yythunkpos0 = 0, $yythunkpos502 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos502 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos502 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,41792)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos502;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos502;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,42104)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenThead($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos491 = 0, $yypos494 = 0, $yythunkpos0 = 0, $yythunkpos491 = 0, $yythunkpos494 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos491 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos491 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,41800)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos491;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos491;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,42112)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos494 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos494 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos494;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos494;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseThead($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos488 = 0, $yythunkpos0 = 0, $yythunkpos488 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos488 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos488 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,41800)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos488;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos488;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,42112)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenTr($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos477 = 0, $yypos480 = 0, $yythunkpos0 = 0, $yythunkpos477 = 0, $yythunkpos480 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos477 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos477 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,41808)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos477;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos477;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,42120)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos480 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos480 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos480;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos480;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseTr($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos474 = 0, $yythunkpos0 = 0, $yythunkpos474 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos474 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos474 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,41808)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos474;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos474;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,42120)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenScript($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos463 = 0, $yypos466 = 0, $yythunkpos0 = 0, $yythunkpos463 = 0, $yythunkpos466 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos463 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos463 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,41816)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos463;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos463;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,42128)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos466 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos466 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos466;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos466;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseScript($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos460 = 0, $yythunkpos0 = 0, $yythunkpos460 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos460 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos460 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,41816)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos460;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos460;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,42128)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenHead($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos455 = 0, $yypos458 = 0, $yythunkpos0 = 0, $yythunkpos455 = 0, $yythunkpos458 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos455 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos455 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,42232)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos455;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos455;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,42240)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos458 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos458 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos458;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos458;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseHead($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos452 = 0, $yythunkpos0 = 0, $yythunkpos452 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos452 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos452 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,42232)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos452;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos452;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,42240)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenMain($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos443 = 0, $yypos446 = 0, $yythunkpos0 = 0, $yythunkpos443 = 0, $yythunkpos446 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos443 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos443 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,42216)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos443;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos443;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,42224)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos446 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos446 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos446;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos446;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseMain($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos440 = 0, $yythunkpos0 = 0, $yythunkpos440 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos440 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos440 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,42216)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos440;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos440;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,42224)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenNav($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos431 = 0, $yypos434 = 0, $yythunkpos0 = 0, $yythunkpos431 = 0, $yythunkpos434 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos431 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos431 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,42200)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos431;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos431;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,42208)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos434 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos434 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos434;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos434;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseNav($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos428 = 0, $yythunkpos0 = 0, $yythunkpos428 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos428 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos428 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,42200)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos428;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos428;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,42208)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenDel($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos419 = 0, $yypos422 = 0, $yythunkpos0 = 0, $yythunkpos419 = 0, $yythunkpos422 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos419 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos419 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,42184)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos419;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos419;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,42192)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos422 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos422 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos422;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos422;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseDel($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos416 = 0, $yythunkpos0 = 0, $yythunkpos416 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos416 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos416 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,42184)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos416;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos416;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,42192)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenIns($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos407 = 0, $yypos410 = 0, $yythunkpos0 = 0, $yythunkpos407 = 0, $yythunkpos410 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos407 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos407 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,42168)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos407;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos407;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,42176)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos410 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos410 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos410;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos410;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseIns($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos404 = 0, $yythunkpos0 = 0, $yythunkpos404 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos404 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos404 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,42168)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos404;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos404;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,42176)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_HtmlBlockOpenMark($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos395 = 0, $yypos398 = 0, $yythunkpos0 = 0, $yythunkpos395 = 0, $yythunkpos398 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos395 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos395 = $19;
   $20 = $1;
   $21 = (_yymatchString($20,42152)|0);
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
    } else {
     $23 = $yypos395;
     $24 = $1;
     $25 = (($24) + 12|0);
     HEAP32[$25>>2] = $23;
     $26 = $yythunkpos395;
     $27 = $1;
     $28 = (($27) + 44|0);
     HEAP32[$28>>2] = $26;
     $29 = $1;
     $30 = (_yymatchString($29,42160)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $32 = $1;
   $33 = (_yy_Spnl($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    break;
   }
   while(1) {
    $35 = $1;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $yypos398 = $37;
    $38 = $1;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $yythunkpos398 = $40;
    $41 = $1;
    $42 = (_yy_HtmlAttribute($41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $44 = $yypos398;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos398;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,62)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
  }
 } while(0);
 $53 = $yypos0;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $yythunkpos0;
 $57 = $1;
 $58 = (($57) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _yy_HtmlBlockCloseMark($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos392 = 0, $yythunkpos0 = 0, $yythunkpos392 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yymatchChar($14,47)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos392 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos392 = $22;
   $23 = $1;
   $24 = (_yymatchString($23,42152)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
    } else {
     $26 = $yypos392;
     $27 = $1;
     $28 = (($27) + 12|0);
     HEAP32[$28>>2] = $26;
     $29 = $yythunkpos392;
     $30 = $1;
     $31 = (($30) + 44|0);
     HEAP32[$31>>2] = $29;
     $32 = $1;
     $33 = (_yymatchString($32,42160)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $35 = $1;
   $36 = (_yy_Spnl($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = (_yymatchChar($38,62)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $0 = 1;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
  }
 } while(0);
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_1_Inlines($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -8|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_2_Inlines($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = (($10) + 52|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + -8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_cons($9,$14)|0);
 $16 = $0;
 $17 = (($16) + 52|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + -8|0);
 HEAP32[$19>>2] = $15;
 STACKTOP = sp;return;
}
function _yy_voidEndline($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $yypos0 = 0, $yypos1884 = 0, $yypos1886 = 0, $yythunkpos0 = 0, $yythunkpos1884 = 0, $yythunkpos1886 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos1884 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos1884 = $13;
 $14 = $1;
 $15 = (($14) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $yypos1886 = $16;
 $17 = $1;
 $18 = (($17) + 44|0);
 $19 = HEAP32[$18>>2]|0;
 $yythunkpos1886 = $19;
 $20 = $1;
 $21 = (_yymatchString($20,41424)|0);
 $22 = ($21|0)!=(0);
 do {
  if ($22) {
   label = 12;
  } else {
   $23 = $yypos1886;
   $24 = $1;
   $25 = (($24) + 12|0);
   HEAP32[$25>>2] = $23;
   $26 = $yythunkpos1886;
   $27 = $1;
   $28 = (($27) + 44|0);
   HEAP32[$28>>2] = $26;
   $29 = $1;
   $30 = $1;
   $31 = (($30) + 28|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $1;
   $34 = (($33) + 32|0);
   $35 = HEAP32[$34>>2]|0;
   (_yyText($29,$32,$35)|0);
   $36 = $1;
   $37 = (($36) + 64|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) + 12|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (_extension(1,$40)|0);
   if (!($41)) {
    $42 = $1;
    $43 = (($42) + 64|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (($44) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (_extension(131072,$46)|0);
    if ($47) {
     $48 = $1;
     $49 = (_yy_Sp($48)|0);
     $50 = ($49|0)!=(0);
     if (!($50)) {
      label = 15;
      break;
     }
     $51 = $1;
     $52 = (_yymatchChar($51,92)|0);
     $53 = ($52|0)!=(0);
     if ($53) {
      label = 12;
      break;
     } else {
      label = 15;
      break;
     }
    }
   }
   label = 15;
  }
 } while(0);
 do {
  if ((label|0) == 12) {
   $54 = $1;
   $55 = (_yy_voidNormalEndline($54)|0);
   $56 = ($55|0)!=(0);
   if ($56) {
    break;
   } else {
    label = 15;
    break;
   }
  }
 } while(0);
 L20: do {
  if ((label|0) == 15) {
   $57 = $yypos1884;
   $58 = $1;
   $59 = (($58) + 12|0);
   HEAP32[$59>>2] = $57;
   $60 = $yythunkpos1884;
   $61 = $1;
   $62 = (($61) + 44|0);
   HEAP32[$62>>2] = $60;
   $63 = $1;
   $64 = (_yy_Sp($63)|0);
   $65 = ($64|0)!=(0);
   do {
    if ($65) {
     $66 = $1;
     $67 = (_yy_Newline($66)|0);
     $68 = ($67|0)!=(0);
     if (!($68)) {
      break;
     }
     $69 = $1;
     $70 = (_yy_Eof($69)|0);
     $71 = ($70|0)!=(0);
     if ($71) {
      break L20;
     } else {
      break;
     }
    } else {
    }
   } while(0);
   $72 = $yypos1884;
   $73 = $1;
   $74 = (($73) + 12|0);
   HEAP32[$74>>2] = $72;
   $75 = $yythunkpos1884;
   $76 = $1;
   $77 = (($76) + 44|0);
   HEAP32[$77>>2] = $75;
   $78 = $1;
   $79 = (_yy_voidNormalEndline($78)|0);
   $80 = ($79|0)!=(0);
   if ($80) {
    break;
   }
   $81 = $yypos0;
   $82 = $1;
   $83 = (($82) + 12|0);
   HEAP32[$83>>2] = $81;
   $84 = $yythunkpos0;
   $85 = $1;
   $86 = (($85) + 44|0);
   HEAP32[$86>>2] = $84;
   $0 = 0;
   $87 = $0;
   STACKTOP = sp;return ($87|0);
  }
 } while(0);
 $0 = 1;
 $87 = $0;
 STACKTOP = sp;return ($87|0);
}
function _yy_3_Inlines($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_mk_pos_list(1,$9,$11,$14)|0);
 $16 = $0;
 $17 = (($16) + 48|0);
 HEAP32[$17>>2] = $15;
 STACKTOP = sp;return;
}
function _yy_1_CriticAddition($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 $14 = $0;
 $15 = (($14) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP16[$16>>1] = 74;
 STACKTOP = sp;return;
}
function _yy_1_CriticDeletion($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 $14 = $0;
 $15 = (($14) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP16[$16>>1] = 75;
 STACKTOP = sp;return;
}
function _yy_CriticSubstDel($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos39 = 0, $yypos40 = 0, $yythunkpos0 = 0, $yythunkpos39 = 0, $yythunkpos40 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = $1;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($12) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 (_yyText($8,$11,$14)|0);
 $15 = $1;
 $16 = (($15) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = (($18) + 28|0);
 HEAP32[$19>>2] = $17;
 while(1) {
  $20 = $1;
  $21 = (($20) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $yypos39 = $22;
  $23 = $1;
  $24 = (($23) + 44|0);
  $25 = HEAP32[$24>>2]|0;
  $yythunkpos39 = $25;
  $26 = $1;
  $27 = (($26) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $yypos40 = $28;
  $29 = $1;
  $30 = (($29) + 44|0);
  $31 = HEAP32[$30>>2]|0;
  $yythunkpos40 = $31;
  $32 = $1;
  $33 = (_yymatchString($32,45880)|0);
  $34 = ($33|0)!=(0);
  if ($34) {
   label = 5;
   break;
  }
  $35 = $yypos40;
  $36 = $1;
  $37 = (($36) + 12|0);
  HEAP32[$37>>2] = $35;
  $38 = $yythunkpos40;
  $39 = $1;
  $40 = (($39) + 44|0);
  HEAP32[$40>>2] = $38;
  $41 = $1;
  $42 = (_yymatchDot($41)|0);
  $43 = ($42|0)!=(0);
  if (!($43)) {
   label = 7;
   break;
  }
 }
 if ((label|0) == 5) {
 }
 else if ((label|0) == 7) {
 }
 $44 = $yypos39;
 $45 = $1;
 $46 = (($45) + 12|0);
 HEAP32[$46>>2] = $44;
 $47 = $yythunkpos39;
 $48 = $1;
 $49 = (($48) + 44|0);
 HEAP32[$49>>2] = $47;
 $50 = $1;
 $51 = $1;
 $52 = (($51) + 28|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $1;
 $55 = (($54) + 32|0);
 $56 = HEAP32[$55>>2]|0;
 (_yyText($50,$53,$56)|0);
 $57 = $1;
 $58 = (($57) + 12|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $1;
 $61 = (($60) + 32|0);
 HEAP32[$61>>2] = $59;
 $62 = $1;
 $63 = $1;
 $64 = (($63) + 28|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $1;
 $67 = (($66) + 32|0);
 $68 = HEAP32[$67>>2]|0;
 _yyDo($62,166,$65,$68,45968);
 $0 = 1;
 $69 = $0;
 STACKTOP = sp;return ($69|0);
}
function _yy_1_CriticSubstitution($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_CriticSubstAdd($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos35 = 0, $yypos36 = 0, $yythunkpos0 = 0, $yythunkpos35 = 0, $yythunkpos36 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = $1;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($12) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 (_yyText($8,$11,$14)|0);
 $15 = $1;
 $16 = (($15) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = (($18) + 28|0);
 HEAP32[$19>>2] = $17;
 while(1) {
  $20 = $1;
  $21 = (($20) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $yypos35 = $22;
  $23 = $1;
  $24 = (($23) + 44|0);
  $25 = HEAP32[$24>>2]|0;
  $yythunkpos35 = $25;
  $26 = $1;
  $27 = (($26) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $yypos36 = $28;
  $29 = $1;
  $30 = (($29) + 44|0);
  $31 = HEAP32[$30>>2]|0;
  $yythunkpos36 = $31;
  $32 = $1;
  $33 = (_yymatchString($32,45912)|0);
  $34 = ($33|0)!=(0);
  if ($34) {
   label = 5;
   break;
  }
  $35 = $yypos36;
  $36 = $1;
  $37 = (($36) + 12|0);
  HEAP32[$37>>2] = $35;
  $38 = $yythunkpos36;
  $39 = $1;
  $40 = (($39) + 44|0);
  HEAP32[$40>>2] = $38;
  $41 = $1;
  $42 = (_yymatchDot($41)|0);
  $43 = ($42|0)!=(0);
  if (!($43)) {
   label = 7;
   break;
  }
 }
 if ((label|0) == 5) {
 }
 else if ((label|0) == 7) {
 }
 $44 = $yypos35;
 $45 = $1;
 $46 = (($45) + 12|0);
 HEAP32[$46>>2] = $44;
 $47 = $yythunkpos35;
 $48 = $1;
 $49 = (($48) + 44|0);
 HEAP32[$49>>2] = $47;
 $50 = $1;
 $51 = $1;
 $52 = (($51) + 28|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $1;
 $55 = (($54) + 32|0);
 $56 = HEAP32[$55>>2]|0;
 (_yyText($50,$53,$56)|0);
 $57 = $1;
 $58 = (($57) + 12|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $1;
 $61 = (($60) + 32|0);
 HEAP32[$61>>2] = $59;
 $62 = $1;
 $63 = $1;
 $64 = (($63) + 28|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $1;
 $67 = (($66) + 32|0);
 $68 = HEAP32[$67>>2]|0;
 _yyDo($62,167,$65,$68,45944);
 $0 = 1;
 $69 = $0;
 STACKTOP = sp;return ($69|0);
}
function _yy_2_CriticSubstitution($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_3_CriticSubstitution($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_mk_pos_list(76,$9,$11,$14)|0);
 $16 = $0;
 $17 = (($16) + 48|0);
 HEAP32[$17>>2] = $15;
 STACKTOP = sp;return;
}
function _yy_1_CriticHighlight($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 $14 = $0;
 $15 = (($14) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP16[$16>>1] = 77;
 STACKTOP = sp;return;
}
function _yy_1_CriticComment($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 $14 = $0;
 $15 = (($14) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP16[$16>>1] = 78;
 STACKTOP = sp;return;
}
function _yy_OPMLAtxHeading($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos104 = 0, $yypos106 = 0, $yypos107 = 0, $yypos108 = 0;
 var $yypos110 = 0, $yypos111 = 0, $yypos114 = 0, $yythunkpos0 = 0, $yythunkpos104 = 0, $yythunkpos106 = 0, $yythunkpos107 = 0, $yythunkpos108 = 0, $yythunkpos110 = 0, $yythunkpos111 = 0, $yythunkpos114 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 $9 = $1;
 $10 = (($9) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $yypos104 = $11;
 $12 = $1;
 $13 = (($12) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $yythunkpos104 = $14;
 $15 = $1;
 $16 = (_yy_Heading($15)|0);
 $17 = ($16|0)!=(0);
 do {
  if ($17) {
   $18 = $yypos104;
   $19 = $1;
   $20 = (($19) + 12|0);
   HEAP32[$20>>2] = $18;
   $21 = $yythunkpos104;
   $22 = $1;
   $23 = (($22) + 44|0);
   HEAP32[$23>>2] = $21;
   $24 = $1;
   $25 = (_yy_AtxStart($24)|0);
   $26 = ($25|0)!=(0);
   if (!($26)) {
    break;
   }
   $27 = $1;
   _yyDo($27,8,-1,0,41336);
   $28 = $1;
   $29 = (_yy_Sp($28)|0);
   $30 = ($29|0)!=(0);
   if (!($30)) {
    break;
   }
   $31 = $1;
   $32 = $1;
   $33 = (($32) + 28|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $1;
   $36 = (($35) + 32|0);
   $37 = HEAP32[$36>>2]|0;
   (_yyText($31,$34,$37)|0);
   $38 = $1;
   $39 = (($38) + 12|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $1;
   $42 = (($41) + 28|0);
   HEAP32[$42>>2] = $40;
   L10: while(1) {
    $43 = $1;
    $44 = (($43) + 12|0);
    $45 = HEAP32[$44>>2]|0;
    $yypos106 = $45;
    $46 = $1;
    $47 = (($46) + 44|0);
    $48 = HEAP32[$47>>2]|0;
    $yythunkpos106 = $48;
    $49 = $1;
    $50 = (($49) + 12|0);
    $51 = HEAP32[$50>>2]|0;
    $yypos107 = $51;
    $52 = $1;
    $53 = (($52) + 44|0);
    $54 = HEAP32[$53>>2]|0;
    $yythunkpos107 = $54;
    $55 = $1;
    $56 = (_yy_Newline($55)|0);
    $57 = ($56|0)!=(0);
    if ($57) {
     label = 11;
     break;
    }
    $58 = $yypos107;
    $59 = $1;
    $60 = (($59) + 12|0);
    HEAP32[$60>>2] = $58;
    $61 = $yythunkpos107;
    $62 = $1;
    $63 = (($62) + 44|0);
    HEAP32[$63>>2] = $61;
    $64 = $1;
    $65 = (($64) + 12|0);
    $66 = HEAP32[$65>>2]|0;
    $yypos108 = $66;
    $67 = $1;
    $68 = (($67) + 44|0);
    $69 = HEAP32[$68>>2]|0;
    $yythunkpos108 = $69;
    $70 = $1;
    $71 = (_yy_Sp($70)|0);
    $72 = ($71|0)!=(0);
    do {
     if ($72) {
      while(1) {
       $73 = $1;
       $74 = (($73) + 12|0);
       $75 = HEAP32[$74>>2]|0;
       $yypos110 = $75;
       $76 = $1;
       $77 = (($76) + 44|0);
       $78 = HEAP32[$77>>2]|0;
       $yythunkpos110 = $78;
       $79 = $1;
       $80 = (_yymatchChar($79,35)|0);
       $81 = ($80|0)!=(0);
       if (!($81)) {
        break;
       }
      }
      $82 = $yypos110;
      $83 = $1;
      $84 = (($83) + 12|0);
      HEAP32[$84>>2] = $82;
      $85 = $yythunkpos110;
      $86 = $1;
      $87 = (($86) + 44|0);
      HEAP32[$87>>2] = $85;
      $88 = $1;
      $89 = (_yy_Sp($88)|0);
      $90 = ($89|0)!=(0);
      if (!($90)) {
       break;
      }
      $91 = $1;
      $92 = (_yy_Newline($91)|0);
      $93 = ($92|0)!=(0);
      if ($93) {
       label = 22;
       break L10;
      }
     } else {
     }
    } while(0);
    $94 = $yypos108;
    $95 = $1;
    $96 = (($95) + 12|0);
    HEAP32[$96>>2] = $94;
    $97 = $yythunkpos108;
    $98 = $1;
    $99 = (($98) + 44|0);
    HEAP32[$99>>2] = $97;
    $100 = $1;
    $101 = (_yymatchDot($100)|0);
    $102 = ($101|0)!=(0);
    if (!($102)) {
     label = 24;
     break;
    }
   }
   if ((label|0) == 11) {
   }
   else if ((label|0) == 22) {
   }
   else if ((label|0) == 24) {
   }
   $103 = $yypos106;
   $104 = $1;
   $105 = (($104) + 12|0);
   HEAP32[$105>>2] = $103;
   $106 = $yythunkpos106;
   $107 = $1;
   $108 = (($107) + 44|0);
   HEAP32[$108>>2] = $106;
   $109 = $1;
   $110 = $1;
   $111 = (($110) + 28|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = $1;
   $114 = (($113) + 32|0);
   $115 = HEAP32[$114>>2]|0;
   (_yyText($109,$112,$115)|0);
   $116 = $1;
   $117 = (($116) + 12|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = $1;
   $120 = (($119) + 32|0);
   HEAP32[$120>>2] = $118;
   $121 = $1;
   $122 = (($121) + 12|0);
   $123 = HEAP32[$122>>2]|0;
   $yypos111 = $123;
   $124 = $1;
   $125 = (($124) + 44|0);
   $126 = HEAP32[$125>>2]|0;
   $yythunkpos111 = $126;
   $127 = $1;
   $128 = (_yy_Sp($127)|0);
   $129 = ($128|0)!=(0);
   do {
    if ($129) {
     $130 = $1;
     $131 = (_yymatchChar($130,35)|0);
     $132 = ($131|0)!=(0);
     if (!($132)) {
      label = 36;
      break;
     }
     while(1) {
      $133 = $1;
      $134 = (($133) + 12|0);
      $135 = HEAP32[$134>>2]|0;
      $yypos114 = $135;
      $136 = $1;
      $137 = (($136) + 44|0);
      $138 = HEAP32[$137>>2]|0;
      $yythunkpos114 = $138;
      $139 = $1;
      $140 = (_yymatchChar($139,35)|0);
      $141 = ($140|0)!=(0);
      if (!($141)) {
       break;
      }
     }
     $142 = $yypos114;
     $143 = $1;
     $144 = (($143) + 12|0);
     HEAP32[$144>>2] = $142;
     $145 = $yythunkpos114;
     $146 = $1;
     $147 = (($146) + 44|0);
     HEAP32[$147>>2] = $145;
    } else {
     label = 36;
    }
   } while(0);
   if ((label|0) == 36) {
    $148 = $yypos111;
    $149 = $1;
    $150 = (($149) + 12|0);
    HEAP32[$150>>2] = $148;
    $151 = $yythunkpos111;
    $152 = $1;
    $153 = (($152) + 44|0);
    HEAP32[$153>>2] = $151;
   }
   $154 = $1;
   $155 = (_yy_Sp($154)|0);
   $156 = ($155|0)!=(0);
   if (!($156)) {
    break;
   }
   $157 = $1;
   $158 = (_yy_Newline($157)|0);
   $159 = ($158|0)!=(0);
   if (!($159)) {
    break;
   }
   $160 = $1;
   $161 = $1;
   $162 = (($161) + 28|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = $1;
   $165 = (($164) + 32|0);
   $166 = HEAP32[$165>>2]|0;
   _yyDo($160,168,$163,$166,46712);
   $167 = $1;
   _yyDo($167,12,1,0,41392);
   $0 = 1;
   $174 = $0;
   STACKTOP = sp;return ($174|0);
  } else {
  }
 } while(0);
 $168 = $yypos0;
 $169 = $1;
 $170 = (($169) + 12|0);
 HEAP32[$170>>2] = $168;
 $171 = $yythunkpos0;
 $172 = $1;
 $173 = (($172) + 44|0);
 HEAP32[$173>>2] = $171;
 $0 = 0;
 $174 = $0;
 STACKTOP = sp;return ($174|0);
}
function _yy_OPMLSetextHeading($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos101 = 0, $yythunkpos0 = 0, $yythunkpos101 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos101 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos101 = $13;
 $14 = $1;
 $15 = (_yy_OPMLSetextHeading1($14)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
  } else {
   $17 = $yypos101;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos101;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yy_OPMLSetextHeading2($23)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    break;
   }
   $26 = $yypos0;
   $27 = $1;
   $28 = (($27) + 12|0);
   HEAP32[$28>>2] = $26;
   $29 = $yythunkpos0;
   $30 = $1;
   $31 = (($30) + 44|0);
   HEAP32[$31>>2] = $29;
   $0 = 0;
   $32 = $0;
   STACKTOP = sp;return ($32|0);
  }
 } while(0);
 $0 = 1;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _yy_LineBreak($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1623 = 0, $yythunkpos0 = 0, $yythunkpos1623 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 $9 = $1;
 $10 = (($9) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $yypos1623 = $11;
 $12 = $1;
 $13 = (($12) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $yythunkpos1623 = $14;
 $15 = $1;
 $16 = (_yymatchString($15,41424)|0);
 $17 = ($16|0)!=(0);
 do {
  if ($17) {
   label = 12;
  } else {
   $18 = $yypos1623;
   $19 = $1;
   $20 = (($19) + 12|0);
   HEAP32[$20>>2] = $18;
   $21 = $yythunkpos1623;
   $22 = $1;
   $23 = (($22) + 44|0);
   HEAP32[$23>>2] = $21;
   $24 = $1;
   $25 = $1;
   $26 = (($25) + 28|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $1;
   $29 = (($28) + 32|0);
   $30 = HEAP32[$29>>2]|0;
   (_yyText($24,$27,$30)|0);
   $31 = $1;
   $32 = (($31) + 64|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($33) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (_extension(1,$35)|0);
   if (!($36)) {
    $37 = $1;
    $38 = (($37) + 64|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (($39) + 12|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (_extension(131072,$41)|0);
    if ($42) {
     $43 = $1;
     $44 = (_yy_Sp($43)|0);
     $45 = ($44|0)!=(0);
     if (!($45)) {
      break;
     }
     $46 = $1;
     $47 = (_yymatchChar($46,92)|0);
     $48 = ($47|0)!=(0);
     if ($48) {
      label = 12;
      break;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 12) {
   $49 = $1;
   $50 = (_yy_NormalEndline($49)|0);
   $51 = ($50|0)!=(0);
   if (!($51)) {
    break;
   }
   $52 = $1;
   _yyDo($52,8,-1,0,41336);
   $53 = $1;
   $54 = $1;
   $55 = (($54) + 28|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $1;
   $58 = (($57) + 32|0);
   $59 = HEAP32[$58>>2]|0;
   _yyDo($53,169,$56,$59,46200);
   $60 = $1;
   _yyDo($60,12,1,0,41392);
   $0 = 1;
   $67 = $0;
   STACKTOP = sp;return ($67|0);
  }
 } while(0);
 $61 = $yypos0;
 $62 = $1;
 $63 = (($62) + 12|0);
 HEAP32[$63>>2] = $61;
 $64 = $yythunkpos0;
 $65 = $1;
 $66 = (($65) + 44|0);
 HEAP32[$66>>2] = $64;
 $0 = 0;
 $67 = $0;
 STACKTOP = sp;return ($67|0);
}
function _yy_TerminalEndline($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yythunkpos0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_Sp($8)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Newline($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (_yy_Eof($14)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = $1;
   $19 = (($18) + 28|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $1;
   $22 = (($21) + 32|0);
   $23 = HEAP32[$22>>2]|0;
   _yyDo($17,170,$20,$23,46176);
   $0 = 1;
   $30 = $0;
   STACKTOP = sp;return ($30|0);
  } else {
  }
 } while(0);
 $24 = $yypos0;
 $25 = $1;
 $26 = (($25) + 12|0);
 HEAP32[$26>>2] = $24;
 $27 = $yythunkpos0;
 $28 = $1;
 $29 = (($28) + 44|0);
 HEAP32[$29>>2] = $27;
 $0 = 0;
 $30 = $0;
 STACKTOP = sp;return ($30|0);
}
function _yy_NormalEndline($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0;
 var $yypos1611 = 0, $yypos1612 = 0, $yypos1613 = 0, $yypos1614 = 0, $yypos1615 = 0, $yypos1618 = 0, $yypos1620 = 0, $yythunkpos0 = 0, $yythunkpos1611 = 0, $yythunkpos1612 = 0, $yythunkpos1613 = 0, $yythunkpos1614 = 0, $yythunkpos1615 = 0, $yythunkpos1618 = 0, $yythunkpos1620 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_Sp($8)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Newline($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos1611 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos1611 = $19;
   $20 = $1;
   $21 = (_yy_BlankLine($20)|0);
   $22 = ($21|0)!=(0);
   if ($22) {
    break;
   }
   $23 = $yypos1611;
   $24 = $1;
   $25 = (($24) + 12|0);
   HEAP32[$25>>2] = $23;
   $26 = $yythunkpos1611;
   $27 = $1;
   $28 = (($27) + 44|0);
   HEAP32[$28>>2] = $26;
   $29 = $1;
   $30 = (($29) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $yypos1612 = $31;
   $32 = $1;
   $33 = (($32) + 44|0);
   $34 = HEAP32[$33>>2]|0;
   $yythunkpos1612 = $34;
   $35 = $1;
   $36 = (_yymatchChar($35,62)|0);
   $37 = ($36|0)!=(0);
   if ($37) {
    break;
   }
   $38 = $yypos1612;
   $39 = $1;
   $40 = (($39) + 12|0);
   HEAP32[$40>>2] = $38;
   $41 = $yythunkpos1612;
   $42 = $1;
   $43 = (($42) + 44|0);
   HEAP32[$43>>2] = $41;
   $44 = $1;
   $45 = (($44) + 12|0);
   $46 = HEAP32[$45>>2]|0;
   $yypos1613 = $46;
   $47 = $1;
   $48 = (($47) + 44|0);
   $49 = HEAP32[$48>>2]|0;
   $yythunkpos1613 = $49;
   $50 = $1;
   $51 = (_yy_AtxStart($50)|0);
   $52 = ($51|0)!=(0);
   if ($52) {
    break;
   }
   $53 = $yypos1613;
   $54 = $1;
   $55 = (($54) + 12|0);
   HEAP32[$55>>2] = $53;
   $56 = $yythunkpos1613;
   $57 = $1;
   $58 = (($57) + 44|0);
   HEAP32[$58>>2] = $56;
   $59 = $1;
   $60 = (($59) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $yypos1614 = $61;
   $62 = $1;
   $63 = (($62) + 44|0);
   $64 = HEAP32[$63>>2]|0;
   $yythunkpos1614 = $64;
   $65 = $1;
   $66 = (_yy_RawLine($65)|0);
   $67 = ($66|0)!=(0);
   do {
    if ($67) {
     $68 = $1;
     $69 = (($68) + 12|0);
     $70 = HEAP32[$69>>2]|0;
     $yypos1615 = $70;
     $71 = $1;
     $72 = (($71) + 44|0);
     $73 = HEAP32[$72>>2]|0;
     $yythunkpos1615 = $73;
     $74 = $1;
     $75 = (_yymatchChar($74,61)|0);
     $76 = ($75|0)!=(0);
     if ($76) {
      while(1) {
       $77 = $1;
       $78 = (($77) + 12|0);
       $79 = HEAP32[$78>>2]|0;
       $yypos1618 = $79;
       $80 = $1;
       $81 = (($80) + 44|0);
       $82 = HEAP32[$81>>2]|0;
       $yythunkpos1618 = $82;
       $83 = $1;
       $84 = (_yymatchChar($83,61)|0);
       $85 = ($84|0)!=(0);
       if (!($85)) {
        break;
       }
      }
      $86 = $yypos1618;
      $87 = $1;
      $88 = (($87) + 12|0);
      HEAP32[$88>>2] = $86;
      $89 = $yythunkpos1618;
      $90 = $1;
      $91 = (($90) + 44|0);
      HEAP32[$91>>2] = $89;
     } else {
      $92 = $yypos1615;
      $93 = $1;
      $94 = (($93) + 12|0);
      HEAP32[$94>>2] = $92;
      $95 = $yythunkpos1615;
      $96 = $1;
      $97 = (($96) + 44|0);
      HEAP32[$97>>2] = $95;
      $98 = $1;
      $99 = (_yymatchChar($98,45)|0);
      $100 = ($99|0)!=(0);
      if (!($100)) {
       break;
      }
      while(1) {
       $101 = $1;
       $102 = (($101) + 12|0);
       $103 = HEAP32[$102>>2]|0;
       $yypos1620 = $103;
       $104 = $1;
       $105 = (($104) + 44|0);
       $106 = HEAP32[$105>>2]|0;
       $yythunkpos1620 = $106;
       $107 = $1;
       $108 = (_yymatchChar($107,45)|0);
       $109 = ($108|0)!=(0);
       if (!($109)) {
        break;
       }
      }
      $110 = $yypos1620;
      $111 = $1;
      $112 = (($111) + 12|0);
      HEAP32[$112>>2] = $110;
      $113 = $yythunkpos1620;
      $114 = $1;
      $115 = (($114) + 44|0);
      HEAP32[$115>>2] = $113;
     }
     $116 = $1;
     $117 = (_yy_Newline($116)|0);
     $118 = ($117|0)!=(0);
     if ($118) {
      break L1;
     } else {
      break;
     }
    } else {
    }
   } while(0);
   $119 = $yypos1614;
   $120 = $1;
   $121 = (($120) + 12|0);
   HEAP32[$121>>2] = $119;
   $122 = $yythunkpos1614;
   $123 = $1;
   $124 = (($123) + 44|0);
   HEAP32[$124>>2] = $122;
   $125 = $1;
   $126 = $1;
   $127 = (($126) + 28|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = $1;
   $130 = (($129) + 32|0);
   $131 = HEAP32[$130>>2]|0;
   _yyDo($125,171,$128,$131,46096);
   $0 = 1;
   $138 = $0;
   STACKTOP = sp;return ($138|0);
  } else {
  }
 } while(0);
 $132 = $yypos0;
 $133 = $1;
 $134 = (($133) + 12|0);
 HEAP32[$134>>2] = $132;
 $135 = $yythunkpos0;
 $136 = $1;
 $137 = (($136) + 44|0);
 HEAP32[$137>>2] = $135;
 $0 = 0;
 $138 = $0;
 STACKTOP = sp;return ($138|0);
}
function _yy_1_AutoLabel($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $anchor = 0, $label = 0, $ref = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 $14 = $0;
 $15 = (($14) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP16[$16>>1] = 27;
 $17 = $1;
 $18 = (_label_from_string($17)|0);
 $label = $18;
 $19 = $label;
 $20 = (_g_string_new($19)|0);
 $anchor = $20;
 $21 = $anchor;
 _g_string_prepend($21,46088);
 $22 = $label;
 $23 = $anchor;
 $24 = HEAP32[$23>>2]|0;
 $25 = (_mk_link(0,$22,$24,0,0)|0);
 $ref = $25;
 $26 = $anchor;
 (_g_string_free($26,1)|0);
 $27 = $label;
 _free($27);
 $28 = $ref;
 $29 = $0;
 $30 = (($29) + 64|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + 16|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (_cons($28,$33)|0);
 $35 = $0;
 $36 = (($35) + 64|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) + 16|0);
 HEAP32[$38>>2] = $34;
 $39 = $ref;
 HEAP16[$39>>1] = 61;
 STACKTOP = sp;return;
}
function _yy_DollarMath($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1875 = 0, $yythunkpos0 = 0, $yythunkpos1875 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos1875 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos1875 = $13;
 $14 = $1;
 $15 = (_yy_SingleDollarMath($14)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
  } else {
   $17 = $yypos1875;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos1875;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yy_DoubleDollarMath($23)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    break;
   }
   $26 = $yypos0;
   $27 = $1;
   $28 = (($27) + 12|0);
   HEAP32[$28>>2] = $26;
   $29 = $yythunkpos0;
   $30 = $1;
   $31 = (($30) + 44|0);
   HEAP32[$31>>2] = $29;
   $0 = 0;
   $32 = $0;
   STACKTOP = sp;return ($32|0);
  }
 } while(0);
 $0 = 1;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _yy_Str($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $yypos0 = 0, $yypos1867 = 0, $yypos1869 = 0, $yypos1871 = 0, $yypos1872 = 0, $yythunkpos0 = 0, $yythunkpos1867 = 0, $yythunkpos1869 = 0, $yythunkpos1871 = 0, $yythunkpos1872 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 $9 = $1;
 $10 = (_yy_StartList($9)|0);
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $1;
   _yyDo($12,8,-1,0,41336);
   $13 = $1;
   $14 = $1;
   $15 = (($14) + 28|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $1;
   $18 = (($17) + 32|0);
   $19 = HEAP32[$18>>2]|0;
   (_yyText($13,$16,$19)|0);
   $20 = $1;
   $21 = (($20) + 12|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $1;
   $24 = (($23) + 28|0);
   HEAP32[$24>>2] = $22;
   $25 = $1;
   $26 = (_yy_NormalChar($25)|0);
   $27 = ($26|0)!=(0);
   if (!($27)) {
    break;
   }
   while(1) {
    $28 = $1;
    $29 = (($28) + 12|0);
    $30 = HEAP32[$29>>2]|0;
    $yypos1867 = $30;
    $31 = $1;
    $32 = (($31) + 44|0);
    $33 = HEAP32[$32>>2]|0;
    $yythunkpos1867 = $33;
    $34 = $1;
    $35 = (_yy_NormalChar($34)|0);
    $36 = ($35|0)!=(0);
    if (!($36)) {
     break;
    }
   }
   $37 = $yypos1867;
   $38 = $1;
   $39 = (($38) + 12|0);
   HEAP32[$39>>2] = $37;
   $40 = $yythunkpos1867;
   $41 = $1;
   $42 = (($41) + 44|0);
   HEAP32[$42>>2] = $40;
   $43 = $1;
   $44 = $1;
   $45 = (($44) + 28|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $1;
   $48 = (($47) + 32|0);
   $49 = HEAP32[$48>>2]|0;
   (_yyText($43,$46,$49)|0);
   $50 = $1;
   $51 = (($50) + 12|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $1;
   $54 = (($53) + 32|0);
   HEAP32[$54>>2] = $52;
   $55 = $1;
   $56 = $1;
   $57 = (($56) + 28|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $1;
   $60 = (($59) + 32|0);
   $61 = HEAP32[$60>>2]|0;
   _yyDo($55,172,$58,$61,45584);
   while(1) {
    $62 = $1;
    $63 = (($62) + 12|0);
    $64 = HEAP32[$63>>2]|0;
    $yypos1869 = $64;
    $65 = $1;
    $66 = (($65) + 44|0);
    $67 = HEAP32[$66>>2]|0;
    $yythunkpos1869 = $67;
    $68 = $1;
    $69 = $1;
    $70 = (($69) + 28|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = $1;
    $73 = (($72) + 32|0);
    $74 = HEAP32[$73>>2]|0;
    (_yyText($68,$71,$74)|0);
    $75 = $1;
    $76 = (($75) + 64|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (($77) + 12|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = (_extension(1,$79)|0);
    if ($80) {
     label = 13;
     break;
    }
    $81 = $1;
    $82 = (_yy_StrChunk($81)|0);
    $83 = ($82|0)!=(0);
    if (!($83)) {
     label = 15;
     break;
    }
    $84 = $1;
    $85 = $1;
    $86 = (($85) + 28|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = $1;
    $89 = (($88) + 32|0);
    $90 = HEAP32[$89>>2]|0;
    _yyDo($84,173,$87,$90,45600);
   }
   if ((label|0) == 13) {
   }
   else if ((label|0) == 15) {
   }
   $91 = $yypos1869;
   $92 = $1;
   $93 = (($92) + 12|0);
   HEAP32[$93>>2] = $91;
   $94 = $yythunkpos1869;
   $95 = $1;
   $96 = (($95) + 44|0);
   HEAP32[$96>>2] = $94;
   while(1) {
    $97 = $1;
    $98 = (($97) + 12|0);
    $99 = HEAP32[$98>>2]|0;
    $yypos1871 = $99;
    $100 = $1;
    $101 = (($100) + 44|0);
    $102 = HEAP32[$101>>2]|0;
    $yythunkpos1871 = $102;
    $103 = $1;
    $104 = $1;
    $105 = (($104) + 28|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $1;
    $108 = (($107) + 32|0);
    $109 = HEAP32[$108>>2]|0;
    (_yyText($103,$106,$109)|0);
    $110 = $1;
    $111 = (($110) + 64|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = (($112) + 12|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = (_extension(1,$114)|0);
    if ($115) {
     label = 19;
     break;
    }
    $116 = $1;
    $117 = (($116) + 12|0);
    $118 = HEAP32[$117>>2]|0;
    $yypos1872 = $118;
    $119 = $1;
    $120 = (($119) + 44|0);
    $121 = HEAP32[$120>>2]|0;
    $yythunkpos1872 = $121;
    $122 = $1;
    $123 = (_yy_Superscript($122)|0);
    $124 = ($123|0)!=(0);
    if ($124) {
    } else {
     $125 = $yypos1872;
     $126 = $1;
     $127 = (($126) + 12|0);
     HEAP32[$127>>2] = $125;
     $128 = $yythunkpos1872;
     $129 = $1;
     $130 = (($129) + 44|0);
     HEAP32[$130>>2] = $128;
     $131 = $1;
     $132 = (_yy_Subscript($131)|0);
     $133 = ($132|0)!=(0);
     if (!($133)) {
      label = 24;
      break;
     }
    }
    $134 = $1;
    $135 = $1;
    $136 = (($135) + 28|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $1;
    $139 = (($138) + 32|0);
    $140 = HEAP32[$139>>2]|0;
    _yyDo($134,174,$137,$140,45616);
   }
   if ((label|0) == 19) {
   }
   else if ((label|0) == 24) {
   }
   $141 = $yypos1871;
   $142 = $1;
   $143 = (($142) + 12|0);
   HEAP32[$143>>2] = $141;
   $144 = $yythunkpos1871;
   $145 = $1;
   $146 = (($145) + 44|0);
   HEAP32[$146>>2] = $144;
   $147 = $1;
   $148 = $1;
   $149 = (($148) + 28|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = $1;
   $152 = (($151) + 32|0);
   $153 = HEAP32[$152>>2]|0;
   _yyDo($147,175,$150,$153,45632);
   $154 = $1;
   _yyDo($154,12,1,0,41392);
   $0 = 1;
   $161 = $0;
   STACKTOP = sp;return ($161|0);
  } else {
  }
 } while(0);
 $155 = $yypos0;
 $156 = $1;
 $157 = (($156) + 12|0);
 HEAP32[$157>>2] = $155;
 $158 = $yythunkpos0;
 $159 = $1;
 $160 = (($159) + 44|0);
 HEAP32[$160>>2] = $158;
 $0 = 0;
 $161 = $0;
 STACKTOP = sp;return ($161|0);
}
function _yy_MathSpan($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos1857 = 0, $yypos1860 = 0, $yypos1861 = 0, $yypos1863 = 0, $yypos1864 = 0, $yythunkpos0 = 0;
 var $yythunkpos1857 = 0, $yythunkpos1860 = 0, $yythunkpos1861 = 0, $yythunkpos1863 = 0, $yythunkpos1864 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,92)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = $1;
   $13 = (($12) + 28|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $1;
   $16 = (($15) + 32|0);
   $17 = HEAP32[$16>>2]|0;
   (_yyText($11,$14,$17)|0);
   $18 = $1;
   $19 = (($18) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $1;
   $22 = (($21) + 28|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (($23) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $yypos1857 = $25;
   $26 = $1;
   $27 = (($26) + 44|0);
   $28 = HEAP32[$27>>2]|0;
   $yythunkpos1857 = $28;
   $29 = $1;
   $30 = (_yymatchString($29,45536)|0);
   $31 = ($30|0)!=(0);
   do {
    if ($31) {
     while(1) {
      $32 = $1;
      $33 = (($32) + 12|0);
      $34 = HEAP32[$33>>2]|0;
      $yypos1860 = $34;
      $35 = $1;
      $36 = (($35) + 44|0);
      $37 = HEAP32[$36>>2]|0;
      $yythunkpos1860 = $37;
      $38 = $1;
      $39 = (($38) + 12|0);
      $40 = HEAP32[$39>>2]|0;
      $yypos1861 = $40;
      $41 = $1;
      $42 = (($41) + 44|0);
      $43 = HEAP32[$42>>2]|0;
      $yythunkpos1861 = $43;
      $44 = $1;
      $45 = (_yymatchString($44,45544)|0);
      $46 = ($45|0)!=(0);
      if ($46) {
       label = 9;
       break;
      }
      $47 = $yypos1861;
      $48 = $1;
      $49 = (($48) + 12|0);
      HEAP32[$49>>2] = $47;
      $50 = $yythunkpos1861;
      $51 = $1;
      $52 = (($51) + 44|0);
      HEAP32[$52>>2] = $50;
      $53 = $1;
      $54 = (_yymatchDot($53)|0);
      $55 = ($54|0)!=(0);
      if (!($55)) {
       label = 11;
       break;
      }
     }
     if ((label|0) == 9) {
     }
     else if ((label|0) == 11) {
     }
     $56 = $yypos1860;
     $57 = $1;
     $58 = (($57) + 12|0);
     HEAP32[$58>>2] = $56;
     $59 = $yythunkpos1860;
     $60 = $1;
     $61 = (($60) + 44|0);
     HEAP32[$61>>2] = $59;
     $62 = $1;
     $63 = (_yymatchString($62,45544)|0);
     $64 = ($63|0)!=(0);
     if ($64) {
      break;
     } else {
      label = 16;
      break;
     }
    } else {
     label = 16;
    }
   } while(0);
   do {
    if ((label|0) == 16) {
     $65 = $yypos1857;
     $66 = $1;
     $67 = (($66) + 12|0);
     HEAP32[$67>>2] = $65;
     $68 = $yythunkpos1857;
     $69 = $1;
     $70 = (($69) + 44|0);
     HEAP32[$70>>2] = $68;
     $71 = $1;
     $72 = (_yymatchString($71,45552)|0);
     $73 = ($72|0)!=(0);
     if (!($73)) {
      break L1;
     }
     while(1) {
      $74 = $1;
      $75 = (($74) + 12|0);
      $76 = HEAP32[$75>>2]|0;
      $yypos1863 = $76;
      $77 = $1;
      $78 = (($77) + 44|0);
      $79 = HEAP32[$78>>2]|0;
      $yythunkpos1863 = $79;
      $80 = $1;
      $81 = (($80) + 12|0);
      $82 = HEAP32[$81>>2]|0;
      $yypos1864 = $82;
      $83 = $1;
      $84 = (($83) + 44|0);
      $85 = HEAP32[$84>>2]|0;
      $yythunkpos1864 = $85;
      $86 = $1;
      $87 = (_yymatchString($86,45560)|0);
      $88 = ($87|0)!=(0);
      if ($88) {
       label = 21;
       break;
      }
      $89 = $yypos1864;
      $90 = $1;
      $91 = (($90) + 12|0);
      HEAP32[$91>>2] = $89;
      $92 = $yythunkpos1864;
      $93 = $1;
      $94 = (($93) + 44|0);
      HEAP32[$94>>2] = $92;
      $95 = $1;
      $96 = (_yymatchDot($95)|0);
      $97 = ($96|0)!=(0);
      if (!($97)) {
       label = 23;
       break;
      }
     }
     if ((label|0) == 21) {
     }
     else if ((label|0) == 23) {
     }
     $98 = $yypos1863;
     $99 = $1;
     $100 = (($99) + 12|0);
     HEAP32[$100>>2] = $98;
     $101 = $yythunkpos1863;
     $102 = $1;
     $103 = (($102) + 44|0);
     HEAP32[$103>>2] = $101;
     $104 = $1;
     $105 = (_yymatchString($104,45560)|0);
     $106 = ($105|0)!=(0);
     if ($106) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $107 = $1;
   $108 = $1;
   $109 = (($108) + 28|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $1;
   $112 = (($111) + 32|0);
   $113 = HEAP32[$112>>2]|0;
   (_yyText($107,$110,$113)|0);
   $114 = $1;
   $115 = (($114) + 12|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = $1;
   $118 = (($117) + 32|0);
   HEAP32[$118>>2] = $116;
   $119 = $1;
   $120 = $1;
   $121 = (($120) + 28|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = $1;
   $124 = (($123) + 32|0);
   $125 = HEAP32[$124>>2]|0;
   _yyDo($119,176,$122,$125,45568);
   $0 = 1;
   $132 = $0;
   STACKTOP = sp;return ($132|0);
  } else {
  }
 } while(0);
 $126 = $yypos0;
 $127 = $1;
 $128 = (($127) + 12|0);
 HEAP32[$128>>2] = $126;
 $129 = $yythunkpos0;
 $130 = $1;
 $131 = (($130) + 44|0);
 HEAP32[$131>>2] = $129;
 $0 = 0;
 $132 = $0;
 STACKTOP = sp;return ($132|0);
}
function _yy_UlOrStarLine($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos1854 = 0, $yythunkpos0 = 0, $yythunkpos1854 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos1854 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos1854 = $13;
 $14 = $1;
 $15 = (_yy_UlLine($14)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
  } else {
   $17 = $yypos1854;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos1854;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yy_StarLine($23)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    break;
   }
   $33 = $yypos0;
   $34 = $1;
   $35 = (($34) + 12|0);
   HEAP32[$35>>2] = $33;
   $36 = $yythunkpos0;
   $37 = $1;
   $38 = (($37) + 44|0);
   HEAP32[$38>>2] = $36;
   $0 = 0;
   $39 = $0;
   STACKTOP = sp;return ($39|0);
  }
 } while(0);
 $26 = $1;
 $27 = $1;
 $28 = (($27) + 28|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $1;
 $31 = (($30) + 32|0);
 $32 = HEAP32[$31>>2]|0;
 _yyDo($26,177,$29,$32,45496);
 $0 = 1;
 $39 = $0;
 STACKTOP = sp;return ($39|0);
}
function _yy_Space($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos1852 = 0, $yythunkpos0 = 0, $yythunkpos1852 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_Spacechar($8)|0);
 $10 = ($9|0)!=(0);
 if (!($10)) {
  $33 = $yypos0;
  $34 = $1;
  $35 = (($34) + 12|0);
  HEAP32[$35>>2] = $33;
  $36 = $yythunkpos0;
  $37 = $1;
  $38 = (($37) + 44|0);
  HEAP32[$38>>2] = $36;
  $0 = 0;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 }
 while(1) {
  $11 = $1;
  $12 = (($11) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $yypos1852 = $13;
  $14 = $1;
  $15 = (($14) + 44|0);
  $16 = HEAP32[$15>>2]|0;
  $yythunkpos1852 = $16;
  $17 = $1;
  $18 = (_yy_Spacechar($17)|0);
  $19 = ($18|0)!=(0);
  if (!($19)) {
   break;
  }
 }
 $20 = $yypos1852;
 $21 = $1;
 $22 = (($21) + 12|0);
 HEAP32[$22>>2] = $20;
 $23 = $yythunkpos1852;
 $24 = $1;
 $25 = (($24) + 44|0);
 HEAP32[$25>>2] = $23;
 $26 = $1;
 $27 = $1;
 $28 = (($27) + 28|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $1;
 $31 = (($30) + 32|0);
 $32 = HEAP32[$31>>2]|0;
 _yyDo($26,178,$29,$32,45480);
 $0 = 1;
 $39 = $0;
 STACKTOP = sp;return ($39|0);
}
function _yy_StrongAndEmph($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1846 = 0, $yythunkpos0 = 0, $yythunkpos1846 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos1846 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos1846 = $13;
 $14 = $1;
 $15 = (_yy_StrongAndEmphStar($14)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
  } else {
   $17 = $yypos1846;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos1846;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yy_StrongAndEmphUl($23)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    break;
   }
   $26 = $yypos1846;
   $27 = $1;
   $28 = (($27) + 12|0);
   HEAP32[$28>>2] = $26;
   $29 = $yythunkpos1846;
   $30 = $1;
   $31 = (($30) + 44|0);
   HEAP32[$31>>2] = $29;
   $32 = $1;
   $33 = (_yy_EmphAndStrongStar($32)|0);
   $34 = ($33|0)!=(0);
   if ($34) {
    break;
   }
   $35 = $yypos1846;
   $36 = $1;
   $37 = (($36) + 12|0);
   HEAP32[$37>>2] = $35;
   $38 = $yythunkpos1846;
   $39 = $1;
   $40 = (($39) + 44|0);
   HEAP32[$40>>2] = $38;
   $41 = $1;
   $42 = (_yy_EmphAndStrongUl($41)|0);
   $43 = ($42|0)!=(0);
   if ($43) {
    break;
   }
   $44 = $yypos0;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos0;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $0 = 0;
   $50 = $0;
   STACKTOP = sp;return ($50|0);
  }
 } while(0);
 $0 = 1;
 $50 = $0;
 STACKTOP = sp;return ($50|0);
}
function _yy_Strong($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1843 = 0, $yythunkpos0 = 0, $yythunkpos1843 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos1843 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos1843 = $13;
 $14 = $1;
 $15 = (_yy_StrongStar($14)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
  } else {
   $17 = $yypos1843;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos1843;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yy_StrongUl($23)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    break;
   }
   $26 = $yypos0;
   $27 = $1;
   $28 = (($27) + 12|0);
   HEAP32[$28>>2] = $26;
   $29 = $yythunkpos0;
   $30 = $1;
   $31 = (($30) + 44|0);
   HEAP32[$31>>2] = $29;
   $0 = 0;
   $32 = $0;
   STACKTOP = sp;return ($32|0);
  }
 } while(0);
 $0 = 1;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _yy_Emph($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1840 = 0, $yythunkpos0 = 0, $yythunkpos1840 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos1840 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos1840 = $13;
 $14 = $1;
 $15 = (_yy_EmphStar($14)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
  } else {
   $17 = $yypos1840;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos1840;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yy_EmphUl($23)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    break;
   }
   $26 = $yypos0;
   $27 = $1;
   $28 = (($27) + 12|0);
   HEAP32[$28>>2] = $26;
   $29 = $yythunkpos0;
   $30 = $1;
   $31 = (($30) + 44|0);
   HEAP32[$31>>2] = $29;
   $0 = 0;
   $32 = $0;
   STACKTOP = sp;return ($32|0);
  }
 } while(0);
 $0 = 1;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _yy_CitationReference($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1837 = 0, $yythunkpos0 = 0, $yythunkpos1837 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos1837 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos1837 = $13;
 $14 = $1;
 $15 = (_yy_CitationReferenceDouble($14)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
  } else {
   $17 = $yypos1837;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos1837;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yy_CitationReferenceSingle($23)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    break;
   }
   $26 = $yypos0;
   $27 = $1;
   $28 = (($27) + 12|0);
   HEAP32[$28>>2] = $26;
   $29 = $yythunkpos0;
   $30 = $1;
   $31 = (($30) + 44|0);
   HEAP32[$31>>2] = $29;
   $0 = 0;
   $32 = $0;
   STACKTOP = sp;return ($32|0);
  }
 } while(0);
 $0 = 1;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _yy_Variable($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos1831 = 0, $yypos1832 = 0, $yypos1833 = 0, $yypos1834 = 0, $yypos1835 = 0, $yythunkpos0 = 0, $yythunkpos1831 = 0, $yythunkpos1832 = 0, $yythunkpos1833 = 0;
 var $yythunkpos1834 = 0, $yythunkpos1835 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchString($8,44952)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = $1;
   $13 = (($12) + 28|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $1;
   $16 = (($15) + 32|0);
   $17 = HEAP32[$16>>2]|0;
   (_yyText($11,$14,$17)|0);
   $18 = $1;
   $19 = (($18) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $1;
   $22 = (($21) + 28|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (($23) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $yypos1832 = $25;
   $26 = $1;
   $27 = (($26) + 44|0);
   $28 = HEAP32[$27>>2]|0;
   $yythunkpos1832 = $28;
   $29 = $1;
   $30 = (_yy_Newline($29)|0);
   $31 = ($30|0)!=(0);
   if ($31) {
    break;
   }
   $32 = $yypos1832;
   $33 = $1;
   $34 = (($33) + 12|0);
   HEAP32[$34>>2] = $32;
   $35 = $yythunkpos1832;
   $36 = $1;
   $37 = (($36) + 44|0);
   HEAP32[$37>>2] = $35;
   $38 = $1;
   $39 = (($38) + 12|0);
   $40 = HEAP32[$39>>2]|0;
   $yypos1833 = $40;
   $41 = $1;
   $42 = (($41) + 44|0);
   $43 = HEAP32[$42>>2]|0;
   $yythunkpos1833 = $43;
   $44 = $1;
   $45 = (_yymatchChar($44,93)|0);
   $46 = ($45|0)!=(0);
   if ($46) {
    break;
   }
   $47 = $yypos1833;
   $48 = $1;
   $49 = (($48) + 12|0);
   HEAP32[$49>>2] = $47;
   $50 = $yythunkpos1833;
   $51 = $1;
   $52 = (($51) + 44|0);
   HEAP32[$52>>2] = $50;
   $53 = $1;
   $54 = (_yymatchDot($53)|0);
   $55 = ($54|0)!=(0);
   if (!($55)) {
    break;
   }
   while(1) {
    $56 = $1;
    $57 = (($56) + 12|0);
    $58 = HEAP32[$57>>2]|0;
    $yypos1831 = $58;
    $59 = $1;
    $60 = (($59) + 44|0);
    $61 = HEAP32[$60>>2]|0;
    $yythunkpos1831 = $61;
    $62 = $1;
    $63 = (($62) + 12|0);
    $64 = HEAP32[$63>>2]|0;
    $yypos1834 = $64;
    $65 = $1;
    $66 = (($65) + 44|0);
    $67 = HEAP32[$66>>2]|0;
    $yythunkpos1834 = $67;
    $68 = $1;
    $69 = (_yy_Newline($68)|0);
    $70 = ($69|0)!=(0);
    if ($70) {
     label = 15;
     break;
    }
    $71 = $yypos1834;
    $72 = $1;
    $73 = (($72) + 12|0);
    HEAP32[$73>>2] = $71;
    $74 = $yythunkpos1834;
    $75 = $1;
    $76 = (($75) + 44|0);
    HEAP32[$76>>2] = $74;
    $77 = $1;
    $78 = (($77) + 12|0);
    $79 = HEAP32[$78>>2]|0;
    $yypos1835 = $79;
    $80 = $1;
    $81 = (($80) + 44|0);
    $82 = HEAP32[$81>>2]|0;
    $yythunkpos1835 = $82;
    $83 = $1;
    $84 = (_yymatchChar($83,93)|0);
    $85 = ($84|0)!=(0);
    if ($85) {
     label = 18;
     break;
    }
    $86 = $yypos1835;
    $87 = $1;
    $88 = (($87) + 12|0);
    HEAP32[$88>>2] = $86;
    $89 = $yythunkpos1835;
    $90 = $1;
    $91 = (($90) + 44|0);
    HEAP32[$91>>2] = $89;
    $92 = $1;
    $93 = (_yymatchDot($92)|0);
    $94 = ($93|0)!=(0);
    if (!($94)) {
     label = 20;
     break;
    }
   }
   if ((label|0) == 15) {
   }
   else if ((label|0) == 18) {
   }
   else if ((label|0) == 20) {
   }
   $95 = $yypos1831;
   $96 = $1;
   $97 = (($96) + 12|0);
   HEAP32[$97>>2] = $95;
   $98 = $yythunkpos1831;
   $99 = $1;
   $100 = (($99) + 44|0);
   HEAP32[$100>>2] = $98;
   $101 = $1;
   $102 = $1;
   $103 = (($102) + 28|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = $1;
   $106 = (($105) + 32|0);
   $107 = HEAP32[$106>>2]|0;
   (_yyText($101,$104,$107)|0);
   $108 = $1;
   $109 = (($108) + 12|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $1;
   $112 = (($111) + 32|0);
   HEAP32[$112>>2] = $110;
   $113 = $1;
   $114 = (_yymatchChar($113,93)|0);
   $115 = ($114|0)!=(0);
   if (!($115)) {
    break;
   }
   $116 = $1;
   $117 = $1;
   $118 = (($117) + 28|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $1;
   $121 = (($120) + 32|0);
   $122 = HEAP32[$121>>2]|0;
   _yyDo($116,179,$119,$122,44960);
   $0 = 1;
   $129 = $0;
   STACKTOP = sp;return ($129|0);
  } else {
  }
 } while(0);
 $123 = $yypos0;
 $124 = $1;
 $125 = (($124) + 12|0);
 HEAP32[$125>>2] = $123;
 $126 = $yythunkpos0;
 $127 = $1;
 $128 = (($127) + 44|0);
 HEAP32[$128>>2] = $126;
 $0 = 0;
 $129 = $0;
 STACKTOP = sp;return ($129|0);
}
function _yy_NoteReference($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos1818 = 0, $yypos1819 = 0, $yypos1820 = 0, $yypos1821 = 0, $yypos1822 = 0, $yythunkpos0 = 0, $yythunkpos1818 = 0, $yythunkpos1819 = 0, $yythunkpos1820 = 0, $yythunkpos1821 = 0;
 var $yythunkpos1822 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = $1;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($12) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 (_yyText($8,$11,$14)|0);
 $15 = $1;
 $16 = (($15) + 64|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (_extension(32,$19)|0);
 L1: do {
  if ($20) {
   $21 = $1;
   $22 = (_yymatchString($21,44608)|0);
   $23 = ($22|0)!=(0);
   if (!($23)) {
    break;
   }
   $24 = $1;
   $25 = $1;
   $26 = (($25) + 28|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $1;
   $29 = (($28) + 32|0);
   $30 = HEAP32[$29>>2]|0;
   (_yyText($24,$27,$30)|0);
   $31 = $1;
   $32 = (($31) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $1;
   $35 = (($34) + 28|0);
   HEAP32[$35>>2] = $33;
   $36 = $1;
   $37 = (($36) + 12|0);
   $38 = HEAP32[$37>>2]|0;
   $yypos1819 = $38;
   $39 = $1;
   $40 = (($39) + 44|0);
   $41 = HEAP32[$40>>2]|0;
   $yythunkpos1819 = $41;
   $42 = $1;
   $43 = (_yy_Newline($42)|0);
   $44 = ($43|0)!=(0);
   do {
    if ($44) {
     $45 = $1;
     $46 = (_yy_BlankLine($45)|0);
     $47 = ($46|0)!=(0);
     if ($47) {
      break L1;
     } else {
      break;
     }
    } else {
    }
   } while(0);
   $48 = $yypos1819;
   $49 = $1;
   $50 = (($49) + 12|0);
   HEAP32[$50>>2] = $48;
   $51 = $yythunkpos1819;
   $52 = $1;
   $53 = (($52) + 44|0);
   HEAP32[$53>>2] = $51;
   $54 = $1;
   $55 = (($54) + 12|0);
   $56 = HEAP32[$55>>2]|0;
   $yypos1820 = $56;
   $57 = $1;
   $58 = (($57) + 44|0);
   $59 = HEAP32[$58>>2]|0;
   $yythunkpos1820 = $59;
   $60 = $1;
   $61 = (_yymatchChar($60,93)|0);
   $62 = ($61|0)!=(0);
   if ($62) {
    break;
   }
   $63 = $yypos1820;
   $64 = $1;
   $65 = (($64) + 12|0);
   HEAP32[$65>>2] = $63;
   $66 = $yythunkpos1820;
   $67 = $1;
   $68 = (($67) + 44|0);
   HEAP32[$68>>2] = $66;
   $69 = $1;
   $70 = (_yy_RawInline($69)|0);
   $71 = ($70|0)!=(0);
   if (!($71)) {
    break;
   }
   while(1) {
    $72 = $1;
    $73 = (($72) + 12|0);
    $74 = HEAP32[$73>>2]|0;
    $yypos1818 = $74;
    $75 = $1;
    $76 = (($75) + 44|0);
    $77 = HEAP32[$76>>2]|0;
    $yythunkpos1818 = $77;
    $78 = $1;
    $79 = (($78) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $yypos1821 = $80;
    $81 = $1;
    $82 = (($81) + 44|0);
    $83 = HEAP32[$82>>2]|0;
    $yythunkpos1821 = $83;
    $84 = $1;
    $85 = (_yy_Newline($84)|0);
    $86 = ($85|0)!=(0);
    if ($86) {
     $87 = $1;
     $88 = (_yy_BlankLine($87)|0);
     $89 = ($88|0)!=(0);
     if ($89) {
      label = 21;
      break;
     }
    } else {
    }
    $90 = $yypos1821;
    $91 = $1;
    $92 = (($91) + 12|0);
    HEAP32[$92>>2] = $90;
    $93 = $yythunkpos1821;
    $94 = $1;
    $95 = (($94) + 44|0);
    HEAP32[$95>>2] = $93;
    $96 = $1;
    $97 = (($96) + 12|0);
    $98 = HEAP32[$97>>2]|0;
    $yypos1822 = $98;
    $99 = $1;
    $100 = (($99) + 44|0);
    $101 = HEAP32[$100>>2]|0;
    $yythunkpos1822 = $101;
    $102 = $1;
    $103 = (_yymatchChar($102,93)|0);
    $104 = ($103|0)!=(0);
    if ($104) {
     label = 24;
     break;
    }
    $105 = $yypos1822;
    $106 = $1;
    $107 = (($106) + 12|0);
    HEAP32[$107>>2] = $105;
    $108 = $yythunkpos1822;
    $109 = $1;
    $110 = (($109) + 44|0);
    HEAP32[$110>>2] = $108;
    $111 = $1;
    $112 = (_yy_RawInline($111)|0);
    $113 = ($112|0)!=(0);
    if (!($113)) {
     label = 26;
     break;
    }
   }
   if ((label|0) == 21) {
   }
   else if ((label|0) == 24) {
   }
   else if ((label|0) == 26) {
   }
   $114 = $yypos1818;
   $115 = $1;
   $116 = (($115) + 12|0);
   HEAP32[$116>>2] = $114;
   $117 = $yythunkpos1818;
   $118 = $1;
   $119 = (($118) + 44|0);
   HEAP32[$119>>2] = $117;
   $120 = $1;
   $121 = $1;
   $122 = (($121) + 28|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = $1;
   $125 = (($124) + 32|0);
   $126 = HEAP32[$125>>2]|0;
   (_yyText($120,$123,$126)|0);
   $127 = $1;
   $128 = (($127) + 12|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = $1;
   $131 = (($130) + 32|0);
   HEAP32[$131>>2] = $129;
   $132 = $1;
   $133 = (_yymatchChar($132,93)|0);
   $134 = ($133|0)!=(0);
   if (!($134)) {
    break;
   }
   $135 = $1;
   $136 = $1;
   $137 = (($136) + 28|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = $1;
   $140 = (($139) + 32|0);
   $141 = HEAP32[$140>>2]|0;
   _yyDo($135,180,$138,$141,44616);
   $0 = 1;
   $148 = $0;
   STACKTOP = sp;return ($148|0);
  } else {
  }
 } while(0);
 $142 = $yypos0;
 $143 = $1;
 $144 = (($143) + 12|0);
 HEAP32[$144>>2] = $142;
 $145 = $yythunkpos0;
 $146 = $1;
 $147 = (($146) + 44|0);
 HEAP32[$147>>2] = $145;
 $0 = 0;
 $148 = $0;
 STACKTOP = sp;return ($148|0);
}
function _yy_Code($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0;
 var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0;
 var $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0;
 var $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0;
 var $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0;
 var $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0;
 var $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0;
 var $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0;
 var $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0;
 var $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0;
 var $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0;
 var $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0;
 var $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0;
 var $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0;
 var $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0;
 var $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0;
 var $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0;
 var $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0;
 var $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0;
 var $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0;
 var $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0;
 var $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0;
 var $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0;
 var $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0;
 var $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0;
 var $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0;
 var $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0;
 var $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0;
 var $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0;
 var $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $yypos0 = 0, $yypos1661 = 0, $yypos1664 = 0, $yypos1665 = 0, $yypos1668 = 0, $yypos1669 = 0, $yypos1670 = 0, $yypos1672 = 0;
 var $yypos1674 = 0, $yypos1675 = 0, $yypos1676 = 0, $yypos1678 = 0, $yypos1679 = 0, $yypos1682 = 0, $yypos1683 = 0, $yypos1684 = 0, $yypos1686 = 0, $yypos1688 = 0, $yypos1689 = 0, $yypos1690 = 0, $yypos1692 = 0, $yypos1695 = 0, $yypos1696 = 0, $yypos1699 = 0, $yypos1700 = 0, $yypos1701 = 0, $yypos1703 = 0, $yypos1705 = 0;
 var $yypos1706 = 0, $yypos1707 = 0, $yypos1709 = 0, $yypos1710 = 0, $yypos1713 = 0, $yypos1714 = 0, $yypos1715 = 0, $yypos1717 = 0, $yypos1719 = 0, $yypos1720 = 0, $yypos1721 = 0, $yypos1723 = 0, $yypos1726 = 0, $yypos1727 = 0, $yypos1730 = 0, $yypos1731 = 0, $yypos1732 = 0, $yypos1734 = 0, $yypos1736 = 0, $yypos1737 = 0;
 var $yypos1738 = 0, $yypos1740 = 0, $yypos1741 = 0, $yypos1744 = 0, $yypos1745 = 0, $yypos1746 = 0, $yypos1748 = 0, $yypos1750 = 0, $yypos1751 = 0, $yypos1752 = 0, $yypos1754 = 0, $yypos1757 = 0, $yypos1758 = 0, $yypos1761 = 0, $yypos1762 = 0, $yypos1763 = 0, $yypos1765 = 0, $yypos1767 = 0, $yypos1768 = 0, $yypos1769 = 0;
 var $yypos1771 = 0, $yypos1772 = 0, $yypos1775 = 0, $yypos1776 = 0, $yypos1777 = 0, $yypos1779 = 0, $yypos1781 = 0, $yypos1782 = 0, $yypos1783 = 0, $yypos1785 = 0, $yypos1787 = 0, $yypos1788 = 0, $yypos1791 = 0, $yypos1792 = 0, $yypos1793 = 0, $yypos1795 = 0, $yypos1797 = 0, $yypos1798 = 0, $yypos1799 = 0, $yypos1801 = 0;
 var $yypos1802 = 0, $yypos1805 = 0, $yypos1806 = 0, $yypos1807 = 0, $yypos1809 = 0, $yypos1811 = 0, $yypos1812 = 0, $yypos1813 = 0, $yypos1815 = 0, $yythunkpos0 = 0, $yythunkpos1661 = 0, $yythunkpos1664 = 0, $yythunkpos1665 = 0, $yythunkpos1668 = 0, $yythunkpos1669 = 0, $yythunkpos1670 = 0, $yythunkpos1672 = 0, $yythunkpos1674 = 0, $yythunkpos1675 = 0, $yythunkpos1676 = 0;
 var $yythunkpos1678 = 0, $yythunkpos1679 = 0, $yythunkpos1682 = 0, $yythunkpos1683 = 0, $yythunkpos1684 = 0, $yythunkpos1686 = 0, $yythunkpos1688 = 0, $yythunkpos1689 = 0, $yythunkpos1690 = 0, $yythunkpos1692 = 0, $yythunkpos1695 = 0, $yythunkpos1696 = 0, $yythunkpos1699 = 0, $yythunkpos1700 = 0, $yythunkpos1701 = 0, $yythunkpos1703 = 0, $yythunkpos1705 = 0, $yythunkpos1706 = 0, $yythunkpos1707 = 0, $yythunkpos1709 = 0;
 var $yythunkpos1710 = 0, $yythunkpos1713 = 0, $yythunkpos1714 = 0, $yythunkpos1715 = 0, $yythunkpos1717 = 0, $yythunkpos1719 = 0, $yythunkpos1720 = 0, $yythunkpos1721 = 0, $yythunkpos1723 = 0, $yythunkpos1726 = 0, $yythunkpos1727 = 0, $yythunkpos1730 = 0, $yythunkpos1731 = 0, $yythunkpos1732 = 0, $yythunkpos1734 = 0, $yythunkpos1736 = 0, $yythunkpos1737 = 0, $yythunkpos1738 = 0, $yythunkpos1740 = 0, $yythunkpos1741 = 0;
 var $yythunkpos1744 = 0, $yythunkpos1745 = 0, $yythunkpos1746 = 0, $yythunkpos1748 = 0, $yythunkpos1750 = 0, $yythunkpos1751 = 0, $yythunkpos1752 = 0, $yythunkpos1754 = 0, $yythunkpos1757 = 0, $yythunkpos1758 = 0, $yythunkpos1761 = 0, $yythunkpos1762 = 0, $yythunkpos1763 = 0, $yythunkpos1765 = 0, $yythunkpos1767 = 0, $yythunkpos1768 = 0, $yythunkpos1769 = 0, $yythunkpos1771 = 0, $yythunkpos1772 = 0, $yythunkpos1775 = 0;
 var $yythunkpos1776 = 0, $yythunkpos1777 = 0, $yythunkpos1779 = 0, $yythunkpos1781 = 0, $yythunkpos1782 = 0, $yythunkpos1783 = 0, $yythunkpos1785 = 0, $yythunkpos1787 = 0, $yythunkpos1788 = 0, $yythunkpos1791 = 0, $yythunkpos1792 = 0, $yythunkpos1793 = 0, $yythunkpos1795 = 0, $yythunkpos1797 = 0, $yythunkpos1798 = 0, $yythunkpos1799 = 0, $yythunkpos1801 = 0, $yythunkpos1802 = 0, $yythunkpos1805 = 0, $yythunkpos1806 = 0;
 var $yythunkpos1807 = 0, $yythunkpos1809 = 0, $yythunkpos1811 = 0, $yythunkpos1812 = 0, $yythunkpos1813 = 0, $yythunkpos1815 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 784|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos1661 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos1661 = $13;
 $14 = $1;
 $15 = (_yy_Ticks1($14)|0);
 $16 = ($15|0)!=(0);
 L1: do {
  if ($16) {
   $17 = $1;
   $18 = (_yy_Sp($17)|0);
   $19 = ($18|0)!=(0);
   if (!($19)) {
    label = 90;
    break;
   }
   $20 = $1;
   $21 = $1;
   $22 = (($21) + 28|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $1;
   $25 = (($24) + 32|0);
   $26 = HEAP32[$25>>2]|0;
   (_yyText($20,$23,$26)|0);
   $27 = $1;
   $28 = (($27) + 12|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $1;
   $31 = (($30) + 28|0);
   HEAP32[$31>>2] = $29;
   $32 = $1;
   $33 = (($32) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   $yypos1665 = $34;
   $35 = $1;
   $36 = (($35) + 44|0);
   $37 = HEAP32[$36>>2]|0;
   $yythunkpos1665 = $37;
   $38 = $1;
   $39 = (($38) + 12|0);
   $40 = HEAP32[$39>>2]|0;
   $yypos1669 = $40;
   $41 = $1;
   $42 = (($41) + 44|0);
   $43 = HEAP32[$42>>2]|0;
   $yythunkpos1669 = $43;
   $44 = $1;
   $45 = (_yymatchChar($44,96)|0);
   $46 = ($45|0)!=(0);
   do {
    if ($46) {
     label = 19;
    } else {
     $47 = $yypos1669;
     $48 = $1;
     $49 = (($48) + 12|0);
     HEAP32[$49>>2] = $47;
     $50 = $yythunkpos1669;
     $51 = $1;
     $52 = (($51) + 44|0);
     HEAP32[$52>>2] = $50;
     $53 = $1;
     $54 = (_yy_Nonspacechar($53)|0);
     $55 = ($54|0)!=(0);
     if (!($55)) {
      label = 19;
      break;
     }
     while(1) {
      $56 = $1;
      $57 = (($56) + 12|0);
      $58 = HEAP32[$57>>2]|0;
      $yypos1668 = $58;
      $59 = $1;
      $60 = (($59) + 44|0);
      $61 = HEAP32[$60>>2]|0;
      $yythunkpos1668 = $61;
      $62 = $1;
      $63 = (($62) + 12|0);
      $64 = HEAP32[$63>>2]|0;
      $yypos1670 = $64;
      $65 = $1;
      $66 = (($65) + 44|0);
      $67 = HEAP32[$66>>2]|0;
      $yythunkpos1670 = $67;
      $68 = $1;
      $69 = (_yymatchChar($68,96)|0);
      $70 = ($69|0)!=(0);
      if ($70) {
       label = 14;
       break;
      }
      $71 = $yypos1670;
      $72 = $1;
      $73 = (($72) + 12|0);
      HEAP32[$73>>2] = $71;
      $74 = $yythunkpos1670;
      $75 = $1;
      $76 = (($75) + 44|0);
      HEAP32[$76>>2] = $74;
      $77 = $1;
      $78 = (_yy_Nonspacechar($77)|0);
      $79 = ($78|0)!=(0);
      if (!($79)) {
       label = 16;
       break;
      }
     }
     if ((label|0) == 14) {
     }
     else if ((label|0) == 16) {
     }
     $80 = $yypos1668;
     $81 = $1;
     $82 = (($81) + 12|0);
     HEAP32[$82>>2] = $80;
     $83 = $yythunkpos1668;
     $84 = $1;
     $85 = (($84) + 44|0);
     HEAP32[$85>>2] = $83;
    }
   } while(0);
   L24: do {
    if ((label|0) == 19) {
     $86 = $yypos1665;
     $87 = $1;
     $88 = (($87) + 12|0);
     HEAP32[$88>>2] = $86;
     $89 = $yythunkpos1665;
     $90 = $1;
     $91 = (($90) + 44|0);
     HEAP32[$91>>2] = $89;
     $92 = $1;
     $93 = (($92) + 12|0);
     $94 = HEAP32[$93>>2]|0;
     $yypos1672 = $94;
     $95 = $1;
     $96 = (($95) + 44|0);
     $97 = HEAP32[$96>>2]|0;
     $yythunkpos1672 = $97;
     $98 = $1;
     $99 = (_yy_Ticks1($98)|0);
     $100 = ($99|0)!=(0);
     do {
      if ($100) {
      } else {
       $101 = $yypos1672;
       $102 = $1;
       $103 = (($102) + 12|0);
       HEAP32[$103>>2] = $101;
       $104 = $yythunkpos1672;
       $105 = $1;
       $106 = (($105) + 44|0);
       HEAP32[$106>>2] = $104;
       $107 = $1;
       $108 = (_yymatchChar($107,96)|0);
       $109 = ($108|0)!=(0);
       if (!($109)) {
        break;
       }
       while(1) {
        $110 = $1;
        $111 = (($110) + 12|0);
        $112 = HEAP32[$111>>2]|0;
        $yypos1674 = $112;
        $113 = $1;
        $114 = (($113) + 44|0);
        $115 = HEAP32[$114>>2]|0;
        $yythunkpos1674 = $115;
        $116 = $1;
        $117 = (_yymatchChar($116,96)|0);
        $118 = ($117|0)!=(0);
        if (!($118)) {
         break;
        }
       }
       $119 = $yypos1674;
       $120 = $1;
       $121 = (($120) + 12|0);
       HEAP32[$121>>2] = $119;
       $122 = $yythunkpos1674;
       $123 = $1;
       $124 = (($123) + 44|0);
       HEAP32[$124>>2] = $122;
       break L24;
      }
     } while(0);
     $125 = $yypos1665;
     $126 = $1;
     $127 = (($126) + 12|0);
     HEAP32[$127>>2] = $125;
     $128 = $yythunkpos1665;
     $129 = $1;
     $130 = (($129) + 44|0);
     HEAP32[$130>>2] = $128;
     $131 = $1;
     $132 = (($131) + 12|0);
     $133 = HEAP32[$132>>2]|0;
     $yypos1675 = $133;
     $134 = $1;
     $135 = (($134) + 44|0);
     $136 = HEAP32[$135>>2]|0;
     $yythunkpos1675 = $136;
     $137 = $1;
     $138 = (_yy_Sp($137)|0);
     $139 = ($138|0)!=(0);
     do {
      if ($139) {
       $140 = $1;
       $141 = (_yy_Ticks1($140)|0);
       $142 = ($141|0)!=(0);
       if ($142) {
        label = 90;
        break L1;
       } else {
        break;
       }
      } else {
      }
     } while(0);
     $143 = $yypos1675;
     $144 = $1;
     $145 = (($144) + 12|0);
     HEAP32[$145>>2] = $143;
     $146 = $yythunkpos1675;
     $147 = $1;
     $148 = (($147) + 44|0);
     HEAP32[$148>>2] = $146;
     $149 = $1;
     $150 = (($149) + 12|0);
     $151 = HEAP32[$150>>2]|0;
     $yypos1676 = $151;
     $152 = $1;
     $153 = (($152) + 44|0);
     $154 = HEAP32[$153>>2]|0;
     $yythunkpos1676 = $154;
     $155 = $1;
     $156 = (_yy_Spacechar($155)|0);
     $157 = ($156|0)!=(0);
     if ($157) {
     } else {
      $158 = $yypos1676;
      $159 = $1;
      $160 = (($159) + 12|0);
      HEAP32[$160>>2] = $158;
      $161 = $yythunkpos1676;
      $162 = $1;
      $163 = (($162) + 44|0);
      HEAP32[$163>>2] = $161;
      $164 = $1;
      $165 = (_yy_Newline($164)|0);
      $166 = ($165|0)!=(0);
      if (!($166)) {
       label = 90;
       break L1;
      }
      $167 = $1;
      $168 = (($167) + 12|0);
      $169 = HEAP32[$168>>2]|0;
      $yypos1678 = $169;
      $170 = $1;
      $171 = (($170) + 44|0);
      $172 = HEAP32[$171>>2]|0;
      $yythunkpos1678 = $172;
      $173 = $1;
      $174 = (_yy_BlankLine($173)|0);
      $175 = ($174|0)!=(0);
      if ($175) {
       label = 90;
       break L1;
      }
      $176 = $yypos1678;
      $177 = $1;
      $178 = (($177) + 12|0);
      HEAP32[$178>>2] = $176;
      $179 = $yythunkpos1678;
      $180 = $1;
      $181 = (($180) + 44|0);
      HEAP32[$181>>2] = $179;
     }
    }
   } while(0);
   L59: while(1) {
    $182 = $1;
    $183 = (($182) + 12|0);
    $184 = HEAP32[$183>>2]|0;
    $yypos1664 = $184;
    $185 = $1;
    $186 = (($185) + 44|0);
    $187 = HEAP32[$186>>2]|0;
    $yythunkpos1664 = $187;
    $188 = $1;
    $189 = (($188) + 12|0);
    $190 = HEAP32[$189>>2]|0;
    $yypos1679 = $190;
    $191 = $1;
    $192 = (($191) + 44|0);
    $193 = HEAP32[$192>>2]|0;
    $yythunkpos1679 = $193;
    $194 = $1;
    $195 = (($194) + 12|0);
    $196 = HEAP32[$195>>2]|0;
    $yypos1683 = $196;
    $197 = $1;
    $198 = (($197) + 44|0);
    $199 = HEAP32[$198>>2]|0;
    $yythunkpos1683 = $199;
    $200 = $1;
    $201 = (_yymatchChar($200,96)|0);
    $202 = ($201|0)!=(0);
    do {
     if ($202) {
      label = 58;
     } else {
      $203 = $yypos1683;
      $204 = $1;
      $205 = (($204) + 12|0);
      HEAP32[$205>>2] = $203;
      $206 = $yythunkpos1683;
      $207 = $1;
      $208 = (($207) + 44|0);
      HEAP32[$208>>2] = $206;
      $209 = $1;
      $210 = (_yy_Nonspacechar($209)|0);
      $211 = ($210|0)!=(0);
      if (!($211)) {
       label = 58;
       break;
      }
      while(1) {
       $212 = $1;
       $213 = (($212) + 12|0);
       $214 = HEAP32[$213>>2]|0;
       $yypos1682 = $214;
       $215 = $1;
       $216 = (($215) + 44|0);
       $217 = HEAP32[$216>>2]|0;
       $yythunkpos1682 = $217;
       $218 = $1;
       $219 = (($218) + 12|0);
       $220 = HEAP32[$219>>2]|0;
       $yypos1684 = $220;
       $221 = $1;
       $222 = (($221) + 44|0);
       $223 = HEAP32[$222>>2]|0;
       $yythunkpos1684 = $223;
       $224 = $1;
       $225 = (_yymatchChar($224,96)|0);
       $226 = ($225|0)!=(0);
       if ($226) {
        label = 53;
        break;
       }
       $227 = $yypos1684;
       $228 = $1;
       $229 = (($228) + 12|0);
       HEAP32[$229>>2] = $227;
       $230 = $yythunkpos1684;
       $231 = $1;
       $232 = (($231) + 44|0);
       HEAP32[$232>>2] = $230;
       $233 = $1;
       $234 = (_yy_Nonspacechar($233)|0);
       $235 = ($234|0)!=(0);
       if (!($235)) {
        label = 55;
        break;
       }
      }
      if ((label|0) == 53) {
       label = 0;
      }
      else if ((label|0) == 55) {
       label = 0;
      }
      $236 = $yypos1682;
      $237 = $1;
      $238 = (($237) + 12|0);
      HEAP32[$238>>2] = $236;
      $239 = $yythunkpos1682;
      $240 = $1;
      $241 = (($240) + 44|0);
      HEAP32[$241>>2] = $239;
     }
    } while(0);
    L77: do {
     if ((label|0) == 58) {
      label = 0;
      $242 = $yypos1679;
      $243 = $1;
      $244 = (($243) + 12|0);
      HEAP32[$244>>2] = $242;
      $245 = $yythunkpos1679;
      $246 = $1;
      $247 = (($246) + 44|0);
      HEAP32[$247>>2] = $245;
      $248 = $1;
      $249 = (($248) + 12|0);
      $250 = HEAP32[$249>>2]|0;
      $yypos1686 = $250;
      $251 = $1;
      $252 = (($251) + 44|0);
      $253 = HEAP32[$252>>2]|0;
      $yythunkpos1686 = $253;
      $254 = $1;
      $255 = (_yy_Ticks1($254)|0);
      $256 = ($255|0)!=(0);
      do {
       if ($256) {
       } else {
        $257 = $yypos1686;
        $258 = $1;
        $259 = (($258) + 12|0);
        HEAP32[$259>>2] = $257;
        $260 = $yythunkpos1686;
        $261 = $1;
        $262 = (($261) + 44|0);
        HEAP32[$262>>2] = $260;
        $263 = $1;
        $264 = (_yymatchChar($263,96)|0);
        $265 = ($264|0)!=(0);
        if (!($265)) {
         break;
        }
        while(1) {
         $266 = $1;
         $267 = (($266) + 12|0);
         $268 = HEAP32[$267>>2]|0;
         $yypos1688 = $268;
         $269 = $1;
         $270 = (($269) + 44|0);
         $271 = HEAP32[$270>>2]|0;
         $yythunkpos1688 = $271;
         $272 = $1;
         $273 = (_yymatchChar($272,96)|0);
         $274 = ($273|0)!=(0);
         if (!($274)) {
          break;
         }
        }
        $275 = $yypos1688;
        $276 = $1;
        $277 = (($276) + 12|0);
        HEAP32[$277>>2] = $275;
        $278 = $yythunkpos1688;
        $279 = $1;
        $280 = (($279) + 44|0);
        HEAP32[$280>>2] = $278;
        break L77;
       }
      } while(0);
      $281 = $yypos1679;
      $282 = $1;
      $283 = (($282) + 12|0);
      HEAP32[$283>>2] = $281;
      $284 = $yythunkpos1679;
      $285 = $1;
      $286 = (($285) + 44|0);
      HEAP32[$286>>2] = $284;
      $287 = $1;
      $288 = (($287) + 12|0);
      $289 = HEAP32[$288>>2]|0;
      $yypos1689 = $289;
      $290 = $1;
      $291 = (($290) + 44|0);
      $292 = HEAP32[$291>>2]|0;
      $yythunkpos1689 = $292;
      $293 = $1;
      $294 = (_yy_Sp($293)|0);
      $295 = ($294|0)!=(0);
      if ($295) {
       $296 = $1;
       $297 = (_yy_Ticks1($296)|0);
       $298 = ($297|0)!=(0);
       if ($298) {
        label = 72;
        break L59;
       }
      } else {
      }
      $299 = $yypos1689;
      $300 = $1;
      $301 = (($300) + 12|0);
      HEAP32[$301>>2] = $299;
      $302 = $yythunkpos1689;
      $303 = $1;
      $304 = (($303) + 44|0);
      HEAP32[$304>>2] = $302;
      $305 = $1;
      $306 = (($305) + 12|0);
      $307 = HEAP32[$306>>2]|0;
      $yypos1690 = $307;
      $308 = $1;
      $309 = (($308) + 44|0);
      $310 = HEAP32[$309>>2]|0;
      $yythunkpos1690 = $310;
      $311 = $1;
      $312 = (_yy_Spacechar($311)|0);
      $313 = ($312|0)!=(0);
      if ($313) {
      } else {
       $314 = $yypos1690;
       $315 = $1;
       $316 = (($315) + 12|0);
       HEAP32[$316>>2] = $314;
       $317 = $yythunkpos1690;
       $318 = $1;
       $319 = (($318) + 44|0);
       HEAP32[$319>>2] = $317;
       $320 = $1;
       $321 = (_yy_Newline($320)|0);
       $322 = ($321|0)!=(0);
       if (!($322)) {
        label = 77;
        break L59;
       }
       $323 = $1;
       $324 = (($323) + 12|0);
       $325 = HEAP32[$324>>2]|0;
       $yypos1692 = $325;
       $326 = $1;
       $327 = (($326) + 44|0);
       $328 = HEAP32[$327>>2]|0;
       $yythunkpos1692 = $328;
       $329 = $1;
       $330 = (_yy_BlankLine($329)|0);
       $331 = ($330|0)!=(0);
       if ($331) {
        label = 80;
        break L59;
       }
       $332 = $yypos1692;
       $333 = $1;
       $334 = (($333) + 12|0);
       HEAP32[$334>>2] = $332;
       $335 = $yythunkpos1692;
       $336 = $1;
       $337 = (($336) + 44|0);
       HEAP32[$337>>2] = $335;
      }
     }
    } while(0);
   }
   if ((label|0) == 72) {
   }
   else if ((label|0) == 77) {
   }
   else if ((label|0) == 80) {
   }
   $338 = $yypos1664;
   $339 = $1;
   $340 = (($339) + 12|0);
   HEAP32[$340>>2] = $338;
   $341 = $yythunkpos1664;
   $342 = $1;
   $343 = (($342) + 44|0);
   HEAP32[$343>>2] = $341;
   $344 = $1;
   $345 = $1;
   $346 = (($345) + 28|0);
   $347 = HEAP32[$346>>2]|0;
   $348 = $1;
   $349 = (($348) + 32|0);
   $350 = HEAP32[$349>>2]|0;
   (_yyText($344,$347,$350)|0);
   $351 = $1;
   $352 = (($351) + 12|0);
   $353 = HEAP32[$352>>2]|0;
   $354 = $1;
   $355 = (($354) + 32|0);
   HEAP32[$355>>2] = $353;
   $356 = $1;
   $357 = (_yy_Sp($356)|0);
   $358 = ($357|0)!=(0);
   if (!($358)) {
    label = 90;
    break;
   }
   $359 = $1;
   $360 = (_yy_Ticks1($359)|0);
   $361 = ($360|0)!=(0);
   if ($361) {
    break;
   } else {
    label = 90;
    break;
   }
  } else {
   label = 90;
  }
 } while(0);
 L118: do {
  if ((label|0) == 90) {
   $362 = $yypos1661;
   $363 = $1;
   $364 = (($363) + 12|0);
   HEAP32[$364>>2] = $362;
   $365 = $yythunkpos1661;
   $366 = $1;
   $367 = (($366) + 44|0);
   HEAP32[$367>>2] = $365;
   $368 = $1;
   $369 = (_yy_Ticks2($368)|0);
   $370 = ($369|0)!=(0);
   L120: do {
    if ($370) {
     $371 = $1;
     $372 = (_yy_Sp($371)|0);
     $373 = ($372|0)!=(0);
     if (!($373)) {
      break;
     }
     $374 = $1;
     $375 = $1;
     $376 = (($375) + 28|0);
     $377 = HEAP32[$376>>2]|0;
     $378 = $1;
     $379 = (($378) + 32|0);
     $380 = HEAP32[$379>>2]|0;
     (_yyText($374,$377,$380)|0);
     $381 = $1;
     $382 = (($381) + 12|0);
     $383 = HEAP32[$382>>2]|0;
     $384 = $1;
     $385 = (($384) + 28|0);
     HEAP32[$385>>2] = $383;
     $386 = $1;
     $387 = (($386) + 12|0);
     $388 = HEAP32[$387>>2]|0;
     $yypos1696 = $388;
     $389 = $1;
     $390 = (($389) + 44|0);
     $391 = HEAP32[$390>>2]|0;
     $yythunkpos1696 = $391;
     $392 = $1;
     $393 = (($392) + 12|0);
     $394 = HEAP32[$393>>2]|0;
     $yypos1700 = $394;
     $395 = $1;
     $396 = (($395) + 44|0);
     $397 = HEAP32[$396>>2]|0;
     $yythunkpos1700 = $397;
     $398 = $1;
     $399 = (_yymatchChar($398,96)|0);
     $400 = ($399|0)!=(0);
     do {
      if ($400) {
       label = 108;
      } else {
       $401 = $yypos1700;
       $402 = $1;
       $403 = (($402) + 12|0);
       HEAP32[$403>>2] = $401;
       $404 = $yythunkpos1700;
       $405 = $1;
       $406 = (($405) + 44|0);
       HEAP32[$406>>2] = $404;
       $407 = $1;
       $408 = (_yy_Nonspacechar($407)|0);
       $409 = ($408|0)!=(0);
       if (!($409)) {
        label = 108;
        break;
       }
       while(1) {
        $410 = $1;
        $411 = (($410) + 12|0);
        $412 = HEAP32[$411>>2]|0;
        $yypos1699 = $412;
        $413 = $1;
        $414 = (($413) + 44|0);
        $415 = HEAP32[$414>>2]|0;
        $yythunkpos1699 = $415;
        $416 = $1;
        $417 = (($416) + 12|0);
        $418 = HEAP32[$417>>2]|0;
        $yypos1701 = $418;
        $419 = $1;
        $420 = (($419) + 44|0);
        $421 = HEAP32[$420>>2]|0;
        $yythunkpos1701 = $421;
        $422 = $1;
        $423 = (_yymatchChar($422,96)|0);
        $424 = ($423|0)!=(0);
        if ($424) {
         label = 103;
         break;
        }
        $425 = $yypos1701;
        $426 = $1;
        $427 = (($426) + 12|0);
        HEAP32[$427>>2] = $425;
        $428 = $yythunkpos1701;
        $429 = $1;
        $430 = (($429) + 44|0);
        HEAP32[$430>>2] = $428;
        $431 = $1;
        $432 = (_yy_Nonspacechar($431)|0);
        $433 = ($432|0)!=(0);
        if (!($433)) {
         label = 105;
         break;
        }
       }
       if ((label|0) == 103) {
       }
       else if ((label|0) == 105) {
       }
       $434 = $yypos1699;
       $435 = $1;
       $436 = (($435) + 12|0);
       HEAP32[$436>>2] = $434;
       $437 = $yythunkpos1699;
       $438 = $1;
       $439 = (($438) + 44|0);
       HEAP32[$439>>2] = $437;
      }
     } while(0);
     L142: do {
      if ((label|0) == 108) {
       $440 = $yypos1696;
       $441 = $1;
       $442 = (($441) + 12|0);
       HEAP32[$442>>2] = $440;
       $443 = $yythunkpos1696;
       $444 = $1;
       $445 = (($444) + 44|0);
       HEAP32[$445>>2] = $443;
       $446 = $1;
       $447 = (($446) + 12|0);
       $448 = HEAP32[$447>>2]|0;
       $yypos1703 = $448;
       $449 = $1;
       $450 = (($449) + 44|0);
       $451 = HEAP32[$450>>2]|0;
       $yythunkpos1703 = $451;
       $452 = $1;
       $453 = (_yy_Ticks2($452)|0);
       $454 = ($453|0)!=(0);
       do {
        if ($454) {
        } else {
         $455 = $yypos1703;
         $456 = $1;
         $457 = (($456) + 12|0);
         HEAP32[$457>>2] = $455;
         $458 = $yythunkpos1703;
         $459 = $1;
         $460 = (($459) + 44|0);
         HEAP32[$460>>2] = $458;
         $461 = $1;
         $462 = (_yymatchChar($461,96)|0);
         $463 = ($462|0)!=(0);
         if (!($463)) {
          break;
         }
         while(1) {
          $464 = $1;
          $465 = (($464) + 12|0);
          $466 = HEAP32[$465>>2]|0;
          $yypos1705 = $466;
          $467 = $1;
          $468 = (($467) + 44|0);
          $469 = HEAP32[$468>>2]|0;
          $yythunkpos1705 = $469;
          $470 = $1;
          $471 = (_yymatchChar($470,96)|0);
          $472 = ($471|0)!=(0);
          if (!($472)) {
           break;
          }
         }
         $473 = $yypos1705;
         $474 = $1;
         $475 = (($474) + 12|0);
         HEAP32[$475>>2] = $473;
         $476 = $yythunkpos1705;
         $477 = $1;
         $478 = (($477) + 44|0);
         HEAP32[$478>>2] = $476;
         break L142;
        }
       } while(0);
       $479 = $yypos1696;
       $480 = $1;
       $481 = (($480) + 12|0);
       HEAP32[$481>>2] = $479;
       $482 = $yythunkpos1696;
       $483 = $1;
       $484 = (($483) + 44|0);
       HEAP32[$484>>2] = $482;
       $485 = $1;
       $486 = (($485) + 12|0);
       $487 = HEAP32[$486>>2]|0;
       $yypos1706 = $487;
       $488 = $1;
       $489 = (($488) + 44|0);
       $490 = HEAP32[$489>>2]|0;
       $yythunkpos1706 = $490;
       $491 = $1;
       $492 = (_yy_Sp($491)|0);
       $493 = ($492|0)!=(0);
       do {
        if ($493) {
         $494 = $1;
         $495 = (_yy_Ticks2($494)|0);
         $496 = ($495|0)!=(0);
         if ($496) {
          break L120;
         } else {
          break;
         }
        } else {
        }
       } while(0);
       $497 = $yypos1706;
       $498 = $1;
       $499 = (($498) + 12|0);
       HEAP32[$499>>2] = $497;
       $500 = $yythunkpos1706;
       $501 = $1;
       $502 = (($501) + 44|0);
       HEAP32[$502>>2] = $500;
       $503 = $1;
       $504 = (($503) + 12|0);
       $505 = HEAP32[$504>>2]|0;
       $yypos1707 = $505;
       $506 = $1;
       $507 = (($506) + 44|0);
       $508 = HEAP32[$507>>2]|0;
       $yythunkpos1707 = $508;
       $509 = $1;
       $510 = (_yy_Spacechar($509)|0);
       $511 = ($510|0)!=(0);
       if ($511) {
       } else {
        $512 = $yypos1707;
        $513 = $1;
        $514 = (($513) + 12|0);
        HEAP32[$514>>2] = $512;
        $515 = $yythunkpos1707;
        $516 = $1;
        $517 = (($516) + 44|0);
        HEAP32[$517>>2] = $515;
        $518 = $1;
        $519 = (_yy_Newline($518)|0);
        $520 = ($519|0)!=(0);
        if (!($520)) {
         break L120;
        }
        $521 = $1;
        $522 = (($521) + 12|0);
        $523 = HEAP32[$522>>2]|0;
        $yypos1709 = $523;
        $524 = $1;
        $525 = (($524) + 44|0);
        $526 = HEAP32[$525>>2]|0;
        $yythunkpos1709 = $526;
        $527 = $1;
        $528 = (_yy_BlankLine($527)|0);
        $529 = ($528|0)!=(0);
        if ($529) {
         break L120;
        }
        $530 = $yypos1709;
        $531 = $1;
        $532 = (($531) + 12|0);
        HEAP32[$532>>2] = $530;
        $533 = $yythunkpos1709;
        $534 = $1;
        $535 = (($534) + 44|0);
        HEAP32[$535>>2] = $533;
       }
      }
     } while(0);
     L177: while(1) {
      $536 = $1;
      $537 = (($536) + 12|0);
      $538 = HEAP32[$537>>2]|0;
      $yypos1695 = $538;
      $539 = $1;
      $540 = (($539) + 44|0);
      $541 = HEAP32[$540>>2]|0;
      $yythunkpos1695 = $541;
      $542 = $1;
      $543 = (($542) + 12|0);
      $544 = HEAP32[$543>>2]|0;
      $yypos1710 = $544;
      $545 = $1;
      $546 = (($545) + 44|0);
      $547 = HEAP32[$546>>2]|0;
      $yythunkpos1710 = $547;
      $548 = $1;
      $549 = (($548) + 12|0);
      $550 = HEAP32[$549>>2]|0;
      $yypos1714 = $550;
      $551 = $1;
      $552 = (($551) + 44|0);
      $553 = HEAP32[$552>>2]|0;
      $yythunkpos1714 = $553;
      $554 = $1;
      $555 = (_yymatchChar($554,96)|0);
      $556 = ($555|0)!=(0);
      do {
       if ($556) {
        label = 147;
       } else {
        $557 = $yypos1714;
        $558 = $1;
        $559 = (($558) + 12|0);
        HEAP32[$559>>2] = $557;
        $560 = $yythunkpos1714;
        $561 = $1;
        $562 = (($561) + 44|0);
        HEAP32[$562>>2] = $560;
        $563 = $1;
        $564 = (_yy_Nonspacechar($563)|0);
        $565 = ($564|0)!=(0);
        if (!($565)) {
         label = 147;
         break;
        }
        while(1) {
         $566 = $1;
         $567 = (($566) + 12|0);
         $568 = HEAP32[$567>>2]|0;
         $yypos1713 = $568;
         $569 = $1;
         $570 = (($569) + 44|0);
         $571 = HEAP32[$570>>2]|0;
         $yythunkpos1713 = $571;
         $572 = $1;
         $573 = (($572) + 12|0);
         $574 = HEAP32[$573>>2]|0;
         $yypos1715 = $574;
         $575 = $1;
         $576 = (($575) + 44|0);
         $577 = HEAP32[$576>>2]|0;
         $yythunkpos1715 = $577;
         $578 = $1;
         $579 = (_yymatchChar($578,96)|0);
         $580 = ($579|0)!=(0);
         if ($580) {
          label = 142;
          break;
         }
         $581 = $yypos1715;
         $582 = $1;
         $583 = (($582) + 12|0);
         HEAP32[$583>>2] = $581;
         $584 = $yythunkpos1715;
         $585 = $1;
         $586 = (($585) + 44|0);
         HEAP32[$586>>2] = $584;
         $587 = $1;
         $588 = (_yy_Nonspacechar($587)|0);
         $589 = ($588|0)!=(0);
         if (!($589)) {
          label = 144;
          break;
         }
        }
        if ((label|0) == 142) {
         label = 0;
        }
        else if ((label|0) == 144) {
         label = 0;
        }
        $590 = $yypos1713;
        $591 = $1;
        $592 = (($591) + 12|0);
        HEAP32[$592>>2] = $590;
        $593 = $yythunkpos1713;
        $594 = $1;
        $595 = (($594) + 44|0);
        HEAP32[$595>>2] = $593;
       }
      } while(0);
      L195: do {
       if ((label|0) == 147) {
        label = 0;
        $596 = $yypos1710;
        $597 = $1;
        $598 = (($597) + 12|0);
        HEAP32[$598>>2] = $596;
        $599 = $yythunkpos1710;
        $600 = $1;
        $601 = (($600) + 44|0);
        HEAP32[$601>>2] = $599;
        $602 = $1;
        $603 = (($602) + 12|0);
        $604 = HEAP32[$603>>2]|0;
        $yypos1717 = $604;
        $605 = $1;
        $606 = (($605) + 44|0);
        $607 = HEAP32[$606>>2]|0;
        $yythunkpos1717 = $607;
        $608 = $1;
        $609 = (_yy_Ticks2($608)|0);
        $610 = ($609|0)!=(0);
        do {
         if ($610) {
         } else {
          $611 = $yypos1717;
          $612 = $1;
          $613 = (($612) + 12|0);
          HEAP32[$613>>2] = $611;
          $614 = $yythunkpos1717;
          $615 = $1;
          $616 = (($615) + 44|0);
          HEAP32[$616>>2] = $614;
          $617 = $1;
          $618 = (_yymatchChar($617,96)|0);
          $619 = ($618|0)!=(0);
          if (!($619)) {
           break;
          }
          while(1) {
           $620 = $1;
           $621 = (($620) + 12|0);
           $622 = HEAP32[$621>>2]|0;
           $yypos1719 = $622;
           $623 = $1;
           $624 = (($623) + 44|0);
           $625 = HEAP32[$624>>2]|0;
           $yythunkpos1719 = $625;
           $626 = $1;
           $627 = (_yymatchChar($626,96)|0);
           $628 = ($627|0)!=(0);
           if (!($628)) {
            break;
           }
          }
          $629 = $yypos1719;
          $630 = $1;
          $631 = (($630) + 12|0);
          HEAP32[$631>>2] = $629;
          $632 = $yythunkpos1719;
          $633 = $1;
          $634 = (($633) + 44|0);
          HEAP32[$634>>2] = $632;
          break L195;
         }
        } while(0);
        $635 = $yypos1710;
        $636 = $1;
        $637 = (($636) + 12|0);
        HEAP32[$637>>2] = $635;
        $638 = $yythunkpos1710;
        $639 = $1;
        $640 = (($639) + 44|0);
        HEAP32[$640>>2] = $638;
        $641 = $1;
        $642 = (($641) + 12|0);
        $643 = HEAP32[$642>>2]|0;
        $yypos1720 = $643;
        $644 = $1;
        $645 = (($644) + 44|0);
        $646 = HEAP32[$645>>2]|0;
        $yythunkpos1720 = $646;
        $647 = $1;
        $648 = (_yy_Sp($647)|0);
        $649 = ($648|0)!=(0);
        if ($649) {
         $650 = $1;
         $651 = (_yy_Ticks2($650)|0);
         $652 = ($651|0)!=(0);
         if ($652) {
          label = 161;
          break L177;
         }
        } else {
        }
        $653 = $yypos1720;
        $654 = $1;
        $655 = (($654) + 12|0);
        HEAP32[$655>>2] = $653;
        $656 = $yythunkpos1720;
        $657 = $1;
        $658 = (($657) + 44|0);
        HEAP32[$658>>2] = $656;
        $659 = $1;
        $660 = (($659) + 12|0);
        $661 = HEAP32[$660>>2]|0;
        $yypos1721 = $661;
        $662 = $1;
        $663 = (($662) + 44|0);
        $664 = HEAP32[$663>>2]|0;
        $yythunkpos1721 = $664;
        $665 = $1;
        $666 = (_yy_Spacechar($665)|0);
        $667 = ($666|0)!=(0);
        if ($667) {
        } else {
         $668 = $yypos1721;
         $669 = $1;
         $670 = (($669) + 12|0);
         HEAP32[$670>>2] = $668;
         $671 = $yythunkpos1721;
         $672 = $1;
         $673 = (($672) + 44|0);
         HEAP32[$673>>2] = $671;
         $674 = $1;
         $675 = (_yy_Newline($674)|0);
         $676 = ($675|0)!=(0);
         if (!($676)) {
          label = 166;
          break L177;
         }
         $677 = $1;
         $678 = (($677) + 12|0);
         $679 = HEAP32[$678>>2]|0;
         $yypos1723 = $679;
         $680 = $1;
         $681 = (($680) + 44|0);
         $682 = HEAP32[$681>>2]|0;
         $yythunkpos1723 = $682;
         $683 = $1;
         $684 = (_yy_BlankLine($683)|0);
         $685 = ($684|0)!=(0);
         if ($685) {
          label = 169;
          break L177;
         }
         $686 = $yypos1723;
         $687 = $1;
         $688 = (($687) + 12|0);
         HEAP32[$688>>2] = $686;
         $689 = $yythunkpos1723;
         $690 = $1;
         $691 = (($690) + 44|0);
         HEAP32[$691>>2] = $689;
        }
       }
      } while(0);
     }
     if ((label|0) == 161) {
     }
     else if ((label|0) == 166) {
     }
     else if ((label|0) == 169) {
     }
     $692 = $yypos1695;
     $693 = $1;
     $694 = (($693) + 12|0);
     HEAP32[$694>>2] = $692;
     $695 = $yythunkpos1695;
     $696 = $1;
     $697 = (($696) + 44|0);
     HEAP32[$697>>2] = $695;
     $698 = $1;
     $699 = $1;
     $700 = (($699) + 28|0);
     $701 = HEAP32[$700>>2]|0;
     $702 = $1;
     $703 = (($702) + 32|0);
     $704 = HEAP32[$703>>2]|0;
     (_yyText($698,$701,$704)|0);
     $705 = $1;
     $706 = (($705) + 12|0);
     $707 = HEAP32[$706>>2]|0;
     $708 = $1;
     $709 = (($708) + 32|0);
     HEAP32[$709>>2] = $707;
     $710 = $1;
     $711 = (_yy_Sp($710)|0);
     $712 = ($711|0)!=(0);
     if (!($712)) {
      break;
     }
     $713 = $1;
     $714 = (_yy_Ticks2($713)|0);
     $715 = ($714|0)!=(0);
     if ($715) {
      break L118;
     } else {
      break;
     }
    } else {
    }
   } while(0);
   $716 = $yypos1661;
   $717 = $1;
   $718 = (($717) + 12|0);
   HEAP32[$718>>2] = $716;
   $719 = $yythunkpos1661;
   $720 = $1;
   $721 = (($720) + 44|0);
   HEAP32[$721>>2] = $719;
   $722 = $1;
   $723 = (_yy_Ticks3($722)|0);
   $724 = ($723|0)!=(0);
   L238: do {
    if ($724) {
     $725 = $1;
     $726 = (_yy_Sp($725)|0);
     $727 = ($726|0)!=(0);
     if (!($727)) {
      break;
     }
     $728 = $1;
     $729 = $1;
     $730 = (($729) + 28|0);
     $731 = HEAP32[$730>>2]|0;
     $732 = $1;
     $733 = (($732) + 32|0);
     $734 = HEAP32[$733>>2]|0;
     (_yyText($728,$731,$734)|0);
     $735 = $1;
     $736 = (($735) + 12|0);
     $737 = HEAP32[$736>>2]|0;
     $738 = $1;
     $739 = (($738) + 28|0);
     HEAP32[$739>>2] = $737;
     $740 = $1;
     $741 = (($740) + 12|0);
     $742 = HEAP32[$741>>2]|0;
     $yypos1727 = $742;
     $743 = $1;
     $744 = (($743) + 44|0);
     $745 = HEAP32[$744>>2]|0;
     $yythunkpos1727 = $745;
     $746 = $1;
     $747 = (($746) + 12|0);
     $748 = HEAP32[$747>>2]|0;
     $yypos1731 = $748;
     $749 = $1;
     $750 = (($749) + 44|0);
     $751 = HEAP32[$750>>2]|0;
     $yythunkpos1731 = $751;
     $752 = $1;
     $753 = (_yymatchChar($752,96)|0);
     $754 = ($753|0)!=(0);
     do {
      if ($754) {
       label = 197;
      } else {
       $755 = $yypos1731;
       $756 = $1;
       $757 = (($756) + 12|0);
       HEAP32[$757>>2] = $755;
       $758 = $yythunkpos1731;
       $759 = $1;
       $760 = (($759) + 44|0);
       HEAP32[$760>>2] = $758;
       $761 = $1;
       $762 = (_yy_Nonspacechar($761)|0);
       $763 = ($762|0)!=(0);
       if (!($763)) {
        label = 197;
        break;
       }
       while(1) {
        $764 = $1;
        $765 = (($764) + 12|0);
        $766 = HEAP32[$765>>2]|0;
        $yypos1730 = $766;
        $767 = $1;
        $768 = (($767) + 44|0);
        $769 = HEAP32[$768>>2]|0;
        $yythunkpos1730 = $769;
        $770 = $1;
        $771 = (($770) + 12|0);
        $772 = HEAP32[$771>>2]|0;
        $yypos1732 = $772;
        $773 = $1;
        $774 = (($773) + 44|0);
        $775 = HEAP32[$774>>2]|0;
        $yythunkpos1732 = $775;
        $776 = $1;
        $777 = (_yymatchChar($776,96)|0);
        $778 = ($777|0)!=(0);
        if ($778) {
         label = 192;
         break;
        }
        $779 = $yypos1732;
        $780 = $1;
        $781 = (($780) + 12|0);
        HEAP32[$781>>2] = $779;
        $782 = $yythunkpos1732;
        $783 = $1;
        $784 = (($783) + 44|0);
        HEAP32[$784>>2] = $782;
        $785 = $1;
        $786 = (_yy_Nonspacechar($785)|0);
        $787 = ($786|0)!=(0);
        if (!($787)) {
         label = 194;
         break;
        }
       }
       if ((label|0) == 192) {
       }
       else if ((label|0) == 194) {
       }
       $788 = $yypos1730;
       $789 = $1;
       $790 = (($789) + 12|0);
       HEAP32[$790>>2] = $788;
       $791 = $yythunkpos1730;
       $792 = $1;
       $793 = (($792) + 44|0);
       HEAP32[$793>>2] = $791;
      }
     } while(0);
     L260: do {
      if ((label|0) == 197) {
       $794 = $yypos1727;
       $795 = $1;
       $796 = (($795) + 12|0);
       HEAP32[$796>>2] = $794;
       $797 = $yythunkpos1727;
       $798 = $1;
       $799 = (($798) + 44|0);
       HEAP32[$799>>2] = $797;
       $800 = $1;
       $801 = (($800) + 12|0);
       $802 = HEAP32[$801>>2]|0;
       $yypos1734 = $802;
       $803 = $1;
       $804 = (($803) + 44|0);
       $805 = HEAP32[$804>>2]|0;
       $yythunkpos1734 = $805;
       $806 = $1;
       $807 = (_yy_Ticks3($806)|0);
       $808 = ($807|0)!=(0);
       do {
        if ($808) {
        } else {
         $809 = $yypos1734;
         $810 = $1;
         $811 = (($810) + 12|0);
         HEAP32[$811>>2] = $809;
         $812 = $yythunkpos1734;
         $813 = $1;
         $814 = (($813) + 44|0);
         HEAP32[$814>>2] = $812;
         $815 = $1;
         $816 = (_yymatchChar($815,96)|0);
         $817 = ($816|0)!=(0);
         if (!($817)) {
          break;
         }
         while(1) {
          $818 = $1;
          $819 = (($818) + 12|0);
          $820 = HEAP32[$819>>2]|0;
          $yypos1736 = $820;
          $821 = $1;
          $822 = (($821) + 44|0);
          $823 = HEAP32[$822>>2]|0;
          $yythunkpos1736 = $823;
          $824 = $1;
          $825 = (_yymatchChar($824,96)|0);
          $826 = ($825|0)!=(0);
          if (!($826)) {
           break;
          }
         }
         $827 = $yypos1736;
         $828 = $1;
         $829 = (($828) + 12|0);
         HEAP32[$829>>2] = $827;
         $830 = $yythunkpos1736;
         $831 = $1;
         $832 = (($831) + 44|0);
         HEAP32[$832>>2] = $830;
         break L260;
        }
       } while(0);
       $833 = $yypos1727;
       $834 = $1;
       $835 = (($834) + 12|0);
       HEAP32[$835>>2] = $833;
       $836 = $yythunkpos1727;
       $837 = $1;
       $838 = (($837) + 44|0);
       HEAP32[$838>>2] = $836;
       $839 = $1;
       $840 = (($839) + 12|0);
       $841 = HEAP32[$840>>2]|0;
       $yypos1737 = $841;
       $842 = $1;
       $843 = (($842) + 44|0);
       $844 = HEAP32[$843>>2]|0;
       $yythunkpos1737 = $844;
       $845 = $1;
       $846 = (_yy_Sp($845)|0);
       $847 = ($846|0)!=(0);
       do {
        if ($847) {
         $848 = $1;
         $849 = (_yy_Ticks3($848)|0);
         $850 = ($849|0)!=(0);
         if ($850) {
          break L238;
         } else {
          break;
         }
        } else {
        }
       } while(0);
       $851 = $yypos1737;
       $852 = $1;
       $853 = (($852) + 12|0);
       HEAP32[$853>>2] = $851;
       $854 = $yythunkpos1737;
       $855 = $1;
       $856 = (($855) + 44|0);
       HEAP32[$856>>2] = $854;
       $857 = $1;
       $858 = (($857) + 12|0);
       $859 = HEAP32[$858>>2]|0;
       $yypos1738 = $859;
       $860 = $1;
       $861 = (($860) + 44|0);
       $862 = HEAP32[$861>>2]|0;
       $yythunkpos1738 = $862;
       $863 = $1;
       $864 = (_yy_Spacechar($863)|0);
       $865 = ($864|0)!=(0);
       if ($865) {
       } else {
        $866 = $yypos1738;
        $867 = $1;
        $868 = (($867) + 12|0);
        HEAP32[$868>>2] = $866;
        $869 = $yythunkpos1738;
        $870 = $1;
        $871 = (($870) + 44|0);
        HEAP32[$871>>2] = $869;
        $872 = $1;
        $873 = (_yy_Newline($872)|0);
        $874 = ($873|0)!=(0);
        if (!($874)) {
         break L238;
        }
        $875 = $1;
        $876 = (($875) + 12|0);
        $877 = HEAP32[$876>>2]|0;
        $yypos1740 = $877;
        $878 = $1;
        $879 = (($878) + 44|0);
        $880 = HEAP32[$879>>2]|0;
        $yythunkpos1740 = $880;
        $881 = $1;
        $882 = (_yy_BlankLine($881)|0);
        $883 = ($882|0)!=(0);
        if ($883) {
         break L238;
        }
        $884 = $yypos1740;
        $885 = $1;
        $886 = (($885) + 12|0);
        HEAP32[$886>>2] = $884;
        $887 = $yythunkpos1740;
        $888 = $1;
        $889 = (($888) + 44|0);
        HEAP32[$889>>2] = $887;
       }
      }
     } while(0);
     L295: while(1) {
      $890 = $1;
      $891 = (($890) + 12|0);
      $892 = HEAP32[$891>>2]|0;
      $yypos1726 = $892;
      $893 = $1;
      $894 = (($893) + 44|0);
      $895 = HEAP32[$894>>2]|0;
      $yythunkpos1726 = $895;
      $896 = $1;
      $897 = (($896) + 12|0);
      $898 = HEAP32[$897>>2]|0;
      $yypos1741 = $898;
      $899 = $1;
      $900 = (($899) + 44|0);
      $901 = HEAP32[$900>>2]|0;
      $yythunkpos1741 = $901;
      $902 = $1;
      $903 = (($902) + 12|0);
      $904 = HEAP32[$903>>2]|0;
      $yypos1745 = $904;
      $905 = $1;
      $906 = (($905) + 44|0);
      $907 = HEAP32[$906>>2]|0;
      $yythunkpos1745 = $907;
      $908 = $1;
      $909 = (_yymatchChar($908,96)|0);
      $910 = ($909|0)!=(0);
      do {
       if ($910) {
        label = 236;
       } else {
        $911 = $yypos1745;
        $912 = $1;
        $913 = (($912) + 12|0);
        HEAP32[$913>>2] = $911;
        $914 = $yythunkpos1745;
        $915 = $1;
        $916 = (($915) + 44|0);
        HEAP32[$916>>2] = $914;
        $917 = $1;
        $918 = (_yy_Nonspacechar($917)|0);
        $919 = ($918|0)!=(0);
        if (!($919)) {
         label = 236;
         break;
        }
        while(1) {
         $920 = $1;
         $921 = (($920) + 12|0);
         $922 = HEAP32[$921>>2]|0;
         $yypos1744 = $922;
         $923 = $1;
         $924 = (($923) + 44|0);
         $925 = HEAP32[$924>>2]|0;
         $yythunkpos1744 = $925;
         $926 = $1;
         $927 = (($926) + 12|0);
         $928 = HEAP32[$927>>2]|0;
         $yypos1746 = $928;
         $929 = $1;
         $930 = (($929) + 44|0);
         $931 = HEAP32[$930>>2]|0;
         $yythunkpos1746 = $931;
         $932 = $1;
         $933 = (_yymatchChar($932,96)|0);
         $934 = ($933|0)!=(0);
         if ($934) {
          label = 231;
          break;
         }
         $935 = $yypos1746;
         $936 = $1;
         $937 = (($936) + 12|0);
         HEAP32[$937>>2] = $935;
         $938 = $yythunkpos1746;
         $939 = $1;
         $940 = (($939) + 44|0);
         HEAP32[$940>>2] = $938;
         $941 = $1;
         $942 = (_yy_Nonspacechar($941)|0);
         $943 = ($942|0)!=(0);
         if (!($943)) {
          label = 233;
          break;
         }
        }
        if ((label|0) == 231) {
         label = 0;
        }
        else if ((label|0) == 233) {
         label = 0;
        }
        $944 = $yypos1744;
        $945 = $1;
        $946 = (($945) + 12|0);
        HEAP32[$946>>2] = $944;
        $947 = $yythunkpos1744;
        $948 = $1;
        $949 = (($948) + 44|0);
        HEAP32[$949>>2] = $947;
       }
      } while(0);
      L313: do {
       if ((label|0) == 236) {
        label = 0;
        $950 = $yypos1741;
        $951 = $1;
        $952 = (($951) + 12|0);
        HEAP32[$952>>2] = $950;
        $953 = $yythunkpos1741;
        $954 = $1;
        $955 = (($954) + 44|0);
        HEAP32[$955>>2] = $953;
        $956 = $1;
        $957 = (($956) + 12|0);
        $958 = HEAP32[$957>>2]|0;
        $yypos1748 = $958;
        $959 = $1;
        $960 = (($959) + 44|0);
        $961 = HEAP32[$960>>2]|0;
        $yythunkpos1748 = $961;
        $962 = $1;
        $963 = (_yy_Ticks3($962)|0);
        $964 = ($963|0)!=(0);
        do {
         if ($964) {
         } else {
          $965 = $yypos1748;
          $966 = $1;
          $967 = (($966) + 12|0);
          HEAP32[$967>>2] = $965;
          $968 = $yythunkpos1748;
          $969 = $1;
          $970 = (($969) + 44|0);
          HEAP32[$970>>2] = $968;
          $971 = $1;
          $972 = (_yymatchChar($971,96)|0);
          $973 = ($972|0)!=(0);
          if (!($973)) {
           break;
          }
          while(1) {
           $974 = $1;
           $975 = (($974) + 12|0);
           $976 = HEAP32[$975>>2]|0;
           $yypos1750 = $976;
           $977 = $1;
           $978 = (($977) + 44|0);
           $979 = HEAP32[$978>>2]|0;
           $yythunkpos1750 = $979;
           $980 = $1;
           $981 = (_yymatchChar($980,96)|0);
           $982 = ($981|0)!=(0);
           if (!($982)) {
            break;
           }
          }
          $983 = $yypos1750;
          $984 = $1;
          $985 = (($984) + 12|0);
          HEAP32[$985>>2] = $983;
          $986 = $yythunkpos1750;
          $987 = $1;
          $988 = (($987) + 44|0);
          HEAP32[$988>>2] = $986;
          break L313;
         }
        } while(0);
        $989 = $yypos1741;
        $990 = $1;
        $991 = (($990) + 12|0);
        HEAP32[$991>>2] = $989;
        $992 = $yythunkpos1741;
        $993 = $1;
        $994 = (($993) + 44|0);
        HEAP32[$994>>2] = $992;
        $995 = $1;
        $996 = (($995) + 12|0);
        $997 = HEAP32[$996>>2]|0;
        $yypos1751 = $997;
        $998 = $1;
        $999 = (($998) + 44|0);
        $1000 = HEAP32[$999>>2]|0;
        $yythunkpos1751 = $1000;
        $1001 = $1;
        $1002 = (_yy_Sp($1001)|0);
        $1003 = ($1002|0)!=(0);
        if ($1003) {
         $1004 = $1;
         $1005 = (_yy_Ticks3($1004)|0);
         $1006 = ($1005|0)!=(0);
         if ($1006) {
          label = 250;
          break L295;
         }
        } else {
        }
        $1007 = $yypos1751;
        $1008 = $1;
        $1009 = (($1008) + 12|0);
        HEAP32[$1009>>2] = $1007;
        $1010 = $yythunkpos1751;
        $1011 = $1;
        $1012 = (($1011) + 44|0);
        HEAP32[$1012>>2] = $1010;
        $1013 = $1;
        $1014 = (($1013) + 12|0);
        $1015 = HEAP32[$1014>>2]|0;
        $yypos1752 = $1015;
        $1016 = $1;
        $1017 = (($1016) + 44|0);
        $1018 = HEAP32[$1017>>2]|0;
        $yythunkpos1752 = $1018;
        $1019 = $1;
        $1020 = (_yy_Spacechar($1019)|0);
        $1021 = ($1020|0)!=(0);
        if ($1021) {
        } else {
         $1022 = $yypos1752;
         $1023 = $1;
         $1024 = (($1023) + 12|0);
         HEAP32[$1024>>2] = $1022;
         $1025 = $yythunkpos1752;
         $1026 = $1;
         $1027 = (($1026) + 44|0);
         HEAP32[$1027>>2] = $1025;
         $1028 = $1;
         $1029 = (_yy_Newline($1028)|0);
         $1030 = ($1029|0)!=(0);
         if (!($1030)) {
          label = 255;
          break L295;
         }
         $1031 = $1;
         $1032 = (($1031) + 12|0);
         $1033 = HEAP32[$1032>>2]|0;
         $yypos1754 = $1033;
         $1034 = $1;
         $1035 = (($1034) + 44|0);
         $1036 = HEAP32[$1035>>2]|0;
         $yythunkpos1754 = $1036;
         $1037 = $1;
         $1038 = (_yy_BlankLine($1037)|0);
         $1039 = ($1038|0)!=(0);
         if ($1039) {
          label = 258;
          break L295;
         }
         $1040 = $yypos1754;
         $1041 = $1;
         $1042 = (($1041) + 12|0);
         HEAP32[$1042>>2] = $1040;
         $1043 = $yythunkpos1754;
         $1044 = $1;
         $1045 = (($1044) + 44|0);
         HEAP32[$1045>>2] = $1043;
        }
       }
      } while(0);
     }
     if ((label|0) == 250) {
     }
     else if ((label|0) == 255) {
     }
     else if ((label|0) == 258) {
     }
     $1046 = $yypos1726;
     $1047 = $1;
     $1048 = (($1047) + 12|0);
     HEAP32[$1048>>2] = $1046;
     $1049 = $yythunkpos1726;
     $1050 = $1;
     $1051 = (($1050) + 44|0);
     HEAP32[$1051>>2] = $1049;
     $1052 = $1;
     $1053 = $1;
     $1054 = (($1053) + 28|0);
     $1055 = HEAP32[$1054>>2]|0;
     $1056 = $1;
     $1057 = (($1056) + 32|0);
     $1058 = HEAP32[$1057>>2]|0;
     (_yyText($1052,$1055,$1058)|0);
     $1059 = $1;
     $1060 = (($1059) + 12|0);
     $1061 = HEAP32[$1060>>2]|0;
     $1062 = $1;
     $1063 = (($1062) + 32|0);
     HEAP32[$1063>>2] = $1061;
     $1064 = $1;
     $1065 = (_yy_Sp($1064)|0);
     $1066 = ($1065|0)!=(0);
     if (!($1066)) {
      break;
     }
     $1067 = $1;
     $1068 = (_yy_Ticks3($1067)|0);
     $1069 = ($1068|0)!=(0);
     if ($1069) {
      break L118;
     } else {
      break;
     }
    } else {
    }
   } while(0);
   $1070 = $yypos1661;
   $1071 = $1;
   $1072 = (($1071) + 12|0);
   HEAP32[$1072>>2] = $1070;
   $1073 = $yythunkpos1661;
   $1074 = $1;
   $1075 = (($1074) + 44|0);
   HEAP32[$1075>>2] = $1073;
   $1076 = $1;
   $1077 = (_yy_Ticks4($1076)|0);
   $1078 = ($1077|0)!=(0);
   L356: do {
    if ($1078) {
     $1079 = $1;
     $1080 = (_yy_Sp($1079)|0);
     $1081 = ($1080|0)!=(0);
     if (!($1081)) {
      break;
     }
     $1082 = $1;
     $1083 = $1;
     $1084 = (($1083) + 28|0);
     $1085 = HEAP32[$1084>>2]|0;
     $1086 = $1;
     $1087 = (($1086) + 32|0);
     $1088 = HEAP32[$1087>>2]|0;
     (_yyText($1082,$1085,$1088)|0);
     $1089 = $1;
     $1090 = (($1089) + 12|0);
     $1091 = HEAP32[$1090>>2]|0;
     $1092 = $1;
     $1093 = (($1092) + 28|0);
     HEAP32[$1093>>2] = $1091;
     $1094 = $1;
     $1095 = (($1094) + 12|0);
     $1096 = HEAP32[$1095>>2]|0;
     $yypos1758 = $1096;
     $1097 = $1;
     $1098 = (($1097) + 44|0);
     $1099 = HEAP32[$1098>>2]|0;
     $yythunkpos1758 = $1099;
     $1100 = $1;
     $1101 = (($1100) + 12|0);
     $1102 = HEAP32[$1101>>2]|0;
     $yypos1762 = $1102;
     $1103 = $1;
     $1104 = (($1103) + 44|0);
     $1105 = HEAP32[$1104>>2]|0;
     $yythunkpos1762 = $1105;
     $1106 = $1;
     $1107 = (_yymatchChar($1106,96)|0);
     $1108 = ($1107|0)!=(0);
     do {
      if ($1108) {
       label = 286;
      } else {
       $1109 = $yypos1762;
       $1110 = $1;
       $1111 = (($1110) + 12|0);
       HEAP32[$1111>>2] = $1109;
       $1112 = $yythunkpos1762;
       $1113 = $1;
       $1114 = (($1113) + 44|0);
       HEAP32[$1114>>2] = $1112;
       $1115 = $1;
       $1116 = (_yy_Nonspacechar($1115)|0);
       $1117 = ($1116|0)!=(0);
       if (!($1117)) {
        label = 286;
        break;
       }
       while(1) {
        $1118 = $1;
        $1119 = (($1118) + 12|0);
        $1120 = HEAP32[$1119>>2]|0;
        $yypos1761 = $1120;
        $1121 = $1;
        $1122 = (($1121) + 44|0);
        $1123 = HEAP32[$1122>>2]|0;
        $yythunkpos1761 = $1123;
        $1124 = $1;
        $1125 = (($1124) + 12|0);
        $1126 = HEAP32[$1125>>2]|0;
        $yypos1763 = $1126;
        $1127 = $1;
        $1128 = (($1127) + 44|0);
        $1129 = HEAP32[$1128>>2]|0;
        $yythunkpos1763 = $1129;
        $1130 = $1;
        $1131 = (_yymatchChar($1130,96)|0);
        $1132 = ($1131|0)!=(0);
        if ($1132) {
         label = 281;
         break;
        }
        $1133 = $yypos1763;
        $1134 = $1;
        $1135 = (($1134) + 12|0);
        HEAP32[$1135>>2] = $1133;
        $1136 = $yythunkpos1763;
        $1137 = $1;
        $1138 = (($1137) + 44|0);
        HEAP32[$1138>>2] = $1136;
        $1139 = $1;
        $1140 = (_yy_Nonspacechar($1139)|0);
        $1141 = ($1140|0)!=(0);
        if (!($1141)) {
         label = 283;
         break;
        }
       }
       if ((label|0) == 281) {
       }
       else if ((label|0) == 283) {
       }
       $1142 = $yypos1761;
       $1143 = $1;
       $1144 = (($1143) + 12|0);
       HEAP32[$1144>>2] = $1142;
       $1145 = $yythunkpos1761;
       $1146 = $1;
       $1147 = (($1146) + 44|0);
       HEAP32[$1147>>2] = $1145;
      }
     } while(0);
     L379: do {
      if ((label|0) == 286) {
       $1148 = $yypos1758;
       $1149 = $1;
       $1150 = (($1149) + 12|0);
       HEAP32[$1150>>2] = $1148;
       $1151 = $yythunkpos1758;
       $1152 = $1;
       $1153 = (($1152) + 44|0);
       HEAP32[$1153>>2] = $1151;
       $1154 = $1;
       $1155 = (($1154) + 12|0);
       $1156 = HEAP32[$1155>>2]|0;
       $yypos1765 = $1156;
       $1157 = $1;
       $1158 = (($1157) + 44|0);
       $1159 = HEAP32[$1158>>2]|0;
       $yythunkpos1765 = $1159;
       $1160 = $1;
       $1161 = (_yy_Ticks4($1160)|0);
       $1162 = ($1161|0)!=(0);
       do {
        if ($1162) {
        } else {
         $1163 = $yypos1765;
         $1164 = $1;
         $1165 = (($1164) + 12|0);
         HEAP32[$1165>>2] = $1163;
         $1166 = $yythunkpos1765;
         $1167 = $1;
         $1168 = (($1167) + 44|0);
         HEAP32[$1168>>2] = $1166;
         $1169 = $1;
         $1170 = (_yymatchChar($1169,96)|0);
         $1171 = ($1170|0)!=(0);
         if (!($1171)) {
          break;
         }
         while(1) {
          $1172 = $1;
          $1173 = (($1172) + 12|0);
          $1174 = HEAP32[$1173>>2]|0;
          $yypos1767 = $1174;
          $1175 = $1;
          $1176 = (($1175) + 44|0);
          $1177 = HEAP32[$1176>>2]|0;
          $yythunkpos1767 = $1177;
          $1178 = $1;
          $1179 = (_yymatchChar($1178,96)|0);
          $1180 = ($1179|0)!=(0);
          if (!($1180)) {
           break;
          }
         }
         $1181 = $yypos1767;
         $1182 = $1;
         $1183 = (($1182) + 12|0);
         HEAP32[$1183>>2] = $1181;
         $1184 = $yythunkpos1767;
         $1185 = $1;
         $1186 = (($1185) + 44|0);
         HEAP32[$1186>>2] = $1184;
         break L379;
        }
       } while(0);
       $1187 = $yypos1758;
       $1188 = $1;
       $1189 = (($1188) + 12|0);
       HEAP32[$1189>>2] = $1187;
       $1190 = $yythunkpos1758;
       $1191 = $1;
       $1192 = (($1191) + 44|0);
       HEAP32[$1192>>2] = $1190;
       $1193 = $1;
       $1194 = (($1193) + 12|0);
       $1195 = HEAP32[$1194>>2]|0;
       $yypos1768 = $1195;
       $1196 = $1;
       $1197 = (($1196) + 44|0);
       $1198 = HEAP32[$1197>>2]|0;
       $yythunkpos1768 = $1198;
       $1199 = $1;
       $1200 = (_yy_Sp($1199)|0);
       $1201 = ($1200|0)!=(0);
       do {
        if ($1201) {
         $1202 = $1;
         $1203 = (_yy_Ticks4($1202)|0);
         $1204 = ($1203|0)!=(0);
         if ($1204) {
          break L356;
         } else {
          break;
         }
        } else {
        }
       } while(0);
       $1205 = $yypos1768;
       $1206 = $1;
       $1207 = (($1206) + 12|0);
       HEAP32[$1207>>2] = $1205;
       $1208 = $yythunkpos1768;
       $1209 = $1;
       $1210 = (($1209) + 44|0);
       HEAP32[$1210>>2] = $1208;
       $1211 = $1;
       $1212 = (($1211) + 12|0);
       $1213 = HEAP32[$1212>>2]|0;
       $yypos1769 = $1213;
       $1214 = $1;
       $1215 = (($1214) + 44|0);
       $1216 = HEAP32[$1215>>2]|0;
       $yythunkpos1769 = $1216;
       $1217 = $1;
       $1218 = (_yy_Spacechar($1217)|0);
       $1219 = ($1218|0)!=(0);
       if ($1219) {
       } else {
        $1220 = $yypos1769;
        $1221 = $1;
        $1222 = (($1221) + 12|0);
        HEAP32[$1222>>2] = $1220;
        $1223 = $yythunkpos1769;
        $1224 = $1;
        $1225 = (($1224) + 44|0);
        HEAP32[$1225>>2] = $1223;
        $1226 = $1;
        $1227 = (_yy_Newline($1226)|0);
        $1228 = ($1227|0)!=(0);
        if (!($1228)) {
         break L356;
        }
        $1229 = $1;
        $1230 = (($1229) + 12|0);
        $1231 = HEAP32[$1230>>2]|0;
        $yypos1771 = $1231;
        $1232 = $1;
        $1233 = (($1232) + 44|0);
        $1234 = HEAP32[$1233>>2]|0;
        $yythunkpos1771 = $1234;
        $1235 = $1;
        $1236 = (_yy_BlankLine($1235)|0);
        $1237 = ($1236|0)!=(0);
        if ($1237) {
         break L356;
        }
        $1238 = $yypos1771;
        $1239 = $1;
        $1240 = (($1239) + 12|0);
        HEAP32[$1240>>2] = $1238;
        $1241 = $yythunkpos1771;
        $1242 = $1;
        $1243 = (($1242) + 44|0);
        HEAP32[$1243>>2] = $1241;
       }
      }
     } while(0);
     L414: while(1) {
      $1244 = $1;
      $1245 = (($1244) + 12|0);
      $1246 = HEAP32[$1245>>2]|0;
      $yypos1757 = $1246;
      $1247 = $1;
      $1248 = (($1247) + 44|0);
      $1249 = HEAP32[$1248>>2]|0;
      $yythunkpos1757 = $1249;
      $1250 = $1;
      $1251 = (($1250) + 12|0);
      $1252 = HEAP32[$1251>>2]|0;
      $yypos1772 = $1252;
      $1253 = $1;
      $1254 = (($1253) + 44|0);
      $1255 = HEAP32[$1254>>2]|0;
      $yythunkpos1772 = $1255;
      $1256 = $1;
      $1257 = (($1256) + 12|0);
      $1258 = HEAP32[$1257>>2]|0;
      $yypos1776 = $1258;
      $1259 = $1;
      $1260 = (($1259) + 44|0);
      $1261 = HEAP32[$1260>>2]|0;
      $yythunkpos1776 = $1261;
      $1262 = $1;
      $1263 = (_yymatchChar($1262,96)|0);
      $1264 = ($1263|0)!=(0);
      do {
       if ($1264) {
        label = 325;
       } else {
        $1265 = $yypos1776;
        $1266 = $1;
        $1267 = (($1266) + 12|0);
        HEAP32[$1267>>2] = $1265;
        $1268 = $yythunkpos1776;
        $1269 = $1;
        $1270 = (($1269) + 44|0);
        HEAP32[$1270>>2] = $1268;
        $1271 = $1;
        $1272 = (_yy_Nonspacechar($1271)|0);
        $1273 = ($1272|0)!=(0);
        if (!($1273)) {
         label = 325;
         break;
        }
        while(1) {
         $1274 = $1;
         $1275 = (($1274) + 12|0);
         $1276 = HEAP32[$1275>>2]|0;
         $yypos1775 = $1276;
         $1277 = $1;
         $1278 = (($1277) + 44|0);
         $1279 = HEAP32[$1278>>2]|0;
         $yythunkpos1775 = $1279;
         $1280 = $1;
         $1281 = (($1280) + 12|0);
         $1282 = HEAP32[$1281>>2]|0;
         $yypos1777 = $1282;
         $1283 = $1;
         $1284 = (($1283) + 44|0);
         $1285 = HEAP32[$1284>>2]|0;
         $yythunkpos1777 = $1285;
         $1286 = $1;
         $1287 = (_yymatchChar($1286,96)|0);
         $1288 = ($1287|0)!=(0);
         if ($1288) {
          label = 320;
          break;
         }
         $1289 = $yypos1777;
         $1290 = $1;
         $1291 = (($1290) + 12|0);
         HEAP32[$1291>>2] = $1289;
         $1292 = $yythunkpos1777;
         $1293 = $1;
         $1294 = (($1293) + 44|0);
         HEAP32[$1294>>2] = $1292;
         $1295 = $1;
         $1296 = (_yy_Nonspacechar($1295)|0);
         $1297 = ($1296|0)!=(0);
         if (!($1297)) {
          label = 322;
          break;
         }
        }
        if ((label|0) == 320) {
         label = 0;
        }
        else if ((label|0) == 322) {
         label = 0;
        }
        $1298 = $yypos1775;
        $1299 = $1;
        $1300 = (($1299) + 12|0);
        HEAP32[$1300>>2] = $1298;
        $1301 = $yythunkpos1775;
        $1302 = $1;
        $1303 = (($1302) + 44|0);
        HEAP32[$1303>>2] = $1301;
       }
      } while(0);
      L432: do {
       if ((label|0) == 325) {
        label = 0;
        $1304 = $yypos1772;
        $1305 = $1;
        $1306 = (($1305) + 12|0);
        HEAP32[$1306>>2] = $1304;
        $1307 = $yythunkpos1772;
        $1308 = $1;
        $1309 = (($1308) + 44|0);
        HEAP32[$1309>>2] = $1307;
        $1310 = $1;
        $1311 = (($1310) + 12|0);
        $1312 = HEAP32[$1311>>2]|0;
        $yypos1779 = $1312;
        $1313 = $1;
        $1314 = (($1313) + 44|0);
        $1315 = HEAP32[$1314>>2]|0;
        $yythunkpos1779 = $1315;
        $1316 = $1;
        $1317 = (_yy_Ticks4($1316)|0);
        $1318 = ($1317|0)!=(0);
        do {
         if ($1318) {
         } else {
          $1319 = $yypos1779;
          $1320 = $1;
          $1321 = (($1320) + 12|0);
          HEAP32[$1321>>2] = $1319;
          $1322 = $yythunkpos1779;
          $1323 = $1;
          $1324 = (($1323) + 44|0);
          HEAP32[$1324>>2] = $1322;
          $1325 = $1;
          $1326 = (_yymatchChar($1325,96)|0);
          $1327 = ($1326|0)!=(0);
          if (!($1327)) {
           break;
          }
          while(1) {
           $1328 = $1;
           $1329 = (($1328) + 12|0);
           $1330 = HEAP32[$1329>>2]|0;
           $yypos1781 = $1330;
           $1331 = $1;
           $1332 = (($1331) + 44|0);
           $1333 = HEAP32[$1332>>2]|0;
           $yythunkpos1781 = $1333;
           $1334 = $1;
           $1335 = (_yymatchChar($1334,96)|0);
           $1336 = ($1335|0)!=(0);
           if (!($1336)) {
            break;
           }
          }
          $1337 = $yypos1781;
          $1338 = $1;
          $1339 = (($1338) + 12|0);
          HEAP32[$1339>>2] = $1337;
          $1340 = $yythunkpos1781;
          $1341 = $1;
          $1342 = (($1341) + 44|0);
          HEAP32[$1342>>2] = $1340;
          break L432;
         }
        } while(0);
        $1343 = $yypos1772;
        $1344 = $1;
        $1345 = (($1344) + 12|0);
        HEAP32[$1345>>2] = $1343;
        $1346 = $yythunkpos1772;
        $1347 = $1;
        $1348 = (($1347) + 44|0);
        HEAP32[$1348>>2] = $1346;
        $1349 = $1;
        $1350 = (($1349) + 12|0);
        $1351 = HEAP32[$1350>>2]|0;
        $yypos1782 = $1351;
        $1352 = $1;
        $1353 = (($1352) + 44|0);
        $1354 = HEAP32[$1353>>2]|0;
        $yythunkpos1782 = $1354;
        $1355 = $1;
        $1356 = (_yy_Sp($1355)|0);
        $1357 = ($1356|0)!=(0);
        if ($1357) {
         $1358 = $1;
         $1359 = (_yy_Ticks4($1358)|0);
         $1360 = ($1359|0)!=(0);
         if ($1360) {
          label = 339;
          break L414;
         }
        } else {
        }
        $1361 = $yypos1782;
        $1362 = $1;
        $1363 = (($1362) + 12|0);
        HEAP32[$1363>>2] = $1361;
        $1364 = $yythunkpos1782;
        $1365 = $1;
        $1366 = (($1365) + 44|0);
        HEAP32[$1366>>2] = $1364;
        $1367 = $1;
        $1368 = (($1367) + 12|0);
        $1369 = HEAP32[$1368>>2]|0;
        $yypos1783 = $1369;
        $1370 = $1;
        $1371 = (($1370) + 44|0);
        $1372 = HEAP32[$1371>>2]|0;
        $yythunkpos1783 = $1372;
        $1373 = $1;
        $1374 = (_yy_Spacechar($1373)|0);
        $1375 = ($1374|0)!=(0);
        if ($1375) {
        } else {
         $1376 = $yypos1783;
         $1377 = $1;
         $1378 = (($1377) + 12|0);
         HEAP32[$1378>>2] = $1376;
         $1379 = $yythunkpos1783;
         $1380 = $1;
         $1381 = (($1380) + 44|0);
         HEAP32[$1381>>2] = $1379;
         $1382 = $1;
         $1383 = (_yy_Newline($1382)|0);
         $1384 = ($1383|0)!=(0);
         if (!($1384)) {
          label = 344;
          break L414;
         }
         $1385 = $1;
         $1386 = (($1385) + 12|0);
         $1387 = HEAP32[$1386>>2]|0;
         $yypos1785 = $1387;
         $1388 = $1;
         $1389 = (($1388) + 44|0);
         $1390 = HEAP32[$1389>>2]|0;
         $yythunkpos1785 = $1390;
         $1391 = $1;
         $1392 = (_yy_BlankLine($1391)|0);
         $1393 = ($1392|0)!=(0);
         if ($1393) {
          label = 347;
          break L414;
         }
         $1394 = $yypos1785;
         $1395 = $1;
         $1396 = (($1395) + 12|0);
         HEAP32[$1396>>2] = $1394;
         $1397 = $yythunkpos1785;
         $1398 = $1;
         $1399 = (($1398) + 44|0);
         HEAP32[$1399>>2] = $1397;
        }
       }
      } while(0);
     }
     if ((label|0) == 339) {
     }
     else if ((label|0) == 344) {
     }
     else if ((label|0) == 347) {
     }
     $1400 = $yypos1757;
     $1401 = $1;
     $1402 = (($1401) + 12|0);
     HEAP32[$1402>>2] = $1400;
     $1403 = $yythunkpos1757;
     $1404 = $1;
     $1405 = (($1404) + 44|0);
     HEAP32[$1405>>2] = $1403;
     $1406 = $1;
     $1407 = $1;
     $1408 = (($1407) + 28|0);
     $1409 = HEAP32[$1408>>2]|0;
     $1410 = $1;
     $1411 = (($1410) + 32|0);
     $1412 = HEAP32[$1411>>2]|0;
     (_yyText($1406,$1409,$1412)|0);
     $1413 = $1;
     $1414 = (($1413) + 12|0);
     $1415 = HEAP32[$1414>>2]|0;
     $1416 = $1;
     $1417 = (($1416) + 32|0);
     HEAP32[$1417>>2] = $1415;
     $1418 = $1;
     $1419 = (_yy_Sp($1418)|0);
     $1420 = ($1419|0)!=(0);
     if (!($1420)) {
      break;
     }
     $1421 = $1;
     $1422 = (_yy_Ticks4($1421)|0);
     $1423 = ($1422|0)!=(0);
     if ($1423) {
      break L118;
     } else {
      break;
     }
    } else {
    }
   } while(0);
   $1424 = $yypos1661;
   $1425 = $1;
   $1426 = (($1425) + 12|0);
   HEAP32[$1426>>2] = $1424;
   $1427 = $yythunkpos1661;
   $1428 = $1;
   $1429 = (($1428) + 44|0);
   HEAP32[$1429>>2] = $1427;
   $1430 = $1;
   $1431 = (_yy_Ticks5($1430)|0);
   $1432 = ($1431|0)!=(0);
   L474: do {
    if ($1432) {
     $1433 = $1;
     $1434 = (_yy_Sp($1433)|0);
     $1435 = ($1434|0)!=(0);
     if (!($1435)) {
      break;
     }
     $1436 = $1;
     $1437 = $1;
     $1438 = (($1437) + 28|0);
     $1439 = HEAP32[$1438>>2]|0;
     $1440 = $1;
     $1441 = (($1440) + 32|0);
     $1442 = HEAP32[$1441>>2]|0;
     (_yyText($1436,$1439,$1442)|0);
     $1443 = $1;
     $1444 = (($1443) + 12|0);
     $1445 = HEAP32[$1444>>2]|0;
     $1446 = $1;
     $1447 = (($1446) + 28|0);
     HEAP32[$1447>>2] = $1445;
     $1448 = $1;
     $1449 = (($1448) + 12|0);
     $1450 = HEAP32[$1449>>2]|0;
     $yypos1788 = $1450;
     $1451 = $1;
     $1452 = (($1451) + 44|0);
     $1453 = HEAP32[$1452>>2]|0;
     $yythunkpos1788 = $1453;
     $1454 = $1;
     $1455 = (($1454) + 12|0);
     $1456 = HEAP32[$1455>>2]|0;
     $yypos1792 = $1456;
     $1457 = $1;
     $1458 = (($1457) + 44|0);
     $1459 = HEAP32[$1458>>2]|0;
     $yythunkpos1792 = $1459;
     $1460 = $1;
     $1461 = (_yymatchChar($1460,96)|0);
     $1462 = ($1461|0)!=(0);
     do {
      if ($1462) {
       label = 375;
      } else {
       $1463 = $yypos1792;
       $1464 = $1;
       $1465 = (($1464) + 12|0);
       HEAP32[$1465>>2] = $1463;
       $1466 = $yythunkpos1792;
       $1467 = $1;
       $1468 = (($1467) + 44|0);
       HEAP32[$1468>>2] = $1466;
       $1469 = $1;
       $1470 = (_yy_Nonspacechar($1469)|0);
       $1471 = ($1470|0)!=(0);
       if (!($1471)) {
        label = 375;
        break;
       }
       while(1) {
        $1472 = $1;
        $1473 = (($1472) + 12|0);
        $1474 = HEAP32[$1473>>2]|0;
        $yypos1791 = $1474;
        $1475 = $1;
        $1476 = (($1475) + 44|0);
        $1477 = HEAP32[$1476>>2]|0;
        $yythunkpos1791 = $1477;
        $1478 = $1;
        $1479 = (($1478) + 12|0);
        $1480 = HEAP32[$1479>>2]|0;
        $yypos1793 = $1480;
        $1481 = $1;
        $1482 = (($1481) + 44|0);
        $1483 = HEAP32[$1482>>2]|0;
        $yythunkpos1793 = $1483;
        $1484 = $1;
        $1485 = (_yymatchChar($1484,96)|0);
        $1486 = ($1485|0)!=(0);
        if ($1486) {
         label = 370;
         break;
        }
        $1487 = $yypos1793;
        $1488 = $1;
        $1489 = (($1488) + 12|0);
        HEAP32[$1489>>2] = $1487;
        $1490 = $yythunkpos1793;
        $1491 = $1;
        $1492 = (($1491) + 44|0);
        HEAP32[$1492>>2] = $1490;
        $1493 = $1;
        $1494 = (_yy_Nonspacechar($1493)|0);
        $1495 = ($1494|0)!=(0);
        if (!($1495)) {
         label = 372;
         break;
        }
       }
       if ((label|0) == 370) {
       }
       else if ((label|0) == 372) {
       }
       $1496 = $yypos1791;
       $1497 = $1;
       $1498 = (($1497) + 12|0);
       HEAP32[$1498>>2] = $1496;
       $1499 = $yythunkpos1791;
       $1500 = $1;
       $1501 = (($1500) + 44|0);
       HEAP32[$1501>>2] = $1499;
      }
     } while(0);
     L497: do {
      if ((label|0) == 375) {
       $1502 = $yypos1788;
       $1503 = $1;
       $1504 = (($1503) + 12|0);
       HEAP32[$1504>>2] = $1502;
       $1505 = $yythunkpos1788;
       $1506 = $1;
       $1507 = (($1506) + 44|0);
       HEAP32[$1507>>2] = $1505;
       $1508 = $1;
       $1509 = (($1508) + 12|0);
       $1510 = HEAP32[$1509>>2]|0;
       $yypos1795 = $1510;
       $1511 = $1;
       $1512 = (($1511) + 44|0);
       $1513 = HEAP32[$1512>>2]|0;
       $yythunkpos1795 = $1513;
       $1514 = $1;
       $1515 = (_yy_Ticks5($1514)|0);
       $1516 = ($1515|0)!=(0);
       do {
        if ($1516) {
        } else {
         $1517 = $yypos1795;
         $1518 = $1;
         $1519 = (($1518) + 12|0);
         HEAP32[$1519>>2] = $1517;
         $1520 = $yythunkpos1795;
         $1521 = $1;
         $1522 = (($1521) + 44|0);
         HEAP32[$1522>>2] = $1520;
         $1523 = $1;
         $1524 = (_yymatchChar($1523,96)|0);
         $1525 = ($1524|0)!=(0);
         if (!($1525)) {
          break;
         }
         while(1) {
          $1526 = $1;
          $1527 = (($1526) + 12|0);
          $1528 = HEAP32[$1527>>2]|0;
          $yypos1797 = $1528;
          $1529 = $1;
          $1530 = (($1529) + 44|0);
          $1531 = HEAP32[$1530>>2]|0;
          $yythunkpos1797 = $1531;
          $1532 = $1;
          $1533 = (_yymatchChar($1532,96)|0);
          $1534 = ($1533|0)!=(0);
          if (!($1534)) {
           break;
          }
         }
         $1535 = $yypos1797;
         $1536 = $1;
         $1537 = (($1536) + 12|0);
         HEAP32[$1537>>2] = $1535;
         $1538 = $yythunkpos1797;
         $1539 = $1;
         $1540 = (($1539) + 44|0);
         HEAP32[$1540>>2] = $1538;
         break L497;
        }
       } while(0);
       $1541 = $yypos1788;
       $1542 = $1;
       $1543 = (($1542) + 12|0);
       HEAP32[$1543>>2] = $1541;
       $1544 = $yythunkpos1788;
       $1545 = $1;
       $1546 = (($1545) + 44|0);
       HEAP32[$1546>>2] = $1544;
       $1547 = $1;
       $1548 = (($1547) + 12|0);
       $1549 = HEAP32[$1548>>2]|0;
       $yypos1798 = $1549;
       $1550 = $1;
       $1551 = (($1550) + 44|0);
       $1552 = HEAP32[$1551>>2]|0;
       $yythunkpos1798 = $1552;
       $1553 = $1;
       $1554 = (_yy_Sp($1553)|0);
       $1555 = ($1554|0)!=(0);
       do {
        if ($1555) {
         $1556 = $1;
         $1557 = (_yy_Ticks5($1556)|0);
         $1558 = ($1557|0)!=(0);
         if ($1558) {
          break L474;
         } else {
          break;
         }
        } else {
        }
       } while(0);
       $1559 = $yypos1798;
       $1560 = $1;
       $1561 = (($1560) + 12|0);
       HEAP32[$1561>>2] = $1559;
       $1562 = $yythunkpos1798;
       $1563 = $1;
       $1564 = (($1563) + 44|0);
       HEAP32[$1564>>2] = $1562;
       $1565 = $1;
       $1566 = (($1565) + 12|0);
       $1567 = HEAP32[$1566>>2]|0;
       $yypos1799 = $1567;
       $1568 = $1;
       $1569 = (($1568) + 44|0);
       $1570 = HEAP32[$1569>>2]|0;
       $yythunkpos1799 = $1570;
       $1571 = $1;
       $1572 = (_yy_Spacechar($1571)|0);
       $1573 = ($1572|0)!=(0);
       if ($1573) {
       } else {
        $1574 = $yypos1799;
        $1575 = $1;
        $1576 = (($1575) + 12|0);
        HEAP32[$1576>>2] = $1574;
        $1577 = $yythunkpos1799;
        $1578 = $1;
        $1579 = (($1578) + 44|0);
        HEAP32[$1579>>2] = $1577;
        $1580 = $1;
        $1581 = (_yy_Newline($1580)|0);
        $1582 = ($1581|0)!=(0);
        if (!($1582)) {
         break L474;
        }
        $1583 = $1;
        $1584 = (($1583) + 12|0);
        $1585 = HEAP32[$1584>>2]|0;
        $yypos1801 = $1585;
        $1586 = $1;
        $1587 = (($1586) + 44|0);
        $1588 = HEAP32[$1587>>2]|0;
        $yythunkpos1801 = $1588;
        $1589 = $1;
        $1590 = (_yy_BlankLine($1589)|0);
        $1591 = ($1590|0)!=(0);
        if ($1591) {
         break L474;
        }
        $1592 = $yypos1801;
        $1593 = $1;
        $1594 = (($1593) + 12|0);
        HEAP32[$1594>>2] = $1592;
        $1595 = $yythunkpos1801;
        $1596 = $1;
        $1597 = (($1596) + 44|0);
        HEAP32[$1597>>2] = $1595;
       }
      }
     } while(0);
     L532: while(1) {
      $1598 = $1;
      $1599 = (($1598) + 12|0);
      $1600 = HEAP32[$1599>>2]|0;
      $yypos1787 = $1600;
      $1601 = $1;
      $1602 = (($1601) + 44|0);
      $1603 = HEAP32[$1602>>2]|0;
      $yythunkpos1787 = $1603;
      $1604 = $1;
      $1605 = (($1604) + 12|0);
      $1606 = HEAP32[$1605>>2]|0;
      $yypos1802 = $1606;
      $1607 = $1;
      $1608 = (($1607) + 44|0);
      $1609 = HEAP32[$1608>>2]|0;
      $yythunkpos1802 = $1609;
      $1610 = $1;
      $1611 = (($1610) + 12|0);
      $1612 = HEAP32[$1611>>2]|0;
      $yypos1806 = $1612;
      $1613 = $1;
      $1614 = (($1613) + 44|0);
      $1615 = HEAP32[$1614>>2]|0;
      $yythunkpos1806 = $1615;
      $1616 = $1;
      $1617 = (_yymatchChar($1616,96)|0);
      $1618 = ($1617|0)!=(0);
      do {
       if ($1618) {
        label = 414;
       } else {
        $1619 = $yypos1806;
        $1620 = $1;
        $1621 = (($1620) + 12|0);
        HEAP32[$1621>>2] = $1619;
        $1622 = $yythunkpos1806;
        $1623 = $1;
        $1624 = (($1623) + 44|0);
        HEAP32[$1624>>2] = $1622;
        $1625 = $1;
        $1626 = (_yy_Nonspacechar($1625)|0);
        $1627 = ($1626|0)!=(0);
        if (!($1627)) {
         label = 414;
         break;
        }
        while(1) {
         $1628 = $1;
         $1629 = (($1628) + 12|0);
         $1630 = HEAP32[$1629>>2]|0;
         $yypos1805 = $1630;
         $1631 = $1;
         $1632 = (($1631) + 44|0);
         $1633 = HEAP32[$1632>>2]|0;
         $yythunkpos1805 = $1633;
         $1634 = $1;
         $1635 = (($1634) + 12|0);
         $1636 = HEAP32[$1635>>2]|0;
         $yypos1807 = $1636;
         $1637 = $1;
         $1638 = (($1637) + 44|0);
         $1639 = HEAP32[$1638>>2]|0;
         $yythunkpos1807 = $1639;
         $1640 = $1;
         $1641 = (_yymatchChar($1640,96)|0);
         $1642 = ($1641|0)!=(0);
         if ($1642) {
          label = 409;
          break;
         }
         $1643 = $yypos1807;
         $1644 = $1;
         $1645 = (($1644) + 12|0);
         HEAP32[$1645>>2] = $1643;
         $1646 = $yythunkpos1807;
         $1647 = $1;
         $1648 = (($1647) + 44|0);
         HEAP32[$1648>>2] = $1646;
         $1649 = $1;
         $1650 = (_yy_Nonspacechar($1649)|0);
         $1651 = ($1650|0)!=(0);
         if (!($1651)) {
          label = 411;
          break;
         }
        }
        if ((label|0) == 409) {
         label = 0;
        }
        else if ((label|0) == 411) {
         label = 0;
        }
        $1652 = $yypos1805;
        $1653 = $1;
        $1654 = (($1653) + 12|0);
        HEAP32[$1654>>2] = $1652;
        $1655 = $yythunkpos1805;
        $1656 = $1;
        $1657 = (($1656) + 44|0);
        HEAP32[$1657>>2] = $1655;
       }
      } while(0);
      L550: do {
       if ((label|0) == 414) {
        label = 0;
        $1658 = $yypos1802;
        $1659 = $1;
        $1660 = (($1659) + 12|0);
        HEAP32[$1660>>2] = $1658;
        $1661 = $yythunkpos1802;
        $1662 = $1;
        $1663 = (($1662) + 44|0);
        HEAP32[$1663>>2] = $1661;
        $1664 = $1;
        $1665 = (($1664) + 12|0);
        $1666 = HEAP32[$1665>>2]|0;
        $yypos1809 = $1666;
        $1667 = $1;
        $1668 = (($1667) + 44|0);
        $1669 = HEAP32[$1668>>2]|0;
        $yythunkpos1809 = $1669;
        $1670 = $1;
        $1671 = (_yy_Ticks5($1670)|0);
        $1672 = ($1671|0)!=(0);
        do {
         if ($1672) {
         } else {
          $1673 = $yypos1809;
          $1674 = $1;
          $1675 = (($1674) + 12|0);
          HEAP32[$1675>>2] = $1673;
          $1676 = $yythunkpos1809;
          $1677 = $1;
          $1678 = (($1677) + 44|0);
          HEAP32[$1678>>2] = $1676;
          $1679 = $1;
          $1680 = (_yymatchChar($1679,96)|0);
          $1681 = ($1680|0)!=(0);
          if (!($1681)) {
           break;
          }
          while(1) {
           $1682 = $1;
           $1683 = (($1682) + 12|0);
           $1684 = HEAP32[$1683>>2]|0;
           $yypos1811 = $1684;
           $1685 = $1;
           $1686 = (($1685) + 44|0);
           $1687 = HEAP32[$1686>>2]|0;
           $yythunkpos1811 = $1687;
           $1688 = $1;
           $1689 = (_yymatchChar($1688,96)|0);
           $1690 = ($1689|0)!=(0);
           if (!($1690)) {
            break;
           }
          }
          $1691 = $yypos1811;
          $1692 = $1;
          $1693 = (($1692) + 12|0);
          HEAP32[$1693>>2] = $1691;
          $1694 = $yythunkpos1811;
          $1695 = $1;
          $1696 = (($1695) + 44|0);
          HEAP32[$1696>>2] = $1694;
          break L550;
         }
        } while(0);
        $1697 = $yypos1802;
        $1698 = $1;
        $1699 = (($1698) + 12|0);
        HEAP32[$1699>>2] = $1697;
        $1700 = $yythunkpos1802;
        $1701 = $1;
        $1702 = (($1701) + 44|0);
        HEAP32[$1702>>2] = $1700;
        $1703 = $1;
        $1704 = (($1703) + 12|0);
        $1705 = HEAP32[$1704>>2]|0;
        $yypos1812 = $1705;
        $1706 = $1;
        $1707 = (($1706) + 44|0);
        $1708 = HEAP32[$1707>>2]|0;
        $yythunkpos1812 = $1708;
        $1709 = $1;
        $1710 = (_yy_Sp($1709)|0);
        $1711 = ($1710|0)!=(0);
        if ($1711) {
         $1712 = $1;
         $1713 = (_yy_Ticks5($1712)|0);
         $1714 = ($1713|0)!=(0);
         if ($1714) {
          label = 428;
          break L532;
         }
        } else {
        }
        $1715 = $yypos1812;
        $1716 = $1;
        $1717 = (($1716) + 12|0);
        HEAP32[$1717>>2] = $1715;
        $1718 = $yythunkpos1812;
        $1719 = $1;
        $1720 = (($1719) + 44|0);
        HEAP32[$1720>>2] = $1718;
        $1721 = $1;
        $1722 = (($1721) + 12|0);
        $1723 = HEAP32[$1722>>2]|0;
        $yypos1813 = $1723;
        $1724 = $1;
        $1725 = (($1724) + 44|0);
        $1726 = HEAP32[$1725>>2]|0;
        $yythunkpos1813 = $1726;
        $1727 = $1;
        $1728 = (_yy_Spacechar($1727)|0);
        $1729 = ($1728|0)!=(0);
        if ($1729) {
        } else {
         $1730 = $yypos1813;
         $1731 = $1;
         $1732 = (($1731) + 12|0);
         HEAP32[$1732>>2] = $1730;
         $1733 = $yythunkpos1813;
         $1734 = $1;
         $1735 = (($1734) + 44|0);
         HEAP32[$1735>>2] = $1733;
         $1736 = $1;
         $1737 = (_yy_Newline($1736)|0);
         $1738 = ($1737|0)!=(0);
         if (!($1738)) {
          label = 433;
          break L532;
         }
         $1739 = $1;
         $1740 = (($1739) + 12|0);
         $1741 = HEAP32[$1740>>2]|0;
         $yypos1815 = $1741;
         $1742 = $1;
         $1743 = (($1742) + 44|0);
         $1744 = HEAP32[$1743>>2]|0;
         $yythunkpos1815 = $1744;
         $1745 = $1;
         $1746 = (_yy_BlankLine($1745)|0);
         $1747 = ($1746|0)!=(0);
         if ($1747) {
          label = 436;
          break L532;
         }
         $1748 = $yypos1815;
         $1749 = $1;
         $1750 = (($1749) + 12|0);
         HEAP32[$1750>>2] = $1748;
         $1751 = $yythunkpos1815;
         $1752 = $1;
         $1753 = (($1752) + 44|0);
         HEAP32[$1753>>2] = $1751;
        }
       }
      } while(0);
     }
     if ((label|0) == 428) {
     }
     else if ((label|0) == 433) {
     }
     else if ((label|0) == 436) {
     }
     $1754 = $yypos1787;
     $1755 = $1;
     $1756 = (($1755) + 12|0);
     HEAP32[$1756>>2] = $1754;
     $1757 = $yythunkpos1787;
     $1758 = $1;
     $1759 = (($1758) + 44|0);
     HEAP32[$1759>>2] = $1757;
     $1760 = $1;
     $1761 = $1;
     $1762 = (($1761) + 28|0);
     $1763 = HEAP32[$1762>>2]|0;
     $1764 = $1;
     $1765 = (($1764) + 32|0);
     $1766 = HEAP32[$1765>>2]|0;
     (_yyText($1760,$1763,$1766)|0);
     $1767 = $1;
     $1768 = (($1767) + 12|0);
     $1769 = HEAP32[$1768>>2]|0;
     $1770 = $1;
     $1771 = (($1770) + 32|0);
     HEAP32[$1771>>2] = $1769;
     $1772 = $1;
     $1773 = (_yy_Sp($1772)|0);
     $1774 = ($1773|0)!=(0);
     if (!($1774)) {
      break;
     }
     $1775 = $1;
     $1776 = (_yy_Ticks5($1775)|0);
     $1777 = ($1776|0)!=(0);
     if ($1777) {
      break L118;
     } else {
      break;
     }
    } else {
    }
   } while(0);
   $1785 = $yypos0;
   $1786 = $1;
   $1787 = (($1786) + 12|0);
   HEAP32[$1787>>2] = $1785;
   $1788 = $yythunkpos0;
   $1789 = $1;
   $1790 = (($1789) + 44|0);
   HEAP32[$1790>>2] = $1788;
   $0 = 0;
   $1791 = $0;
   STACKTOP = sp;return ($1791|0);
  }
 } while(0);
 $1778 = $1;
 $1779 = $1;
 $1780 = (($1779) + 28|0);
 $1781 = HEAP32[$1780>>2]|0;
 $1782 = $1;
 $1783 = (($1782) + 32|0);
 $1784 = HEAP32[$1783>>2]|0;
 _yyDo($1778,181,$1781,$1784,44568);
 $0 = 1;
 $1791 = $0;
 STACKTOP = sp;return ($1791|0);
}
function _yy_RawHtml($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos2060 = 0, $yythunkpos0 = 0, $yythunkpos2060 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = $1;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($12) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 (_yyText($8,$11,$14)|0);
 $15 = $1;
 $16 = (($15) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = (($18) + 28|0);
 HEAP32[$19>>2] = $17;
 $20 = $1;
 $21 = (($20) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $yypos2060 = $22;
 $23 = $1;
 $24 = (($23) + 44|0);
 $25 = HEAP32[$24>>2]|0;
 $yythunkpos2060 = $25;
 $26 = $1;
 $27 = (_yy_HtmlComment($26)|0);
 $28 = ($27|0)!=(0);
 do {
  if ($28) {
  } else {
   $29 = $yypos2060;
   $30 = $1;
   $31 = (($30) + 12|0);
   HEAP32[$31>>2] = $29;
   $32 = $yythunkpos2060;
   $33 = $1;
   $34 = (($33) + 44|0);
   HEAP32[$34>>2] = $32;
   $35 = $1;
   $36 = (_yy_HtmlBlockScript($35)|0);
   $37 = ($36|0)!=(0);
   if ($37) {
    break;
   }
   $38 = $yypos2060;
   $39 = $1;
   $40 = (($39) + 12|0);
   HEAP32[$40>>2] = $38;
   $41 = $yythunkpos2060;
   $42 = $1;
   $43 = (($42) + 44|0);
   HEAP32[$43>>2] = $41;
   $44 = $1;
   $45 = (_yy_HtmlTag($44)|0);
   $46 = ($45|0)!=(0);
   if ($46) {
    break;
   }
   $66 = $yypos0;
   $67 = $1;
   $68 = (($67) + 12|0);
   HEAP32[$68>>2] = $66;
   $69 = $yythunkpos0;
   $70 = $1;
   $71 = (($70) + 44|0);
   HEAP32[$71>>2] = $69;
   $0 = 0;
   $72 = $0;
   STACKTOP = sp;return ($72|0);
  }
 } while(0);
 $47 = $1;
 $48 = $1;
 $49 = (($48) + 28|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $1;
 $52 = (($51) + 32|0);
 $53 = HEAP32[$52>>2]|0;
 (_yyText($47,$50,$53)|0);
 $54 = $1;
 $55 = (($54) + 12|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $1;
 $58 = (($57) + 32|0);
 HEAP32[$58>>2] = $56;
 $59 = $1;
 $60 = $1;
 $61 = (($60) + 28|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $1;
 $64 = (($63) + 32|0);
 $65 = HEAP32[$64>>2]|0;
 _yyDo($59,182,$62,$65,44552);
 $0 = 1;
 $72 = $0;
 STACKTOP = sp;return ($72|0);
}
function _yy_Entity($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1903 = 0, $yythunkpos0 = 0, $yythunkpos1903 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos1903 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos1903 = $13;
 $14 = $1;
 $15 = (_yy_HexEntity($14)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
  } else {
   $17 = $yypos1903;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos1903;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yy_DecEntity($23)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    break;
   }
   $26 = $yypos1903;
   $27 = $1;
   $28 = (($27) + 12|0);
   HEAP32[$28>>2] = $26;
   $29 = $yythunkpos1903;
   $30 = $1;
   $31 = (($30) + 44|0);
   HEAP32[$31>>2] = $29;
   $32 = $1;
   $33 = (_yy_CharEntity($32)|0);
   $34 = ($33|0)!=(0);
   if ($34) {
    break;
   }
   $42 = $yypos0;
   $43 = $1;
   $44 = (($43) + 12|0);
   HEAP32[$44>>2] = $42;
   $45 = $yythunkpos0;
   $46 = $1;
   $47 = (($46) + 44|0);
   HEAP32[$47>>2] = $45;
   $0 = 0;
   $48 = $0;
   STACKTOP = sp;return ($48|0);
  }
 } while(0);
 $35 = $1;
 $36 = $1;
 $37 = (($36) + 28|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $1;
 $40 = (($39) + 32|0);
 $41 = HEAP32[$40>>2]|0;
 _yyDo($35,183,$38,$41,44432);
 $0 = 1;
 $48 = $0;
 STACKTOP = sp;return ($48|0);
}
function _yy_EscapedChar($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yythunkpos0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,92)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = $1;
   $13 = (($12) + 28|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $1;
   $16 = (($15) + 32|0);
   $17 = HEAP32[$16>>2]|0;
   (_yyText($11,$14,$17)|0);
   $18 = $1;
   $19 = (($18) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $1;
   $22 = (($21) + 28|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yymatchClass($23,44336,44376)|0);
   $25 = ($24|0)!=(0);
   if (!($25)) {
    break;
   }
   $26 = $1;
   $27 = $1;
   $28 = (($27) + 28|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $1;
   $31 = (($30) + 32|0);
   $32 = HEAP32[$31>>2]|0;
   (_yyText($26,$29,$32)|0);
   $33 = $1;
   $34 = (($33) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $1;
   $37 = (($36) + 32|0);
   HEAP32[$37>>2] = $35;
   $38 = $1;
   $39 = $1;
   $40 = (($39) + 28|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $1;
   $43 = (($42) + 32|0);
   $44 = HEAP32[$43>>2]|0;
   _yyDo($38,184,$41,$44,44408);
   $0 = 1;
   $51 = $0;
   STACKTOP = sp;return ($51|0);
  } else {
  }
 } while(0);
 $45 = $yypos0;
 $46 = $1;
 $47 = (($46) + 12|0);
 HEAP32[$47>>2] = $45;
 $48 = $yythunkpos0;
 $49 = $1;
 $50 = (($49) + 44|0);
 HEAP32[$50>>2] = $48;
 $0 = 0;
 $51 = $0;
 STACKTOP = sp;return ($51|0);
}
function _yy_Smart($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $yypos0 = 0, $yypos1647 = 0, $yythunkpos0 = 0, $yythunkpos1647 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = $1;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($12) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 (_yyText($8,$11,$14)|0);
 $15 = $1;
 $16 = (($15) + 64|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (_extension(16,$19)|0);
 L1: do {
  if ($20) {
   $21 = $1;
   $22 = (($21) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $yypos1647 = $23;
   $24 = $1;
   $25 = (($24) + 44|0);
   $26 = HEAP32[$25>>2]|0;
   $yythunkpos1647 = $26;
   $27 = $1;
   $28 = (_yy_Ellipsis($27)|0);
   $29 = ($28|0)!=(0);
   do {
    if ($29) {
    } else {
     $30 = $yypos1647;
     $31 = $1;
     $32 = (($31) + 12|0);
     HEAP32[$32>>2] = $30;
     $33 = $yythunkpos1647;
     $34 = $1;
     $35 = (($34) + 44|0);
     HEAP32[$35>>2] = $33;
     $36 = $1;
     $37 = (_yy_Dash($36)|0);
     $38 = ($37|0)!=(0);
     if ($38) {
      break;
     }
     $39 = $yypos1647;
     $40 = $1;
     $41 = (($40) + 12|0);
     HEAP32[$41>>2] = $39;
     $42 = $yythunkpos1647;
     $43 = $1;
     $44 = (($43) + 44|0);
     HEAP32[$44>>2] = $42;
     $45 = $1;
     $46 = (_yy_SingleQuoted($45)|0);
     $47 = ($46|0)!=(0);
     if ($47) {
      break;
     }
     $48 = $yypos1647;
     $49 = $1;
     $50 = (($49) + 12|0);
     HEAP32[$50>>2] = $48;
     $51 = $yythunkpos1647;
     $52 = $1;
     $53 = (($52) + 44|0);
     HEAP32[$53>>2] = $51;
     $54 = $1;
     $55 = (_yy_DoubleQuoted($54)|0);
     $56 = ($55|0)!=(0);
     if ($56) {
      break;
     }
     $57 = $yypos1647;
     $58 = $1;
     $59 = (($58) + 12|0);
     HEAP32[$59>>2] = $57;
     $60 = $yythunkpos1647;
     $61 = $1;
     $62 = (($61) + 44|0);
     HEAP32[$62>>2] = $60;
     $63 = $1;
     $64 = (_yy_BackTickQuoted($63)|0);
     $65 = ($64|0)!=(0);
     if ($65) {
      break;
     }
     $66 = $yypos1647;
     $67 = $1;
     $68 = (($67) + 12|0);
     HEAP32[$68>>2] = $66;
     $69 = $yythunkpos1647;
     $70 = $1;
     $71 = (($70) + 44|0);
     HEAP32[$71>>2] = $69;
     $72 = $1;
     $73 = (_yy_Apostrophe($72)|0);
     $74 = ($73|0)!=(0);
     if ($74) {
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   $0 = 1;
   $81 = $0;
   STACKTOP = sp;return ($81|0);
  } else {
  }
 } while(0);
 $75 = $yypos0;
 $76 = $1;
 $77 = (($76) + 12|0);
 HEAP32[$77>>2] = $75;
 $78 = $yythunkpos0;
 $79 = $1;
 $80 = (($79) + 44|0);
 HEAP32[$80>>2] = $78;
 $0 = 0;
 $81 = $0;
 STACKTOP = sp;return ($81|0);
}
function _yy_Symbol($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yythunkpos0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = $1;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($12) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 (_yyText($8,$11,$14)|0);
 $15 = $1;
 $16 = (($15) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = (($18) + 28|0);
 HEAP32[$19>>2] = $17;
 $20 = $1;
 $21 = (_yy_SpecialChar($20)|0);
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = $1;
  $24 = $1;
  $25 = (($24) + 28|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $1;
  $28 = (($27) + 32|0);
  $29 = HEAP32[$28>>2]|0;
  (_yyText($23,$26,$29)|0);
  $30 = $1;
  $31 = (($30) + 12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $1;
  $34 = (($33) + 32|0);
  HEAP32[$34>>2] = $32;
  $35 = $1;
  $36 = $1;
  $37 = (($36) + 28|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $1;
  $40 = (($39) + 32|0);
  $41 = HEAP32[$40>>2]|0;
  _yyDo($35,185,$38,$41,42976);
  $0 = 1;
  $48 = $0;
  STACKTOP = sp;return ($48|0);
 } else {
  $42 = $yypos0;
  $43 = $1;
  $44 = (($43) + 12|0);
  HEAP32[$44>>2] = $42;
  $45 = $yythunkpos0;
  $46 = $1;
  $47 = (($46) + 44|0);
  HEAP32[$47>>2] = $45;
  $0 = 0;
  $48 = $0;
  STACKTOP = sp;return ($48|0);
 }
 return (0)|0;
}
function _yy_1_BlockQuoteMarker($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 $14 = $0;
 $15 = (($14) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP16[$16>>1] = 39;
 STACKTOP = sp;return;
}
function _yy_AttrKey($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1309 = 0, $yythunkpos0 = 0, $yythunkpos1309 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = $1;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($12) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 (_yyText($8,$11,$14)|0);
 $15 = $1;
 $16 = (($15) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = (($18) + 28|0);
 HEAP32[$19>>2] = $17;
 $20 = $1;
 $21 = (_yy_AlphanumericAscii($20)|0);
 $22 = ($21|0)!=(0);
 if (!($22)) {
  $57 = $yypos0;
  $58 = $1;
  $59 = (($58) + 12|0);
  HEAP32[$59>>2] = $57;
  $60 = $yythunkpos0;
  $61 = $1;
  $62 = (($61) + 44|0);
  HEAP32[$62>>2] = $60;
  $0 = 0;
  $63 = $0;
  STACKTOP = sp;return ($63|0);
 }
 while(1) {
  $23 = $1;
  $24 = (($23) + 12|0);
  $25 = HEAP32[$24>>2]|0;
  $yypos1309 = $25;
  $26 = $1;
  $27 = (($26) + 44|0);
  $28 = HEAP32[$27>>2]|0;
  $yythunkpos1309 = $28;
  $29 = $1;
  $30 = (_yy_AlphanumericAscii($29)|0);
  $31 = ($30|0)!=(0);
  if (!($31)) {
   break;
  }
 }
 $32 = $yypos1309;
 $33 = $1;
 $34 = (($33) + 12|0);
 HEAP32[$34>>2] = $32;
 $35 = $yythunkpos1309;
 $36 = $1;
 $37 = (($36) + 44|0);
 HEAP32[$37>>2] = $35;
 $38 = $1;
 $39 = $1;
 $40 = (($39) + 28|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $1;
 $43 = (($42) + 32|0);
 $44 = HEAP32[$43>>2]|0;
 (_yyText($38,$41,$44)|0);
 $45 = $1;
 $46 = (($45) + 12|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $1;
 $49 = (($48) + 32|0);
 HEAP32[$49>>2] = $47;
 $50 = $1;
 $51 = $1;
 $52 = (($51) + 28|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $1;
 $55 = (($54) + 32|0);
 $56 = HEAP32[$55>>2]|0;
 _yyDo($50,186,$53,$56,48336);
 $0 = 1;
 $63 = $0;
 STACKTOP = sp;return ($63|0);
}
function _yy_AttrValue($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $yypos0 = 0, $yypos1305 = 0, $yythunkpos0 = 0, $yythunkpos1305 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos1305 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos1305 = $13;
 $14 = $1;
 $15 = (_yy_QuotedValue($14)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
  } else {
   $17 = $yypos1305;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos1305;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yy_UnQuotedValue($23)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    break;
   }
   $33 = $yypos0;
   $34 = $1;
   $35 = (($34) + 12|0);
   HEAP32[$35>>2] = $33;
   $36 = $yythunkpos0;
   $37 = $1;
   $38 = (($37) + 44|0);
   HEAP32[$38>>2] = $36;
   $0 = 0;
   $39 = $0;
   STACKTOP = sp;return ($39|0);
  }
 } while(0);
 $26 = $1;
 $27 = $1;
 $28 = (($27) + 28|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $1;
 $31 = (($30) + 32|0);
 $32 = HEAP32[$31>>2]|0;
 _yyDo($26,187,$29,$32,48320);
 $0 = 1;
 $39 = $0;
 STACKTOP = sp;return ($39|0);
}
function _yy_1_Attribute($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = (($10) + 48|0);
 HEAP32[$11>>2] = $9;
 $12 = $0;
 $13 = (($12) + 52|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + -4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $0;
 $18 = (($17) + 48|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + 12|0);
 HEAP32[$20>>2] = $16;
 STACKTOP = sp;return;
}
function _yy_1_AtxStart($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = (_strlen(($5|0))|0);
 $7 = (($6) - 1)|0;
 $8 = (10 + ($7))|0;
 $9 = $3;
 $10 = HEAP32[$9>>2]|0;
 $11 = $3;
 $12 = (($11) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_mk_pos_node($8,0,$10,$13)|0);
 $15 = $0;
 $16 = (($15) + 48|0);
 HEAP32[$16>>2] = $14;
 STACKTOP = sp;return;
}
function _yy_1_ListItemTight($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_ListBlock($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $yypos0 = 0, $yypos1074 = 0, $yypos1075 = 0, $yypos1077 = 0, $yythunkpos0 = 0, $yythunkpos1074 = 0, $yythunkpos1075 = 0, $yythunkpos1077 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 $9 = $1;
 $10 = (_yy_StartList($9)|0);
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $1;
   _yyDo($12,8,-1,0,41336);
   $13 = $1;
   $14 = (($13) + 12|0);
   $15 = HEAP32[$14>>2]|0;
   $yypos1074 = $15;
   $16 = $1;
   $17 = (($16) + 44|0);
   $18 = HEAP32[$17>>2]|0;
   $yythunkpos1074 = $18;
   $19 = $1;
   $20 = (_yy_BlankLine($19)|0);
   $21 = ($20|0)!=(0);
   if ($21) {
    break;
   }
   $22 = $yypos1074;
   $23 = $1;
   $24 = (($23) + 12|0);
   HEAP32[$24>>2] = $22;
   $25 = $yythunkpos1074;
   $26 = $1;
   $27 = (($26) + 44|0);
   HEAP32[$27>>2] = $25;
   $28 = $1;
   $29 = (($28) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $yypos1075 = $30;
   $31 = $1;
   $32 = (($31) + 44|0);
   $33 = HEAP32[$32>>2]|0;
   $yythunkpos1075 = $33;
   $34 = $1;
   $35 = (_yy_Heading($34)|0);
   $36 = ($35|0)!=(0);
   if ($36) {
    break;
   }
   $37 = $yypos1075;
   $38 = $1;
   $39 = (($38) + 12|0);
   HEAP32[$39>>2] = $37;
   $40 = $yythunkpos1075;
   $41 = $1;
   $42 = (($41) + 44|0);
   HEAP32[$42>>2] = $40;
   $43 = $1;
   $44 = (_yy_Line($43)|0);
   $45 = ($44|0)!=(0);
   if (!($45)) {
    break;
   }
   $46 = $1;
   $47 = $1;
   $48 = (($47) + 28|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $1;
   $51 = (($50) + 32|0);
   $52 = HEAP32[$51>>2]|0;
   _yyDo($46,188,$49,$52,47888);
   while(1) {
    $53 = $1;
    $54 = (($53) + 12|0);
    $55 = HEAP32[$54>>2]|0;
    $yypos1077 = $55;
    $56 = $1;
    $57 = (($56) + 44|0);
    $58 = HEAP32[$57>>2]|0;
    $yythunkpos1077 = $58;
    $59 = $1;
    $60 = (_yy_ListBlockLine($59)|0);
    $61 = ($60|0)!=(0);
    if (!($61)) {
     break;
    }
    $62 = $1;
    $63 = $1;
    $64 = (($63) + 28|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = $1;
    $67 = (($66) + 32|0);
    $68 = HEAP32[$67>>2]|0;
    _yyDo($62,189,$65,$68,47904);
   }
   $69 = $yypos1077;
   $70 = $1;
   $71 = (($70) + 12|0);
   HEAP32[$71>>2] = $69;
   $72 = $yythunkpos1077;
   $73 = $1;
   $74 = (($73) + 44|0);
   HEAP32[$74>>2] = $72;
   $75 = $1;
   $76 = $1;
   $77 = (($76) + 28|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $1;
   $80 = (($79) + 32|0);
   $81 = HEAP32[$80>>2]|0;
   _yyDo($75,190,$78,$81,47920);
   $82 = $1;
   _yyDo($82,12,1,0,41392);
   $0 = 1;
   $89 = $0;
   STACKTOP = sp;return ($89|0);
  } else {
  }
 } while(0);
 $83 = $yypos0;
 $84 = $1;
 $85 = (($84) + 12|0);
 HEAP32[$85>>2] = $83;
 $86 = $yythunkpos0;
 $87 = $1;
 $88 = (($87) + 44|0);
 HEAP32[$88>>2] = $86;
 $0 = 0;
 $89 = $0;
 STACKTOP = sp;return ($89|0);
}
function _yy_2_ListItemTight($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_ListContinuationBlock($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos1070 = 0, $yypos1072 = 0, $yythunkpos0 = 0, $yythunkpos1070 = 0, $yythunkpos1072 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 $9 = $1;
 $10 = (_yy_StartList($9)|0);
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $1;
   _yyDo($12,8,-1,0,41336);
   $13 = $1;
   $14 = $1;
   $15 = (($14) + 28|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $1;
   $18 = (($17) + 32|0);
   $19 = HEAP32[$18>>2]|0;
   (_yyText($13,$16,$19)|0);
   $20 = $1;
   $21 = (($20) + 12|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $1;
   $24 = (($23) + 28|0);
   HEAP32[$24>>2] = $22;
   while(1) {
    $25 = $1;
    $26 = (($25) + 12|0);
    $27 = HEAP32[$26>>2]|0;
    $yypos1070 = $27;
    $28 = $1;
    $29 = (($28) + 44|0);
    $30 = HEAP32[$29>>2]|0;
    $yythunkpos1070 = $30;
    $31 = $1;
    $32 = (_yy_BlankLine($31)|0);
    $33 = ($32|0)!=(0);
    if (!($33)) {
     break;
    }
   }
   $34 = $yypos1070;
   $35 = $1;
   $36 = (($35) + 12|0);
   HEAP32[$36>>2] = $34;
   $37 = $yythunkpos1070;
   $38 = $1;
   $39 = (($38) + 44|0);
   HEAP32[$39>>2] = $37;
   $40 = $1;
   $41 = $1;
   $42 = (($41) + 28|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $1;
   $45 = (($44) + 32|0);
   $46 = HEAP32[$45>>2]|0;
   (_yyText($40,$43,$46)|0);
   $47 = $1;
   $48 = (($47) + 12|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $1;
   $51 = (($50) + 32|0);
   HEAP32[$51>>2] = $49;
   $52 = $1;
   $53 = $1;
   $54 = (($53) + 28|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = $1;
   $57 = (($56) + 32|0);
   $58 = HEAP32[$57>>2]|0;
   _yyDo($52,191,$55,$58,47784);
   $59 = $1;
   $60 = (_yy_Indent($59)|0);
   $61 = ($60|0)!=(0);
   if (!($61)) {
    break;
   }
   $62 = $1;
   $63 = (_yy_ListBlock($62)|0);
   $64 = ($63|0)!=(0);
   if (!($64)) {
    break;
   }
   $65 = $1;
   $66 = $1;
   $67 = (($66) + 28|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $1;
   $70 = (($69) + 32|0);
   $71 = HEAP32[$70>>2]|0;
   _yyDo($65,192,$68,$71,47816);
   while(1) {
    $72 = $1;
    $73 = (($72) + 12|0);
    $74 = HEAP32[$73>>2]|0;
    $yypos1072 = $74;
    $75 = $1;
    $76 = (($75) + 44|0);
    $77 = HEAP32[$76>>2]|0;
    $yythunkpos1072 = $77;
    $78 = $1;
    $79 = (_yy_Indent($78)|0);
    $80 = ($79|0)!=(0);
    if (!($80)) {
     label = 15;
     break;
    }
    $81 = $1;
    $82 = (_yy_ListBlock($81)|0);
    $83 = ($82|0)!=(0);
    if (!($83)) {
     label = 17;
     break;
    }
    $84 = $1;
    $85 = $1;
    $86 = (($85) + 28|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = $1;
    $89 = (($88) + 32|0);
    $90 = HEAP32[$89>>2]|0;
    _yyDo($84,192,$87,$90,47816);
   }
   if ((label|0) == 15) {
   }
   else if ((label|0) == 17) {
   }
   $91 = $yypos1072;
   $92 = $1;
   $93 = (($92) + 12|0);
   HEAP32[$93>>2] = $91;
   $94 = $yythunkpos1072;
   $95 = $1;
   $96 = (($95) + 44|0);
   HEAP32[$96>>2] = $94;
   $97 = $1;
   $98 = $1;
   $99 = (($98) + 28|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = $1;
   $102 = (($101) + 32|0);
   $103 = HEAP32[$102>>2]|0;
   _yyDo($97,193,$100,$103,47848);
   $104 = $1;
   _yyDo($104,12,1,0,41392);
   $0 = 1;
   $111 = $0;
   STACKTOP = sp;return ($111|0);
  } else {
  }
 } while(0);
 $105 = $yypos0;
 $106 = $1;
 $107 = (($106) + 12|0);
 HEAP32[$107>>2] = $105;
 $108 = $yythunkpos0;
 $109 = $1;
 $110 = (($109) + 44|0);
 HEAP32[$110>>2] = $108;
 $0 = 0;
 $111 = $0;
 STACKTOP = sp;return ($111|0);
}
function _yy_3_ListItemTight($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_4_ListItemTight($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $raw = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_mk_str_from_list($9,0)|0);
 $raw = $10;
 $11 = $raw;
 HEAP16[$11>>1] = 40;
 $12 = $3;
 $13 = HEAP32[$12>>2]|0;
 $14 = $3;
 $15 = (($14) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_mk_pos_node(50,0,$13,$16)|0);
 $18 = $0;
 $19 = (($18) + 48|0);
 HEAP32[$19>>2] = $17;
 $20 = $raw;
 $21 = $0;
 $22 = (($21) + 48|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + 12|0);
 HEAP32[$24>>2] = $20;
 STACKTOP = sp;return;
}
function _yy_1_EmptyList($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = (_mk_str(41432)|0);
 $6 = $0;
 $7 = (($6) + 48|0);
 HEAP32[$7>>2] = $5;
 STACKTOP = sp;return;
}
function _yy_1_ListItem($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_2_ListItem($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_3_ListItem($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_4_ListItem($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $raw = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_mk_str_from_list($9,0)|0);
 $raw = $10;
 $11 = $raw;
 HEAP16[$11>>1] = 40;
 $12 = $3;
 $13 = HEAP32[$12>>2]|0;
 $14 = $3;
 $15 = (($14) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_mk_pos_node(50,0,$13,$16)|0);
 $18 = $0;
 $19 = (($18) + 48|0);
 HEAP32[$19>>2] = $17;
 $20 = $raw;
 $21 = $0;
 $22 = (($21) + 48|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + 12|0);
 HEAP32[$24>>2] = $20;
 STACKTOP = sp;return;
}
function _yy_Quoted($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $yypos0 = 0;
 var $yypos2092 = 0, $yypos2095 = 0, $yypos2096 = 0, $yypos2098 = 0, $yypos2099 = 0, $yythunkpos0 = 0, $yythunkpos2092 = 0, $yythunkpos2095 = 0, $yythunkpos2096 = 0, $yythunkpos2098 = 0, $yythunkpos2099 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos2092 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos2092 = $13;
 $14 = $1;
 $15 = (_yymatchChar($14,34)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
   while(1) {
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos2095 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos2095 = $22;
    $23 = $1;
    $24 = (($23) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $yypos2096 = $25;
    $26 = $1;
    $27 = (($26) + 44|0);
    $28 = HEAP32[$27>>2]|0;
    $yythunkpos2096 = $28;
    $29 = $1;
    $30 = (_yymatchChar($29,34)|0);
    $31 = ($30|0)!=(0);
    if ($31) {
     label = 6;
     break;
    }
    $32 = $yypos2096;
    $33 = $1;
    $34 = (($33) + 12|0);
    HEAP32[$34>>2] = $32;
    $35 = $yythunkpos2096;
    $36 = $1;
    $37 = (($36) + 44|0);
    HEAP32[$37>>2] = $35;
    $38 = $1;
    $39 = (_yymatchDot($38)|0);
    $40 = ($39|0)!=(0);
    if (!($40)) {
     label = 8;
     break;
    }
   }
   if ((label|0) == 6) {
   }
   else if ((label|0) == 8) {
   }
   $41 = $yypos2095;
   $42 = $1;
   $43 = (($42) + 12|0);
   HEAP32[$43>>2] = $41;
   $44 = $yythunkpos2095;
   $45 = $1;
   $46 = (($45) + 44|0);
   HEAP32[$46>>2] = $44;
   $47 = $1;
   $48 = (_yymatchChar($47,34)|0);
   $49 = ($48|0)!=(0);
   if ($49) {
    break;
   } else {
    label = 13;
    break;
   }
  } else {
   label = 13;
  }
 } while(0);
 L16: do {
  if ((label|0) == 13) {
   $50 = $yypos2092;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos2092;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yymatchChar($56,39)|0);
   $58 = ($57|0)!=(0);
   do {
    if ($58) {
     while(1) {
      $59 = $1;
      $60 = (($59) + 12|0);
      $61 = HEAP32[$60>>2]|0;
      $yypos2098 = $61;
      $62 = $1;
      $63 = (($62) + 44|0);
      $64 = HEAP32[$63>>2]|0;
      $yythunkpos2098 = $64;
      $65 = $1;
      $66 = (($65) + 12|0);
      $67 = HEAP32[$66>>2]|0;
      $yypos2099 = $67;
      $68 = $1;
      $69 = (($68) + 44|0);
      $70 = HEAP32[$69>>2]|0;
      $yythunkpos2099 = $70;
      $71 = $1;
      $72 = (_yymatchChar($71,39)|0);
      $73 = ($72|0)!=(0);
      if ($73) {
       label = 18;
       break;
      }
      $74 = $yypos2099;
      $75 = $1;
      $76 = (($75) + 12|0);
      HEAP32[$76>>2] = $74;
      $77 = $yythunkpos2099;
      $78 = $1;
      $79 = (($78) + 44|0);
      HEAP32[$79>>2] = $77;
      $80 = $1;
      $81 = (_yymatchDot($80)|0);
      $82 = ($81|0)!=(0);
      if (!($82)) {
       label = 20;
       break;
      }
     }
     if ((label|0) == 18) {
     }
     else if ((label|0) == 20) {
     }
     $83 = $yypos2098;
     $84 = $1;
     $85 = (($84) + 12|0);
     HEAP32[$85>>2] = $83;
     $86 = $yythunkpos2098;
     $87 = $1;
     $88 = (($87) + 44|0);
     HEAP32[$88>>2] = $86;
     $89 = $1;
     $90 = (_yymatchChar($89,39)|0);
     $91 = ($90|0)!=(0);
     if ($91) {
      break L16;
     } else {
      break;
     }
    } else {
    }
   } while(0);
   $92 = $yypos0;
   $93 = $1;
   $94 = (($93) + 12|0);
   HEAP32[$94>>2] = $92;
   $95 = $yythunkpos0;
   $96 = $1;
   $97 = (($96) + 44|0);
   HEAP32[$97>>2] = $95;
   $0 = 0;
   $98 = $0;
   STACKTOP = sp;return ($98|0);
  }
 } while(0);
 $0 = 1;
 $98 = $0;
 STACKTOP = sp;return ($98|0);
}
function _yy_TableCell($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $yypos0 = 0, $yypos260 = 0, $yythunkpos0 = 0, $yythunkpos260 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos260 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos260 = $13;
 $14 = $1;
 $15 = (_yy_ExtendedCell($14)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
  } else {
   $17 = $yypos260;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos260;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yy_EmptyCell($23)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    break;
   }
   $26 = $yypos260;
   $27 = $1;
   $28 = (($27) + 12|0);
   HEAP32[$28>>2] = $26;
   $29 = $yythunkpos260;
   $30 = $1;
   $31 = (($30) + 44|0);
   HEAP32[$31>>2] = $29;
   $32 = $1;
   $33 = (_yy_FullCell($32)|0);
   $34 = ($33|0)!=(0);
   if ($34) {
    break;
   }
   $35 = $yypos0;
   $36 = $1;
   $37 = (($36) + 12|0);
   HEAP32[$37>>2] = $35;
   $38 = $yythunkpos0;
   $39 = $1;
   $40 = (($39) + 44|0);
   HEAP32[$40>>2] = $38;
   $0 = 0;
   $41 = $0;
   STACKTOP = sp;return ($41|0);
  }
 } while(0);
 $0 = 1;
 $41 = $0;
 STACKTOP = sp;return ($41|0);
}
function _yy_1_TableRow($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_2_TableRow($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_mk_pos_list(58,$9,$11,$14)|0);
 $16 = $0;
 $17 = (($16) + 48|0);
 HEAP32[$17>>2] = $15;
 STACKTOP = sp;return;
}
function _yy_LeftAlignWrap($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos211 = 0, $yypos213 = 0, $yypos216 = 0, $yypos218 = 0, $yypos219 = 0, $yypos220 = 0, $yypos221 = 0, $yypos222 = 0, $yythunkpos0 = 0, $yythunkpos211 = 0, $yythunkpos213 = 0, $yythunkpos216 = 0, $yythunkpos218 = 0, $yythunkpos219 = 0;
 var $yythunkpos220 = 0, $yythunkpos221 = 0, $yythunkpos222 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos211 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos211 = $13;
 $14 = $1;
 $15 = (_yymatchChar($14,58)|0);
 $16 = ($15|0)!=(0);
 if ($16) {
 } else {
  $17 = $yypos211;
  $18 = $1;
  $19 = (($18) + 12|0);
  HEAP32[$19>>2] = $17;
  $20 = $yythunkpos211;
  $21 = $1;
  $22 = (($21) + 44|0);
  HEAP32[$22>>2] = $20;
 }
 $23 = $1;
 $24 = (($23) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $yypos213 = $25;
 $26 = $1;
 $27 = (($26) + 44|0);
 $28 = HEAP32[$27>>2]|0;
 $yythunkpos213 = $28;
 $29 = $1;
 $30 = (_yymatchChar($29,45)|0);
 $31 = ($30|0)!=(0);
 do {
  if ($31) {
   while(1) {
    $32 = $1;
    $33 = (($32) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $yypos216 = $34;
    $35 = $1;
    $36 = (($35) + 44|0);
    $37 = HEAP32[$36>>2]|0;
    $yythunkpos216 = $37;
    $38 = $1;
    $39 = (_yymatchChar($38,45)|0);
    $40 = ($39|0)!=(0);
    if (!($40)) {
     break;
    }
   }
   $41 = $yypos216;
   $42 = $1;
   $43 = (($42) + 12|0);
   HEAP32[$43>>2] = $41;
   $44 = $yythunkpos216;
   $45 = $1;
   $46 = (($45) + 44|0);
   HEAP32[$46>>2] = $44;
   label = 19;
  } else {
   $47 = $yypos213;
   $48 = $1;
   $49 = (($48) + 12|0);
   HEAP32[$49>>2] = $47;
   $50 = $yythunkpos213;
   $51 = $1;
   $52 = (($51) + 44|0);
   HEAP32[$52>>2] = $50;
   $53 = $1;
   $54 = (_yymatchChar($53,61)|0);
   $55 = ($54|0)!=(0);
   if (!($55)) {
    break;
   }
   while(1) {
    $56 = $1;
    $57 = (($56) + 12|0);
    $58 = HEAP32[$57>>2]|0;
    $yypos218 = $58;
    $59 = $1;
    $60 = (($59) + 44|0);
    $61 = HEAP32[$60>>2]|0;
    $yythunkpos218 = $61;
    $62 = $1;
    $63 = (_yymatchChar($62,61)|0);
    $64 = ($63|0)!=(0);
    if (!($64)) {
     break;
    }
   }
   $65 = $yypos218;
   $66 = $1;
   $67 = (($66) + 12|0);
   HEAP32[$67>>2] = $65;
   $68 = $yythunkpos218;
   $69 = $1;
   $70 = (($69) + 44|0);
   HEAP32[$70>>2] = $68;
   label = 19;
  }
 } while(0);
 do {
  if ((label|0) == 19) {
   $71 = $1;
   $72 = (_yymatchChar($71,43)|0);
   $73 = ($72|0)!=(0);
   if (!($73)) {
    break;
   }
   $74 = $1;
   $75 = (($74) + 12|0);
   $76 = HEAP32[$75>>2]|0;
   $yypos219 = $76;
   $77 = $1;
   $78 = (($77) + 44|0);
   $79 = HEAP32[$78>>2]|0;
   $yythunkpos219 = $79;
   $80 = $1;
   $81 = (($80) + 12|0);
   $82 = HEAP32[$81>>2]|0;
   $yypos220 = $82;
   $83 = $1;
   $84 = (($83) + 44|0);
   $85 = HEAP32[$84>>2]|0;
   $yythunkpos220 = $85;
   $86 = $1;
   $87 = (_yymatchChar($86,45)|0);
   $88 = ($87|0)!=(0);
   if ($88) {
    break;
   }
   $89 = $yypos220;
   $90 = $1;
   $91 = (($90) + 12|0);
   HEAP32[$91>>2] = $89;
   $92 = $yythunkpos220;
   $93 = $1;
   $94 = (($93) + 44|0);
   HEAP32[$94>>2] = $92;
   $95 = $1;
   $96 = (($95) + 12|0);
   $97 = HEAP32[$96>>2]|0;
   $yypos221 = $97;
   $98 = $1;
   $99 = (($98) + 44|0);
   $100 = HEAP32[$99>>2]|0;
   $yythunkpos221 = $100;
   $101 = $1;
   $102 = (_yymatchChar($101,61)|0);
   $103 = ($102|0)!=(0);
   if ($103) {
    break;
   }
   $104 = $yypos221;
   $105 = $1;
   $106 = (($105) + 12|0);
   HEAP32[$106>>2] = $104;
   $107 = $yythunkpos221;
   $108 = $1;
   $109 = (($108) + 44|0);
   HEAP32[$109>>2] = $107;
   $110 = $1;
   $111 = (($110) + 12|0);
   $112 = HEAP32[$111>>2]|0;
   $yypos222 = $112;
   $113 = $1;
   $114 = (($113) + 44|0);
   $115 = HEAP32[$114>>2]|0;
   $yythunkpos222 = $115;
   $116 = $1;
   $117 = (_yymatchChar($116,58)|0);
   $118 = ($117|0)!=(0);
   if ($118) {
    break;
   }
   $119 = $yypos222;
   $120 = $1;
   $121 = (($120) + 12|0);
   HEAP32[$121>>2] = $119;
   $122 = $yythunkpos222;
   $123 = $1;
   $124 = (($123) + 44|0);
   HEAP32[$124>>2] = $122;
   $125 = $yypos219;
   $126 = $1;
   $127 = (($126) + 12|0);
   HEAP32[$127>>2] = $125;
   $128 = $yythunkpos219;
   $129 = $1;
   $130 = (($129) + 44|0);
   HEAP32[$130>>2] = $128;
   $131 = $1;
   $132 = $1;
   $133 = (($132) + 28|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = $1;
   $136 = (($135) + 32|0);
   $137 = HEAP32[$136>>2]|0;
   _yyDo($131,194,$134,$137,47392);
   $0 = 1;
   $144 = $0;
   STACKTOP = sp;return ($144|0);
  }
 } while(0);
 $138 = $yypos0;
 $139 = $1;
 $140 = (($139) + 12|0);
 HEAP32[$140>>2] = $138;
 $141 = $yythunkpos0;
 $142 = $1;
 $143 = (($142) + 44|0);
 HEAP32[$143>>2] = $141;
 $0 = 0;
 $144 = $0;
 STACKTOP = sp;return ($144|0);
}
function _yy_CenterAlignWrap($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos198 = 0, $yypos200 = 0, $yypos203 = 0, $yypos205 = 0, $yypos206 = 0, $yypos207 = 0, $yypos208 = 0, $yypos209 = 0, $yythunkpos0 = 0, $yythunkpos198 = 0, $yythunkpos200 = 0;
 var $yythunkpos203 = 0, $yythunkpos205 = 0, $yythunkpos206 = 0, $yythunkpos207 = 0, $yythunkpos208 = 0, $yythunkpos209 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,58)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = (($11) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $yypos198 = $13;
   $14 = $1;
   $15 = (($14) + 44|0);
   $16 = HEAP32[$15>>2]|0;
   $yythunkpos198 = $16;
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos200 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos200 = $22;
   $23 = $1;
   $24 = (_yymatchChar($23,45)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
     while(1) {
      $26 = $1;
      $27 = (($26) + 12|0);
      $28 = HEAP32[$27>>2]|0;
      $yypos203 = $28;
      $29 = $1;
      $30 = (($29) + 44|0);
      $31 = HEAP32[$30>>2]|0;
      $yythunkpos203 = $31;
      $32 = $1;
      $33 = (_yymatchChar($32,45)|0);
      $34 = ($33|0)!=(0);
      if (!($34)) {
       break;
      }
     }
     $35 = $yypos203;
     $36 = $1;
     $37 = (($36) + 12|0);
     HEAP32[$37>>2] = $35;
     $38 = $yythunkpos203;
     $39 = $1;
     $40 = (($39) + 44|0);
     HEAP32[$40>>2] = $38;
     label = 17;
    } else {
     $41 = $yypos200;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos200;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchChar($47,61)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      $65 = $yypos198;
      $66 = $1;
      $67 = (($66) + 12|0);
      HEAP32[$67>>2] = $65;
      $68 = $yythunkpos198;
      $69 = $1;
      $70 = (($69) + 44|0);
      HEAP32[$70>>2] = $68;
      break;
     }
     while(1) {
      $50 = $1;
      $51 = (($50) + 12|0);
      $52 = HEAP32[$51>>2]|0;
      $yypos205 = $52;
      $53 = $1;
      $54 = (($53) + 44|0);
      $55 = HEAP32[$54>>2]|0;
      $yythunkpos205 = $55;
      $56 = $1;
      $57 = (_yymatchChar($56,61)|0);
      $58 = ($57|0)!=(0);
      if (!($58)) {
       break;
      }
     }
     $59 = $yypos205;
     $60 = $1;
     $61 = (($60) + 12|0);
     HEAP32[$61>>2] = $59;
     $62 = $yythunkpos205;
     $63 = $1;
     $64 = (($63) + 44|0);
     HEAP32[$64>>2] = $62;
     label = 17;
    }
   } while(0);
   if ((label|0) == 17) {
   }
   $71 = $1;
   $72 = (_yymatchChar($71,43)|0);
   $73 = ($72|0)!=(0);
   if (!($73)) {
    break;
   }
   $74 = $1;
   $75 = (_yymatchChar($74,58)|0);
   $76 = ($75|0)!=(0);
   if (!($76)) {
    break;
   }
   $77 = $1;
   $78 = (($77) + 12|0);
   $79 = HEAP32[$78>>2]|0;
   $yypos206 = $79;
   $80 = $1;
   $81 = (($80) + 44|0);
   $82 = HEAP32[$81>>2]|0;
   $yythunkpos206 = $82;
   $83 = $1;
   $84 = (($83) + 12|0);
   $85 = HEAP32[$84>>2]|0;
   $yypos207 = $85;
   $86 = $1;
   $87 = (($86) + 44|0);
   $88 = HEAP32[$87>>2]|0;
   $yythunkpos207 = $88;
   $89 = $1;
   $90 = (_yymatchChar($89,45)|0);
   $91 = ($90|0)!=(0);
   if ($91) {
    break;
   }
   $92 = $yypos207;
   $93 = $1;
   $94 = (($93) + 12|0);
   HEAP32[$94>>2] = $92;
   $95 = $yythunkpos207;
   $96 = $1;
   $97 = (($96) + 44|0);
   HEAP32[$97>>2] = $95;
   $98 = $1;
   $99 = (($98) + 12|0);
   $100 = HEAP32[$99>>2]|0;
   $yypos208 = $100;
   $101 = $1;
   $102 = (($101) + 44|0);
   $103 = HEAP32[$102>>2]|0;
   $yythunkpos208 = $103;
   $104 = $1;
   $105 = (_yymatchChar($104,61)|0);
   $106 = ($105|0)!=(0);
   if ($106) {
    break;
   }
   $107 = $yypos208;
   $108 = $1;
   $109 = (($108) + 12|0);
   HEAP32[$109>>2] = $107;
   $110 = $yythunkpos208;
   $111 = $1;
   $112 = (($111) + 44|0);
   HEAP32[$112>>2] = $110;
   $113 = $1;
   $114 = (($113) + 12|0);
   $115 = HEAP32[$114>>2]|0;
   $yypos209 = $115;
   $116 = $1;
   $117 = (($116) + 44|0);
   $118 = HEAP32[$117>>2]|0;
   $yythunkpos209 = $118;
   $119 = $1;
   $120 = (_yymatchChar($119,58)|0);
   $121 = ($120|0)!=(0);
   if ($121) {
    break;
   }
   $122 = $yypos209;
   $123 = $1;
   $124 = (($123) + 12|0);
   HEAP32[$124>>2] = $122;
   $125 = $yythunkpos209;
   $126 = $1;
   $127 = (($126) + 44|0);
   HEAP32[$127>>2] = $125;
   $128 = $yypos206;
   $129 = $1;
   $130 = (($129) + 12|0);
   HEAP32[$130>>2] = $128;
   $131 = $yythunkpos206;
   $132 = $1;
   $133 = (($132) + 44|0);
   HEAP32[$133>>2] = $131;
   $134 = $1;
   $135 = $1;
   $136 = (($135) + 28|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = $1;
   $139 = (($138) + 32|0);
   $140 = HEAP32[$139>>2]|0;
   _yyDo($134,195,$137,$140,47360);
   $0 = 1;
   $147 = $0;
   STACKTOP = sp;return ($147|0);
  } else {
  }
 } while(0);
 $141 = $yypos0;
 $142 = $1;
 $143 = (($142) + 12|0);
 HEAP32[$143>>2] = $141;
 $144 = $yythunkpos0;
 $145 = $1;
 $146 = (($145) + 44|0);
 HEAP32[$146>>2] = $144;
 $0 = 0;
 $147 = $0;
 STACKTOP = sp;return ($147|0);
}
function _yy_RightAlignWrap($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos187 = 0, $yypos190 = 0, $yypos192 = 0, $yypos193 = 0, $yypos194 = 0, $yypos195 = 0;
 var $yypos196 = 0, $yythunkpos0 = 0, $yythunkpos187 = 0, $yythunkpos190 = 0, $yythunkpos192 = 0, $yythunkpos193 = 0, $yythunkpos194 = 0, $yythunkpos195 = 0, $yythunkpos196 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos187 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos187 = $13;
 $14 = $1;
 $15 = (_yymatchChar($14,45)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
   while(1) {
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos190 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos190 = $22;
    $23 = $1;
    $24 = (_yymatchChar($23,45)|0);
    $25 = ($24|0)!=(0);
    if (!($25)) {
     break;
    }
   }
   $26 = $yypos190;
   $27 = $1;
   $28 = (($27) + 12|0);
   HEAP32[$28>>2] = $26;
   $29 = $yythunkpos190;
   $30 = $1;
   $31 = (($30) + 44|0);
   HEAP32[$31>>2] = $29;
   label = 15;
  } else {
   $32 = $yypos187;
   $33 = $1;
   $34 = (($33) + 12|0);
   HEAP32[$34>>2] = $32;
   $35 = $yythunkpos187;
   $36 = $1;
   $37 = (($36) + 44|0);
   HEAP32[$37>>2] = $35;
   $38 = $1;
   $39 = (_yymatchChar($38,61)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   while(1) {
    $41 = $1;
    $42 = (($41) + 12|0);
    $43 = HEAP32[$42>>2]|0;
    $yypos192 = $43;
    $44 = $1;
    $45 = (($44) + 44|0);
    $46 = HEAP32[$45>>2]|0;
    $yythunkpos192 = $46;
    $47 = $1;
    $48 = (_yymatchChar($47,61)|0);
    $49 = ($48|0)!=(0);
    if (!($49)) {
     break;
    }
   }
   $50 = $yypos192;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos192;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   label = 15;
  }
 } while(0);
 do {
  if ((label|0) == 15) {
   $56 = $1;
   $57 = (_yymatchChar($56,58)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $59 = $1;
   $60 = (_yymatchChar($59,43)|0);
   $61 = ($60|0)!=(0);
   if (!($61)) {
    break;
   }
   $62 = $1;
   $63 = (($62) + 12|0);
   $64 = HEAP32[$63>>2]|0;
   $yypos193 = $64;
   $65 = $1;
   $66 = (($65) + 44|0);
   $67 = HEAP32[$66>>2]|0;
   $yythunkpos193 = $67;
   $68 = $1;
   $69 = (($68) + 12|0);
   $70 = HEAP32[$69>>2]|0;
   $yypos194 = $70;
   $71 = $1;
   $72 = (($71) + 44|0);
   $73 = HEAP32[$72>>2]|0;
   $yythunkpos194 = $73;
   $74 = $1;
   $75 = (_yymatchChar($74,45)|0);
   $76 = ($75|0)!=(0);
   if ($76) {
    break;
   }
   $77 = $yypos194;
   $78 = $1;
   $79 = (($78) + 12|0);
   HEAP32[$79>>2] = $77;
   $80 = $yythunkpos194;
   $81 = $1;
   $82 = (($81) + 44|0);
   HEAP32[$82>>2] = $80;
   $83 = $1;
   $84 = (($83) + 12|0);
   $85 = HEAP32[$84>>2]|0;
   $yypos195 = $85;
   $86 = $1;
   $87 = (($86) + 44|0);
   $88 = HEAP32[$87>>2]|0;
   $yythunkpos195 = $88;
   $89 = $1;
   $90 = (_yymatchChar($89,61)|0);
   $91 = ($90|0)!=(0);
   if ($91) {
    break;
   }
   $92 = $yypos195;
   $93 = $1;
   $94 = (($93) + 12|0);
   HEAP32[$94>>2] = $92;
   $95 = $yythunkpos195;
   $96 = $1;
   $97 = (($96) + 44|0);
   HEAP32[$97>>2] = $95;
   $98 = $1;
   $99 = (($98) + 12|0);
   $100 = HEAP32[$99>>2]|0;
   $yypos196 = $100;
   $101 = $1;
   $102 = (($101) + 44|0);
   $103 = HEAP32[$102>>2]|0;
   $yythunkpos196 = $103;
   $104 = $1;
   $105 = (_yymatchChar($104,58)|0);
   $106 = ($105|0)!=(0);
   if ($106) {
    break;
   }
   $107 = $yypos196;
   $108 = $1;
   $109 = (($108) + 12|0);
   HEAP32[$109>>2] = $107;
   $110 = $yythunkpos196;
   $111 = $1;
   $112 = (($111) + 44|0);
   HEAP32[$112>>2] = $110;
   $113 = $yypos193;
   $114 = $1;
   $115 = (($114) + 12|0);
   HEAP32[$115>>2] = $113;
   $116 = $yythunkpos193;
   $117 = $1;
   $118 = (($117) + 44|0);
   HEAP32[$118>>2] = $116;
   $119 = $1;
   $120 = $1;
   $121 = (($120) + 28|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = $1;
   $124 = (($123) + 32|0);
   $125 = HEAP32[$124>>2]|0;
   _yyDo($119,196,$122,$125,47328);
   $0 = 1;
   $132 = $0;
   STACKTOP = sp;return ($132|0);
  }
 } while(0);
 $126 = $yypos0;
 $127 = $1;
 $128 = (($127) + 12|0);
 HEAP32[$128>>2] = $126;
 $129 = $yythunkpos0;
 $130 = $1;
 $131 = (($130) + 44|0);
 HEAP32[$131>>2] = $129;
 $0 = 0;
 $132 = $0;
 STACKTOP = sp;return ($132|0);
}
function _yy_LeftAlign($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos175 = 0, $yypos177 = 0, $yypos180 = 0, $yypos182 = 0, $yypos183 = 0, $yypos184 = 0, $yypos185 = 0, $yythunkpos0 = 0, $yythunkpos175 = 0, $yythunkpos177 = 0, $yythunkpos180 = 0, $yythunkpos182 = 0;
 var $yythunkpos183 = 0, $yythunkpos184 = 0, $yythunkpos185 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos175 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos175 = $13;
 $14 = $1;
 $15 = (_yymatchChar($14,58)|0);
 $16 = ($15|0)!=(0);
 if ($16) {
 } else {
  $17 = $yypos175;
  $18 = $1;
  $19 = (($18) + 12|0);
  HEAP32[$19>>2] = $17;
  $20 = $yythunkpos175;
  $21 = $1;
  $22 = (($21) + 44|0);
  HEAP32[$22>>2] = $20;
 }
 $23 = $1;
 $24 = (($23) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $yypos177 = $25;
 $26 = $1;
 $27 = (($26) + 44|0);
 $28 = HEAP32[$27>>2]|0;
 $yythunkpos177 = $28;
 $29 = $1;
 $30 = (_yymatchChar($29,45)|0);
 $31 = ($30|0)!=(0);
 do {
  if ($31) {
   while(1) {
    $32 = $1;
    $33 = (($32) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $yypos180 = $34;
    $35 = $1;
    $36 = (($35) + 44|0);
    $37 = HEAP32[$36>>2]|0;
    $yythunkpos180 = $37;
    $38 = $1;
    $39 = (_yymatchChar($38,45)|0);
    $40 = ($39|0)!=(0);
    if (!($40)) {
     break;
    }
   }
   $41 = $yypos180;
   $42 = $1;
   $43 = (($42) + 12|0);
   HEAP32[$43>>2] = $41;
   $44 = $yythunkpos180;
   $45 = $1;
   $46 = (($45) + 44|0);
   HEAP32[$46>>2] = $44;
   label = 19;
  } else {
   $47 = $yypos177;
   $48 = $1;
   $49 = (($48) + 12|0);
   HEAP32[$49>>2] = $47;
   $50 = $yythunkpos177;
   $51 = $1;
   $52 = (($51) + 44|0);
   HEAP32[$52>>2] = $50;
   $53 = $1;
   $54 = (_yymatchChar($53,61)|0);
   $55 = ($54|0)!=(0);
   if (!($55)) {
    break;
   }
   while(1) {
    $56 = $1;
    $57 = (($56) + 12|0);
    $58 = HEAP32[$57>>2]|0;
    $yypos182 = $58;
    $59 = $1;
    $60 = (($59) + 44|0);
    $61 = HEAP32[$60>>2]|0;
    $yythunkpos182 = $61;
    $62 = $1;
    $63 = (_yymatchChar($62,61)|0);
    $64 = ($63|0)!=(0);
    if (!($64)) {
     break;
    }
   }
   $65 = $yypos182;
   $66 = $1;
   $67 = (($66) + 12|0);
   HEAP32[$67>>2] = $65;
   $68 = $yythunkpos182;
   $69 = $1;
   $70 = (($69) + 44|0);
   HEAP32[$70>>2] = $68;
   label = 19;
  }
 } while(0);
 do {
  if ((label|0) == 19) {
   $71 = $1;
   $72 = (($71) + 12|0);
   $73 = HEAP32[$72>>2]|0;
   $yypos183 = $73;
   $74 = $1;
   $75 = (($74) + 44|0);
   $76 = HEAP32[$75>>2]|0;
   $yythunkpos183 = $76;
   $77 = $1;
   $78 = (($77) + 12|0);
   $79 = HEAP32[$78>>2]|0;
   $yypos184 = $79;
   $80 = $1;
   $81 = (($80) + 44|0);
   $82 = HEAP32[$81>>2]|0;
   $yythunkpos184 = $82;
   $83 = $1;
   $84 = (_yymatchChar($83,45)|0);
   $85 = ($84|0)!=(0);
   if ($85) {
    break;
   }
   $86 = $yypos184;
   $87 = $1;
   $88 = (($87) + 12|0);
   HEAP32[$88>>2] = $86;
   $89 = $yythunkpos184;
   $90 = $1;
   $91 = (($90) + 44|0);
   HEAP32[$91>>2] = $89;
   $92 = $1;
   $93 = (($92) + 12|0);
   $94 = HEAP32[$93>>2]|0;
   $yypos185 = $94;
   $95 = $1;
   $96 = (($95) + 44|0);
   $97 = HEAP32[$96>>2]|0;
   $yythunkpos185 = $97;
   $98 = $1;
   $99 = (_yymatchChar($98,58)|0);
   $100 = ($99|0)!=(0);
   if ($100) {
    break;
   }
   $101 = $yypos185;
   $102 = $1;
   $103 = (($102) + 12|0);
   HEAP32[$103>>2] = $101;
   $104 = $yythunkpos185;
   $105 = $1;
   $106 = (($105) + 44|0);
   HEAP32[$106>>2] = $104;
   $107 = $yypos183;
   $108 = $1;
   $109 = (($108) + 12|0);
   HEAP32[$109>>2] = $107;
   $110 = $yythunkpos183;
   $111 = $1;
   $112 = (($111) + 44|0);
   HEAP32[$112>>2] = $110;
   $113 = $1;
   $114 = $1;
   $115 = (($114) + 28|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = $1;
   $118 = (($117) + 32|0);
   $119 = HEAP32[$118>>2]|0;
   _yyDo($113,197,$116,$119,47304);
   $0 = 1;
   $126 = $0;
   STACKTOP = sp;return ($126|0);
  }
 } while(0);
 $120 = $yypos0;
 $121 = $1;
 $122 = (($121) + 12|0);
 HEAP32[$122>>2] = $120;
 $123 = $yythunkpos0;
 $124 = $1;
 $125 = (($124) + 44|0);
 HEAP32[$125>>2] = $123;
 $0 = 0;
 $126 = $0;
 STACKTOP = sp;return ($126|0);
}
function _yy_CenterAlign($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos162 = 0, $yypos164 = 0, $yypos167 = 0, $yypos169 = 0, $yypos170 = 0, $yypos171 = 0, $yypos172 = 0, $yypos173 = 0, $yythunkpos0 = 0, $yythunkpos162 = 0, $yythunkpos164 = 0, $yythunkpos167 = 0, $yythunkpos169 = 0, $yythunkpos170 = 0;
 var $yythunkpos171 = 0, $yythunkpos172 = 0, $yythunkpos173 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,58)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = (($11) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $yypos162 = $13;
   $14 = $1;
   $15 = (($14) + 44|0);
   $16 = HEAP32[$15>>2]|0;
   $yythunkpos162 = $16;
   $17 = $1;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $yypos164 = $19;
   $20 = $1;
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $yythunkpos164 = $22;
   $23 = $1;
   $24 = (_yymatchChar($23,45)|0);
   $25 = ($24|0)!=(0);
   do {
    if ($25) {
     while(1) {
      $26 = $1;
      $27 = (($26) + 12|0);
      $28 = HEAP32[$27>>2]|0;
      $yypos167 = $28;
      $29 = $1;
      $30 = (($29) + 44|0);
      $31 = HEAP32[$30>>2]|0;
      $yythunkpos167 = $31;
      $32 = $1;
      $33 = (_yymatchChar($32,45)|0);
      $34 = ($33|0)!=(0);
      if (!($34)) {
       break;
      }
     }
     $35 = $yypos167;
     $36 = $1;
     $37 = (($36) + 12|0);
     HEAP32[$37>>2] = $35;
     $38 = $yythunkpos167;
     $39 = $1;
     $40 = (($39) + 44|0);
     HEAP32[$40>>2] = $38;
     label = 17;
    } else {
     $41 = $yypos164;
     $42 = $1;
     $43 = (($42) + 12|0);
     HEAP32[$43>>2] = $41;
     $44 = $yythunkpos164;
     $45 = $1;
     $46 = (($45) + 44|0);
     HEAP32[$46>>2] = $44;
     $47 = $1;
     $48 = (_yymatchChar($47,61)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      $65 = $yypos162;
      $66 = $1;
      $67 = (($66) + 12|0);
      HEAP32[$67>>2] = $65;
      $68 = $yythunkpos162;
      $69 = $1;
      $70 = (($69) + 44|0);
      HEAP32[$70>>2] = $68;
      break;
     }
     while(1) {
      $50 = $1;
      $51 = (($50) + 12|0);
      $52 = HEAP32[$51>>2]|0;
      $yypos169 = $52;
      $53 = $1;
      $54 = (($53) + 44|0);
      $55 = HEAP32[$54>>2]|0;
      $yythunkpos169 = $55;
      $56 = $1;
      $57 = (_yymatchChar($56,61)|0);
      $58 = ($57|0)!=(0);
      if (!($58)) {
       break;
      }
     }
     $59 = $yypos169;
     $60 = $1;
     $61 = (($60) + 12|0);
     HEAP32[$61>>2] = $59;
     $62 = $yythunkpos169;
     $63 = $1;
     $64 = (($63) + 44|0);
     HEAP32[$64>>2] = $62;
     label = 17;
    }
   } while(0);
   if ((label|0) == 17) {
   }
   $71 = $1;
   $72 = (_yymatchChar($71,58)|0);
   $73 = ($72|0)!=(0);
   if (!($73)) {
    break;
   }
   $74 = $1;
   $75 = (($74) + 12|0);
   $76 = HEAP32[$75>>2]|0;
   $yypos170 = $76;
   $77 = $1;
   $78 = (($77) + 44|0);
   $79 = HEAP32[$78>>2]|0;
   $yythunkpos170 = $79;
   $80 = $1;
   $81 = (($80) + 12|0);
   $82 = HEAP32[$81>>2]|0;
   $yypos171 = $82;
   $83 = $1;
   $84 = (($83) + 44|0);
   $85 = HEAP32[$84>>2]|0;
   $yythunkpos171 = $85;
   $86 = $1;
   $87 = (_yymatchChar($86,45)|0);
   $88 = ($87|0)!=(0);
   if ($88) {
    break;
   }
   $89 = $yypos171;
   $90 = $1;
   $91 = (($90) + 12|0);
   HEAP32[$91>>2] = $89;
   $92 = $yythunkpos171;
   $93 = $1;
   $94 = (($93) + 44|0);
   HEAP32[$94>>2] = $92;
   $95 = $1;
   $96 = (($95) + 12|0);
   $97 = HEAP32[$96>>2]|0;
   $yypos172 = $97;
   $98 = $1;
   $99 = (($98) + 44|0);
   $100 = HEAP32[$99>>2]|0;
   $yythunkpos172 = $100;
   $101 = $1;
   $102 = (_yymatchChar($101,61)|0);
   $103 = ($102|0)!=(0);
   if ($103) {
    break;
   }
   $104 = $yypos172;
   $105 = $1;
   $106 = (($105) + 12|0);
   HEAP32[$106>>2] = $104;
   $107 = $yythunkpos172;
   $108 = $1;
   $109 = (($108) + 44|0);
   HEAP32[$109>>2] = $107;
   $110 = $1;
   $111 = (($110) + 12|0);
   $112 = HEAP32[$111>>2]|0;
   $yypos173 = $112;
   $113 = $1;
   $114 = (($113) + 44|0);
   $115 = HEAP32[$114>>2]|0;
   $yythunkpos173 = $115;
   $116 = $1;
   $117 = (_yymatchChar($116,58)|0);
   $118 = ($117|0)!=(0);
   if ($118) {
    break;
   }
   $119 = $yypos173;
   $120 = $1;
   $121 = (($120) + 12|0);
   HEAP32[$121>>2] = $119;
   $122 = $yythunkpos173;
   $123 = $1;
   $124 = (($123) + 44|0);
   HEAP32[$124>>2] = $122;
   $125 = $yypos170;
   $126 = $1;
   $127 = (($126) + 12|0);
   HEAP32[$127>>2] = $125;
   $128 = $yythunkpos170;
   $129 = $1;
   $130 = (($129) + 44|0);
   HEAP32[$130>>2] = $128;
   $131 = $1;
   $132 = $1;
   $133 = (($132) + 28|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = $1;
   $136 = (($135) + 32|0);
   $137 = HEAP32[$136>>2]|0;
   _yyDo($131,198,$134,$137,47272);
   $0 = 1;
   $144 = $0;
   STACKTOP = sp;return ($144|0);
  } else {
  }
 } while(0);
 $138 = $yypos0;
 $139 = $1;
 $140 = (($139) + 12|0);
 HEAP32[$140>>2] = $138;
 $141 = $yythunkpos0;
 $142 = $1;
 $143 = (($142) + 44|0);
 HEAP32[$143>>2] = $141;
 $0 = 0;
 $144 = $0;
 STACKTOP = sp;return ($144|0);
}
function _yy_RightAlign($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos151 = 0, $yypos154 = 0, $yypos156 = 0, $yypos157 = 0, $yypos158 = 0, $yypos159 = 0, $yypos160 = 0, $yythunkpos0 = 0, $yythunkpos151 = 0;
 var $yythunkpos154 = 0, $yythunkpos156 = 0, $yythunkpos157 = 0, $yythunkpos158 = 0, $yythunkpos159 = 0, $yythunkpos160 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos151 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos151 = $13;
 $14 = $1;
 $15 = (_yymatchChar($14,45)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
   while(1) {
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos154 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos154 = $22;
    $23 = $1;
    $24 = (_yymatchChar($23,45)|0);
    $25 = ($24|0)!=(0);
    if (!($25)) {
     break;
    }
   }
   $26 = $yypos154;
   $27 = $1;
   $28 = (($27) + 12|0);
   HEAP32[$28>>2] = $26;
   $29 = $yythunkpos154;
   $30 = $1;
   $31 = (($30) + 44|0);
   HEAP32[$31>>2] = $29;
   label = 15;
  } else {
   $32 = $yypos151;
   $33 = $1;
   $34 = (($33) + 12|0);
   HEAP32[$34>>2] = $32;
   $35 = $yythunkpos151;
   $36 = $1;
   $37 = (($36) + 44|0);
   HEAP32[$37>>2] = $35;
   $38 = $1;
   $39 = (_yymatchChar($38,61)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   while(1) {
    $41 = $1;
    $42 = (($41) + 12|0);
    $43 = HEAP32[$42>>2]|0;
    $yypos156 = $43;
    $44 = $1;
    $45 = (($44) + 44|0);
    $46 = HEAP32[$45>>2]|0;
    $yythunkpos156 = $46;
    $47 = $1;
    $48 = (_yymatchChar($47,61)|0);
    $49 = ($48|0)!=(0);
    if (!($49)) {
     break;
    }
   }
   $50 = $yypos156;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos156;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   label = 15;
  }
 } while(0);
 do {
  if ((label|0) == 15) {
   $56 = $1;
   $57 = (_yymatchChar($56,58)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $59 = $1;
   $60 = (($59) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $yypos157 = $61;
   $62 = $1;
   $63 = (($62) + 44|0);
   $64 = HEAP32[$63>>2]|0;
   $yythunkpos157 = $64;
   $65 = $1;
   $66 = (($65) + 12|0);
   $67 = HEAP32[$66>>2]|0;
   $yypos158 = $67;
   $68 = $1;
   $69 = (($68) + 44|0);
   $70 = HEAP32[$69>>2]|0;
   $yythunkpos158 = $70;
   $71 = $1;
   $72 = (_yymatchChar($71,45)|0);
   $73 = ($72|0)!=(0);
   if ($73) {
    break;
   }
   $74 = $yypos158;
   $75 = $1;
   $76 = (($75) + 12|0);
   HEAP32[$76>>2] = $74;
   $77 = $yythunkpos158;
   $78 = $1;
   $79 = (($78) + 44|0);
   HEAP32[$79>>2] = $77;
   $80 = $1;
   $81 = (($80) + 12|0);
   $82 = HEAP32[$81>>2]|0;
   $yypos159 = $82;
   $83 = $1;
   $84 = (($83) + 44|0);
   $85 = HEAP32[$84>>2]|0;
   $yythunkpos159 = $85;
   $86 = $1;
   $87 = (_yymatchChar($86,61)|0);
   $88 = ($87|0)!=(0);
   if ($88) {
    break;
   }
   $89 = $yypos159;
   $90 = $1;
   $91 = (($90) + 12|0);
   HEAP32[$91>>2] = $89;
   $92 = $yythunkpos159;
   $93 = $1;
   $94 = (($93) + 44|0);
   HEAP32[$94>>2] = $92;
   $95 = $1;
   $96 = (($95) + 12|0);
   $97 = HEAP32[$96>>2]|0;
   $yypos160 = $97;
   $98 = $1;
   $99 = (($98) + 44|0);
   $100 = HEAP32[$99>>2]|0;
   $yythunkpos160 = $100;
   $101 = $1;
   $102 = (_yymatchChar($101,58)|0);
   $103 = ($102|0)!=(0);
   if ($103) {
    break;
   }
   $104 = $yypos160;
   $105 = $1;
   $106 = (($105) + 12|0);
   HEAP32[$106>>2] = $104;
   $107 = $yythunkpos160;
   $108 = $1;
   $109 = (($108) + 44|0);
   HEAP32[$109>>2] = $107;
   $110 = $yypos157;
   $111 = $1;
   $112 = (($111) + 12|0);
   HEAP32[$112>>2] = $110;
   $113 = $yythunkpos157;
   $114 = $1;
   $115 = (($114) + 44|0);
   HEAP32[$115>>2] = $113;
   $116 = $1;
   $117 = $1;
   $118 = (($117) + 28|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $1;
   $121 = (($120) + 32|0);
   $122 = HEAP32[$121>>2]|0;
   _yyDo($116,199,$119,$122,47248);
   $0 = 1;
   $129 = $0;
   STACKTOP = sp;return ($129|0);
  }
 } while(0);
 $123 = $yypos0;
 $124 = $1;
 $125 = (($124) + 12|0);
 HEAP32[$125>>2] = $123;
 $126 = $yythunkpos0;
 $127 = $1;
 $128 = (($127) + 44|0);
 HEAP32[$128>>2] = $126;
 $0 = 0;
 $129 = $0;
 STACKTOP = sp;return ($129|0);
}
function _yy_AutoLinkUrl($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos1341 = 0, $yypos1343 = 0, $yypos1344 = 0, $yypos1345 = 0, $yypos1346 = 0, $yypos1347 = 0, $yythunkpos0 = 0, $yythunkpos1341 = 0;
 var $yythunkpos1343 = 0, $yythunkpos1344 = 0, $yythunkpos1345 = 0, $yythunkpos1346 = 0, $yythunkpos1347 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = $1;
   $13 = (($12) + 28|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $1;
   $16 = (($15) + 32|0);
   $17 = HEAP32[$16>>2]|0;
   (_yyText($11,$14,$17)|0);
   $18 = $1;
   $19 = (($18) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $1;
   $22 = (($21) + 28|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yymatchClass($23,42672,42712)|0);
   $25 = ($24|0)!=(0);
   if (!($25)) {
    break;
   }
   while(1) {
    $26 = $1;
    $27 = (($26) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $yypos1341 = $28;
    $29 = $1;
    $30 = (($29) + 44|0);
    $31 = HEAP32[$30>>2]|0;
    $yythunkpos1341 = $31;
    $32 = $1;
    $33 = (_yymatchClass($32,42672,42712)|0);
    $34 = ($33|0)!=(0);
    if (!($34)) {
     break;
    }
   }
   $35 = $yypos1341;
   $36 = $1;
   $37 = (($36) + 12|0);
   HEAP32[$37>>2] = $35;
   $38 = $yythunkpos1341;
   $39 = $1;
   $40 = (($39) + 44|0);
   HEAP32[$40>>2] = $38;
   $41 = $1;
   $42 = (_yymatchString($41,42720)|0);
   $43 = ($42|0)!=(0);
   if (!($43)) {
    break;
   }
   $44 = $1;
   $45 = (($44) + 12|0);
   $46 = HEAP32[$45>>2]|0;
   $yypos1344 = $46;
   $47 = $1;
   $48 = (($47) + 44|0);
   $49 = HEAP32[$48>>2]|0;
   $yythunkpos1344 = $49;
   $50 = $1;
   $51 = (_yy_Newline($50)|0);
   $52 = ($51|0)!=(0);
   if ($52) {
    break;
   }
   $53 = $yypos1344;
   $54 = $1;
   $55 = (($54) + 12|0);
   HEAP32[$55>>2] = $53;
   $56 = $yythunkpos1344;
   $57 = $1;
   $58 = (($57) + 44|0);
   HEAP32[$58>>2] = $56;
   $59 = $1;
   $60 = (($59) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $yypos1345 = $61;
   $62 = $1;
   $63 = (($62) + 44|0);
   $64 = HEAP32[$63>>2]|0;
   $yythunkpos1345 = $64;
   $65 = $1;
   $66 = (_yymatchChar($65,62)|0);
   $67 = ($66|0)!=(0);
   if ($67) {
    break;
   }
   $68 = $yypos1345;
   $69 = $1;
   $70 = (($69) + 12|0);
   HEAP32[$70>>2] = $68;
   $71 = $yythunkpos1345;
   $72 = $1;
   $73 = (($72) + 44|0);
   HEAP32[$73>>2] = $71;
   $74 = $1;
   $75 = (_yymatchDot($74)|0);
   $76 = ($75|0)!=(0);
   if (!($76)) {
    break;
   }
   while(1) {
    $77 = $1;
    $78 = (($77) + 12|0);
    $79 = HEAP32[$78>>2]|0;
    $yypos1343 = $79;
    $80 = $1;
    $81 = (($80) + 44|0);
    $82 = HEAP32[$81>>2]|0;
    $yythunkpos1343 = $82;
    $83 = $1;
    $84 = (($83) + 12|0);
    $85 = HEAP32[$84>>2]|0;
    $yypos1346 = $85;
    $86 = $1;
    $87 = (($86) + 44|0);
    $88 = HEAP32[$87>>2]|0;
    $yythunkpos1346 = $88;
    $89 = $1;
    $90 = (_yy_Newline($89)|0);
    $91 = ($90|0)!=(0);
    if ($91) {
     label = 23;
     break;
    }
    $92 = $yypos1346;
    $93 = $1;
    $94 = (($93) + 12|0);
    HEAP32[$94>>2] = $92;
    $95 = $yythunkpos1346;
    $96 = $1;
    $97 = (($96) + 44|0);
    HEAP32[$97>>2] = $95;
    $98 = $1;
    $99 = (($98) + 12|0);
    $100 = HEAP32[$99>>2]|0;
    $yypos1347 = $100;
    $101 = $1;
    $102 = (($101) + 44|0);
    $103 = HEAP32[$102>>2]|0;
    $yythunkpos1347 = $103;
    $104 = $1;
    $105 = (_yymatchChar($104,62)|0);
    $106 = ($105|0)!=(0);
    if ($106) {
     label = 26;
     break;
    }
    $107 = $yypos1347;
    $108 = $1;
    $109 = (($108) + 12|0);
    HEAP32[$109>>2] = $107;
    $110 = $yythunkpos1347;
    $111 = $1;
    $112 = (($111) + 44|0);
    HEAP32[$112>>2] = $110;
    $113 = $1;
    $114 = (_yymatchDot($113)|0);
    $115 = ($114|0)!=(0);
    if (!($115)) {
     label = 28;
     break;
    }
   }
   if ((label|0) == 23) {
   }
   else if ((label|0) == 26) {
   }
   else if ((label|0) == 28) {
   }
   $116 = $yypos1343;
   $117 = $1;
   $118 = (($117) + 12|0);
   HEAP32[$118>>2] = $116;
   $119 = $yythunkpos1343;
   $120 = $1;
   $121 = (($120) + 44|0);
   HEAP32[$121>>2] = $119;
   $122 = $1;
   $123 = $1;
   $124 = (($123) + 28|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = $1;
   $127 = (($126) + 32|0);
   $128 = HEAP32[$127>>2]|0;
   (_yyText($122,$125,$128)|0);
   $129 = $1;
   $130 = (($129) + 12|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = $1;
   $133 = (($132) + 32|0);
   HEAP32[$133>>2] = $131;
   $134 = $1;
   $135 = (_yymatchChar($134,62)|0);
   $136 = ($135|0)!=(0);
   if (!($136)) {
    break;
   }
   $137 = $1;
   $138 = $1;
   $139 = (($138) + 28|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = $1;
   $142 = (($141) + 32|0);
   $143 = HEAP32[$142>>2]|0;
   _yyDo($137,200,$140,$143,44752);
   $0 = 1;
   $150 = $0;
   STACKTOP = sp;return ($150|0);
  } else {
  }
 } while(0);
 $144 = $yypos0;
 $145 = $1;
 $146 = (($145) + 12|0);
 HEAP32[$146>>2] = $144;
 $147 = $yythunkpos0;
 $148 = $1;
 $149 = (($148) + 44|0);
 HEAP32[$149>>2] = $147;
 $0 = 0;
 $150 = $0;
 STACKTOP = sp;return ($150|0);
}
function _yy_AutoLinkEmail($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos1329 = 0, $yypos1332 = 0, $yypos1334 = 0, $yypos1335 = 0, $yypos1336 = 0, $yypos1337 = 0, $yypos1338 = 0, $yythunkpos0 = 0, $yythunkpos1329 = 0, $yythunkpos1332 = 0, $yythunkpos1334 = 0, $yythunkpos1335 = 0, $yythunkpos1336 = 0;
 var $yythunkpos1337 = 0, $yythunkpos1338 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = (($11) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $yypos1329 = $13;
   $14 = $1;
   $15 = (($14) + 44|0);
   $16 = HEAP32[$15>>2]|0;
   $yythunkpos1329 = $16;
   $17 = $1;
   $18 = (_yymatchString($17,44640)|0);
   $19 = ($18|0)!=(0);
   if ($19) {
   } else {
    $20 = $yypos1329;
    $21 = $1;
    $22 = (($21) + 12|0);
    HEAP32[$22>>2] = $20;
    $23 = $yythunkpos1329;
    $24 = $1;
    $25 = (($24) + 44|0);
    HEAP32[$25>>2] = $23;
   }
   $26 = $1;
   $27 = $1;
   $28 = (($27) + 28|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $1;
   $31 = (($30) + 32|0);
   $32 = HEAP32[$31>>2]|0;
   (_yyText($26,$29,$32)|0);
   $33 = $1;
   $34 = (($33) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $1;
   $37 = (($36) + 28|0);
   HEAP32[$37>>2] = $35;
   $38 = $1;
   $39 = (_yymatchClass($38,44648,44688)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   while(1) {
    $41 = $1;
    $42 = (($41) + 12|0);
    $43 = HEAP32[$42>>2]|0;
    $yypos1332 = $43;
    $44 = $1;
    $45 = (($44) + 44|0);
    $46 = HEAP32[$45>>2]|0;
    $yythunkpos1332 = $46;
    $47 = $1;
    $48 = (_yymatchClass($47,44648,44688)|0);
    $49 = ($48|0)!=(0);
    if (!($49)) {
     break;
    }
   }
   $50 = $yypos1332;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos1332;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yymatchChar($56,64)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $59 = $1;
   $60 = (($59) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $yypos1335 = $61;
   $62 = $1;
   $63 = (($62) + 44|0);
   $64 = HEAP32[$63>>2]|0;
   $yythunkpos1335 = $64;
   $65 = $1;
   $66 = (_yy_Newline($65)|0);
   $67 = ($66|0)!=(0);
   if ($67) {
    break;
   }
   $68 = $yypos1335;
   $69 = $1;
   $70 = (($69) + 12|0);
   HEAP32[$70>>2] = $68;
   $71 = $yythunkpos1335;
   $72 = $1;
   $73 = (($72) + 44|0);
   HEAP32[$73>>2] = $71;
   $74 = $1;
   $75 = (($74) + 12|0);
   $76 = HEAP32[$75>>2]|0;
   $yypos1336 = $76;
   $77 = $1;
   $78 = (($77) + 44|0);
   $79 = HEAP32[$78>>2]|0;
   $yythunkpos1336 = $79;
   $80 = $1;
   $81 = (_yymatchChar($80,62)|0);
   $82 = ($81|0)!=(0);
   if ($82) {
    break;
   }
   $83 = $yypos1336;
   $84 = $1;
   $85 = (($84) + 12|0);
   HEAP32[$85>>2] = $83;
   $86 = $yythunkpos1336;
   $87 = $1;
   $88 = (($87) + 44|0);
   HEAP32[$88>>2] = $86;
   $89 = $1;
   $90 = (_yymatchDot($89)|0);
   $91 = ($90|0)!=(0);
   if (!($91)) {
    break;
   }
   while(1) {
    $92 = $1;
    $93 = (($92) + 12|0);
    $94 = HEAP32[$93>>2]|0;
    $yypos1334 = $94;
    $95 = $1;
    $96 = (($95) + 44|0);
    $97 = HEAP32[$96>>2]|0;
    $yythunkpos1334 = $97;
    $98 = $1;
    $99 = (($98) + 12|0);
    $100 = HEAP32[$99>>2]|0;
    $yypos1337 = $100;
    $101 = $1;
    $102 = (($101) + 44|0);
    $103 = HEAP32[$102>>2]|0;
    $yythunkpos1337 = $103;
    $104 = $1;
    $105 = (_yy_Newline($104)|0);
    $106 = ($105|0)!=(0);
    if ($106) {
     label = 27;
     break;
    }
    $107 = $yypos1337;
    $108 = $1;
    $109 = (($108) + 12|0);
    HEAP32[$109>>2] = $107;
    $110 = $yythunkpos1337;
    $111 = $1;
    $112 = (($111) + 44|0);
    HEAP32[$112>>2] = $110;
    $113 = $1;
    $114 = (($113) + 12|0);
    $115 = HEAP32[$114>>2]|0;
    $yypos1338 = $115;
    $116 = $1;
    $117 = (($116) + 44|0);
    $118 = HEAP32[$117>>2]|0;
    $yythunkpos1338 = $118;
    $119 = $1;
    $120 = (_yymatchChar($119,62)|0);
    $121 = ($120|0)!=(0);
    if ($121) {
     label = 30;
     break;
    }
    $122 = $yypos1338;
    $123 = $1;
    $124 = (($123) + 12|0);
    HEAP32[$124>>2] = $122;
    $125 = $yythunkpos1338;
    $126 = $1;
    $127 = (($126) + 44|0);
    HEAP32[$127>>2] = $125;
    $128 = $1;
    $129 = (_yymatchDot($128)|0);
    $130 = ($129|0)!=(0);
    if (!($130)) {
     label = 32;
     break;
    }
   }
   if ((label|0) == 27) {
   }
   else if ((label|0) == 30) {
   }
   else if ((label|0) == 32) {
   }
   $131 = $yypos1334;
   $132 = $1;
   $133 = (($132) + 12|0);
   HEAP32[$133>>2] = $131;
   $134 = $yythunkpos1334;
   $135 = $1;
   $136 = (($135) + 44|0);
   HEAP32[$136>>2] = $134;
   $137 = $1;
   $138 = $1;
   $139 = (($138) + 28|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = $1;
   $142 = (($141) + 32|0);
   $143 = HEAP32[$142>>2]|0;
   (_yyText($137,$140,$143)|0);
   $144 = $1;
   $145 = (($144) + 12|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = $1;
   $148 = (($147) + 32|0);
   HEAP32[$148>>2] = $146;
   $149 = $1;
   $150 = (_yymatchChar($149,62)|0);
   $151 = ($150|0)!=(0);
   if (!($151)) {
    break;
   }
   $152 = $1;
   $153 = $1;
   $154 = (($153) + 28|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = $1;
   $157 = (($156) + 32|0);
   $158 = HEAP32[$157>>2]|0;
   _yyDo($152,201,$155,$158,44712);
   $0 = 1;
   $165 = $0;
   STACKTOP = sp;return ($165|0);
  } else {
  }
 } while(0);
 $159 = $yypos0;
 $160 = $1;
 $161 = (($160) + 12|0);
 HEAP32[$161>>2] = $159;
 $162 = $yythunkpos0;
 $163 = $1;
 $164 = (($163) + 44|0);
 HEAP32[$164>>2] = $162;
 $0 = 0;
 $165 = $0;
 STACKTOP = sp;return ($165|0);
}
function _yy_ExplicitLink($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yythunkpos0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,3,0,41328);
 $9 = $1;
 $10 = (_yy_Label($9)|0);
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $1;
   _yyDo($12,8,-3,0,41336);
   $13 = $1;
   $14 = (_yy_Spnl($13)|0);
   $15 = ($14|0)!=(0);
   if (!($15)) {
    break;
   }
   $16 = $1;
   $17 = (_yymatchChar($16,40)|0);
   $18 = ($17|0)!=(0);
   if (!($18)) {
    break;
   }
   $19 = $1;
   $20 = (_yy_Sp($19)|0);
   $21 = ($20|0)!=(0);
   if (!($21)) {
    break;
   }
   $22 = $1;
   $23 = (_yy_Source($22)|0);
   $24 = ($23|0)!=(0);
   if (!($24)) {
    break;
   }
   $25 = $1;
   _yyDo($25,8,-2,0,41336);
   $26 = $1;
   $27 = (_yy_Spnl($26)|0);
   $28 = ($27|0)!=(0);
   if (!($28)) {
    break;
   }
   $29 = $1;
   $30 = (_yy_Title($29)|0);
   $31 = ($30|0)!=(0);
   if (!($31)) {
    break;
   }
   $32 = $1;
   _yyDo($32,8,-1,0,41336);
   $33 = $1;
   $34 = (_yy_Sp($33)|0);
   $35 = ($34|0)!=(0);
   if (!($35)) {
    break;
   }
   $36 = $1;
   $37 = $1;
   $38 = (($37) + 28|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $1;
   $41 = (($40) + 32|0);
   $42 = HEAP32[$41>>2]|0;
   (_yyText($36,$39,$42)|0);
   $43 = $1;
   $44 = (($43) + 12|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $1;
   $47 = (($46) + 28|0);
   HEAP32[$47>>2] = $45;
   $48 = $1;
   $49 = (_yymatchChar($48,41)|0);
   $50 = ($49|0)!=(0);
   if (!($50)) {
    break;
   }
   $51 = $1;
   $52 = $1;
   $53 = (($52) + 28|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $1;
   $56 = (($55) + 32|0);
   $57 = HEAP32[$56>>2]|0;
   (_yyText($51,$54,$57)|0);
   $58 = $1;
   $59 = (($58) + 12|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $1;
   $62 = (($61) + 32|0);
   HEAP32[$62>>2] = $60;
   $63 = $1;
   $64 = $1;
   $65 = (($64) + 28|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $1;
   $68 = (($67) + 32|0);
   $69 = HEAP32[$68>>2]|0;
   _yyDo($63,202,$66,$69,44880);
   $70 = $1;
   _yyDo($70,12,3,0,41392);
   $0 = 1;
   $77 = $0;
   STACKTOP = sp;return ($77|0);
  } else {
  }
 } while(0);
 $71 = $yypos0;
 $72 = $1;
 $73 = (($72) + 12|0);
 HEAP32[$73>>2] = $71;
 $74 = $yythunkpos0;
 $75 = $1;
 $76 = (($75) + 44|0);
 HEAP32[$76>>2] = $74;
 $0 = 0;
 $77 = $0;
 STACKTOP = sp;return ($77|0);
}
function _yy_ReferenceLink($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1414 = 0, $yythunkpos0 = 0, $yythunkpos1414 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos1414 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos1414 = $13;
 $14 = $1;
 $15 = (_yy_ReferenceLinkDouble($14)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
  } else {
   $17 = $yypos1414;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos1414;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yy_ReferenceLinkSingle($23)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    break;
   }
   $26 = $yypos0;
   $27 = $1;
   $28 = (($27) + 12|0);
   HEAP32[$28>>2] = $26;
   $29 = $yythunkpos0;
   $30 = $1;
   $31 = (($30) + 44|0);
   HEAP32[$31>>2] = $29;
   $0 = 0;
   $32 = $0;
   STACKTOP = sp;return ($32|0);
  }
 } while(0);
 $0 = 1;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _yy_voidNormalEndline($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos1600 = 0, $yypos1601 = 0, $yypos1602 = 0, $yypos1603 = 0, $yypos1604 = 0, $yypos1607 = 0, $yypos1609 = 0;
 var $yythunkpos0 = 0, $yythunkpos1600 = 0, $yythunkpos1601 = 0, $yythunkpos1602 = 0, $yythunkpos1603 = 0, $yythunkpos1604 = 0, $yythunkpos1607 = 0, $yythunkpos1609 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yy_Sp($8)|0);
 $10 = ($9|0)!=(0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Newline($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos1600 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos1600 = $19;
   $20 = $1;
   $21 = (_yy_BlankLine($20)|0);
   $22 = ($21|0)!=(0);
   if ($22) {
    break;
   }
   $23 = $yypos1600;
   $24 = $1;
   $25 = (($24) + 12|0);
   HEAP32[$25>>2] = $23;
   $26 = $yythunkpos1600;
   $27 = $1;
   $28 = (($27) + 44|0);
   HEAP32[$28>>2] = $26;
   $29 = $1;
   $30 = (($29) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $yypos1601 = $31;
   $32 = $1;
   $33 = (($32) + 44|0);
   $34 = HEAP32[$33>>2]|0;
   $yythunkpos1601 = $34;
   $35 = $1;
   $36 = (_yymatchChar($35,62)|0);
   $37 = ($36|0)!=(0);
   if ($37) {
    break;
   }
   $38 = $yypos1601;
   $39 = $1;
   $40 = (($39) + 12|0);
   HEAP32[$40>>2] = $38;
   $41 = $yythunkpos1601;
   $42 = $1;
   $43 = (($42) + 44|0);
   HEAP32[$43>>2] = $41;
   $44 = $1;
   $45 = (($44) + 12|0);
   $46 = HEAP32[$45>>2]|0;
   $yypos1602 = $46;
   $47 = $1;
   $48 = (($47) + 44|0);
   $49 = HEAP32[$48>>2]|0;
   $yythunkpos1602 = $49;
   $50 = $1;
   $51 = (_yy_AtxStart($50)|0);
   $52 = ($51|0)!=(0);
   if ($52) {
    break;
   }
   $53 = $yypos1602;
   $54 = $1;
   $55 = (($54) + 12|0);
   HEAP32[$55>>2] = $53;
   $56 = $yythunkpos1602;
   $57 = $1;
   $58 = (($57) + 44|0);
   HEAP32[$58>>2] = $56;
   $59 = $1;
   $60 = (($59) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $yypos1603 = $61;
   $62 = $1;
   $63 = (($62) + 44|0);
   $64 = HEAP32[$63>>2]|0;
   $yythunkpos1603 = $64;
   $65 = $1;
   $66 = (_yy_RawLine($65)|0);
   $67 = ($66|0)!=(0);
   do {
    if ($67) {
     $68 = $1;
     $69 = (($68) + 12|0);
     $70 = HEAP32[$69>>2]|0;
     $yypos1604 = $70;
     $71 = $1;
     $72 = (($71) + 44|0);
     $73 = HEAP32[$72>>2]|0;
     $yythunkpos1604 = $73;
     $74 = $1;
     $75 = (_yymatchChar($74,61)|0);
     $76 = ($75|0)!=(0);
     if ($76) {
      while(1) {
       $77 = $1;
       $78 = (($77) + 12|0);
       $79 = HEAP32[$78>>2]|0;
       $yypos1607 = $79;
       $80 = $1;
       $81 = (($80) + 44|0);
       $82 = HEAP32[$81>>2]|0;
       $yythunkpos1607 = $82;
       $83 = $1;
       $84 = (_yymatchChar($83,61)|0);
       $85 = ($84|0)!=(0);
       if (!($85)) {
        break;
       }
      }
      $86 = $yypos1607;
      $87 = $1;
      $88 = (($87) + 12|0);
      HEAP32[$88>>2] = $86;
      $89 = $yythunkpos1607;
      $90 = $1;
      $91 = (($90) + 44|0);
      HEAP32[$91>>2] = $89;
     } else {
      $92 = $yypos1604;
      $93 = $1;
      $94 = (($93) + 12|0);
      HEAP32[$94>>2] = $92;
      $95 = $yythunkpos1604;
      $96 = $1;
      $97 = (($96) + 44|0);
      HEAP32[$97>>2] = $95;
      $98 = $1;
      $99 = (_yymatchChar($98,45)|0);
      $100 = ($99|0)!=(0);
      if (!($100)) {
       break;
      }
      while(1) {
       $101 = $1;
       $102 = (($101) + 12|0);
       $103 = HEAP32[$102>>2]|0;
       $yypos1609 = $103;
       $104 = $1;
       $105 = (($104) + 44|0);
       $106 = HEAP32[$105>>2]|0;
       $yythunkpos1609 = $106;
       $107 = $1;
       $108 = (_yymatchChar($107,45)|0);
       $109 = ($108|0)!=(0);
       if (!($109)) {
        break;
       }
      }
      $110 = $yypos1609;
      $111 = $1;
      $112 = (($111) + 12|0);
      HEAP32[$112>>2] = $110;
      $113 = $yythunkpos1609;
      $114 = $1;
      $115 = (($114) + 44|0);
      HEAP32[$115>>2] = $113;
     }
     $116 = $1;
     $117 = (_yy_Newline($116)|0);
     $118 = ($117|0)!=(0);
     if ($118) {
      break L1;
     } else {
      break;
     }
    } else {
    }
   } while(0);
   $119 = $yypos1603;
   $120 = $1;
   $121 = (($120) + 12|0);
   HEAP32[$121>>2] = $119;
   $122 = $yythunkpos1603;
   $123 = $1;
   $124 = (($123) + 44|0);
   HEAP32[$124>>2] = $122;
   $0 = 1;
   $131 = $0;
   STACKTOP = sp;return ($131|0);
  } else {
  }
 } while(0);
 $125 = $yypos0;
 $126 = $1;
 $127 = (($126) + 12|0);
 HEAP32[$127>>2] = $125;
 $128 = $yythunkpos0;
 $129 = $1;
 $130 = (($129) + 44|0);
 HEAP32[$130>>2] = $128;
 $0 = 0;
 $131 = $0;
 STACKTOP = sp;return ($131|0);
}
function _yy_1_CriticSubstDel($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 $14 = $0;
 $15 = (($14) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP16[$16>>1] = 75;
 STACKTOP = sp;return;
}
function _yy_1_CriticSubstAdd($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 $14 = $0;
 $15 = (($14) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP16[$16>>1] = 74;
 STACKTOP = sp;return;
}
function _yy_1_OPMLAtxHeading($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP16[$18>>1]|0;
 $20 = $0;
 $21 = (($20) + 48|0);
 $22 = HEAP32[$21>>2]|0;
 HEAP16[$22>>1] = $19;
 $23 = $0;
 $24 = (($23) + 52|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + -4|0);
 $27 = HEAP32[$26>>2]|0;
 _free_node($27);
 STACKTOP = sp;return;
}
function _yy_OPMLSetextHeading1($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $yypos0 = 0, $yypos97 = 0, $yypos98 = 0;
 var $yypos99 = 0, $yythunkpos0 = 0, $yythunkpos97 = 0, $yythunkpos98 = 0, $yythunkpos99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = $1;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($12) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 (_yyText($8,$11,$14)|0);
 $15 = $1;
 $16 = (($15) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = (($18) + 28|0);
 HEAP32[$19>>2] = $17;
 while(1) {
  $20 = $1;
  $21 = (($20) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $yypos97 = $22;
  $23 = $1;
  $24 = (($23) + 44|0);
  $25 = HEAP32[$24>>2]|0;
  $yythunkpos97 = $25;
  $26 = $1;
  $27 = (($26) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $yypos98 = $28;
  $29 = $1;
  $30 = (($29) + 44|0);
  $31 = HEAP32[$30>>2]|0;
  $yythunkpos98 = $31;
  $32 = $1;
  $33 = (_yymatchChar($32,13)|0);
  $34 = ($33|0)!=(0);
  if ($34) {
   label = 5;
   break;
  }
  $35 = $yypos98;
  $36 = $1;
  $37 = (($36) + 12|0);
  HEAP32[$37>>2] = $35;
  $38 = $yythunkpos98;
  $39 = $1;
  $40 = (($39) + 44|0);
  HEAP32[$40>>2] = $38;
  $41 = $1;
  $42 = (($41) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  $yypos99 = $43;
  $44 = $1;
  $45 = (($44) + 44|0);
  $46 = HEAP32[$45>>2]|0;
  $yythunkpos99 = $46;
  $47 = $1;
  $48 = (_yymatchChar($47,10)|0);
  $49 = ($48|0)!=(0);
  if ($49) {
   label = 8;
   break;
  }
  $50 = $yypos99;
  $51 = $1;
  $52 = (($51) + 12|0);
  HEAP32[$52>>2] = $50;
  $53 = $yythunkpos99;
  $54 = $1;
  $55 = (($54) + 44|0);
  HEAP32[$55>>2] = $53;
  $56 = $1;
  $57 = (_yymatchDot($56)|0);
  $58 = ($57|0)!=(0);
  if (!($58)) {
   label = 10;
   break;
  }
 }
 if ((label|0) == 5) {
 }
 else if ((label|0) == 8) {
 }
 else if ((label|0) == 10) {
 }
 $59 = $yypos97;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos97;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $65 = $1;
 $66 = $1;
 $67 = (($66) + 28|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = $1;
 $70 = (($69) + 32|0);
 $71 = HEAP32[$70>>2]|0;
 (_yyText($65,$68,$71)|0);
 $72 = $1;
 $73 = (($72) + 12|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = $1;
 $76 = (($75) + 32|0);
 HEAP32[$76>>2] = $74;
 $77 = $1;
 $78 = (_yy_Newline($77)|0);
 $79 = ($78|0)!=(0);
 do {
  if ($79) {
   $80 = $1;
   $81 = (_yy_SetextBottom1($80)|0);
   $82 = ($81|0)!=(0);
   if (!($82)) {
    break;
   }
   $83 = $1;
   $84 = $1;
   $85 = (($84) + 28|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = $1;
   $88 = (($87) + 32|0);
   $89 = HEAP32[$88>>2]|0;
   _yyDo($83,203,$86,$89,46688);
   $0 = 1;
   $96 = $0;
   STACKTOP = sp;return ($96|0);
  } else {
  }
 } while(0);
 $90 = $yypos0;
 $91 = $1;
 $92 = (($91) + 12|0);
 HEAP32[$92>>2] = $90;
 $93 = $yythunkpos0;
 $94 = $1;
 $95 = (($94) + 44|0);
 HEAP32[$95>>2] = $93;
 $0 = 0;
 $96 = $0;
 STACKTOP = sp;return ($96|0);
}
function _yy_OPMLSetextHeading2($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $yypos0 = 0, $yypos92 = 0, $yypos93 = 0;
 var $yypos94 = 0, $yythunkpos0 = 0, $yythunkpos92 = 0, $yythunkpos93 = 0, $yythunkpos94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = $1;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($12) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 (_yyText($8,$11,$14)|0);
 $15 = $1;
 $16 = (($15) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = (($18) + 28|0);
 HEAP32[$19>>2] = $17;
 while(1) {
  $20 = $1;
  $21 = (($20) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $yypos92 = $22;
  $23 = $1;
  $24 = (($23) + 44|0);
  $25 = HEAP32[$24>>2]|0;
  $yythunkpos92 = $25;
  $26 = $1;
  $27 = (($26) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $yypos93 = $28;
  $29 = $1;
  $30 = (($29) + 44|0);
  $31 = HEAP32[$30>>2]|0;
  $yythunkpos93 = $31;
  $32 = $1;
  $33 = (_yymatchChar($32,13)|0);
  $34 = ($33|0)!=(0);
  if ($34) {
   label = 5;
   break;
  }
  $35 = $yypos93;
  $36 = $1;
  $37 = (($36) + 12|0);
  HEAP32[$37>>2] = $35;
  $38 = $yythunkpos93;
  $39 = $1;
  $40 = (($39) + 44|0);
  HEAP32[$40>>2] = $38;
  $41 = $1;
  $42 = (($41) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  $yypos94 = $43;
  $44 = $1;
  $45 = (($44) + 44|0);
  $46 = HEAP32[$45>>2]|0;
  $yythunkpos94 = $46;
  $47 = $1;
  $48 = (_yymatchChar($47,10)|0);
  $49 = ($48|0)!=(0);
  if ($49) {
   label = 8;
   break;
  }
  $50 = $yypos94;
  $51 = $1;
  $52 = (($51) + 12|0);
  HEAP32[$52>>2] = $50;
  $53 = $yythunkpos94;
  $54 = $1;
  $55 = (($54) + 44|0);
  HEAP32[$55>>2] = $53;
  $56 = $1;
  $57 = (_yymatchDot($56)|0);
  $58 = ($57|0)!=(0);
  if (!($58)) {
   label = 10;
   break;
  }
 }
 if ((label|0) == 5) {
 }
 else if ((label|0) == 8) {
 }
 else if ((label|0) == 10) {
 }
 $59 = $yypos92;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos92;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $65 = $1;
 $66 = $1;
 $67 = (($66) + 28|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = $1;
 $70 = (($69) + 32|0);
 $71 = HEAP32[$70>>2]|0;
 (_yyText($65,$68,$71)|0);
 $72 = $1;
 $73 = (($72) + 12|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = $1;
 $76 = (($75) + 32|0);
 HEAP32[$76>>2] = $74;
 $77 = $1;
 $78 = (_yy_Newline($77)|0);
 $79 = ($78|0)!=(0);
 do {
  if ($79) {
   $80 = $1;
   $81 = (_yy_SetextBottom2($80)|0);
   $82 = ($81|0)!=(0);
   if (!($82)) {
    break;
   }
   $83 = $1;
   $84 = $1;
   $85 = (($84) + 28|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = $1;
   $88 = (($87) + 32|0);
   $89 = HEAP32[$88>>2]|0;
   _yyDo($83,204,$86,$89,46664);
   $0 = 1;
   $96 = $0;
   STACKTOP = sp;return ($96|0);
  } else {
  }
 } while(0);
 $90 = $yypos0;
 $91 = $1;
 $92 = (($91) + 12|0);
 HEAP32[$92>>2] = $90;
 $93 = $yythunkpos0;
 $94 = $1;
 $95 = (($94) + 44|0);
 HEAP32[$95>>2] = $93;
 $0 = 0;
 $96 = $0;
 STACKTOP = sp;return ($96|0);
}
function _yy_1_LineBreak($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = (($10) + 48|0);
 HEAP32[$11>>2] = $9;
 $12 = $0;
 $13 = (($12) + 48|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP16[$14>>1] = 7;
 STACKTOP = sp;return;
}
function _yy_1_TerminalEndline($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return;
}
function _yy_1_NormalEndline($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $3;
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_mk_pos_str(42896,$6,$9)|0);
 $11 = $0;
 $12 = (($11) + 48|0);
 HEAP32[$12>>2] = $10;
 $13 = $0;
 $14 = (($13) + 48|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP16[$15>>1] = 8;
 STACKTOP = sp;return;
}
function _yy_SingleDollarMath($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $yypos0 = 0, $yypos1540 = 0, $yypos1541 = 0, $yypos1542 = 0, $yythunkpos0 = 0, $yythunkpos1540 = 0, $yythunkpos1541 = 0, $yythunkpos1542 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = $1;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($12) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 (_yyText($8,$11,$14)|0);
 $15 = $1;
 $16 = (($15) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = (($18) + 28|0);
 HEAP32[$19>>2] = $17;
 $20 = $1;
 $21 = (_yy_SingleDollarMathStart($20)|0);
 $22 = ($21|0)!=(0);
 do {
  if ($22) {
   while(1) {
    $23 = $1;
    $24 = (($23) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $yypos1540 = $25;
    $26 = $1;
    $27 = (($26) + 44|0);
    $28 = HEAP32[$27>>2]|0;
    $yythunkpos1540 = $28;
    $29 = $1;
    $30 = (($29) + 12|0);
    $31 = HEAP32[$30>>2]|0;
    $yypos1541 = $31;
    $32 = $1;
    $33 = (($32) + 44|0);
    $34 = HEAP32[$33>>2]|0;
    $yythunkpos1541 = $34;
    $35 = $1;
    $36 = (_yy_SingleDollarMathEnd($35)|0);
    $37 = ($36|0)!=(0);
    if ($37) {
     label = 7;
     break;
    }
    $38 = $yypos1541;
    $39 = $1;
    $40 = (($39) + 12|0);
    HEAP32[$40>>2] = $38;
    $41 = $yythunkpos1541;
    $42 = $1;
    $43 = (($42) + 44|0);
    HEAP32[$43>>2] = $41;
    $44 = $1;
    $45 = (($44) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $yypos1542 = $46;
    $47 = $1;
    $48 = (($47) + 44|0);
    $49 = HEAP32[$48>>2]|0;
    $yythunkpos1542 = $49;
    $50 = $1;
    $51 = (_yy_BlankLine($50)|0);
    $52 = ($51|0)!=(0);
    if ($52) {
     $53 = $1;
     $54 = (_yy_BlankLine($53)|0);
     $55 = ($54|0)!=(0);
     if ($55) {
      label = 12;
      break;
     }
    } else {
    }
    $56 = $yypos1542;
    $57 = $1;
    $58 = (($57) + 12|0);
    HEAP32[$58>>2] = $56;
    $59 = $yythunkpos1542;
    $60 = $1;
    $61 = (($60) + 44|0);
    HEAP32[$61>>2] = $59;
    $62 = $1;
    $63 = (_yymatchDot($62)|0);
    $64 = ($63|0)!=(0);
    if (!($64)) {
     label = 14;
     break;
    }
   }
   if ((label|0) == 7) {
   }
   else if ((label|0) == 12) {
   }
   else if ((label|0) == 14) {
   }
   $65 = $yypos1540;
   $66 = $1;
   $67 = (($66) + 12|0);
   HEAP32[$67>>2] = $65;
   $68 = $yythunkpos1540;
   $69 = $1;
   $70 = (($69) + 44|0);
   HEAP32[$70>>2] = $68;
   $71 = $1;
   $72 = (_yy_SingleDollarMathEnd($71)|0);
   $73 = ($72|0)!=(0);
   if (!($73)) {
    break;
   }
   $74 = $1;
   $75 = $1;
   $76 = (($75) + 28|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $1;
   $79 = (($78) + 32|0);
   $80 = HEAP32[$79>>2]|0;
   (_yyText($74,$77,$80)|0);
   $81 = $1;
   $82 = (($81) + 12|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = $1;
   $85 = (($84) + 32|0);
   HEAP32[$85>>2] = $83;
   $86 = $1;
   $87 = $1;
   $88 = (($87) + 28|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = $1;
   $91 = (($90) + 32|0);
   $92 = HEAP32[$91>>2]|0;
   _yyDo($86,205,$89,$92,45744);
   $0 = 1;
   $99 = $0;
   STACKTOP = sp;return ($99|0);
  } else {
  }
 } while(0);
 $93 = $yypos0;
 $94 = $1;
 $95 = (($94) + 12|0);
 HEAP32[$95>>2] = $93;
 $96 = $yythunkpos0;
 $97 = $1;
 $98 = (($97) + 44|0);
 HEAP32[$98>>2] = $96;
 $0 = 0;
 $99 = $0;
 STACKTOP = sp;return ($99|0);
}
function _yy_DoubleDollarMath($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $yypos0 = 0, $yypos1528 = 0, $yypos1529 = 0, $yypos1530 = 0, $yythunkpos0 = 0, $yythunkpos1528 = 0, $yythunkpos1529 = 0, $yythunkpos1530 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = $1;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($12) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 (_yyText($8,$11,$14)|0);
 $15 = $1;
 $16 = (($15) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = (($18) + 28|0);
 HEAP32[$19>>2] = $17;
 $20 = $1;
 $21 = (_yy_DoubleDollarMathStart($20)|0);
 $22 = ($21|0)!=(0);
 do {
  if ($22) {
   while(1) {
    $23 = $1;
    $24 = (($23) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $yypos1528 = $25;
    $26 = $1;
    $27 = (($26) + 44|0);
    $28 = HEAP32[$27>>2]|0;
    $yythunkpos1528 = $28;
    $29 = $1;
    $30 = (($29) + 12|0);
    $31 = HEAP32[$30>>2]|0;
    $yypos1529 = $31;
    $32 = $1;
    $33 = (($32) + 44|0);
    $34 = HEAP32[$33>>2]|0;
    $yythunkpos1529 = $34;
    $35 = $1;
    $36 = (_yy_DoubleDollarMathEnd($35)|0);
    $37 = ($36|0)!=(0);
    if ($37) {
     label = 7;
     break;
    }
    $38 = $yypos1529;
    $39 = $1;
    $40 = (($39) + 12|0);
    HEAP32[$40>>2] = $38;
    $41 = $yythunkpos1529;
    $42 = $1;
    $43 = (($42) + 44|0);
    HEAP32[$43>>2] = $41;
    $44 = $1;
    $45 = (($44) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $yypos1530 = $46;
    $47 = $1;
    $48 = (($47) + 44|0);
    $49 = HEAP32[$48>>2]|0;
    $yythunkpos1530 = $49;
    $50 = $1;
    $51 = (_yy_BlankLine($50)|0);
    $52 = ($51|0)!=(0);
    if ($52) {
     $53 = $1;
     $54 = (_yy_BlankLine($53)|0);
     $55 = ($54|0)!=(0);
     if ($55) {
      label = 12;
      break;
     }
    } else {
    }
    $56 = $yypos1530;
    $57 = $1;
    $58 = (($57) + 12|0);
    HEAP32[$58>>2] = $56;
    $59 = $yythunkpos1530;
    $60 = $1;
    $61 = (($60) + 44|0);
    HEAP32[$61>>2] = $59;
    $62 = $1;
    $63 = (_yymatchDot($62)|0);
    $64 = ($63|0)!=(0);
    if (!($64)) {
     label = 14;
     break;
    }
   }
   if ((label|0) == 7) {
   }
   else if ((label|0) == 12) {
   }
   else if ((label|0) == 14) {
   }
   $65 = $yypos1528;
   $66 = $1;
   $67 = (($66) + 12|0);
   HEAP32[$67>>2] = $65;
   $68 = $yythunkpos1528;
   $69 = $1;
   $70 = (($69) + 44|0);
   HEAP32[$70>>2] = $68;
   $71 = $1;
   $72 = (_yy_DoubleDollarMathEnd($71)|0);
   $73 = ($72|0)!=(0);
   if (!($73)) {
    break;
   }
   $74 = $1;
   $75 = $1;
   $76 = (($75) + 28|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $1;
   $79 = (($78) + 32|0);
   $80 = HEAP32[$79>>2]|0;
   (_yyText($74,$77,$80)|0);
   $81 = $1;
   $82 = (($81) + 12|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = $1;
   $85 = (($84) + 32|0);
   HEAP32[$85>>2] = $83;
   $86 = $1;
   $87 = $1;
   $88 = (($87) + 28|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = $1;
   $91 = (($90) + 32|0);
   $92 = HEAP32[$91>>2]|0;
   _yyDo($86,206,$89,$92,45720);
   $0 = 1;
   $99 = $0;
   STACKTOP = sp;return ($99|0);
  } else {
  }
 } while(0);
 $93 = $yypos0;
 $94 = $1;
 $95 = (($94) + 12|0);
 HEAP32[$95>>2] = $93;
 $96 = $yythunkpos0;
 $97 = $1;
 $98 = (($97) + 44|0);
 HEAP32[$98>>2] = $96;
 $0 = 0;
 $99 = $0;
 STACKTOP = sp;return ($99|0);
}
function _yy_NormalChar($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos2149 = 0, $yypos2150 = 0;
 var $yythunkpos0 = 0, $yythunkpos2149 = 0, $yythunkpos2150 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos2149 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos2149 = $13;
 $14 = $1;
 $15 = (($14) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $yypos2150 = $16;
 $17 = $1;
 $18 = (($17) + 44|0);
 $19 = HEAP32[$18>>2]|0;
 $yythunkpos2150 = $19;
 $20 = $1;
 $21 = (_yy_SpecialChar($20)|0);
 $22 = ($21|0)!=(0);
 do {
  if ($22) {
   label = 10;
  } else {
   $23 = $yypos2150;
   $24 = $1;
   $25 = (($24) + 12|0);
   HEAP32[$25>>2] = $23;
   $26 = $yythunkpos2150;
   $27 = $1;
   $28 = (($27) + 44|0);
   HEAP32[$28>>2] = $26;
   $29 = $1;
   $30 = (_yy_Spacechar($29)|0);
   $31 = ($30|0)!=(0);
   if ($31) {
    label = 10;
    break;
   }
   $32 = $yypos2150;
   $33 = $1;
   $34 = (($33) + 12|0);
   HEAP32[$34>>2] = $32;
   $35 = $yythunkpos2150;
   $36 = $1;
   $37 = (($36) + 44|0);
   HEAP32[$37>>2] = $35;
   $38 = $1;
   $39 = (_yy_Newline($38)|0);
   $40 = ($39|0)!=(0);
   if ($40) {
    label = 10;
    break;
   }
   $41 = $yypos2149;
   $42 = $1;
   $43 = (($42) + 12|0);
   HEAP32[$43>>2] = $41;
   $44 = $yythunkpos2149;
   $45 = $1;
   $46 = (($45) + 44|0);
   HEAP32[$46>>2] = $44;
   $47 = $1;
   $48 = (_yymatchDot($47)|0);
   $49 = ($48|0)!=(0);
   if (!($49)) {
    break;
   }
   $0 = 1;
   $56 = $0;
   STACKTOP = sp;return ($56|0);
  }
 } while(0);
 if ((label|0) == 10) {
 }
 $50 = $yypos0;
 $51 = $1;
 $52 = (($51) + 12|0);
 HEAP32[$52>>2] = $50;
 $53 = $yythunkpos0;
 $54 = $1;
 $55 = (($54) + 44|0);
 HEAP32[$55>>2] = $53;
 $0 = 0;
 $56 = $0;
 STACKTOP = sp;return ($56|0);
}
function _yy_1_Str($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 52|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + -4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_cons($11,$16)|0);
 $18 = $0;
 $19 = (($18) + 52|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + -4|0);
 HEAP32[$21>>2] = $17;
 STACKTOP = sp;return;
}
function _yy_StrChunk($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0;
 var $yypos1583 = 0, $yypos1586 = 0, $yypos1587 = 0, $yypos1590 = 0, $yypos1591 = 0, $yypos1592 = 0, $yypos1593 = 0, $yypos1596 = 0, $yypos1597 = 0, $yypos1598 = 0, $yythunkpos0 = 0, $yythunkpos1583 = 0, $yythunkpos1586 = 0, $yythunkpos1587 = 0, $yythunkpos1590 = 0, $yythunkpos1591 = 0, $yythunkpos1592 = 0, $yythunkpos1593 = 0, $yythunkpos1596 = 0, $yythunkpos1597 = 0;
 var $yythunkpos1598 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos1583 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos1583 = $13;
 $14 = $1;
 $15 = $1;
 $16 = (($15) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = (($18) + 32|0);
 $20 = HEAP32[$19>>2]|0;
 (_yyText($14,$17,$20)|0);
 $21 = $1;
 $22 = (($21) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $1;
 $25 = (($24) + 28|0);
 HEAP32[$25>>2] = $23;
 $26 = $1;
 $27 = (($26) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $yypos1587 = $28;
 $29 = $1;
 $30 = (($29) + 44|0);
 $31 = HEAP32[$30>>2]|0;
 $yythunkpos1587 = $31;
 $32 = $1;
 $33 = (_yy_NormalChar($32)|0);
 $34 = ($33|0)!=(0);
 L2: do {
  if ($34) {
   label = 17;
  } else {
   $35 = $yypos1587;
   $36 = $1;
   $37 = (($36) + 12|0);
   HEAP32[$37>>2] = $35;
   $38 = $yythunkpos1587;
   $39 = $1;
   $40 = (($39) + 44|0);
   HEAP32[$40>>2] = $38;
   $41 = $1;
   $42 = (_yymatchChar($41,95)|0);
   $43 = ($42|0)!=(0);
   do {
    if ($43) {
     while(1) {
      $44 = $1;
      $45 = (($44) + 12|0);
      $46 = HEAP32[$45>>2]|0;
      $yypos1590 = $46;
      $47 = $1;
      $48 = (($47) + 44|0);
      $49 = HEAP32[$48>>2]|0;
      $yythunkpos1590 = $49;
      $50 = $1;
      $51 = (_yymatchChar($50,95)|0);
      $52 = ($51|0)!=(0);
      if (!($52)) {
       break;
      }
     }
     $53 = $yypos1590;
     $54 = $1;
     $55 = (($54) + 12|0);
     HEAP32[$55>>2] = $53;
     $56 = $yythunkpos1590;
     $57 = $1;
     $58 = (($57) + 44|0);
     HEAP32[$58>>2] = $56;
     $59 = $1;
     $60 = (($59) + 12|0);
     $61 = HEAP32[$60>>2]|0;
     $yypos1591 = $61;
     $62 = $1;
     $63 = (($62) + 44|0);
     $64 = HEAP32[$63>>2]|0;
     $yythunkpos1591 = $64;
     $65 = $1;
     $66 = (_yy_Punctuation($65)|0);
     $67 = ($66|0)!=(0);
     if ($67) {
      break;
     }
     $68 = $yypos1591;
     $69 = $1;
     $70 = (($69) + 12|0);
     HEAP32[$70>>2] = $68;
     $71 = $yythunkpos1591;
     $72 = $1;
     $73 = (($72) + 44|0);
     HEAP32[$73>>2] = $71;
     $74 = $1;
     $75 = (($74) + 12|0);
     $76 = HEAP32[$75>>2]|0;
     $yypos1592 = $76;
     $77 = $1;
     $78 = (($77) + 44|0);
     $79 = HEAP32[$78>>2]|0;
     $yythunkpos1592 = $79;
     $80 = $1;
     $81 = (_yy_Alphanumeric($80)|0);
     $82 = ($81|0)!=(0);
     if ($82) {
      $83 = $yypos1592;
      $84 = $1;
      $85 = (($84) + 12|0);
      HEAP32[$85>>2] = $83;
      $86 = $yythunkpos1592;
      $87 = $1;
      $88 = (($87) + 44|0);
      HEAP32[$88>>2] = $86;
      label = 17;
      break L2;
     } else {
      break;
     }
    } else {
    }
   } while(0);
   $183 = $yypos1583;
   $184 = $1;
   $185 = (($184) + 12|0);
   HEAP32[$185>>2] = $183;
   $186 = $yythunkpos1583;
   $187 = $1;
   $188 = (($187) + 44|0);
   HEAP32[$188>>2] = $186;
   $189 = $1;
   $190 = (_yy_AposChunk($189)|0);
   $191 = ($190|0)!=(0);
   if ($191) {
    break;
   }
   $192 = $yypos0;
   $193 = $1;
   $194 = (($193) + 12|0);
   HEAP32[$194>>2] = $192;
   $195 = $yythunkpos0;
   $196 = $1;
   $197 = (($196) + 44|0);
   HEAP32[$197>>2] = $195;
   $0 = 0;
   $198 = $0;
   STACKTOP = sp;return ($198|0);
  }
 } while(0);
 if ((label|0) == 17) {
  while(1) {
   $89 = $1;
   $90 = (($89) + 12|0);
   $91 = HEAP32[$90>>2]|0;
   $yypos1586 = $91;
   $92 = $1;
   $93 = (($92) + 44|0);
   $94 = HEAP32[$93>>2]|0;
   $yythunkpos1586 = $94;
   $95 = $1;
   $96 = (($95) + 12|0);
   $97 = HEAP32[$96>>2]|0;
   $yypos1593 = $97;
   $98 = $1;
   $99 = (($98) + 44|0);
   $100 = HEAP32[$99>>2]|0;
   $yythunkpos1593 = $100;
   $101 = $1;
   $102 = (_yy_NormalChar($101)|0);
   $103 = ($102|0)!=(0);
   if ($103) {
   } else {
    $104 = $yypos1593;
    $105 = $1;
    $106 = (($105) + 12|0);
    HEAP32[$106>>2] = $104;
    $107 = $yythunkpos1593;
    $108 = $1;
    $109 = (($108) + 44|0);
    HEAP32[$109>>2] = $107;
    $110 = $1;
    $111 = (_yymatchChar($110,95)|0);
    $112 = ($111|0)!=(0);
    if (!($112)) {
     label = 22;
     break;
    }
    while(1) {
     $113 = $1;
     $114 = (($113) + 12|0);
     $115 = HEAP32[$114>>2]|0;
     $yypos1596 = $115;
     $116 = $1;
     $117 = (($116) + 44|0);
     $118 = HEAP32[$117>>2]|0;
     $yythunkpos1596 = $118;
     $119 = $1;
     $120 = (_yymatchChar($119,95)|0);
     $121 = ($120|0)!=(0);
     if (!($121)) {
      break;
     }
    }
    $122 = $yypos1596;
    $123 = $1;
    $124 = (($123) + 12|0);
    HEAP32[$124>>2] = $122;
    $125 = $yythunkpos1596;
    $126 = $1;
    $127 = (($126) + 44|0);
    HEAP32[$127>>2] = $125;
    $128 = $1;
    $129 = (($128) + 12|0);
    $130 = HEAP32[$129>>2]|0;
    $yypos1597 = $130;
    $131 = $1;
    $132 = (($131) + 44|0);
    $133 = HEAP32[$132>>2]|0;
    $yythunkpos1597 = $133;
    $134 = $1;
    $135 = (_yy_Punctuation($134)|0);
    $136 = ($135|0)!=(0);
    if ($136) {
     label = 29;
     break;
    }
    $137 = $yypos1597;
    $138 = $1;
    $139 = (($138) + 12|0);
    HEAP32[$139>>2] = $137;
    $140 = $yythunkpos1597;
    $141 = $1;
    $142 = (($141) + 44|0);
    HEAP32[$142>>2] = $140;
    $143 = $1;
    $144 = (($143) + 12|0);
    $145 = HEAP32[$144>>2]|0;
    $yypos1598 = $145;
    $146 = $1;
    $147 = (($146) + 44|0);
    $148 = HEAP32[$147>>2]|0;
    $yythunkpos1598 = $148;
    $149 = $1;
    $150 = (_yy_Alphanumeric($149)|0);
    $151 = ($150|0)!=(0);
    if (!($151)) {
     label = 31;
     break;
    }
    $152 = $yypos1598;
    $153 = $1;
    $154 = (($153) + 12|0);
    HEAP32[$154>>2] = $152;
    $155 = $yythunkpos1598;
    $156 = $1;
    $157 = (($156) + 44|0);
    HEAP32[$157>>2] = $155;
   }
  }
  if ((label|0) == 22) {
  }
  else if ((label|0) == 29) {
  }
  else if ((label|0) == 31) {
  }
  $158 = $yypos1586;
  $159 = $1;
  $160 = (($159) + 12|0);
  HEAP32[$160>>2] = $158;
  $161 = $yythunkpos1586;
  $162 = $1;
  $163 = (($162) + 44|0);
  HEAP32[$163>>2] = $161;
  $164 = $1;
  $165 = $1;
  $166 = (($165) + 28|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = $1;
  $169 = (($168) + 32|0);
  $170 = HEAP32[$169>>2]|0;
  (_yyText($164,$167,$170)|0);
  $171 = $1;
  $172 = (($171) + 12|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = $1;
  $175 = (($174) + 32|0);
  HEAP32[$175>>2] = $173;
  $176 = $1;
  $177 = $1;
  $178 = (($177) + 28|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = $1;
  $181 = (($180) + 32|0);
  $182 = HEAP32[$181>>2]|0;
  _yyDo($176,207,$179,$182,45688);
 }
 $0 = 1;
 $198 = $0;
 STACKTOP = sp;return ($198|0);
}
function _yy_2_Str($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_Superscript($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos1569 = 0, $yypos1572 = 0, $yypos1573 = 0, $yypos1574 = 0, $yypos1575 = 0, $yypos1577 = 0, $yypos1578 = 0, $yypos1579 = 0, $yypos1580 = 0, $yythunkpos0 = 0, $yythunkpos1569 = 0, $yythunkpos1572 = 0;
 var $yythunkpos1573 = 0, $yythunkpos1574 = 0, $yythunkpos1575 = 0, $yythunkpos1577 = 0, $yythunkpos1578 = 0, $yythunkpos1579 = 0, $yythunkpos1580 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,94)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = $1;
   $13 = (($12) + 28|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $1;
   $16 = (($15) + 32|0);
   $17 = HEAP32[$16>>2]|0;
   (_yyText($11,$14,$17)|0);
   $18 = $1;
   $19 = (($18) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $1;
   $22 = (($21) + 28|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (($23) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $yypos1569 = $25;
   $26 = $1;
   $27 = (($26) + 44|0);
   $28 = HEAP32[$27>>2]|0;
   $yythunkpos1569 = $28;
   $29 = $1;
   $30 = (($29) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $yypos1573 = $31;
   $32 = $1;
   $33 = (($32) + 44|0);
   $34 = HEAP32[$33>>2]|0;
   $yythunkpos1573 = $34;
   $35 = $1;
   $36 = (_yymatchChar($35,94)|0);
   $37 = ($36|0)!=(0);
   do {
    if ($37) {
     label = 19;
    } else {
     $38 = $yypos1573;
     $39 = $1;
     $40 = (($39) + 12|0);
     HEAP32[$40>>2] = $38;
     $41 = $yythunkpos1573;
     $42 = $1;
     $43 = (($42) + 44|0);
     HEAP32[$43>>2] = $41;
     $44 = $1;
     $45 = (_yy_Nonspacechar($44)|0);
     $46 = ($45|0)!=(0);
     if (!($46)) {
      label = 19;
      break;
     }
     while(1) {
      $47 = $1;
      $48 = (($47) + 12|0);
      $49 = HEAP32[$48>>2]|0;
      $yypos1572 = $49;
      $50 = $1;
      $51 = (($50) + 44|0);
      $52 = HEAP32[$51>>2]|0;
      $yythunkpos1572 = $52;
      $53 = $1;
      $54 = (($53) + 12|0);
      $55 = HEAP32[$54>>2]|0;
      $yypos1574 = $55;
      $56 = $1;
      $57 = (($56) + 44|0);
      $58 = HEAP32[$57>>2]|0;
      $yythunkpos1574 = $58;
      $59 = $1;
      $60 = (_yymatchChar($59,94)|0);
      $61 = ($60|0)!=(0);
      if ($61) {
       label = 12;
       break;
      }
      $62 = $yypos1574;
      $63 = $1;
      $64 = (($63) + 12|0);
      HEAP32[$64>>2] = $62;
      $65 = $yythunkpos1574;
      $66 = $1;
      $67 = (($66) + 44|0);
      HEAP32[$67>>2] = $65;
      $68 = $1;
      $69 = (_yy_Nonspacechar($68)|0);
      $70 = ($69|0)!=(0);
      if (!($70)) {
       label = 14;
       break;
      }
     }
     if ((label|0) == 12) {
     }
     else if ((label|0) == 14) {
     }
     $71 = $yypos1572;
     $72 = $1;
     $73 = (($72) + 12|0);
     HEAP32[$73>>2] = $71;
     $74 = $yythunkpos1572;
     $75 = $1;
     $76 = (($75) + 44|0);
     HEAP32[$76>>2] = $74;
     $77 = $1;
     $78 = (($77) + 12|0);
     $79 = HEAP32[$78>>2]|0;
     $yypos1575 = $79;
     $80 = $1;
     $81 = (($80) + 44|0);
     $82 = HEAP32[$81>>2]|0;
     $yythunkpos1575 = $82;
     $83 = $1;
     $84 = (_yymatchChar($83,94)|0);
     $85 = ($84|0)!=(0);
     if ($85) {
      $86 = $yypos1575;
      $87 = $1;
      $88 = (($87) + 12|0);
      HEAP32[$88>>2] = $86;
      $89 = $yythunkpos1575;
      $90 = $1;
      $91 = (($90) + 44|0);
      HEAP32[$91>>2] = $89;
      break;
     } else {
      label = 19;
      break;
     }
    }
   } while(0);
   if ((label|0) == 19) {
    $92 = $yypos1569;
    $93 = $1;
    $94 = (($93) + 12|0);
    HEAP32[$94>>2] = $92;
    $95 = $yythunkpos1569;
    $96 = $1;
    $97 = (($96) + 44|0);
    HEAP32[$97>>2] = $95;
    $98 = $1;
    $99 = (($98) + 12|0);
    $100 = HEAP32[$99>>2]|0;
    $yypos1578 = $100;
    $101 = $1;
    $102 = (($101) + 44|0);
    $103 = HEAP32[$102>>2]|0;
    $yythunkpos1578 = $103;
    $104 = $1;
    $105 = (_yymatchChar($104,94)|0);
    $106 = ($105|0)!=(0);
    if ($106) {
     break;
    }
    $107 = $yypos1578;
    $108 = $1;
    $109 = (($108) + 12|0);
    HEAP32[$109>>2] = $107;
    $110 = $yythunkpos1578;
    $111 = $1;
    $112 = (($111) + 44|0);
    HEAP32[$112>>2] = $110;
    $113 = $1;
    $114 = (_yy_NonPunctuation($113)|0);
    $115 = ($114|0)!=(0);
    if (!($115)) {
     break;
    }
    while(1) {
     $116 = $1;
     $117 = (($116) + 12|0);
     $118 = HEAP32[$117>>2]|0;
     $yypos1577 = $118;
     $119 = $1;
     $120 = (($119) + 44|0);
     $121 = HEAP32[$120>>2]|0;
     $yythunkpos1577 = $121;
     $122 = $1;
     $123 = (($122) + 12|0);
     $124 = HEAP32[$123>>2]|0;
     $yypos1579 = $124;
     $125 = $1;
     $126 = (($125) + 44|0);
     $127 = HEAP32[$126>>2]|0;
     $yythunkpos1579 = $127;
     $128 = $1;
     $129 = (_yymatchChar($128,94)|0);
     $130 = ($129|0)!=(0);
     if ($130) {
      label = 27;
      break;
     }
     $131 = $yypos1579;
     $132 = $1;
     $133 = (($132) + 12|0);
     HEAP32[$133>>2] = $131;
     $134 = $yythunkpos1579;
     $135 = $1;
     $136 = (($135) + 44|0);
     HEAP32[$136>>2] = $134;
     $137 = $1;
     $138 = (_yy_NonPunctuation($137)|0);
     $139 = ($138|0)!=(0);
     if (!($139)) {
      label = 29;
      break;
     }
    }
    if ((label|0) == 27) {
    }
    else if ((label|0) == 29) {
    }
    $140 = $yypos1577;
    $141 = $1;
    $142 = (($141) + 12|0);
    HEAP32[$142>>2] = $140;
    $143 = $yythunkpos1577;
    $144 = $1;
    $145 = (($144) + 44|0);
    HEAP32[$145>>2] = $143;
   }
   $146 = $1;
   $147 = $1;
   $148 = (($147) + 28|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = $1;
   $151 = (($150) + 32|0);
   $152 = HEAP32[$151>>2]|0;
   (_yyText($146,$149,$152)|0);
   $153 = $1;
   $154 = (($153) + 12|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = $1;
   $157 = (($156) + 32|0);
   HEAP32[$157>>2] = $155;
   $158 = $1;
   $159 = (($158) + 12|0);
   $160 = HEAP32[$159>>2]|0;
   $yypos1580 = $160;
   $161 = $1;
   $162 = (($161) + 44|0);
   $163 = HEAP32[$162>>2]|0;
   $yythunkpos1580 = $163;
   $164 = $1;
   $165 = (_yymatchChar($164,94)|0);
   $166 = ($165|0)!=(0);
   if ($166) {
   } else {
    $167 = $yypos1580;
    $168 = $1;
    $169 = (($168) + 12|0);
    HEAP32[$169>>2] = $167;
    $170 = $yythunkpos1580;
    $171 = $1;
    $172 = (($171) + 44|0);
    HEAP32[$172>>2] = $170;
   }
   $173 = $1;
   $174 = $1;
   $175 = (($174) + 28|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = $1;
   $178 = (($177) + 32|0);
   $179 = HEAP32[$178>>2]|0;
   _yyDo($173,208,$176,$179,45664);
   $0 = 1;
   $186 = $0;
   STACKTOP = sp;return ($186|0);
  } else {
  }
 } while(0);
 $180 = $yypos0;
 $181 = $1;
 $182 = (($181) + 12|0);
 HEAP32[$182>>2] = $180;
 $183 = $yythunkpos0;
 $184 = $1;
 $185 = (($184) + 44|0);
 HEAP32[$185>>2] = $183;
 $0 = 0;
 $186 = $0;
 STACKTOP = sp;return ($186|0);
}
function _yy_Subscript($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos1555 = 0, $yypos1558 = 0, $yypos1559 = 0, $yypos1560 = 0, $yypos1561 = 0, $yypos1563 = 0, $yypos1564 = 0, $yypos1565 = 0, $yypos1566 = 0, $yythunkpos0 = 0, $yythunkpos1555 = 0, $yythunkpos1558 = 0;
 var $yythunkpos1559 = 0, $yythunkpos1560 = 0, $yythunkpos1561 = 0, $yythunkpos1563 = 0, $yythunkpos1564 = 0, $yythunkpos1565 = 0, $yythunkpos1566 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,126)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = $1;
   $13 = (($12) + 28|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $1;
   $16 = (($15) + 32|0);
   $17 = HEAP32[$16>>2]|0;
   (_yyText($11,$14,$17)|0);
   $18 = $1;
   $19 = (($18) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $1;
   $22 = (($21) + 28|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (($23) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $yypos1555 = $25;
   $26 = $1;
   $27 = (($26) + 44|0);
   $28 = HEAP32[$27>>2]|0;
   $yythunkpos1555 = $28;
   $29 = $1;
   $30 = (($29) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $yypos1559 = $31;
   $32 = $1;
   $33 = (($32) + 44|0);
   $34 = HEAP32[$33>>2]|0;
   $yythunkpos1559 = $34;
   $35 = $1;
   $36 = (_yymatchChar($35,126)|0);
   $37 = ($36|0)!=(0);
   do {
    if ($37) {
     label = 19;
    } else {
     $38 = $yypos1559;
     $39 = $1;
     $40 = (($39) + 12|0);
     HEAP32[$40>>2] = $38;
     $41 = $yythunkpos1559;
     $42 = $1;
     $43 = (($42) + 44|0);
     HEAP32[$43>>2] = $41;
     $44 = $1;
     $45 = (_yy_Nonspacechar($44)|0);
     $46 = ($45|0)!=(0);
     if (!($46)) {
      label = 19;
      break;
     }
     while(1) {
      $47 = $1;
      $48 = (($47) + 12|0);
      $49 = HEAP32[$48>>2]|0;
      $yypos1558 = $49;
      $50 = $1;
      $51 = (($50) + 44|0);
      $52 = HEAP32[$51>>2]|0;
      $yythunkpos1558 = $52;
      $53 = $1;
      $54 = (($53) + 12|0);
      $55 = HEAP32[$54>>2]|0;
      $yypos1560 = $55;
      $56 = $1;
      $57 = (($56) + 44|0);
      $58 = HEAP32[$57>>2]|0;
      $yythunkpos1560 = $58;
      $59 = $1;
      $60 = (_yymatchChar($59,126)|0);
      $61 = ($60|0)!=(0);
      if ($61) {
       label = 12;
       break;
      }
      $62 = $yypos1560;
      $63 = $1;
      $64 = (($63) + 12|0);
      HEAP32[$64>>2] = $62;
      $65 = $yythunkpos1560;
      $66 = $1;
      $67 = (($66) + 44|0);
      HEAP32[$67>>2] = $65;
      $68 = $1;
      $69 = (_yy_Nonspacechar($68)|0);
      $70 = ($69|0)!=(0);
      if (!($70)) {
       label = 14;
       break;
      }
     }
     if ((label|0) == 12) {
     }
     else if ((label|0) == 14) {
     }
     $71 = $yypos1558;
     $72 = $1;
     $73 = (($72) + 12|0);
     HEAP32[$73>>2] = $71;
     $74 = $yythunkpos1558;
     $75 = $1;
     $76 = (($75) + 44|0);
     HEAP32[$76>>2] = $74;
     $77 = $1;
     $78 = (($77) + 12|0);
     $79 = HEAP32[$78>>2]|0;
     $yypos1561 = $79;
     $80 = $1;
     $81 = (($80) + 44|0);
     $82 = HEAP32[$81>>2]|0;
     $yythunkpos1561 = $82;
     $83 = $1;
     $84 = (_yymatchChar($83,126)|0);
     $85 = ($84|0)!=(0);
     if ($85) {
      $86 = $yypos1561;
      $87 = $1;
      $88 = (($87) + 12|0);
      HEAP32[$88>>2] = $86;
      $89 = $yythunkpos1561;
      $90 = $1;
      $91 = (($90) + 44|0);
      HEAP32[$91>>2] = $89;
      break;
     } else {
      label = 19;
      break;
     }
    }
   } while(0);
   if ((label|0) == 19) {
    $92 = $yypos1555;
    $93 = $1;
    $94 = (($93) + 12|0);
    HEAP32[$94>>2] = $92;
    $95 = $yythunkpos1555;
    $96 = $1;
    $97 = (($96) + 44|0);
    HEAP32[$97>>2] = $95;
    $98 = $1;
    $99 = (($98) + 12|0);
    $100 = HEAP32[$99>>2]|0;
    $yypos1564 = $100;
    $101 = $1;
    $102 = (($101) + 44|0);
    $103 = HEAP32[$102>>2]|0;
    $yythunkpos1564 = $103;
    $104 = $1;
    $105 = (_yymatchChar($104,126)|0);
    $106 = ($105|0)!=(0);
    if ($106) {
     break;
    }
    $107 = $yypos1564;
    $108 = $1;
    $109 = (($108) + 12|0);
    HEAP32[$109>>2] = $107;
    $110 = $yythunkpos1564;
    $111 = $1;
    $112 = (($111) + 44|0);
    HEAP32[$112>>2] = $110;
    $113 = $1;
    $114 = (_yy_NonPunctuation($113)|0);
    $115 = ($114|0)!=(0);
    if (!($115)) {
     break;
    }
    while(1) {
     $116 = $1;
     $117 = (($116) + 12|0);
     $118 = HEAP32[$117>>2]|0;
     $yypos1563 = $118;
     $119 = $1;
     $120 = (($119) + 44|0);
     $121 = HEAP32[$120>>2]|0;
     $yythunkpos1563 = $121;
     $122 = $1;
     $123 = (($122) + 12|0);
     $124 = HEAP32[$123>>2]|0;
     $yypos1565 = $124;
     $125 = $1;
     $126 = (($125) + 44|0);
     $127 = HEAP32[$126>>2]|0;
     $yythunkpos1565 = $127;
     $128 = $1;
     $129 = (_yymatchChar($128,126)|0);
     $130 = ($129|0)!=(0);
     if ($130) {
      label = 27;
      break;
     }
     $131 = $yypos1565;
     $132 = $1;
     $133 = (($132) + 12|0);
     HEAP32[$133>>2] = $131;
     $134 = $yythunkpos1565;
     $135 = $1;
     $136 = (($135) + 44|0);
     HEAP32[$136>>2] = $134;
     $137 = $1;
     $138 = (_yy_NonPunctuation($137)|0);
     $139 = ($138|0)!=(0);
     if (!($139)) {
      label = 29;
      break;
     }
    }
    if ((label|0) == 27) {
    }
    else if ((label|0) == 29) {
    }
    $140 = $yypos1563;
    $141 = $1;
    $142 = (($141) + 12|0);
    HEAP32[$142>>2] = $140;
    $143 = $yythunkpos1563;
    $144 = $1;
    $145 = (($144) + 44|0);
    HEAP32[$145>>2] = $143;
   }
   $146 = $1;
   $147 = $1;
   $148 = (($147) + 28|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = $1;
   $151 = (($150) + 32|0);
   $152 = HEAP32[$151>>2]|0;
   (_yyText($146,$149,$152)|0);
   $153 = $1;
   $154 = (($153) + 12|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = $1;
   $157 = (($156) + 32|0);
   HEAP32[$157>>2] = $155;
   $158 = $1;
   $159 = (($158) + 12|0);
   $160 = HEAP32[$159>>2]|0;
   $yypos1566 = $160;
   $161 = $1;
   $162 = (($161) + 44|0);
   $163 = HEAP32[$162>>2]|0;
   $yythunkpos1566 = $163;
   $164 = $1;
   $165 = (_yymatchChar($164,126)|0);
   $166 = ($165|0)!=(0);
   if ($166) {
   } else {
    $167 = $yypos1566;
    $168 = $1;
    $169 = (($168) + 12|0);
    HEAP32[$169>>2] = $167;
    $170 = $yythunkpos1566;
    $171 = $1;
    $172 = (($171) + 44|0);
    HEAP32[$172>>2] = $170;
   }
   $173 = $1;
   $174 = $1;
   $175 = (($174) + 28|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = $1;
   $178 = (($177) + 32|0);
   $179 = HEAP32[$178>>2]|0;
   _yyDo($173,209,$176,$179,45648);
   $0 = 1;
   $186 = $0;
   STACKTOP = sp;return ($186|0);
  } else {
  }
 } while(0);
 $180 = $yypos0;
 $181 = $1;
 $182 = (($181) + 12|0);
 HEAP32[$182>>2] = $180;
 $183 = $yythunkpos0;
 $184 = $1;
 $185 = (($184) + 44|0);
 HEAP32[$185>>2] = $183;
 $0 = 0;
 $186 = $0;
 STACKTOP = sp;return ($186|0);
}
function _yy_3_Str($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_4_Str($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $13 = $0;
  $14 = (($13) + 52|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + -4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $0;
  $19 = (($18) + 48|0);
  HEAP32[$19>>2] = $17;
  STACKTOP = sp;return;
 } else {
  $20 = $0;
  $21 = (($20) + 52|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + -4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $3;
  $26 = HEAP32[$25>>2]|0;
  $27 = $3;
  $28 = (($27) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (_mk_pos_list(1,$24,$26,$29)|0);
  $31 = $0;
  $32 = (($31) + 48|0);
  HEAP32[$32>>2] = $30;
  STACKTOP = sp;return;
 }
}
function _yy_1_MathSpan($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 $14 = $0;
 $15 = (($14) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP16[$16>>1] = 20;
 STACKTOP = sp;return;
}
function _yy_UlLine($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos1519 = 0, $yypos1522 = 0, $yypos1524 = 0, $yypos1525 = 0, $yythunkpos0 = 0, $yythunkpos1519 = 0, $yythunkpos1522 = 0, $yythunkpos1524 = 0, $yythunkpos1525 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos1519 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos1519 = $13;
 $14 = $1;
 $15 = $1;
 $16 = (($15) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = (($18) + 32|0);
 $20 = HEAP32[$19>>2]|0;
 (_yyText($14,$17,$20)|0);
 $21 = $1;
 $22 = (($21) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $1;
 $25 = (($24) + 28|0);
 HEAP32[$25>>2] = $23;
 $26 = $1;
 $27 = (_yymatchString($26,45528)|0);
 $28 = ($27|0)!=(0);
 L2: do {
  if ($28) {
   while(1) {
    $29 = $1;
    $30 = (($29) + 12|0);
    $31 = HEAP32[$30>>2]|0;
    $yypos1522 = $31;
    $32 = $1;
    $33 = (($32) + 44|0);
    $34 = HEAP32[$33>>2]|0;
    $yythunkpos1522 = $34;
    $35 = $1;
    $36 = (_yymatchChar($35,95)|0);
    $37 = ($36|0)!=(0);
    if (!($37)) {
     break;
    }
   }
   $38 = $yypos1522;
   $39 = $1;
   $40 = (($39) + 12|0);
   HEAP32[$40>>2] = $38;
   $41 = $yythunkpos1522;
   $42 = $1;
   $43 = (($42) + 44|0);
   HEAP32[$43>>2] = $41;
   $44 = $1;
   $45 = $1;
   $46 = (($45) + 28|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $1;
   $49 = (($48) + 32|0);
   $50 = HEAP32[$49>>2]|0;
   (_yyText($44,$47,$50)|0);
   $51 = $1;
   $52 = (($51) + 12|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $1;
   $55 = (($54) + 32|0);
   HEAP32[$55>>2] = $53;
  } else {
   $56 = $yypos1519;
   $57 = $1;
   $58 = (($57) + 12|0);
   HEAP32[$58>>2] = $56;
   $59 = $yythunkpos1519;
   $60 = $1;
   $61 = (($60) + 44|0);
   HEAP32[$61>>2] = $59;
   $62 = $1;
   $63 = $1;
   $64 = (($63) + 28|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $1;
   $67 = (($66) + 32|0);
   $68 = HEAP32[$67>>2]|0;
   (_yyText($62,$65,$68)|0);
   $69 = $1;
   $70 = (($69) + 12|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $1;
   $73 = (($72) + 28|0);
   HEAP32[$73>>2] = $71;
   $74 = $1;
   $75 = (_yy_Spacechar($74)|0);
   $76 = ($75|0)!=(0);
   do {
    if ($76) {
     $77 = $1;
     $78 = (_yymatchChar($77,95)|0);
     $79 = ($78|0)!=(0);
     if (!($79)) {
      break;
     }
     while(1) {
      $80 = $1;
      $81 = (($80) + 12|0);
      $82 = HEAP32[$81>>2]|0;
      $yypos1524 = $82;
      $83 = $1;
      $84 = (($83) + 44|0);
      $85 = HEAP32[$84>>2]|0;
      $yythunkpos1524 = $85;
      $86 = $1;
      $87 = (_yymatchChar($86,95)|0);
      $88 = ($87|0)!=(0);
      if (!($88)) {
       break;
      }
     }
     $89 = $yypos1524;
     $90 = $1;
     $91 = (($90) + 12|0);
     HEAP32[$91>>2] = $89;
     $92 = $yythunkpos1524;
     $93 = $1;
     $94 = (($93) + 44|0);
     HEAP32[$94>>2] = $92;
     $95 = $1;
     $96 = (($95) + 12|0);
     $97 = HEAP32[$96>>2]|0;
     $yypos1525 = $97;
     $98 = $1;
     $99 = (($98) + 44|0);
     $100 = HEAP32[$99>>2]|0;
     $yythunkpos1525 = $100;
     $101 = $1;
     $102 = (_yy_Spacechar($101)|0);
     $103 = ($102|0)!=(0);
     if (!($103)) {
      break;
     }
     $104 = $yypos1525;
     $105 = $1;
     $106 = (($105) + 12|0);
     HEAP32[$106>>2] = $104;
     $107 = $yythunkpos1525;
     $108 = $1;
     $109 = (($108) + 44|0);
     HEAP32[$109>>2] = $107;
     $110 = $1;
     $111 = $1;
     $112 = (($111) + 28|0);
     $113 = HEAP32[$112>>2]|0;
     $114 = $1;
     $115 = (($114) + 32|0);
     $116 = HEAP32[$115>>2]|0;
     (_yyText($110,$113,$116)|0);
     $117 = $1;
     $118 = (($117) + 12|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = $1;
     $121 = (($120) + 32|0);
     HEAP32[$121>>2] = $119;
     break L2;
    } else {
    }
   } while(0);
   $122 = $yypos0;
   $123 = $1;
   $124 = (($123) + 12|0);
   HEAP32[$124>>2] = $122;
   $125 = $yythunkpos0;
   $126 = $1;
   $127 = (($126) + 44|0);
   HEAP32[$127>>2] = $125;
   $0 = 0;
   $128 = $0;
   STACKTOP = sp;return ($128|0);
  }
 } while(0);
 $0 = 1;
 $128 = $0;
 STACKTOP = sp;return ($128|0);
}
function _yy_StarLine($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos1511 = 0, $yypos1514 = 0, $yypos1516 = 0, $yypos1517 = 0, $yythunkpos0 = 0, $yythunkpos1511 = 0, $yythunkpos1514 = 0, $yythunkpos1516 = 0, $yythunkpos1517 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos1511 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos1511 = $13;
 $14 = $1;
 $15 = $1;
 $16 = (($15) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = (($18) + 32|0);
 $20 = HEAP32[$19>>2]|0;
 (_yyText($14,$17,$20)|0);
 $21 = $1;
 $22 = (($21) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $1;
 $25 = (($24) + 28|0);
 HEAP32[$25>>2] = $23;
 $26 = $1;
 $27 = (_yymatchString($26,45520)|0);
 $28 = ($27|0)!=(0);
 L2: do {
  if ($28) {
   while(1) {
    $29 = $1;
    $30 = (($29) + 12|0);
    $31 = HEAP32[$30>>2]|0;
    $yypos1514 = $31;
    $32 = $1;
    $33 = (($32) + 44|0);
    $34 = HEAP32[$33>>2]|0;
    $yythunkpos1514 = $34;
    $35 = $1;
    $36 = (_yymatchChar($35,42)|0);
    $37 = ($36|0)!=(0);
    if (!($37)) {
     break;
    }
   }
   $38 = $yypos1514;
   $39 = $1;
   $40 = (($39) + 12|0);
   HEAP32[$40>>2] = $38;
   $41 = $yythunkpos1514;
   $42 = $1;
   $43 = (($42) + 44|0);
   HEAP32[$43>>2] = $41;
   $44 = $1;
   $45 = $1;
   $46 = (($45) + 28|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $1;
   $49 = (($48) + 32|0);
   $50 = HEAP32[$49>>2]|0;
   (_yyText($44,$47,$50)|0);
   $51 = $1;
   $52 = (($51) + 12|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $1;
   $55 = (($54) + 32|0);
   HEAP32[$55>>2] = $53;
  } else {
   $56 = $yypos1511;
   $57 = $1;
   $58 = (($57) + 12|0);
   HEAP32[$58>>2] = $56;
   $59 = $yythunkpos1511;
   $60 = $1;
   $61 = (($60) + 44|0);
   HEAP32[$61>>2] = $59;
   $62 = $1;
   $63 = $1;
   $64 = (($63) + 28|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $1;
   $67 = (($66) + 32|0);
   $68 = HEAP32[$67>>2]|0;
   (_yyText($62,$65,$68)|0);
   $69 = $1;
   $70 = (($69) + 12|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $1;
   $73 = (($72) + 28|0);
   HEAP32[$73>>2] = $71;
   $74 = $1;
   $75 = (_yy_Spacechar($74)|0);
   $76 = ($75|0)!=(0);
   do {
    if ($76) {
     $77 = $1;
     $78 = (_yymatchChar($77,42)|0);
     $79 = ($78|0)!=(0);
     if (!($79)) {
      break;
     }
     while(1) {
      $80 = $1;
      $81 = (($80) + 12|0);
      $82 = HEAP32[$81>>2]|0;
      $yypos1516 = $82;
      $83 = $1;
      $84 = (($83) + 44|0);
      $85 = HEAP32[$84>>2]|0;
      $yythunkpos1516 = $85;
      $86 = $1;
      $87 = (_yymatchChar($86,42)|0);
      $88 = ($87|0)!=(0);
      if (!($88)) {
       break;
      }
     }
     $89 = $yypos1516;
     $90 = $1;
     $91 = (($90) + 12|0);
     HEAP32[$91>>2] = $89;
     $92 = $yythunkpos1516;
     $93 = $1;
     $94 = (($93) + 44|0);
     HEAP32[$94>>2] = $92;
     $95 = $1;
     $96 = (($95) + 12|0);
     $97 = HEAP32[$96>>2]|0;
     $yypos1517 = $97;
     $98 = $1;
     $99 = (($98) + 44|0);
     $100 = HEAP32[$99>>2]|0;
     $yythunkpos1517 = $100;
     $101 = $1;
     $102 = (_yy_Spacechar($101)|0);
     $103 = ($102|0)!=(0);
     if (!($103)) {
      break;
     }
     $104 = $yypos1517;
     $105 = $1;
     $106 = (($105) + 12|0);
     HEAP32[$106>>2] = $104;
     $107 = $yythunkpos1517;
     $108 = $1;
     $109 = (($108) + 44|0);
     HEAP32[$109>>2] = $107;
     $110 = $1;
     $111 = $1;
     $112 = (($111) + 28|0);
     $113 = HEAP32[$112>>2]|0;
     $114 = $1;
     $115 = (($114) + 32|0);
     $116 = HEAP32[$115>>2]|0;
     (_yyText($110,$113,$116)|0);
     $117 = $1;
     $118 = (($117) + 12|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = $1;
     $121 = (($120) + 32|0);
     HEAP32[$121>>2] = $119;
     break L2;
    } else {
    }
   } while(0);
   $122 = $yypos0;
   $123 = $1;
   $124 = (($123) + 12|0);
   HEAP32[$124>>2] = $122;
   $125 = $yythunkpos0;
   $126 = $1;
   $127 = (($126) + 44|0);
   HEAP32[$127>>2] = $125;
   $0 = 0;
   $128 = $0;
   STACKTOP = sp;return ($128|0);
  }
 } while(0);
 $0 = 1;
 $128 = $0;
 STACKTOP = sp;return ($128|0);
}
function _yy_1_UlOrStarLine($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 STACKTOP = sp;return;
}
function _yy_1_Space($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $3;
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_mk_pos_str(42624,$6,$9)|0);
 $11 = $0;
 $12 = (($11) + 48|0);
 HEAP32[$12>>2] = $10;
 $13 = $0;
 $14 = (($13) + 48|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP16[$15>>1] = 8;
 STACKTOP = sp;return;
}
function _yy_StrongAndEmphStar($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos1466 = 0, $yypos1468 = 0;
 var $yypos1469 = 0, $yypos1470 = 0, $yypos1471 = 0, $yypos1472 = 0, $yypos1473 = 0, $yypos1474 = 0, $yythunkpos0 = 0, $yythunkpos1466 = 0, $yythunkpos1468 = 0, $yythunkpos1469 = 0, $yythunkpos1470 = 0, $yythunkpos1471 = 0, $yythunkpos1472 = 0, $yythunkpos1473 = 0, $yythunkpos1474 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,2,0,41328);
 $9 = $1;
 $10 = (_yymatchString($9,45424)|0);
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $1;
   $13 = (($12) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $yypos1466 = $14;
   $15 = $1;
   $16 = (($15) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   $yythunkpos1466 = $17;
   $18 = $1;
   $19 = (_yy_Whitespace($18)|0);
   $20 = ($19|0)!=(0);
   if ($20) {
    break;
   }
   $21 = $yypos1466;
   $22 = $1;
   $23 = (($22) + 12|0);
   HEAP32[$23>>2] = $21;
   $24 = $yythunkpos1466;
   $25 = $1;
   $26 = (($25) + 44|0);
   HEAP32[$26>>2] = $24;
   $27 = $1;
   $28 = (_yy_StartList($27)|0);
   $29 = ($28|0)!=(0);
   if (!($29)) {
    break;
   }
   $30 = $1;
   _yyDo($30,8,-2,0,41336);
   $31 = $1;
   $32 = (($31) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $yypos1469 = $33;
   $34 = $1;
   $35 = (($34) + 44|0);
   $36 = HEAP32[$35>>2]|0;
   $yythunkpos1469 = $36;
   $37 = $1;
   $38 = (_yymatchString($37,45424)|0);
   $39 = ($38|0)!=(0);
   if ($39) {
    break;
   }
   $40 = $yypos1469;
   $41 = $1;
   $42 = (($41) + 12|0);
   HEAP32[$42>>2] = $40;
   $43 = $yythunkpos1469;
   $44 = $1;
   $45 = (($44) + 44|0);
   HEAP32[$45>>2] = $43;
   $46 = $1;
   $47 = (($46) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $yypos1470 = $48;
   $49 = $1;
   $50 = (($49) + 44|0);
   $51 = HEAP32[$50>>2]|0;
   $yythunkpos1470 = $51;
   $52 = $1;
   $53 = (_yymatchString($52,45232)|0);
   $54 = ($53|0)!=(0);
   if ($54) {
    break;
   }
   $55 = $yypos1470;
   $56 = $1;
   $57 = (($56) + 12|0);
   HEAP32[$57>>2] = $55;
   $58 = $yythunkpos1470;
   $59 = $1;
   $60 = (($59) + 44|0);
   HEAP32[$60>>2] = $58;
   $61 = $1;
   $62 = (($61) + 12|0);
   $63 = HEAP32[$62>>2]|0;
   $yypos1471 = $63;
   $64 = $1;
   $65 = (($64) + 44|0);
   $66 = HEAP32[$65>>2]|0;
   $yythunkpos1471 = $66;
   $67 = $1;
   $68 = (_yymatchChar($67,42)|0);
   $69 = ($68|0)!=(0);
   if ($69) {
    break;
   }
   $70 = $yypos1471;
   $71 = $1;
   $72 = (($71) + 12|0);
   HEAP32[$72>>2] = $70;
   $73 = $yythunkpos1471;
   $74 = $1;
   $75 = (($74) + 44|0);
   HEAP32[$75>>2] = $73;
   $76 = $1;
   $77 = (_yy_Inline($76)|0);
   $78 = ($77|0)!=(0);
   if (!($78)) {
    break;
   }
   $79 = $1;
   _yyDo($79,8,-1,0,41336);
   $80 = $1;
   $81 = $1;
   $82 = (($81) + 28|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = $1;
   $85 = (($84) + 32|0);
   $86 = HEAP32[$85>>2]|0;
   _yyDo($80,210,$83,$86,45432);
   while(1) {
    $87 = $1;
    $88 = (($87) + 12|0);
    $89 = HEAP32[$88>>2]|0;
    $yypos1468 = $89;
    $90 = $1;
    $91 = (($90) + 44|0);
    $92 = HEAP32[$91>>2]|0;
    $yythunkpos1468 = $92;
    $93 = $1;
    $94 = (($93) + 12|0);
    $95 = HEAP32[$94>>2]|0;
    $yypos1472 = $95;
    $96 = $1;
    $97 = (($96) + 44|0);
    $98 = HEAP32[$97>>2]|0;
    $yythunkpos1472 = $98;
    $99 = $1;
    $100 = (_yymatchString($99,45424)|0);
    $101 = ($100|0)!=(0);
    if ($101) {
     label = 22;
     break;
    }
    $102 = $yypos1472;
    $103 = $1;
    $104 = (($103) + 12|0);
    HEAP32[$104>>2] = $102;
    $105 = $yythunkpos1472;
    $106 = $1;
    $107 = (($106) + 44|0);
    HEAP32[$107>>2] = $105;
    $108 = $1;
    $109 = (($108) + 12|0);
    $110 = HEAP32[$109>>2]|0;
    $yypos1473 = $110;
    $111 = $1;
    $112 = (($111) + 44|0);
    $113 = HEAP32[$112>>2]|0;
    $yythunkpos1473 = $113;
    $114 = $1;
    $115 = (_yymatchString($114,45232)|0);
    $116 = ($115|0)!=(0);
    if ($116) {
     label = 25;
     break;
    }
    $117 = $yypos1473;
    $118 = $1;
    $119 = (($118) + 12|0);
    HEAP32[$119>>2] = $117;
    $120 = $yythunkpos1473;
    $121 = $1;
    $122 = (($121) + 44|0);
    HEAP32[$122>>2] = $120;
    $123 = $1;
    $124 = (($123) + 12|0);
    $125 = HEAP32[$124>>2]|0;
    $yypos1474 = $125;
    $126 = $1;
    $127 = (($126) + 44|0);
    $128 = HEAP32[$127>>2]|0;
    $yythunkpos1474 = $128;
    $129 = $1;
    $130 = (_yymatchChar($129,42)|0);
    $131 = ($130|0)!=(0);
    if ($131) {
     label = 28;
     break;
    }
    $132 = $yypos1474;
    $133 = $1;
    $134 = (($133) + 12|0);
    HEAP32[$134>>2] = $132;
    $135 = $yythunkpos1474;
    $136 = $1;
    $137 = (($136) + 44|0);
    HEAP32[$137>>2] = $135;
    $138 = $1;
    $139 = (_yy_Inline($138)|0);
    $140 = ($139|0)!=(0);
    if (!($140)) {
     label = 30;
     break;
    }
    $141 = $1;
    _yyDo($141,8,-1,0,41336);
    $142 = $1;
    $143 = $1;
    $144 = (($143) + 28|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = $1;
    $147 = (($146) + 32|0);
    $148 = HEAP32[$147>>2]|0;
    _yyDo($142,210,$145,$148,45432);
   }
   if ((label|0) == 22) {
   }
   else if ((label|0) == 25) {
   }
   else if ((label|0) == 28) {
   }
   else if ((label|0) == 30) {
   }
   $149 = $yypos1468;
   $150 = $1;
   $151 = (($150) + 12|0);
   HEAP32[$151>>2] = $149;
   $152 = $yythunkpos1468;
   $153 = $1;
   $154 = (($153) + 44|0);
   HEAP32[$154>>2] = $152;
   $155 = $1;
   $156 = $1;
   $157 = (($156) + 28|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = $1;
   $160 = (($159) + 32|0);
   $161 = HEAP32[$160>>2]|0;
   (_yyText($155,$158,$161)|0);
   $162 = $1;
   $163 = (($162) + 12|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = $1;
   $166 = (($165) + 28|0);
   HEAP32[$166>>2] = $164;
   $167 = $1;
   $168 = (_yymatchString($167,45424)|0);
   $169 = ($168|0)!=(0);
   if (!($169)) {
    break;
   }
   $170 = $1;
   $171 = $1;
   $172 = (($171) + 28|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = $1;
   $175 = (($174) + 32|0);
   $176 = HEAP32[$175>>2]|0;
   (_yyText($170,$173,$176)|0);
   $177 = $1;
   $178 = (($177) + 12|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = $1;
   $181 = (($180) + 32|0);
   HEAP32[$181>>2] = $179;
   $182 = $1;
   $183 = $1;
   $184 = (($183) + 28|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = $1;
   $187 = (($186) + 32|0);
   $188 = HEAP32[$187>>2]|0;
   _yyDo($182,211,$185,$188,45456);
   $189 = $1;
   _yyDo($189,12,2,0,41392);
   $0 = 1;
   $196 = $0;
   STACKTOP = sp;return ($196|0);
  } else {
  }
 } while(0);
 $190 = $yypos0;
 $191 = $1;
 $192 = (($191) + 12|0);
 HEAP32[$192>>2] = $190;
 $193 = $yythunkpos0;
 $194 = $1;
 $195 = (($194) + 44|0);
 HEAP32[$195>>2] = $193;
 $0 = 0;
 $196 = $0;
 STACKTOP = sp;return ($196|0);
}
function _yy_StrongAndEmphUl($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos1460 = 0, $yypos1462 = 0;
 var $yypos1463 = 0, $yypos1464 = 0, $yythunkpos0 = 0, $yythunkpos1460 = 0, $yythunkpos1462 = 0, $yythunkpos1463 = 0, $yythunkpos1464 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,2,0,41328);
 $9 = $1;
 $10 = (_yymatchString($9,45368)|0);
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $1;
   $13 = (($12) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $yypos1460 = $14;
   $15 = $1;
   $16 = (($15) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   $yythunkpos1460 = $17;
   $18 = $1;
   $19 = (_yy_Whitespace($18)|0);
   $20 = ($19|0)!=(0);
   if ($20) {
    break;
   }
   $21 = $yypos1460;
   $22 = $1;
   $23 = (($22) + 12|0);
   HEAP32[$23>>2] = $21;
   $24 = $yythunkpos1460;
   $25 = $1;
   $26 = (($25) + 44|0);
   HEAP32[$26>>2] = $24;
   $27 = $1;
   $28 = (_yy_StartList($27)|0);
   $29 = ($28|0)!=(0);
   if (!($29)) {
    break;
   }
   $30 = $1;
   _yyDo($30,8,-2,0,41336);
   $31 = $1;
   $32 = (($31) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $yypos1463 = $33;
   $34 = $1;
   $35 = (($34) + 44|0);
   $36 = HEAP32[$35>>2]|0;
   $yythunkpos1463 = $36;
   $37 = $1;
   $38 = (_yymatchString($37,45368)|0);
   $39 = ($38|0)!=(0);
   if ($39) {
    break;
   }
   $40 = $yypos1463;
   $41 = $1;
   $42 = (($41) + 12|0);
   HEAP32[$42>>2] = $40;
   $43 = $yythunkpos1463;
   $44 = $1;
   $45 = (($44) + 44|0);
   HEAP32[$45>>2] = $43;
   $46 = $1;
   $47 = (_yy_Inline($46)|0);
   $48 = ($47|0)!=(0);
   if (!($48)) {
    break;
   }
   $49 = $1;
   _yyDo($49,8,-1,0,41336);
   $50 = $1;
   $51 = $1;
   $52 = (($51) + 28|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $1;
   $55 = (($54) + 32|0);
   $56 = HEAP32[$55>>2]|0;
   _yyDo($50,212,$53,$56,45376);
   while(1) {
    $57 = $1;
    $58 = (($57) + 12|0);
    $59 = HEAP32[$58>>2]|0;
    $yypos1462 = $59;
    $60 = $1;
    $61 = (($60) + 44|0);
    $62 = HEAP32[$61>>2]|0;
    $yythunkpos1462 = $62;
    $63 = $1;
    $64 = (($63) + 12|0);
    $65 = HEAP32[$64>>2]|0;
    $yypos1464 = $65;
    $66 = $1;
    $67 = (($66) + 44|0);
    $68 = HEAP32[$67>>2]|0;
    $yythunkpos1464 = $68;
    $69 = $1;
    $70 = (_yymatchString($69,45368)|0);
    $71 = ($70|0)!=(0);
    if ($71) {
     label = 16;
     break;
    }
    $72 = $yypos1464;
    $73 = $1;
    $74 = (($73) + 12|0);
    HEAP32[$74>>2] = $72;
    $75 = $yythunkpos1464;
    $76 = $1;
    $77 = (($76) + 44|0);
    HEAP32[$77>>2] = $75;
    $78 = $1;
    $79 = (_yy_Inline($78)|0);
    $80 = ($79|0)!=(0);
    if (!($80)) {
     label = 18;
     break;
    }
    $81 = $1;
    _yyDo($81,8,-1,0,41336);
    $82 = $1;
    $83 = $1;
    $84 = (($83) + 28|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = $1;
    $87 = (($86) + 32|0);
    $88 = HEAP32[$87>>2]|0;
    _yyDo($82,212,$85,$88,45376);
   }
   if ((label|0) == 16) {
   }
   else if ((label|0) == 18) {
   }
   $89 = $yypos1462;
   $90 = $1;
   $91 = (($90) + 12|0);
   HEAP32[$91>>2] = $89;
   $92 = $yythunkpos1462;
   $93 = $1;
   $94 = (($93) + 44|0);
   HEAP32[$94>>2] = $92;
   $95 = $1;
   $96 = $1;
   $97 = (($96) + 28|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = $1;
   $100 = (($99) + 32|0);
   $101 = HEAP32[$100>>2]|0;
   (_yyText($95,$98,$101)|0);
   $102 = $1;
   $103 = (($102) + 12|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = $1;
   $106 = (($105) + 28|0);
   HEAP32[$106>>2] = $104;
   $107 = $1;
   $108 = (_yymatchString($107,45368)|0);
   $109 = ($108|0)!=(0);
   if (!($109)) {
    break;
   }
   $110 = $1;
   $111 = $1;
   $112 = (($111) + 28|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = $1;
   $115 = (($114) + 32|0);
   $116 = HEAP32[$115>>2]|0;
   (_yyText($110,$113,$116)|0);
   $117 = $1;
   $118 = (($117) + 12|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $1;
   $121 = (($120) + 32|0);
   HEAP32[$121>>2] = $119;
   $122 = $1;
   $123 = $1;
   $124 = (($123) + 28|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = $1;
   $127 = (($126) + 32|0);
   $128 = HEAP32[$127>>2]|0;
   _yyDo($122,213,$125,$128,45400);
   $129 = $1;
   _yyDo($129,12,2,0,41392);
   $0 = 1;
   $136 = $0;
   STACKTOP = sp;return ($136|0);
  } else {
  }
 } while(0);
 $130 = $yypos0;
 $131 = $1;
 $132 = (($131) + 12|0);
 HEAP32[$132>>2] = $130;
 $133 = $yythunkpos0;
 $134 = $1;
 $135 = (($134) + 44|0);
 HEAP32[$135>>2] = $133;
 $0 = 0;
 $136 = $0;
 STACKTOP = sp;return ($136|0);
}
function _yy_EmphAndStrongStar($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos1452 = 0, $yypos1454 = 0, $yypos1455 = 0, $yypos1456 = 0, $yypos1457 = 0, $yypos1458 = 0, $yythunkpos0 = 0, $yythunkpos1452 = 0, $yythunkpos1454 = 0, $yythunkpos1455 = 0, $yythunkpos1456 = 0, $yythunkpos1457 = 0;
 var $yythunkpos1458 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,2,0,41328);
 $9 = $1;
 $10 = (_yymatchChar($9,42)|0);
 $11 = ($10|0)!=(0);
 L1: do {
  if ($11) {
   $12 = $1;
   $13 = (($12) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $yypos1452 = $14;
   $15 = $1;
   $16 = (($15) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   $yythunkpos1452 = $17;
   $18 = $1;
   $19 = (_yy_PossibleEmphStrongStar($18)|0);
   $20 = ($19|0)!=(0);
   if (!($20)) {
    break;
   }
   $21 = $yypos1452;
   $22 = $1;
   $23 = (($22) + 12|0);
   HEAP32[$23>>2] = $21;
   $24 = $yythunkpos1452;
   $25 = $1;
   $26 = (($25) + 44|0);
   HEAP32[$26>>2] = $24;
   $27 = $1;
   $28 = (_yy_StartList($27)|0);
   $29 = ($28|0)!=(0);
   if (!($29)) {
    break;
   }
   $30 = $1;
   _yyDo($30,8,-2,0,41336);
   $31 = $1;
   $32 = (($31) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $yypos1455 = $33;
   $34 = $1;
   $35 = (($34) + 44|0);
   $36 = HEAP32[$35>>2]|0;
   $yythunkpos1455 = $36;
   $37 = $1;
   $38 = (_yymatchChar($37,42)|0);
   $39 = ($38|0)!=(0);
   do {
    if ($39) {
     $40 = $1;
     $41 = (($40) + 12|0);
     $42 = HEAP32[$41>>2]|0;
     $yypos1456 = $42;
     $43 = $1;
     $44 = (($43) + 44|0);
     $45 = HEAP32[$44>>2]|0;
     $yythunkpos1456 = $45;
     $46 = $1;
     $47 = (_yymatchChar($46,42)|0);
     $48 = ($47|0)!=(0);
     if ($48) {
      break;
     }
     $49 = $yypos1456;
     $50 = $1;
     $51 = (($50) + 12|0);
     HEAP32[$51>>2] = $49;
     $52 = $yythunkpos1456;
     $53 = $1;
     $54 = (($53) + 44|0);
     HEAP32[$54>>2] = $52;
     break L1;
    } else {
    }
   } while(0);
   $55 = $yypos1455;
   $56 = $1;
   $57 = (($56) + 12|0);
   HEAP32[$57>>2] = $55;
   $58 = $yythunkpos1455;
   $59 = $1;
   $60 = (($59) + 44|0);
   HEAP32[$60>>2] = $58;
   $61 = $1;
   $62 = (_yy_InlineNoEmph($61)|0);
   $63 = ($62|0)!=(0);
   if (!($63)) {
    break;
   }
   $64 = $1;
   _yyDo($64,8,-1,0,41336);
   $65 = $1;
   $66 = $1;
   $67 = (($66) + 28|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $1;
   $70 = (($69) + 32|0);
   $71 = HEAP32[$70>>2]|0;
   _yyDo($65,214,$68,$71,45320);
   while(1) {
    $72 = $1;
    $73 = (($72) + 12|0);
    $74 = HEAP32[$73>>2]|0;
    $yypos1454 = $74;
    $75 = $1;
    $76 = (($75) + 44|0);
    $77 = HEAP32[$76>>2]|0;
    $yythunkpos1454 = $77;
    $78 = $1;
    $79 = (($78) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $yypos1457 = $80;
    $81 = $1;
    $82 = (($81) + 44|0);
    $83 = HEAP32[$82>>2]|0;
    $yythunkpos1457 = $83;
    $84 = $1;
    $85 = (_yymatchChar($84,42)|0);
    $86 = ($85|0)!=(0);
    if ($86) {
     $87 = $1;
     $88 = (($87) + 12|0);
     $89 = HEAP32[$88>>2]|0;
     $yypos1458 = $89;
     $90 = $1;
     $91 = (($90) + 44|0);
     $92 = HEAP32[$91>>2]|0;
     $yythunkpos1458 = $92;
     $93 = $1;
     $94 = (_yymatchChar($93,42)|0);
     $95 = ($94|0)!=(0);
     if (!($95)) {
      label = 19;
      break;
     }
    } else {
    }
    $102 = $yypos1457;
    $103 = $1;
    $104 = (($103) + 12|0);
    HEAP32[$104>>2] = $102;
    $105 = $yythunkpos1457;
    $106 = $1;
    $107 = (($106) + 44|0);
    HEAP32[$107>>2] = $105;
    $108 = $1;
    $109 = (_yy_InlineNoEmph($108)|0);
    $110 = ($109|0)!=(0);
    if (!($110)) {
     label = 23;
     break;
    }
    $111 = $1;
    _yyDo($111,8,-1,0,41336);
    $112 = $1;
    $113 = $1;
    $114 = (($113) + 28|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = $1;
    $117 = (($116) + 32|0);
    $118 = HEAP32[$117>>2]|0;
    _yyDo($112,214,$115,$118,45320);
   }
   if ((label|0) == 19) {
    $96 = $yypos1458;
    $97 = $1;
    $98 = (($97) + 12|0);
    HEAP32[$98>>2] = $96;
    $99 = $yythunkpos1458;
    $100 = $1;
    $101 = (($100) + 44|0);
    HEAP32[$101>>2] = $99;
   }
   else if ((label|0) == 23) {
   }
   $119 = $yypos1454;
   $120 = $1;
   $121 = (($120) + 12|0);
   HEAP32[$121>>2] = $119;
   $122 = $yythunkpos1454;
   $123 = $1;
   $124 = (($123) + 44|0);
   HEAP32[$124>>2] = $122;
   $125 = $1;
   $126 = $1;
   $127 = (($126) + 28|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = $1;
   $130 = (($129) + 32|0);
   $131 = HEAP32[$130>>2]|0;
   (_yyText($125,$128,$131)|0);
   $132 = $1;
   $133 = (($132) + 12|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = $1;
   $136 = (($135) + 28|0);
   HEAP32[$136>>2] = $134;
   $137 = $1;
   $138 = (_yymatchChar($137,42)|0);
   $139 = ($138|0)!=(0);
   if (!($139)) {
    break;
   }
   $140 = $1;
   $141 = $1;
   $142 = (($141) + 28|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = $1;
   $145 = (($144) + 32|0);
   $146 = HEAP32[$145>>2]|0;
   (_yyText($140,$143,$146)|0);
   $147 = $1;
   $148 = (($147) + 12|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = $1;
   $151 = (($150) + 32|0);
   HEAP32[$151>>2] = $149;
   $152 = $1;
   $153 = $1;
   $154 = (($153) + 28|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = $1;
   $157 = (($156) + 32|0);
   $158 = HEAP32[$157>>2]|0;
   _yyDo($152,215,$155,$158,45344);
   $159 = $1;
   _yyDo($159,12,2,0,41392);
   $0 = 1;
   $166 = $0;
   STACKTOP = sp;return ($166|0);
  } else {
  }
 } while(0);
 $160 = $yypos0;
 $161 = $1;
 $162 = (($161) + 12|0);
 HEAP32[$162>>2] = $160;
 $163 = $yythunkpos0;
 $164 = $1;
 $165 = (($164) + 44|0);
 HEAP32[$165>>2] = $163;
 $0 = 0;
 $166 = $0;
 STACKTOP = sp;return ($166|0);
}
function _yy_EmphAndStrongUl($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos1444 = 0, $yypos1446 = 0, $yypos1447 = 0, $yypos1448 = 0, $yypos1449 = 0, $yypos1450 = 0, $yythunkpos0 = 0, $yythunkpos1444 = 0, $yythunkpos1446 = 0, $yythunkpos1447 = 0, $yythunkpos1448 = 0, $yythunkpos1449 = 0;
 var $yythunkpos1450 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,2,0,41328);
 $9 = $1;
 $10 = (_yymatchChar($9,95)|0);
 $11 = ($10|0)!=(0);
 L1: do {
  if ($11) {
   $12 = $1;
   $13 = (($12) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $yypos1444 = $14;
   $15 = $1;
   $16 = (($15) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   $yythunkpos1444 = $17;
   $18 = $1;
   $19 = (_yy_PossibleEmphStrongUl($18)|0);
   $20 = ($19|0)!=(0);
   if (!($20)) {
    break;
   }
   $21 = $yypos1444;
   $22 = $1;
   $23 = (($22) + 12|0);
   HEAP32[$23>>2] = $21;
   $24 = $yythunkpos1444;
   $25 = $1;
   $26 = (($25) + 44|0);
   HEAP32[$26>>2] = $24;
   $27 = $1;
   $28 = (_yy_StartList($27)|0);
   $29 = ($28|0)!=(0);
   if (!($29)) {
    break;
   }
   $30 = $1;
   _yyDo($30,8,-2,0,41336);
   $31 = $1;
   $32 = (($31) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $yypos1447 = $33;
   $34 = $1;
   $35 = (($34) + 44|0);
   $36 = HEAP32[$35>>2]|0;
   $yythunkpos1447 = $36;
   $37 = $1;
   $38 = (_yymatchChar($37,95)|0);
   $39 = ($38|0)!=(0);
   do {
    if ($39) {
     $40 = $1;
     $41 = (($40) + 12|0);
     $42 = HEAP32[$41>>2]|0;
     $yypos1448 = $42;
     $43 = $1;
     $44 = (($43) + 44|0);
     $45 = HEAP32[$44>>2]|0;
     $yythunkpos1448 = $45;
     $46 = $1;
     $47 = (_yymatchChar($46,95)|0);
     $48 = ($47|0)!=(0);
     if ($48) {
      break;
     }
     $49 = $yypos1448;
     $50 = $1;
     $51 = (($50) + 12|0);
     HEAP32[$51>>2] = $49;
     $52 = $yythunkpos1448;
     $53 = $1;
     $54 = (($53) + 44|0);
     HEAP32[$54>>2] = $52;
     break L1;
    } else {
    }
   } while(0);
   $55 = $yypos1447;
   $56 = $1;
   $57 = (($56) + 12|0);
   HEAP32[$57>>2] = $55;
   $58 = $yythunkpos1447;
   $59 = $1;
   $60 = (($59) + 44|0);
   HEAP32[$60>>2] = $58;
   $61 = $1;
   $62 = (_yy_InlineNoEmph($61)|0);
   $63 = ($62|0)!=(0);
   if (!($63)) {
    break;
   }
   $64 = $1;
   _yyDo($64,8,-1,0,41336);
   $65 = $1;
   $66 = $1;
   $67 = (($66) + 28|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $1;
   $70 = (($69) + 32|0);
   $71 = HEAP32[$70>>2]|0;
   _yyDo($65,216,$68,$71,45272);
   while(1) {
    $72 = $1;
    $73 = (($72) + 12|0);
    $74 = HEAP32[$73>>2]|0;
    $yypos1446 = $74;
    $75 = $1;
    $76 = (($75) + 44|0);
    $77 = HEAP32[$76>>2]|0;
    $yythunkpos1446 = $77;
    $78 = $1;
    $79 = (($78) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $yypos1449 = $80;
    $81 = $1;
    $82 = (($81) + 44|0);
    $83 = HEAP32[$82>>2]|0;
    $yythunkpos1449 = $83;
    $84 = $1;
    $85 = (_yymatchChar($84,95)|0);
    $86 = ($85|0)!=(0);
    if ($86) {
     $87 = $1;
     $88 = (($87) + 12|0);
     $89 = HEAP32[$88>>2]|0;
     $yypos1450 = $89;
     $90 = $1;
     $91 = (($90) + 44|0);
     $92 = HEAP32[$91>>2]|0;
     $yythunkpos1450 = $92;
     $93 = $1;
     $94 = (_yymatchChar($93,95)|0);
     $95 = ($94|0)!=(0);
     if (!($95)) {
      label = 19;
      break;
     }
    } else {
    }
    $102 = $yypos1449;
    $103 = $1;
    $104 = (($103) + 12|0);
    HEAP32[$104>>2] = $102;
    $105 = $yythunkpos1449;
    $106 = $1;
    $107 = (($106) + 44|0);
    HEAP32[$107>>2] = $105;
    $108 = $1;
    $109 = (_yy_InlineNoEmph($108)|0);
    $110 = ($109|0)!=(0);
    if (!($110)) {
     label = 23;
     break;
    }
    $111 = $1;
    _yyDo($111,8,-1,0,41336);
    $112 = $1;
    $113 = $1;
    $114 = (($113) + 28|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = $1;
    $117 = (($116) + 32|0);
    $118 = HEAP32[$117>>2]|0;
    _yyDo($112,216,$115,$118,45272);
   }
   if ((label|0) == 19) {
    $96 = $yypos1450;
    $97 = $1;
    $98 = (($97) + 12|0);
    HEAP32[$98>>2] = $96;
    $99 = $yythunkpos1450;
    $100 = $1;
    $101 = (($100) + 44|0);
    HEAP32[$101>>2] = $99;
   }
   else if ((label|0) == 23) {
   }
   $119 = $yypos1446;
   $120 = $1;
   $121 = (($120) + 12|0);
   HEAP32[$121>>2] = $119;
   $122 = $yythunkpos1446;
   $123 = $1;
   $124 = (($123) + 44|0);
   HEAP32[$124>>2] = $122;
   $125 = $1;
   $126 = $1;
   $127 = (($126) + 28|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = $1;
   $130 = (($129) + 32|0);
   $131 = HEAP32[$130>>2]|0;
   (_yyText($125,$128,$131)|0);
   $132 = $1;
   $133 = (($132) + 12|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = $1;
   $136 = (($135) + 28|0);
   HEAP32[$136>>2] = $134;
   $137 = $1;
   $138 = (_yymatchChar($137,95)|0);
   $139 = ($138|0)!=(0);
   if (!($139)) {
    break;
   }
   $140 = $1;
   $141 = $1;
   $142 = (($141) + 28|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = $1;
   $145 = (($144) + 32|0);
   $146 = HEAP32[$145>>2]|0;
   (_yyText($140,$143,$146)|0);
   $147 = $1;
   $148 = (($147) + 12|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = $1;
   $151 = (($150) + 32|0);
   HEAP32[$151>>2] = $149;
   $152 = $1;
   $153 = $1;
   $154 = (($153) + 28|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = $1;
   $157 = (($156) + 32|0);
   $158 = HEAP32[$157>>2]|0;
   _yyDo($152,217,$155,$158,45296);
   $159 = $1;
   _yyDo($159,12,2,0,41392);
   $0 = 1;
   $166 = $0;
   STACKTOP = sp;return ($166|0);
  } else {
  }
 } while(0);
 $160 = $yypos0;
 $161 = $1;
 $162 = (($161) + 12|0);
 HEAP32[$162>>2] = $160;
 $163 = $yythunkpos0;
 $164 = $1;
 $165 = (($164) + 44|0);
 HEAP32[$165>>2] = $163;
 $0 = 0;
 $166 = $0;
 STACKTOP = sp;return ($166|0);
}
function _yy_StrongStar($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos1482 = 0, $yypos1484 = 0;
 var $yypos1485 = 0, $yypos1486 = 0, $yythunkpos0 = 0, $yythunkpos1482 = 0, $yythunkpos1484 = 0, $yythunkpos1485 = 0, $yythunkpos1486 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,2,0,41328);
 $9 = $1;
 $10 = (_yymatchString($9,45232)|0);
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $1;
   $13 = (($12) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $yypos1482 = $14;
   $15 = $1;
   $16 = (($15) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   $yythunkpos1482 = $17;
   $18 = $1;
   $19 = (_yy_Whitespace($18)|0);
   $20 = ($19|0)!=(0);
   if ($20) {
    break;
   }
   $21 = $yypos1482;
   $22 = $1;
   $23 = (($22) + 12|0);
   HEAP32[$23>>2] = $21;
   $24 = $yythunkpos1482;
   $25 = $1;
   $26 = (($25) + 44|0);
   HEAP32[$26>>2] = $24;
   $27 = $1;
   $28 = (_yy_StartList($27)|0);
   $29 = ($28|0)!=(0);
   if (!($29)) {
    break;
   }
   $30 = $1;
   _yyDo($30,8,-2,0,41336);
   $31 = $1;
   $32 = (($31) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $yypos1485 = $33;
   $34 = $1;
   $35 = (($34) + 44|0);
   $36 = HEAP32[$35>>2]|0;
   $yythunkpos1485 = $36;
   $37 = $1;
   $38 = (_yymatchString($37,45232)|0);
   $39 = ($38|0)!=(0);
   if ($39) {
    break;
   }
   $40 = $yypos1485;
   $41 = $1;
   $42 = (($41) + 12|0);
   HEAP32[$42>>2] = $40;
   $43 = $yythunkpos1485;
   $44 = $1;
   $45 = (($44) + 44|0);
   HEAP32[$45>>2] = $43;
   $46 = $1;
   $47 = (_yy_Inline($46)|0);
   $48 = ($47|0)!=(0);
   if (!($48)) {
    break;
   }
   $49 = $1;
   _yyDo($49,8,-1,0,41336);
   $50 = $1;
   $51 = $1;
   $52 = (($51) + 28|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $1;
   $55 = (($54) + 32|0);
   $56 = HEAP32[$55>>2]|0;
   _yyDo($50,218,$53,$56,45240);
   while(1) {
    $57 = $1;
    $58 = (($57) + 12|0);
    $59 = HEAP32[$58>>2]|0;
    $yypos1484 = $59;
    $60 = $1;
    $61 = (($60) + 44|0);
    $62 = HEAP32[$61>>2]|0;
    $yythunkpos1484 = $62;
    $63 = $1;
    $64 = (($63) + 12|0);
    $65 = HEAP32[$64>>2]|0;
    $yypos1486 = $65;
    $66 = $1;
    $67 = (($66) + 44|0);
    $68 = HEAP32[$67>>2]|0;
    $yythunkpos1486 = $68;
    $69 = $1;
    $70 = (_yymatchString($69,45232)|0);
    $71 = ($70|0)!=(0);
    if ($71) {
     label = 16;
     break;
    }
    $72 = $yypos1486;
    $73 = $1;
    $74 = (($73) + 12|0);
    HEAP32[$74>>2] = $72;
    $75 = $yythunkpos1486;
    $76 = $1;
    $77 = (($76) + 44|0);
    HEAP32[$77>>2] = $75;
    $78 = $1;
    $79 = (_yy_Inline($78)|0);
    $80 = ($79|0)!=(0);
    if (!($80)) {
     label = 18;
     break;
    }
    $81 = $1;
    _yyDo($81,8,-1,0,41336);
    $82 = $1;
    $83 = $1;
    $84 = (($83) + 28|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = $1;
    $87 = (($86) + 32|0);
    $88 = HEAP32[$87>>2]|0;
    _yyDo($82,218,$85,$88,45240);
   }
   if ((label|0) == 16) {
   }
   else if ((label|0) == 18) {
   }
   $89 = $yypos1484;
   $90 = $1;
   $91 = (($90) + 12|0);
   HEAP32[$91>>2] = $89;
   $92 = $yythunkpos1484;
   $93 = $1;
   $94 = (($93) + 44|0);
   HEAP32[$94>>2] = $92;
   $95 = $1;
   $96 = $1;
   $97 = (($96) + 28|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = $1;
   $100 = (($99) + 32|0);
   $101 = HEAP32[$100>>2]|0;
   (_yyText($95,$98,$101)|0);
   $102 = $1;
   $103 = (($102) + 12|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = $1;
   $106 = (($105) + 28|0);
   HEAP32[$106>>2] = $104;
   $107 = $1;
   $108 = (_yymatchString($107,45232)|0);
   $109 = ($108|0)!=(0);
   if (!($109)) {
    break;
   }
   $110 = $1;
   $111 = $1;
   $112 = (($111) + 28|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = $1;
   $115 = (($114) + 32|0);
   $116 = HEAP32[$115>>2]|0;
   (_yyText($110,$113,$116)|0);
   $117 = $1;
   $118 = (($117) + 12|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $1;
   $121 = (($120) + 32|0);
   HEAP32[$121>>2] = $119;
   $122 = $1;
   $123 = $1;
   $124 = (($123) + 28|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = $1;
   $127 = (($126) + 32|0);
   $128 = HEAP32[$127>>2]|0;
   _yyDo($122,219,$125,$128,45256);
   $129 = $1;
   _yyDo($129,12,2,0,41392);
   $0 = 1;
   $136 = $0;
   STACKTOP = sp;return ($136|0);
  } else {
  }
 } while(0);
 $130 = $yypos0;
 $131 = $1;
 $132 = (($131) + 12|0);
 HEAP32[$132>>2] = $130;
 $133 = $yythunkpos0;
 $134 = $1;
 $135 = (($134) + 44|0);
 HEAP32[$135>>2] = $133;
 $0 = 0;
 $136 = $0;
 STACKTOP = sp;return ($136|0);
}
function _yy_StrongUl($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos1476 = 0, $yypos1478 = 0;
 var $yypos1479 = 0, $yypos1480 = 0, $yythunkpos0 = 0, $yythunkpos1476 = 0, $yythunkpos1478 = 0, $yythunkpos1479 = 0, $yythunkpos1480 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,2,0,41328);
 $9 = $1;
 $10 = (_yymatchString($9,45144)|0);
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $1;
   $13 = (($12) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $yypos1476 = $14;
   $15 = $1;
   $16 = (($15) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   $yythunkpos1476 = $17;
   $18 = $1;
   $19 = (_yy_Whitespace($18)|0);
   $20 = ($19|0)!=(0);
   if ($20) {
    break;
   }
   $21 = $yypos1476;
   $22 = $1;
   $23 = (($22) + 12|0);
   HEAP32[$23>>2] = $21;
   $24 = $yythunkpos1476;
   $25 = $1;
   $26 = (($25) + 44|0);
   HEAP32[$26>>2] = $24;
   $27 = $1;
   $28 = (_yy_StartList($27)|0);
   $29 = ($28|0)!=(0);
   if (!($29)) {
    break;
   }
   $30 = $1;
   _yyDo($30,8,-2,0,41336);
   $31 = $1;
   $32 = (($31) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $yypos1479 = $33;
   $34 = $1;
   $35 = (($34) + 44|0);
   $36 = HEAP32[$35>>2]|0;
   $yythunkpos1479 = $36;
   $37 = $1;
   $38 = (_yymatchString($37,45144)|0);
   $39 = ($38|0)!=(0);
   if ($39) {
    break;
   }
   $40 = $yypos1479;
   $41 = $1;
   $42 = (($41) + 12|0);
   HEAP32[$42>>2] = $40;
   $43 = $yythunkpos1479;
   $44 = $1;
   $45 = (($44) + 44|0);
   HEAP32[$45>>2] = $43;
   $46 = $1;
   $47 = (_yy_Inline($46)|0);
   $48 = ($47|0)!=(0);
   if (!($48)) {
    break;
   }
   $49 = $1;
   _yyDo($49,8,-1,0,41336);
   $50 = $1;
   $51 = $1;
   $52 = (($51) + 28|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $1;
   $55 = (($54) + 32|0);
   $56 = HEAP32[$55>>2]|0;
   _yyDo($50,220,$53,$56,45152);
   while(1) {
    $57 = $1;
    $58 = (($57) + 12|0);
    $59 = HEAP32[$58>>2]|0;
    $yypos1478 = $59;
    $60 = $1;
    $61 = (($60) + 44|0);
    $62 = HEAP32[$61>>2]|0;
    $yythunkpos1478 = $62;
    $63 = $1;
    $64 = (($63) + 12|0);
    $65 = HEAP32[$64>>2]|0;
    $yypos1480 = $65;
    $66 = $1;
    $67 = (($66) + 44|0);
    $68 = HEAP32[$67>>2]|0;
    $yythunkpos1480 = $68;
    $69 = $1;
    $70 = (_yymatchString($69,45144)|0);
    $71 = ($70|0)!=(0);
    if ($71) {
     label = 16;
     break;
    }
    $72 = $yypos1480;
    $73 = $1;
    $74 = (($73) + 12|0);
    HEAP32[$74>>2] = $72;
    $75 = $yythunkpos1480;
    $76 = $1;
    $77 = (($76) + 44|0);
    HEAP32[$77>>2] = $75;
    $78 = $1;
    $79 = (_yy_Inline($78)|0);
    $80 = ($79|0)!=(0);
    if (!($80)) {
     label = 18;
     break;
    }
    $81 = $1;
    _yyDo($81,8,-1,0,41336);
    $82 = $1;
    $83 = $1;
    $84 = (($83) + 28|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = $1;
    $87 = (($86) + 32|0);
    $88 = HEAP32[$87>>2]|0;
    _yyDo($82,220,$85,$88,45152);
   }
   if ((label|0) == 16) {
   }
   else if ((label|0) == 18) {
   }
   $89 = $yypos1478;
   $90 = $1;
   $91 = (($90) + 12|0);
   HEAP32[$91>>2] = $89;
   $92 = $yythunkpos1478;
   $93 = $1;
   $94 = (($93) + 44|0);
   HEAP32[$94>>2] = $92;
   $95 = $1;
   $96 = $1;
   $97 = (($96) + 28|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = $1;
   $100 = (($99) + 32|0);
   $101 = HEAP32[$100>>2]|0;
   (_yyText($95,$98,$101)|0);
   $102 = $1;
   $103 = (($102) + 12|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = $1;
   $106 = (($105) + 28|0);
   HEAP32[$106>>2] = $104;
   $107 = $1;
   $108 = (_yymatchString($107,45144)|0);
   $109 = ($108|0)!=(0);
   if (!($109)) {
    break;
   }
   $110 = $1;
   $111 = $1;
   $112 = (($111) + 28|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = $1;
   $115 = (($114) + 32|0);
   $116 = HEAP32[$115>>2]|0;
   (_yyText($110,$113,$116)|0);
   $117 = $1;
   $118 = (($117) + 12|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $1;
   $121 = (($120) + 32|0);
   HEAP32[$121>>2] = $119;
   $122 = $1;
   $123 = $1;
   $124 = (($123) + 28|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = $1;
   $127 = (($126) + 32|0);
   $128 = HEAP32[$127>>2]|0;
   _yyDo($122,221,$125,$128,45168);
   $129 = $1;
   _yyDo($129,12,2,0,41392);
   $0 = 1;
   $136 = $0;
   STACKTOP = sp;return ($136|0);
  } else {
  }
 } while(0);
 $130 = $yypos0;
 $131 = $1;
 $132 = (($131) + 12|0);
 HEAP32[$132>>2] = $130;
 $133 = $yythunkpos0;
 $134 = $1;
 $135 = (($134) + 44|0);
 HEAP32[$135>>2] = $133;
 $0 = 0;
 $136 = $0;
 STACKTOP = sp;return ($136|0);
}
function _yy_EmphStar($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos1501 = 0, $yypos1503 = 0, $yypos1504 = 0, $yypos1506 = 0, $yypos1507 = 0, $yypos1509 = 0, $yythunkpos0 = 0, $yythunkpos1501 = 0, $yythunkpos1503 = 0, $yythunkpos1504 = 0, $yythunkpos1506 = 0, $yythunkpos1507 = 0, $yythunkpos1509 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,2,0,41328);
 $9 = $1;
 $10 = (_yymatchChar($9,42)|0);
 $11 = ($10|0)!=(0);
 L1: do {
  if ($11) {
   $12 = $1;
   $13 = (($12) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $yypos1501 = $14;
   $15 = $1;
   $16 = (($15) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   $yythunkpos1501 = $17;
   $18 = $1;
   $19 = (_yy_Whitespace($18)|0);
   $20 = ($19|0)!=(0);
   if ($20) {
    break;
   }
   $21 = $yypos1501;
   $22 = $1;
   $23 = (($22) + 12|0);
   HEAP32[$23>>2] = $21;
   $24 = $yythunkpos1501;
   $25 = $1;
   $26 = (($25) + 44|0);
   HEAP32[$26>>2] = $24;
   $27 = $1;
   $28 = (_yy_StartList($27)|0);
   $29 = ($28|0)!=(0);
   if (!($29)) {
    break;
   }
   $30 = $1;
   _yyDo($30,8,-2,0,41336);
   $31 = $1;
   $32 = (($31) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $yypos1504 = $33;
   $34 = $1;
   $35 = (($34) + 44|0);
   $36 = HEAP32[$35>>2]|0;
   $yythunkpos1504 = $36;
   $37 = $1;
   $38 = (($37) + 12|0);
   $39 = HEAP32[$38>>2]|0;
   $yypos1506 = $39;
   $40 = $1;
   $41 = (($40) + 44|0);
   $42 = HEAP32[$41>>2]|0;
   $yythunkpos1506 = $42;
   $43 = $1;
   $44 = (_yymatchChar($43,42)|0);
   $45 = ($44|0)!=(0);
   do {
    if ($45) {
     label = 14;
    } else {
     $46 = $yypos1506;
     $47 = $1;
     $48 = (($47) + 12|0);
     HEAP32[$48>>2] = $46;
     $49 = $yythunkpos1506;
     $50 = $1;
     $51 = (($50) + 44|0);
     HEAP32[$51>>2] = $49;
     $52 = $1;
     $53 = (_yy_Inline($52)|0);
     $54 = ($53|0)!=(0);
     if ($54) {
      $55 = $1;
      _yyDo($55,8,-1,0,41336);
      $56 = $1;
      $57 = $1;
      $58 = (($57) + 28|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = $1;
      $61 = (($60) + 32|0);
      $62 = HEAP32[$61>>2]|0;
      _yyDo($56,222,$59,$62,45184);
      break;
     } else {
      label = 14;
      break;
     }
    }
   } while(0);
   do {
    if ((label|0) == 14) {
     $63 = $yypos1504;
     $64 = $1;
     $65 = (($64) + 12|0);
     HEAP32[$65>>2] = $63;
     $66 = $yythunkpos1504;
     $67 = $1;
     $68 = (($67) + 44|0);
     HEAP32[$68>>2] = $66;
     $69 = $1;
     $70 = (_yy_StrongStar($69)|0);
     $71 = ($70|0)!=(0);
     if ($71) {
      $72 = $1;
      _yyDo($72,8,-1,0,41336);
      $73 = $1;
      $74 = $1;
      $75 = (($74) + 28|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = $1;
      $78 = (($77) + 32|0);
      $79 = HEAP32[$78>>2]|0;
      _yyDo($73,223,$76,$79,45200);
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   while(1) {
    $80 = $1;
    $81 = (($80) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $yypos1503 = $82;
    $83 = $1;
    $84 = (($83) + 44|0);
    $85 = HEAP32[$84>>2]|0;
    $yythunkpos1503 = $85;
    $86 = $1;
    $87 = (($86) + 12|0);
    $88 = HEAP32[$87>>2]|0;
    $yypos1507 = $88;
    $89 = $1;
    $90 = (($89) + 44|0);
    $91 = HEAP32[$90>>2]|0;
    $yythunkpos1507 = $91;
    $92 = $1;
    $93 = (($92) + 12|0);
    $94 = HEAP32[$93>>2]|0;
    $yypos1509 = $94;
    $95 = $1;
    $96 = (($95) + 44|0);
    $97 = HEAP32[$96>>2]|0;
    $yythunkpos1509 = $97;
    $98 = $1;
    $99 = (_yymatchChar($98,42)|0);
    $100 = ($99|0)!=(0);
    do {
     if ($100) {
      label = 24;
     } else {
      $101 = $yypos1509;
      $102 = $1;
      $103 = (($102) + 12|0);
      HEAP32[$103>>2] = $101;
      $104 = $yythunkpos1509;
      $105 = $1;
      $106 = (($105) + 44|0);
      HEAP32[$106>>2] = $104;
      $107 = $1;
      $108 = (_yy_Inline($107)|0);
      $109 = ($108|0)!=(0);
      if ($109) {
       $110 = $1;
       _yyDo($110,8,-1,0,41336);
       $111 = $1;
       $112 = $1;
       $113 = (($112) + 28|0);
       $114 = HEAP32[$113>>2]|0;
       $115 = $1;
       $116 = (($115) + 32|0);
       $117 = HEAP32[$116>>2]|0;
       _yyDo($111,222,$114,$117,45184);
       break;
      } else {
       label = 24;
       break;
      }
     }
    } while(0);
    if ((label|0) == 24) {
     label = 0;
     $118 = $yypos1507;
     $119 = $1;
     $120 = (($119) + 12|0);
     HEAP32[$120>>2] = $118;
     $121 = $yythunkpos1507;
     $122 = $1;
     $123 = (($122) + 44|0);
     HEAP32[$123>>2] = $121;
     $124 = $1;
     $125 = (_yy_StrongStar($124)|0);
     $126 = ($125|0)!=(0);
     if (!($126)) {
      break;
     }
     $127 = $1;
     _yyDo($127,8,-1,0,41336);
     $128 = $1;
     $129 = $1;
     $130 = (($129) + 28|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = $1;
     $133 = (($132) + 32|0);
     $134 = HEAP32[$133>>2]|0;
     _yyDo($128,223,$131,$134,45200);
    }
   }
   $135 = $yypos1503;
   $136 = $1;
   $137 = (($136) + 12|0);
   HEAP32[$137>>2] = $135;
   $138 = $yythunkpos1503;
   $139 = $1;
   $140 = (($139) + 44|0);
   HEAP32[$140>>2] = $138;
   $141 = $1;
   $142 = $1;
   $143 = (($142) + 28|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = $1;
   $146 = (($145) + 32|0);
   $147 = HEAP32[$146>>2]|0;
   (_yyText($141,$144,$147)|0);
   $148 = $1;
   $149 = (($148) + 12|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = $1;
   $152 = (($151) + 28|0);
   HEAP32[$152>>2] = $150;
   $153 = $1;
   $154 = (_yymatchChar($153,42)|0);
   $155 = ($154|0)!=(0);
   if (!($155)) {
    break;
   }
   $156 = $1;
   $157 = $1;
   $158 = (($157) + 28|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = $1;
   $161 = (($160) + 32|0);
   $162 = HEAP32[$161>>2]|0;
   (_yyText($156,$159,$162)|0);
   $163 = $1;
   $164 = (($163) + 12|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = $1;
   $167 = (($166) + 32|0);
   HEAP32[$167>>2] = $165;
   $168 = $1;
   $169 = $1;
   $170 = (($169) + 28|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = $1;
   $173 = (($172) + 32|0);
   $174 = HEAP32[$173>>2]|0;
   _yyDo($168,224,$171,$174,45216);
   $175 = $1;
   _yyDo($175,12,2,0,41392);
   $0 = 1;
   $182 = $0;
   STACKTOP = sp;return ($182|0);
  } else {
  }
 } while(0);
 $176 = $yypos0;
 $177 = $1;
 $178 = (($177) + 12|0);
 HEAP32[$178>>2] = $176;
 $179 = $yythunkpos0;
 $180 = $1;
 $181 = (($180) + 44|0);
 HEAP32[$181>>2] = $179;
 $0 = 0;
 $182 = $0;
 STACKTOP = sp;return ($182|0);
}
function _yy_EmphUl($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos1491 = 0, $yypos1493 = 0, $yypos1494 = 0, $yypos1496 = 0, $yypos1497 = 0, $yypos1499 = 0, $yythunkpos0 = 0, $yythunkpos1491 = 0, $yythunkpos1493 = 0, $yythunkpos1494 = 0, $yythunkpos1496 = 0, $yythunkpos1497 = 0, $yythunkpos1499 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,2,0,41328);
 $9 = $1;
 $10 = (_yymatchChar($9,95)|0);
 $11 = ($10|0)!=(0);
 L1: do {
  if ($11) {
   $12 = $1;
   $13 = (($12) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $yypos1491 = $14;
   $15 = $1;
   $16 = (($15) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   $yythunkpos1491 = $17;
   $18 = $1;
   $19 = (_yy_Whitespace($18)|0);
   $20 = ($19|0)!=(0);
   if ($20) {
    break;
   }
   $21 = $yypos1491;
   $22 = $1;
   $23 = (($22) + 12|0);
   HEAP32[$23>>2] = $21;
   $24 = $yythunkpos1491;
   $25 = $1;
   $26 = (($25) + 44|0);
   HEAP32[$26>>2] = $24;
   $27 = $1;
   $28 = (_yy_StartList($27)|0);
   $29 = ($28|0)!=(0);
   if (!($29)) {
    break;
   }
   $30 = $1;
   _yyDo($30,8,-2,0,41336);
   $31 = $1;
   $32 = (($31) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $yypos1494 = $33;
   $34 = $1;
   $35 = (($34) + 44|0);
   $36 = HEAP32[$35>>2]|0;
   $yythunkpos1494 = $36;
   $37 = $1;
   $38 = (($37) + 12|0);
   $39 = HEAP32[$38>>2]|0;
   $yypos1496 = $39;
   $40 = $1;
   $41 = (($40) + 44|0);
   $42 = HEAP32[$41>>2]|0;
   $yythunkpos1496 = $42;
   $43 = $1;
   $44 = (_yymatchChar($43,95)|0);
   $45 = ($44|0)!=(0);
   do {
    if ($45) {
     label = 14;
    } else {
     $46 = $yypos1496;
     $47 = $1;
     $48 = (($47) + 12|0);
     HEAP32[$48>>2] = $46;
     $49 = $yythunkpos1496;
     $50 = $1;
     $51 = (($50) + 44|0);
     HEAP32[$51>>2] = $49;
     $52 = $1;
     $53 = (_yy_Inline($52)|0);
     $54 = ($53|0)!=(0);
     if ($54) {
      $55 = $1;
      _yyDo($55,8,-1,0,41336);
      $56 = $1;
      $57 = $1;
      $58 = (($57) + 28|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = $1;
      $61 = (($60) + 32|0);
      $62 = HEAP32[$61>>2]|0;
      _yyDo($56,225,$59,$62,45096);
      break;
     } else {
      label = 14;
      break;
     }
    }
   } while(0);
   do {
    if ((label|0) == 14) {
     $63 = $yypos1494;
     $64 = $1;
     $65 = (($64) + 12|0);
     HEAP32[$65>>2] = $63;
     $66 = $yythunkpos1494;
     $67 = $1;
     $68 = (($67) + 44|0);
     HEAP32[$68>>2] = $66;
     $69 = $1;
     $70 = (_yy_StrongUl($69)|0);
     $71 = ($70|0)!=(0);
     if ($71) {
      $72 = $1;
      _yyDo($72,8,-1,0,41336);
      $73 = $1;
      $74 = $1;
      $75 = (($74) + 28|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = $1;
      $78 = (($77) + 32|0);
      $79 = HEAP32[$78>>2]|0;
      _yyDo($73,226,$76,$79,45112);
      break;
     } else {
      break L1;
     }
    }
   } while(0);
   while(1) {
    $80 = $1;
    $81 = (($80) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $yypos1493 = $82;
    $83 = $1;
    $84 = (($83) + 44|0);
    $85 = HEAP32[$84>>2]|0;
    $yythunkpos1493 = $85;
    $86 = $1;
    $87 = (($86) + 12|0);
    $88 = HEAP32[$87>>2]|0;
    $yypos1497 = $88;
    $89 = $1;
    $90 = (($89) + 44|0);
    $91 = HEAP32[$90>>2]|0;
    $yythunkpos1497 = $91;
    $92 = $1;
    $93 = (($92) + 12|0);
    $94 = HEAP32[$93>>2]|0;
    $yypos1499 = $94;
    $95 = $1;
    $96 = (($95) + 44|0);
    $97 = HEAP32[$96>>2]|0;
    $yythunkpos1499 = $97;
    $98 = $1;
    $99 = (_yymatchChar($98,95)|0);
    $100 = ($99|0)!=(0);
    do {
     if ($100) {
      label = 24;
     } else {
      $101 = $yypos1499;
      $102 = $1;
      $103 = (($102) + 12|0);
      HEAP32[$103>>2] = $101;
      $104 = $yythunkpos1499;
      $105 = $1;
      $106 = (($105) + 44|0);
      HEAP32[$106>>2] = $104;
      $107 = $1;
      $108 = (_yy_Inline($107)|0);
      $109 = ($108|0)!=(0);
      if ($109) {
       $110 = $1;
       _yyDo($110,8,-1,0,41336);
       $111 = $1;
       $112 = $1;
       $113 = (($112) + 28|0);
       $114 = HEAP32[$113>>2]|0;
       $115 = $1;
       $116 = (($115) + 32|0);
       $117 = HEAP32[$116>>2]|0;
       _yyDo($111,225,$114,$117,45096);
       break;
      } else {
       label = 24;
       break;
      }
     }
    } while(0);
    if ((label|0) == 24) {
     label = 0;
     $118 = $yypos1497;
     $119 = $1;
     $120 = (($119) + 12|0);
     HEAP32[$120>>2] = $118;
     $121 = $yythunkpos1497;
     $122 = $1;
     $123 = (($122) + 44|0);
     HEAP32[$123>>2] = $121;
     $124 = $1;
     $125 = (_yy_StrongUl($124)|0);
     $126 = ($125|0)!=(0);
     if (!($126)) {
      break;
     }
     $127 = $1;
     _yyDo($127,8,-1,0,41336);
     $128 = $1;
     $129 = $1;
     $130 = (($129) + 28|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = $1;
     $133 = (($132) + 32|0);
     $134 = HEAP32[$133>>2]|0;
     _yyDo($128,226,$131,$134,45112);
    }
   }
   $135 = $yypos1493;
   $136 = $1;
   $137 = (($136) + 12|0);
   HEAP32[$137>>2] = $135;
   $138 = $yythunkpos1493;
   $139 = $1;
   $140 = (($139) + 44|0);
   HEAP32[$140>>2] = $138;
   $141 = $1;
   $142 = $1;
   $143 = (($142) + 28|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = $1;
   $146 = (($145) + 32|0);
   $147 = HEAP32[$146>>2]|0;
   (_yyText($141,$144,$147)|0);
   $148 = $1;
   $149 = (($148) + 12|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = $1;
   $152 = (($151) + 28|0);
   HEAP32[$152>>2] = $150;
   $153 = $1;
   $154 = (_yymatchChar($153,95)|0);
   $155 = ($154|0)!=(0);
   if (!($155)) {
    break;
   }
   $156 = $1;
   $157 = $1;
   $158 = (($157) + 28|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = $1;
   $161 = (($160) + 32|0);
   $162 = HEAP32[$161>>2]|0;
   (_yyText($156,$159,$162)|0);
   $163 = $1;
   $164 = (($163) + 12|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = $1;
   $167 = (($166) + 32|0);
   HEAP32[$167>>2] = $165;
   $168 = $1;
   $169 = $1;
   $170 = (($169) + 28|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = $1;
   $173 = (($172) + 32|0);
   $174 = HEAP32[$173>>2]|0;
   _yyDo($168,227,$171,$174,45128);
   $175 = $1;
   _yyDo($175,12,2,0,41392);
   $0 = 1;
   $182 = $0;
   STACKTOP = sp;return ($182|0);
  } else {
  }
 } while(0);
 $176 = $yypos0;
 $177 = $1;
 $178 = (($177) + 12|0);
 HEAP32[$178>>2] = $176;
 $179 = $yythunkpos0;
 $180 = $1;
 $181 = (($180) + 44|0);
 HEAP32[$181>>2] = $179;
 $0 = 0;
 $182 = $0;
 STACKTOP = sp;return ($182|0);
}
function _yy_CitationReferenceDouble($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $yypos0 = 0, $yypos1393 = 0, $yypos1394 = 0, $yythunkpos0 = 0, $yythunkpos1393 = 0, $yythunkpos1394 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,2,0,41328);
 $9 = $1;
 $10 = (($9) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $yypos1393 = $11;
 $12 = $1;
 $13 = (($12) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $yythunkpos1393 = $14;
 $15 = $1;
 $16 = (_yymatchString($15,44776)|0);
 $17 = ($16|0)!=(0);
 do {
  if ($17) {
  } else {
   $18 = $yypos1393;
   $19 = $1;
   $20 = (($19) + 12|0);
   HEAP32[$20>>2] = $18;
   $21 = $yythunkpos1393;
   $22 = $1;
   $23 = (($22) + 44|0);
   HEAP32[$23>>2] = $21;
   $24 = $1;
   $25 = (_yy_Label($24)|0);
   $26 = ($25|0)!=(0);
   if (!($26)) {
    break;
   }
   $27 = $1;
   _yyDo($27,8,-2,0,41336);
   $28 = $1;
   $29 = $1;
   $30 = (($29) + 28|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $1;
   $33 = (($32) + 32|0);
   $34 = HEAP32[$33>>2]|0;
   (_yyText($28,$31,$34)|0);
   $35 = $1;
   $36 = (($35) + 12|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $1;
   $39 = (($38) + 28|0);
   HEAP32[$39>>2] = $37;
   $40 = $1;
   $41 = (_yy_Spnl($40)|0);
   $42 = ($41|0)!=(0);
   if (!($42)) {
    break;
   }
   $43 = $1;
   $44 = $1;
   $45 = (($44) + 28|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $1;
   $48 = (($47) + 32|0);
   $49 = HEAP32[$48>>2]|0;
   (_yyText($43,$46,$49)|0);
   $50 = $1;
   $51 = (($50) + 12|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $1;
   $54 = (($53) + 32|0);
   HEAP32[$54>>2] = $52;
   $55 = $1;
   $56 = (($55) + 12|0);
   $57 = HEAP32[$56>>2]|0;
   $yypos1394 = $57;
   $58 = $1;
   $59 = (($58) + 44|0);
   $60 = HEAP32[$59>>2]|0;
   $yythunkpos1394 = $60;
   $61 = $1;
   $62 = (_yymatchString($61,44776)|0);
   $63 = ($62|0)!=(0);
   if ($63) {
    break;
   }
   $64 = $yypos1394;
   $65 = $1;
   $66 = (($65) + 12|0);
   HEAP32[$66>>2] = $64;
   $67 = $yythunkpos1394;
   $68 = $1;
   $69 = (($68) + 44|0);
   HEAP32[$69>>2] = $67;
   $70 = $1;
   $71 = (_yy_RawCitationReference($70)|0);
   $72 = ($71|0)!=(0);
   if (!($72)) {
    break;
   }
   $73 = $1;
   _yyDo($73,8,-1,0,41336);
   $74 = $1;
   $75 = $1;
   $76 = (($75) + 28|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $1;
   $79 = (($78) + 32|0);
   $80 = HEAP32[$79>>2]|0;
   _yyDo($74,228,$77,$80,45048);
   $81 = $1;
   _yyDo($81,12,2,0,41392);
   $0 = 1;
   $88 = $0;
   STACKTOP = sp;return ($88|0);
  }
 } while(0);
 $82 = $yypos0;
 $83 = $1;
 $84 = (($83) + 12|0);
 HEAP32[$84>>2] = $82;
 $85 = $yythunkpos0;
 $86 = $1;
 $87 = (($86) + 44|0);
 HEAP32[$87>>2] = $85;
 $0 = 0;
 $88 = $0;
 STACKTOP = sp;return ($88|0);
}
function _yy_CitationReferenceSingle($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $yypos0 = 0, $yypos1388 = 0, $yypos1390 = 0, $yythunkpos0 = 0, $yythunkpos1388 = 0, $yythunkpos1390 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 $9 = $1;
 $10 = $1;
 $11 = (($10) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $1;
 $14 = (($13) + 32|0);
 $15 = HEAP32[$14>>2]|0;
 (_yyText($9,$12,$15)|0);
 $16 = $1;
 $17 = (($16) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $1;
 $20 = (($19) + 28|0);
 HEAP32[$20>>2] = $18;
 $21 = $1;
 $22 = (($21) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $yypos1388 = $23;
 $24 = $1;
 $25 = (($24) + 44|0);
 $26 = HEAP32[$25>>2]|0;
 $yythunkpos1388 = $26;
 $27 = $1;
 $28 = (_yymatchString($27,44776)|0);
 $29 = ($28|0)!=(0);
 do {
  if ($29) {
   $30 = $1;
   $31 = (_yy_Spnl($30)|0);
   $32 = ($31|0)!=(0);
   if (!($32)) {
    label = 9;
    break;
   }
   $33 = $1;
   $34 = (_yy_RawCitationReference($33)|0);
   $35 = ($34|0)!=(0);
   if ($35) {
    $36 = $1;
    _yyDo($36,8,-1,0,41336);
    break;
   } else {
    label = 9;
    break;
   }
  } else {
   label = 9;
  }
 } while(0);
 if ((label|0) == 9) {
  $37 = $yypos1388;
  $38 = $1;
  $39 = (($38) + 12|0);
  HEAP32[$39>>2] = $37;
  $40 = $yythunkpos1388;
  $41 = $1;
  $42 = (($41) + 44|0);
  HEAP32[$42>>2] = $40;
  $43 = $1;
  $44 = (_yy_RawCitationReference($43)|0);
  $45 = ($44|0)!=(0);
  if (!($45)) {
   $85 = $yypos0;
   $86 = $1;
   $87 = (($86) + 12|0);
   HEAP32[$87>>2] = $85;
   $88 = $yythunkpos0;
   $89 = $1;
   $90 = (($89) + 44|0);
   HEAP32[$90>>2] = $88;
   $0 = 0;
   $91 = $0;
   STACKTOP = sp;return ($91|0);
  }
  $46 = $1;
  _yyDo($46,8,-1,0,41336);
  $47 = $1;
  $48 = (($47) + 12|0);
  $49 = HEAP32[$48>>2]|0;
  $yypos1390 = $49;
  $50 = $1;
  $51 = (($50) + 44|0);
  $52 = HEAP32[$51>>2]|0;
  $yythunkpos1390 = $52;
  $53 = $1;
  $54 = (_yy_Spnl($53)|0);
  $55 = ($54|0)!=(0);
  do {
   if ($55) {
    $56 = $1;
    $57 = (_yymatchString($56,44776)|0);
    $58 = ($57|0)!=(0);
    if ($58) {
     break;
    } else {
     label = 16;
     break;
    }
   } else {
    label = 16;
   }
  } while(0);
  if ((label|0) == 16) {
   $59 = $yypos1390;
   $60 = $1;
   $61 = (($60) + 12|0);
   HEAP32[$61>>2] = $59;
   $62 = $yythunkpos1390;
   $63 = $1;
   $64 = (($63) + 44|0);
   HEAP32[$64>>2] = $62;
  }
 }
 $65 = $1;
 $66 = $1;
 $67 = (($66) + 28|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = $1;
 $70 = (($69) + 32|0);
 $71 = HEAP32[$70>>2]|0;
 (_yyText($65,$68,$71)|0);
 $72 = $1;
 $73 = (($72) + 12|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = $1;
 $76 = (($75) + 32|0);
 HEAP32[$76>>2] = $74;
 $77 = $1;
 $78 = $1;
 $79 = (($78) + 28|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = $1;
 $82 = (($81) + 32|0);
 $83 = HEAP32[$82>>2]|0;
 _yyDo($77,229,$80,$83,44976);
 $84 = $1;
 _yyDo($84,12,1,0,41392);
 $0 = 1;
 $91 = $0;
 STACKTOP = sp;return ($91|0);
}
function _yy_1_Variable($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 $14 = $0;
 $15 = (($14) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP16[$16>>1] = 81;
 STACKTOP = sp;return;
}
function _yy_RawInline($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1260 = 0, $yypos1263 = 0, $yypos1264 = 0, $yythunkpos0 = 0, $yythunkpos1260 = 0, $yythunkpos1263 = 0, $yythunkpos1264 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos1260 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos1260 = $13;
 $14 = $1;
 $15 = (_yymatchChar($14,91)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
   while(1) {
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $yypos1263 = $19;
    $20 = $1;
    $21 = (($20) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $yythunkpos1263 = $22;
    $23 = $1;
    $24 = (($23) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $yypos1264 = $25;
    $26 = $1;
    $27 = (($26) + 44|0);
    $28 = HEAP32[$27>>2]|0;
    $yythunkpos1264 = $28;
    $29 = $1;
    $30 = (_yymatchChar($29,93)|0);
    $31 = ($30|0)!=(0);
    if ($31) {
     label = 6;
     break;
    }
    $32 = $yypos1264;
    $33 = $1;
    $34 = (($33) + 12|0);
    HEAP32[$34>>2] = $32;
    $35 = $yythunkpos1264;
    $36 = $1;
    $37 = (($36) + 44|0);
    HEAP32[$37>>2] = $35;
    $38 = $1;
    $39 = (_yymatchDot($38)|0);
    $40 = ($39|0)!=(0);
    if (!($40)) {
     label = 8;
     break;
    }
   }
   if ((label|0) == 6) {
   }
   else if ((label|0) == 8) {
   }
   $41 = $yypos1263;
   $42 = $1;
   $43 = (($42) + 12|0);
   HEAP32[$43>>2] = $41;
   $44 = $yythunkpos1263;
   $45 = $1;
   $46 = (($45) + 44|0);
   HEAP32[$46>>2] = $44;
   $47 = $1;
   $48 = (_yymatchChar($47,93)|0);
   $49 = ($48|0)!=(0);
   if ($49) {
    break;
   } else {
    label = 13;
    break;
   }
  } else {
   label = 13;
  }
 } while(0);
 do {
  if ((label|0) == 13) {
   $50 = $yypos1260;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos1260;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yymatchDot($56)|0);
   $58 = ($57|0)!=(0);
   if ($58) {
    break;
   }
   $59 = $yypos0;
   $60 = $1;
   $61 = (($60) + 12|0);
   HEAP32[$61>>2] = $59;
   $62 = $yythunkpos0;
   $63 = $1;
   $64 = (($63) + 44|0);
   HEAP32[$64>>2] = $62;
   $0 = 0;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  }
 } while(0);
 $0 = 1;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_1_NoteReference($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $original = 0, $raw = 0, $source = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = (_g_string_new($5)|0);
 $original = $6;
 $7 = $original;
 _g_string_append_c($7,10);
 $8 = $original;
 _g_string_append_c($8,10);
 $9 = $1;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_mk_pos_str($9,$11,$14)|0);
 $16 = $0;
 $17 = (($16) + 48|0);
 HEAP32[$17>>2] = $15;
 $18 = $0;
 $19 = (($18) + 48|0);
 $20 = HEAP32[$19>>2]|0;
 HEAP16[$20>>1] = 30;
 $21 = $original;
 $22 = HEAP32[$21>>2]|0;
 $23 = $3;
 $24 = HEAP32[$23>>2]|0;
 $25 = $3;
 $26 = (($25) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (_mk_pos_str($22,$24,$27)|0);
 $raw = $28;
 $29 = $raw;
 HEAP16[$29>>1] = 40;
 $30 = $raw;
 $31 = $3;
 $32 = HEAP32[$31>>2]|0;
 $33 = $3;
 $34 = (($33) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (_mk_pos_list(62,$30,$32,$35)|0);
 $source = $36;
 $37 = (___strdup(41432)|0);
 $38 = $source;
 $39 = (($38) + 4|0);
 HEAP32[$39>>2] = $37;
 $40 = $source;
 $41 = $0;
 $42 = (($41) + 48|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($43) + 12|0);
 HEAP32[$44>>2] = $40;
 $45 = $original;
 (_g_string_free($45,1)|0);
 STACKTOP = sp;return;
}
function _yy_Ticks1($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1228 = 0, $yythunkpos0 = 0, $yythunkpos1228 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,96)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = (($11) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $yypos1228 = $13;
   $14 = $1;
   $15 = (($14) + 44|0);
   $16 = HEAP32[$15>>2]|0;
   $yythunkpos1228 = $16;
   $17 = $1;
   $18 = (_yymatchChar($17,96)|0);
   $19 = ($18|0)!=(0);
   if ($19) {
    break;
   }
   $20 = $yypos1228;
   $21 = $1;
   $22 = (($21) + 12|0);
   HEAP32[$22>>2] = $20;
   $23 = $yythunkpos1228;
   $24 = $1;
   $25 = (($24) + 44|0);
   HEAP32[$25>>2] = $23;
   $0 = 1;
   $32 = $0;
   STACKTOP = sp;return ($32|0);
  } else {
  }
 } while(0);
 $26 = $yypos0;
 $27 = $1;
 $28 = (($27) + 12|0);
 HEAP32[$28>>2] = $26;
 $29 = $yythunkpos0;
 $30 = $1;
 $31 = (($30) + 44|0);
 HEAP32[$31>>2] = $29;
 $0 = 0;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _yy_Ticks2($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1226 = 0, $yythunkpos0 = 0, $yythunkpos1226 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchString($8,43080)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = (($11) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $yypos1226 = $13;
   $14 = $1;
   $15 = (($14) + 44|0);
   $16 = HEAP32[$15>>2]|0;
   $yythunkpos1226 = $16;
   $17 = $1;
   $18 = (_yymatchChar($17,96)|0);
   $19 = ($18|0)!=(0);
   if ($19) {
    break;
   }
   $20 = $yypos1226;
   $21 = $1;
   $22 = (($21) + 12|0);
   HEAP32[$22>>2] = $20;
   $23 = $yythunkpos1226;
   $24 = $1;
   $25 = (($24) + 44|0);
   HEAP32[$25>>2] = $23;
   $0 = 1;
   $32 = $0;
   STACKTOP = sp;return ($32|0);
  } else {
  }
 } while(0);
 $26 = $yypos0;
 $27 = $1;
 $28 = (($27) + 12|0);
 HEAP32[$28>>2] = $26;
 $29 = $yythunkpos0;
 $30 = $1;
 $31 = (($30) + 44|0);
 HEAP32[$31>>2] = $29;
 $0 = 0;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _yy_1_Code($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 $14 = $0;
 $15 = (($14) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP16[$16>>1] = 31;
 STACKTOP = sp;return;
}
function _yy_HtmlTag($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $yypos0 = 0, $yypos2064 = 0, $yypos2067 = 0, $yypos2069 = 0, $yypos2070 = 0, $yythunkpos0 = 0, $yythunkpos2064 = 0;
 var $yythunkpos2067 = 0, $yythunkpos2069 = 0, $yythunkpos2070 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,60)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = (_yy_Spnl($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos2064 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos2064 = $19;
   $20 = $1;
   $21 = (_yymatchChar($20,47)|0);
   $22 = ($21|0)!=(0);
   if ($22) {
   } else {
    $23 = $yypos2064;
    $24 = $1;
    $25 = (($24) + 12|0);
    HEAP32[$25>>2] = $23;
    $26 = $yythunkpos2064;
    $27 = $1;
    $28 = (($27) + 44|0);
    HEAP32[$28>>2] = $26;
   }
   $29 = $1;
   $30 = (_yy_AlphanumericAscii($29)|0);
   $31 = ($30|0)!=(0);
   if (!($31)) {
    break;
   }
   while(1) {
    $32 = $1;
    $33 = (($32) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $yypos2067 = $34;
    $35 = $1;
    $36 = (($35) + 44|0);
    $37 = HEAP32[$36>>2]|0;
    $yythunkpos2067 = $37;
    $38 = $1;
    $39 = (_yy_AlphanumericAscii($38)|0);
    $40 = ($39|0)!=(0);
    if (!($40)) {
     break;
    }
   }
   $41 = $yypos2067;
   $42 = $1;
   $43 = (($42) + 12|0);
   HEAP32[$43>>2] = $41;
   $44 = $yythunkpos2067;
   $45 = $1;
   $46 = (($45) + 44|0);
   HEAP32[$46>>2] = $44;
   $47 = $1;
   $48 = (_yy_Spnl($47)|0);
   $49 = ($48|0)!=(0);
   if (!($49)) {
    break;
   }
   while(1) {
    $50 = $1;
    $51 = (($50) + 12|0);
    $52 = HEAP32[$51>>2]|0;
    $yypos2069 = $52;
    $53 = $1;
    $54 = (($53) + 44|0);
    $55 = HEAP32[$54>>2]|0;
    $yythunkpos2069 = $55;
    $56 = $1;
    $57 = (_yy_HtmlAttribute($56)|0);
    $58 = ($57|0)!=(0);
    if (!($58)) {
     break;
    }
   }
   $59 = $yypos2069;
   $60 = $1;
   $61 = (($60) + 12|0);
   HEAP32[$61>>2] = $59;
   $62 = $yythunkpos2069;
   $63 = $1;
   $64 = (($63) + 44|0);
   HEAP32[$64>>2] = $62;
   $65 = $1;
   $66 = (($65) + 12|0);
   $67 = HEAP32[$66>>2]|0;
   $yypos2070 = $67;
   $68 = $1;
   $69 = (($68) + 44|0);
   $70 = HEAP32[$69>>2]|0;
   $yythunkpos2070 = $70;
   $71 = $1;
   $72 = (_yymatchChar($71,47)|0);
   $73 = ($72|0)!=(0);
   if ($73) {
   } else {
    $74 = $yypos2070;
    $75 = $1;
    $76 = (($75) + 12|0);
    HEAP32[$76>>2] = $74;
    $77 = $yythunkpos2070;
    $78 = $1;
    $79 = (($78) + 44|0);
    HEAP32[$79>>2] = $77;
   }
   $80 = $1;
   $81 = (_yy_Spnl($80)|0);
   $82 = ($81|0)!=(0);
   if (!($82)) {
    break;
   }
   $83 = $1;
   $84 = (_yymatchChar($83,62)|0);
   $85 = ($84|0)!=(0);
   if (!($85)) {
    break;
   }
   $0 = 1;
   $92 = $0;
   STACKTOP = sp;return ($92|0);
  } else {
  }
 } while(0);
 $86 = $yypos0;
 $87 = $1;
 $88 = (($87) + 12|0);
 HEAP32[$88>>2] = $86;
 $89 = $yythunkpos0;
 $90 = $1;
 $91 = (($90) + 44|0);
 HEAP32[$91>>2] = $89;
 $0 = 0;
 $92 = $0;
 STACKTOP = sp;return ($92|0);
}
function _yy_1_RawHtml($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 64|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_extension(256,$9)|0);
 if ($10) {
  $11 = $3;
  $12 = HEAP32[$11>>2]|0;
  $13 = $3;
  $14 = (($13) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_mk_pos_list(1,0,$12,$15)|0);
  $17 = $0;
  $18 = (($17) + 48|0);
  HEAP32[$18>>2] = $16;
  STACKTOP = sp;return;
 } else {
  $19 = $1;
  $20 = $3;
  $21 = HEAP32[$20>>2]|0;
  $22 = $3;
  $23 = (($22) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (_mk_pos_str($19,$21,$24)|0);
  $26 = $0;
  $27 = (($26) + 48|0);
  HEAP32[$27>>2] = $25;
  $28 = $0;
  $29 = (($28) + 48|0);
  $30 = HEAP32[$29>>2]|0;
  HEAP16[$30>>1] = 32;
  STACKTOP = sp;return;
 }
}
function _yy_HexEntity($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1923 = 0, $yythunkpos0 = 0, $yythunkpos1923 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = $1;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($12) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 (_yyText($8,$11,$14)|0);
 $15 = $1;
 $16 = (($15) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = (($18) + 28|0);
 HEAP32[$19>>2] = $17;
 $20 = $1;
 $21 = (_yymatchChar($20,38)|0);
 $22 = ($21|0)!=(0);
 do {
  if ($22) {
   $23 = $1;
   $24 = (_yymatchChar($23,35)|0);
   $25 = ($24|0)!=(0);
   if (!($25)) {
    break;
   }
   $26 = $1;
   $27 = (_yymatchClass($26,44448,44488)|0);
   $28 = ($27|0)!=(0);
   if (!($28)) {
    break;
   }
   $29 = $1;
   $30 = (_yymatchClass($29,44496,44536)|0);
   $31 = ($30|0)!=(0);
   if (!($31)) {
    break;
   }
   while(1) {
    $32 = $1;
    $33 = (($32) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $yypos1923 = $34;
    $35 = $1;
    $36 = (($35) + 44|0);
    $37 = HEAP32[$36>>2]|0;
    $yythunkpos1923 = $37;
    $38 = $1;
    $39 = (_yymatchClass($38,44496,44536)|0);
    $40 = ($39|0)!=(0);
    if (!($40)) {
     break;
    }
   }
   $41 = $yypos1923;
   $42 = $1;
   $43 = (($42) + 12|0);
   HEAP32[$43>>2] = $41;
   $44 = $yythunkpos1923;
   $45 = $1;
   $46 = (($45) + 44|0);
   HEAP32[$46>>2] = $44;
   $47 = $1;
   $48 = (_yymatchChar($47,59)|0);
   $49 = ($48|0)!=(0);
   if (!($49)) {
    break;
   }
   $50 = $1;
   $51 = $1;
   $52 = (($51) + 28|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $1;
   $55 = (($54) + 32|0);
   $56 = HEAP32[$55>>2]|0;
   (_yyText($50,$53,$56)|0);
   $57 = $1;
   $58 = (($57) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $1;
   $61 = (($60) + 32|0);
   HEAP32[$61>>2] = $59;
   $0 = 1;
   $68 = $0;
   STACKTOP = sp;return ($68|0);
  } else {
  }
 } while(0);
 $62 = $yypos0;
 $63 = $1;
 $64 = (($63) + 12|0);
 HEAP32[$64>>2] = $62;
 $65 = $yythunkpos0;
 $66 = $1;
 $67 = (($66) + 44|0);
 HEAP32[$67>>2] = $65;
 $0 = 0;
 $68 = $0;
 STACKTOP = sp;return ($68|0);
}
function _yy_DecEntity($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1920 = 0;
 var $yythunkpos0 = 0, $yythunkpos1920 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = $1;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($12) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 (_yyText($8,$11,$14)|0);
 $15 = $1;
 $16 = (($15) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = (($18) + 28|0);
 HEAP32[$19>>2] = $17;
 $20 = $1;
 $21 = (_yymatchChar($20,38)|0);
 $22 = ($21|0)!=(0);
 do {
  if ($22) {
   $23 = $1;
   $24 = (_yymatchChar($23,35)|0);
   $25 = ($24|0)!=(0);
   if (!($25)) {
    break;
   }
   $26 = $1;
   $27 = (_yymatchClass($26,44248,44288)|0);
   $28 = ($27|0)!=(0);
   if (!($28)) {
    break;
   }
   while(1) {
    $29 = $1;
    $30 = (($29) + 12|0);
    $31 = HEAP32[$30>>2]|0;
    $yypos1920 = $31;
    $32 = $1;
    $33 = (($32) + 44|0);
    $34 = HEAP32[$33>>2]|0;
    $yythunkpos1920 = $34;
    $35 = $1;
    $36 = (_yymatchClass($35,44248,44288)|0);
    $37 = ($36|0)!=(0);
    if (!($37)) {
     break;
    }
   }
   $38 = $yypos1920;
   $39 = $1;
   $40 = (($39) + 12|0);
   HEAP32[$40>>2] = $38;
   $41 = $yythunkpos1920;
   $42 = $1;
   $43 = (($42) + 44|0);
   HEAP32[$43>>2] = $41;
   $44 = $1;
   $45 = $1;
   $46 = (($45) + 28|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $1;
   $49 = (($48) + 32|0);
   $50 = HEAP32[$49>>2]|0;
   (_yyText($44,$47,$50)|0);
   $51 = $1;
   $52 = (($51) + 12|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $1;
   $55 = (($54) + 32|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yymatchChar($56,59)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $59 = $1;
   $60 = $1;
   $61 = (($60) + 28|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $1;
   $64 = (($63) + 32|0);
   $65 = HEAP32[$64>>2]|0;
   (_yyText($59,$62,$65)|0);
   $66 = $1;
   $67 = (($66) + 12|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $1;
   $70 = (($69) + 32|0);
   HEAP32[$70>>2] = $68;
   $0 = 1;
   $77 = $0;
   STACKTOP = sp;return ($77|0);
  } else {
  }
 } while(0);
 $71 = $yypos0;
 $72 = $1;
 $73 = (($72) + 12|0);
 HEAP32[$73>>2] = $71;
 $74 = $yythunkpos0;
 $75 = $1;
 $76 = (($75) + 44|0);
 HEAP32[$76>>2] = $74;
 $0 = 0;
 $77 = $0;
 STACKTOP = sp;return ($77|0);
}
function _yy_CharEntity($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1917 = 0, $yythunkpos0 = 0, $yythunkpos1917 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = $1;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($12) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 (_yyText($8,$11,$14)|0);
 $15 = $1;
 $16 = (($15) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = (($18) + 28|0);
 HEAP32[$19>>2] = $17;
 $20 = $1;
 $21 = (_yymatchChar($20,38)|0);
 $22 = ($21|0)!=(0);
 do {
  if ($22) {
   $23 = $1;
   $24 = (_yymatchClass($23,41456,41496)|0);
   $25 = ($24|0)!=(0);
   if (!($25)) {
    break;
   }
   while(1) {
    $26 = $1;
    $27 = (($26) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $yypos1917 = $28;
    $29 = $1;
    $30 = (($29) + 44|0);
    $31 = HEAP32[$30>>2]|0;
    $yythunkpos1917 = $31;
    $32 = $1;
    $33 = (_yymatchClass($32,41456,41496)|0);
    $34 = ($33|0)!=(0);
    if (!($34)) {
     break;
    }
   }
   $35 = $yypos1917;
   $36 = $1;
   $37 = (($36) + 12|0);
   HEAP32[$37>>2] = $35;
   $38 = $yythunkpos1917;
   $39 = $1;
   $40 = (($39) + 44|0);
   HEAP32[$40>>2] = $38;
   $41 = $1;
   $42 = (_yymatchChar($41,59)|0);
   $43 = ($42|0)!=(0);
   if (!($43)) {
    break;
   }
   $44 = $1;
   $45 = $1;
   $46 = (($45) + 28|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $1;
   $49 = (($48) + 32|0);
   $50 = HEAP32[$49>>2]|0;
   (_yyText($44,$47,$50)|0);
   $51 = $1;
   $52 = (($51) + 12|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $1;
   $55 = (($54) + 32|0);
   HEAP32[$55>>2] = $53;
   $0 = 1;
   $62 = $0;
   STACKTOP = sp;return ($62|0);
  } else {
  }
 } while(0);
 $56 = $yypos0;
 $57 = $1;
 $58 = (($57) + 12|0);
 HEAP32[$58>>2] = $56;
 $59 = $yythunkpos0;
 $60 = $1;
 $61 = (($60) + 44|0);
 HEAP32[$61>>2] = $59;
 $0 = 0;
 $62 = $0;
 STACKTOP = sp;return ($62|0);
}
function _yy_1_Entity($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 $14 = $0;
 $15 = (($14) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP16[$16>>1] = 32;
 STACKTOP = sp;return;
}
function _yy_1_EscapedChar($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 STACKTOP = sp;return;
}
function _yy_Ellipsis($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1216 = 0, $yythunkpos0 = 0, $yythunkpos1216 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = $1;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($12) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 (_yyText($8,$11,$14)|0);
 $15 = $1;
 $16 = (($15) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = (($18) + 28|0);
 HEAP32[$19>>2] = $17;
 $20 = $1;
 $21 = (($20) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $yypos1216 = $22;
 $23 = $1;
 $24 = (($23) + 44|0);
 $25 = HEAP32[$24>>2]|0;
 $yythunkpos1216 = $25;
 $26 = $1;
 $27 = (_yymatchString($26,42768)|0);
 $28 = ($27|0)!=(0);
 do {
  if ($28) {
  } else {
   $29 = $yypos1216;
   $30 = $1;
   $31 = (($30) + 12|0);
   HEAP32[$31>>2] = $29;
   $32 = $yythunkpos1216;
   $33 = $1;
   $34 = (($33) + 44|0);
   HEAP32[$34>>2] = $32;
   $35 = $1;
   $36 = (_yymatchString($35,44312)|0);
   $37 = ($36|0)!=(0);
   if ($37) {
    break;
   }
   $57 = $yypos0;
   $58 = $1;
   $59 = (($58) + 12|0);
   HEAP32[$59>>2] = $57;
   $60 = $yythunkpos0;
   $61 = $1;
   $62 = (($61) + 44|0);
   HEAP32[$62>>2] = $60;
   $0 = 0;
   $63 = $0;
   STACKTOP = sp;return ($63|0);
  }
 } while(0);
 $38 = $1;
 $39 = $1;
 $40 = (($39) + 28|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $1;
 $43 = (($42) + 32|0);
 $44 = HEAP32[$43>>2]|0;
 (_yyText($38,$41,$44)|0);
 $45 = $1;
 $46 = (($45) + 12|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $1;
 $49 = (($48) + 32|0);
 HEAP32[$49>>2] = $47;
 $50 = $1;
 $51 = $1;
 $52 = (($51) + 28|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $1;
 $55 = (($54) + 32|0);
 $56 = HEAP32[$55>>2]|0;
 _yyDo($50,230,$53,$56,44320);
 $0 = 1;
 $63 = $0;
 STACKTOP = sp;return ($63|0);
}
function _yy_Dash($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1213 = 0, $yythunkpos0 = 0, $yythunkpos1213 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos1213 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos1213 = $13;
 $14 = $1;
 $15 = (_yy_EmDash($14)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
  } else {
   $17 = $yypos1213;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos1213;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yy_EnDash($23)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    break;
   }
   $26 = $yypos0;
   $27 = $1;
   $28 = (($27) + 12|0);
   HEAP32[$28>>2] = $26;
   $29 = $yythunkpos0;
   $30 = $1;
   $31 = (($30) + 44|0);
   HEAP32[$31>>2] = $29;
   $0 = 0;
   $32 = $0;
   STACKTOP = sp;return ($32|0);
  }
 } while(0);
 $0 = 1;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _yy_SingleQuoted($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $yypos0 = 0, $yypos1209 = 0;
 var $yypos1210 = 0, $yypos1211 = 0, $yythunkpos0 = 0, $yythunkpos1209 = 0, $yythunkpos1210 = 0, $yythunkpos1211 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,2,0,41328);
 $9 = $1;
 $10 = (_yy_SingleQuoteStart($9)|0);
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $1;
   $13 = (_yy_StartList($12)|0);
   $14 = ($13|0)!=(0);
   if (!($14)) {
    break;
   }
   $15 = $1;
   _yyDo($15,8,-2,0,41336);
   $16 = $1;
   $17 = (($16) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $yypos1210 = $18;
   $19 = $1;
   $20 = (($19) + 44|0);
   $21 = HEAP32[$20>>2]|0;
   $yythunkpos1210 = $21;
   $22 = $1;
   $23 = (_yy_SingleQuoteEnd($22)|0);
   $24 = ($23|0)!=(0);
   if ($24) {
    break;
   }
   $25 = $yypos1210;
   $26 = $1;
   $27 = (($26) + 12|0);
   HEAP32[$27>>2] = $25;
   $28 = $yythunkpos1210;
   $29 = $1;
   $30 = (($29) + 44|0);
   HEAP32[$30>>2] = $28;
   $31 = $1;
   $32 = (_yy_Inline($31)|0);
   $33 = ($32|0)!=(0);
   if (!($33)) {
    break;
   }
   $34 = $1;
   _yyDo($34,8,-1,0,41336);
   $35 = $1;
   $36 = $1;
   $37 = (($36) + 28|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $1;
   $40 = (($39) + 32|0);
   $41 = HEAP32[$40>>2]|0;
   _yyDo($35,231,$38,$41,43136);
   while(1) {
    $42 = $1;
    $43 = (($42) + 12|0);
    $44 = HEAP32[$43>>2]|0;
    $yypos1209 = $44;
    $45 = $1;
    $46 = (($45) + 44|0);
    $47 = HEAP32[$46>>2]|0;
    $yythunkpos1209 = $47;
    $48 = $1;
    $49 = (($48) + 12|0);
    $50 = HEAP32[$49>>2]|0;
    $yypos1211 = $50;
    $51 = $1;
    $52 = (($51) + 44|0);
    $53 = HEAP32[$52>>2]|0;
    $yythunkpos1211 = $53;
    $54 = $1;
    $55 = (_yy_SingleQuoteEnd($54)|0);
    $56 = ($55|0)!=(0);
    if ($56) {
     label = 13;
     break;
    }
    $57 = $yypos1211;
    $58 = $1;
    $59 = (($58) + 12|0);
    HEAP32[$59>>2] = $57;
    $60 = $yythunkpos1211;
    $61 = $1;
    $62 = (($61) + 44|0);
    HEAP32[$62>>2] = $60;
    $63 = $1;
    $64 = (_yy_Inline($63)|0);
    $65 = ($64|0)!=(0);
    if (!($65)) {
     label = 15;
     break;
    }
    $66 = $1;
    _yyDo($66,8,-1,0,41336);
    $67 = $1;
    $68 = $1;
    $69 = (($68) + 28|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = $1;
    $72 = (($71) + 32|0);
    $73 = HEAP32[$72>>2]|0;
    _yyDo($67,231,$70,$73,43136);
   }
   if ((label|0) == 13) {
   }
   else if ((label|0) == 15) {
   }
   $74 = $yypos1209;
   $75 = $1;
   $76 = (($75) + 12|0);
   HEAP32[$76>>2] = $74;
   $77 = $yythunkpos1209;
   $78 = $1;
   $79 = (($78) + 44|0);
   HEAP32[$79>>2] = $77;
   $80 = $1;
   $81 = (_yy_SingleQuoteEnd($80)|0);
   $82 = ($81|0)!=(0);
   if (!($82)) {
    break;
   }
   $83 = $1;
   $84 = $1;
   $85 = (($84) + 28|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = $1;
   $88 = (($87) + 32|0);
   $89 = HEAP32[$88>>2]|0;
   _yyDo($83,232,$86,$89,43160);
   $90 = $1;
   _yyDo($90,12,2,0,41392);
   $0 = 1;
   $97 = $0;
   STACKTOP = sp;return ($97|0);
  } else {
  }
 } while(0);
 $91 = $yypos0;
 $92 = $1;
 $93 = (($92) + 12|0);
 HEAP32[$93>>2] = $91;
 $94 = $yythunkpos0;
 $95 = $1;
 $96 = (($95) + 44|0);
 HEAP32[$96>>2] = $94;
 $0 = 0;
 $97 = $0;
 STACKTOP = sp;return ($97|0);
}
function _yy_DoubleQuoted($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos1200 = 0;
 var $yypos1201 = 0, $yypos1202 = 0, $yypos1203 = 0, $yypos1204 = 0, $yypos1205 = 0, $yypos1206 = 0, $yythunkpos0 = 0, $yythunkpos1200 = 0, $yythunkpos1201 = 0, $yythunkpos1202 = 0, $yythunkpos1203 = 0, $yythunkpos1204 = 0, $yythunkpos1205 = 0, $yythunkpos1206 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,2,0,41328);
 $9 = $1;
 $10 = (_yy_DoubleQuoteStart($9)|0);
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $1;
   $13 = (_yy_StartList($12)|0);
   $14 = ($13|0)!=(0);
   if (!($14)) {
    break;
   }
   $15 = $1;
   _yyDo($15,8,-2,0,41336);
   $16 = $1;
   $17 = (($16) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $yypos1201 = $18;
   $19 = $1;
   $20 = (($19) + 44|0);
   $21 = HEAP32[$20>>2]|0;
   $yythunkpos1201 = $21;
   $22 = $1;
   $23 = (_yy_DoubleQuoteEnd($22)|0);
   $24 = ($23|0)!=(0);
   if ($24) {
    break;
   }
   $25 = $yypos1201;
   $26 = $1;
   $27 = (($26) + 12|0);
   HEAP32[$27>>2] = $25;
   $28 = $yythunkpos1201;
   $29 = $1;
   $30 = (($29) + 44|0);
   HEAP32[$30>>2] = $28;
   $31 = $1;
   $32 = (($31) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $yypos1202 = $33;
   $34 = $1;
   $35 = (($34) + 44|0);
   $36 = HEAP32[$35>>2]|0;
   $yythunkpos1202 = $36;
   $37 = $1;
   $38 = (_yy_BackTickEnd($37)|0);
   $39 = ($38|0)!=(0);
   if ($39) {
    break;
   }
   $40 = $yypos1202;
   $41 = $1;
   $42 = (($41) + 12|0);
   HEAP32[$42>>2] = $40;
   $43 = $yythunkpos1202;
   $44 = $1;
   $45 = (($44) + 44|0);
   HEAP32[$45>>2] = $43;
   $46 = $1;
   $47 = (($46) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $yypos1203 = $48;
   $49 = $1;
   $50 = (($49) + 44|0);
   $51 = HEAP32[$50>>2]|0;
   $yythunkpos1203 = $51;
   $52 = $1;
   $53 = (_yy_BackTickStart($52)|0);
   $54 = ($53|0)!=(0);
   if ($54) {
    break;
   }
   $55 = $yypos1203;
   $56 = $1;
   $57 = (($56) + 12|0);
   HEAP32[$57>>2] = $55;
   $58 = $yythunkpos1203;
   $59 = $1;
   $60 = (($59) + 44|0);
   HEAP32[$60>>2] = $58;
   $61 = $1;
   $62 = (_yy_Inline($61)|0);
   $63 = ($62|0)!=(0);
   if (!($63)) {
    break;
   }
   $64 = $1;
   _yyDo($64,8,-1,0,41336);
   $65 = $1;
   $66 = $1;
   $67 = (($66) + 28|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $1;
   $70 = (($69) + 32|0);
   $71 = HEAP32[$70>>2]|0;
   _yyDo($65,233,$68,$71,43088);
   while(1) {
    $72 = $1;
    $73 = (($72) + 12|0);
    $74 = HEAP32[$73>>2]|0;
    $yypos1200 = $74;
    $75 = $1;
    $76 = (($75) + 44|0);
    $77 = HEAP32[$76>>2]|0;
    $yythunkpos1200 = $77;
    $78 = $1;
    $79 = (($78) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $yypos1204 = $80;
    $81 = $1;
    $82 = (($81) + 44|0);
    $83 = HEAP32[$82>>2]|0;
    $yythunkpos1204 = $83;
    $84 = $1;
    $85 = (_yy_DoubleQuoteEnd($84)|0);
    $86 = ($85|0)!=(0);
    if ($86) {
     label = 19;
     break;
    }
    $87 = $yypos1204;
    $88 = $1;
    $89 = (($88) + 12|0);
    HEAP32[$89>>2] = $87;
    $90 = $yythunkpos1204;
    $91 = $1;
    $92 = (($91) + 44|0);
    HEAP32[$92>>2] = $90;
    $93 = $1;
    $94 = (($93) + 12|0);
    $95 = HEAP32[$94>>2]|0;
    $yypos1205 = $95;
    $96 = $1;
    $97 = (($96) + 44|0);
    $98 = HEAP32[$97>>2]|0;
    $yythunkpos1205 = $98;
    $99 = $1;
    $100 = (_yy_BackTickEnd($99)|0);
    $101 = ($100|0)!=(0);
    if ($101) {
     label = 22;
     break;
    }
    $102 = $yypos1205;
    $103 = $1;
    $104 = (($103) + 12|0);
    HEAP32[$104>>2] = $102;
    $105 = $yythunkpos1205;
    $106 = $1;
    $107 = (($106) + 44|0);
    HEAP32[$107>>2] = $105;
    $108 = $1;
    $109 = (($108) + 12|0);
    $110 = HEAP32[$109>>2]|0;
    $yypos1206 = $110;
    $111 = $1;
    $112 = (($111) + 44|0);
    $113 = HEAP32[$112>>2]|0;
    $yythunkpos1206 = $113;
    $114 = $1;
    $115 = (_yy_BackTickStart($114)|0);
    $116 = ($115|0)!=(0);
    if ($116) {
     label = 25;
     break;
    }
    $117 = $yypos1206;
    $118 = $1;
    $119 = (($118) + 12|0);
    HEAP32[$119>>2] = $117;
    $120 = $yythunkpos1206;
    $121 = $1;
    $122 = (($121) + 44|0);
    HEAP32[$122>>2] = $120;
    $123 = $1;
    $124 = (_yy_Inline($123)|0);
    $125 = ($124|0)!=(0);
    if (!($125)) {
     label = 27;
     break;
    }
    $126 = $1;
    _yyDo($126,8,-1,0,41336);
    $127 = $1;
    $128 = $1;
    $129 = (($128) + 28|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = $1;
    $132 = (($131) + 32|0);
    $133 = HEAP32[$132>>2]|0;
    _yyDo($127,233,$130,$133,43088);
   }
   if ((label|0) == 19) {
   }
   else if ((label|0) == 22) {
   }
   else if ((label|0) == 25) {
   }
   else if ((label|0) == 27) {
   }
   $134 = $yypos1200;
   $135 = $1;
   $136 = (($135) + 12|0);
   HEAP32[$136>>2] = $134;
   $137 = $yythunkpos1200;
   $138 = $1;
   $139 = (($138) + 44|0);
   HEAP32[$139>>2] = $137;
   $140 = $1;
   $141 = (_yy_DoubleQuoteEnd($140)|0);
   $142 = ($141|0)!=(0);
   if (!($142)) {
    break;
   }
   $143 = $1;
   $144 = $1;
   $145 = (($144) + 28|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = $1;
   $148 = (($147) + 32|0);
   $149 = HEAP32[$148>>2]|0;
   _yyDo($143,234,$146,$149,43112);
   $150 = $1;
   _yyDo($150,12,2,0,41392);
   $0 = 1;
   $157 = $0;
   STACKTOP = sp;return ($157|0);
  } else {
  }
 } while(0);
 $151 = $yypos0;
 $152 = $1;
 $153 = (($152) + 12|0);
 HEAP32[$153>>2] = $151;
 $154 = $yythunkpos0;
 $155 = $1;
 $156 = (($155) + 44|0);
 HEAP32[$156>>2] = $154;
 $0 = 0;
 $157 = $0;
 STACKTOP = sp;return ($157|0);
}
function _yy_BackTickQuoted($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos1193 = 0, $yypos1194 = 0, $yypos1195 = 0, $yypos1196 = 0, $yypos1197 = 0, $yythunkpos0 = 0, $yythunkpos1193 = 0, $yythunkpos1194 = 0, $yythunkpos1195 = 0, $yythunkpos1196 = 0, $yythunkpos1197 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,2,0,41328);
 $9 = $1;
 $10 = (_yy_BackTickStart($9)|0);
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $1;
   $13 = (_yy_StartList($12)|0);
   $14 = ($13|0)!=(0);
   if (!($14)) {
    break;
   }
   $15 = $1;
   _yyDo($15,8,-2,0,41336);
   $16 = $1;
   $17 = (($16) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $yypos1194 = $18;
   $19 = $1;
   $20 = (($19) + 44|0);
   $21 = HEAP32[$20>>2]|0;
   $yythunkpos1194 = $21;
   $22 = $1;
   $23 = (_yy_DoubleQuoteEnd($22)|0);
   $24 = ($23|0)!=(0);
   if ($24) {
    break;
   }
   $25 = $yypos1194;
   $26 = $1;
   $27 = (($26) + 12|0);
   HEAP32[$27>>2] = $25;
   $28 = $yythunkpos1194;
   $29 = $1;
   $30 = (($29) + 44|0);
   HEAP32[$30>>2] = $28;
   $31 = $1;
   $32 = (($31) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $yypos1195 = $33;
   $34 = $1;
   $35 = (($34) + 44|0);
   $36 = HEAP32[$35>>2]|0;
   $yythunkpos1195 = $36;
   $37 = $1;
   $38 = (_yy_BackTickEnd($37)|0);
   $39 = ($38|0)!=(0);
   if ($39) {
    break;
   }
   $40 = $yypos1195;
   $41 = $1;
   $42 = (($41) + 12|0);
   HEAP32[$42>>2] = $40;
   $43 = $yythunkpos1195;
   $44 = $1;
   $45 = (($44) + 44|0);
   HEAP32[$45>>2] = $43;
   $46 = $1;
   $47 = (_yy_Inline($46)|0);
   $48 = ($47|0)!=(0);
   if (!($48)) {
    break;
   }
   $49 = $1;
   _yyDo($49,8,-1,0,41336);
   $50 = $1;
   $51 = $1;
   $52 = (($51) + 28|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $1;
   $55 = (($54) + 32|0);
   $56 = HEAP32[$55>>2]|0;
   _yyDo($50,235,$53,$56,43024);
   while(1) {
    $57 = $1;
    $58 = (($57) + 12|0);
    $59 = HEAP32[$58>>2]|0;
    $yypos1193 = $59;
    $60 = $1;
    $61 = (($60) + 44|0);
    $62 = HEAP32[$61>>2]|0;
    $yythunkpos1193 = $62;
    $63 = $1;
    $64 = (($63) + 12|0);
    $65 = HEAP32[$64>>2]|0;
    $yypos1196 = $65;
    $66 = $1;
    $67 = (($66) + 44|0);
    $68 = HEAP32[$67>>2]|0;
    $yythunkpos1196 = $68;
    $69 = $1;
    $70 = (_yy_DoubleQuoteEnd($69)|0);
    $71 = ($70|0)!=(0);
    if ($71) {
     label = 16;
     break;
    }
    $72 = $yypos1196;
    $73 = $1;
    $74 = (($73) + 12|0);
    HEAP32[$74>>2] = $72;
    $75 = $yythunkpos1196;
    $76 = $1;
    $77 = (($76) + 44|0);
    HEAP32[$77>>2] = $75;
    $78 = $1;
    $79 = (($78) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $yypos1197 = $80;
    $81 = $1;
    $82 = (($81) + 44|0);
    $83 = HEAP32[$82>>2]|0;
    $yythunkpos1197 = $83;
    $84 = $1;
    $85 = (_yy_BackTickEnd($84)|0);
    $86 = ($85|0)!=(0);
    if ($86) {
     label = 19;
     break;
    }
    $87 = $yypos1197;
    $88 = $1;
    $89 = (($88) + 12|0);
    HEAP32[$89>>2] = $87;
    $90 = $yythunkpos1197;
    $91 = $1;
    $92 = (($91) + 44|0);
    HEAP32[$92>>2] = $90;
    $93 = $1;
    $94 = (_yy_Inline($93)|0);
    $95 = ($94|0)!=(0);
    if (!($95)) {
     label = 21;
     break;
    }
    $96 = $1;
    _yyDo($96,8,-1,0,41336);
    $97 = $1;
    $98 = $1;
    $99 = (($98) + 28|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $1;
    $102 = (($101) + 32|0);
    $103 = HEAP32[$102>>2]|0;
    _yyDo($97,235,$100,$103,43024);
   }
   if ((label|0) == 16) {
   }
   else if ((label|0) == 19) {
   }
   else if ((label|0) == 21) {
   }
   $104 = $yypos1193;
   $105 = $1;
   $106 = (($105) + 12|0);
   HEAP32[$106>>2] = $104;
   $107 = $yythunkpos1193;
   $108 = $1;
   $109 = (($108) + 44|0);
   HEAP32[$109>>2] = $107;
   $110 = $1;
   $111 = (_yy_BackTickEnd($110)|0);
   $112 = ($111|0)!=(0);
   if (!($112)) {
    break;
   }
   $113 = $1;
   $114 = $1;
   $115 = (($114) + 28|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = $1;
   $118 = (($117) + 32|0);
   $119 = HEAP32[$118>>2]|0;
   _yyDo($113,236,$116,$119,43048);
   $120 = $1;
   _yyDo($120,12,2,0,41392);
   $0 = 1;
   $127 = $0;
   STACKTOP = sp;return ($127|0);
  } else {
  }
 } while(0);
 $121 = $yypos0;
 $122 = $1;
 $123 = (($122) + 12|0);
 HEAP32[$123>>2] = $121;
 $124 = $yythunkpos0;
 $125 = $1;
 $126 = (($125) + 44|0);
 HEAP32[$126>>2] = $124;
 $0 = 0;
 $127 = $0;
 STACKTOP = sp;return ($127|0);
}
function _yy_Apostrophe($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yythunkpos0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = $1;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($12) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 (_yyText($8,$11,$14)|0);
 $15 = $1;
 $16 = (($15) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = (($18) + 28|0);
 HEAP32[$19>>2] = $17;
 $20 = $1;
 $21 = (_yymatchChar($20,39)|0);
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = $1;
  $24 = $1;
  $25 = (($24) + 28|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $1;
  $28 = (($27) + 32|0);
  $29 = HEAP32[$28>>2]|0;
  (_yyText($23,$26,$29)|0);
  $30 = $1;
  $31 = (($30) + 12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $1;
  $34 = (($33) + 32|0);
  HEAP32[$34>>2] = $32;
  $35 = $1;
  $36 = $1;
  $37 = (($36) + 28|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $1;
  $40 = (($39) + 32|0);
  $41 = HEAP32[$40>>2]|0;
  _yyDo($35,237,$38,$41,43008);
  $0 = 1;
  $48 = $0;
  STACKTOP = sp;return ($48|0);
 } else {
  $42 = $yypos0;
  $43 = $1;
  $44 = (($43) + 12|0);
  HEAP32[$44>>2] = $42;
  $45 = $yythunkpos0;
  $46 = $1;
  $47 = (($46) + 44|0);
  HEAP32[$47>>2] = $45;
  $0 = 0;
  $48 = $0;
  STACKTOP = sp;return ($48|0);
 }
 return (0)|0;
}
function _yy_SpecialChar($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos2126 = 0, $yythunkpos0 = 0, $yythunkpos2126 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos2126 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos2126 = $13;
 $14 = $1;
 $15 = (_yymatchChar($14,42)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
  } else {
   $17 = $yypos2126;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos2126;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yymatchChar($23,95)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    break;
   }
   $26 = $yypos2126;
   $27 = $1;
   $28 = (($27) + 12|0);
   HEAP32[$28>>2] = $26;
   $29 = $yythunkpos2126;
   $30 = $1;
   $31 = (($30) + 44|0);
   HEAP32[$31>>2] = $29;
   $32 = $1;
   $33 = (_yymatchChar($32,96)|0);
   $34 = ($33|0)!=(0);
   if ($34) {
    break;
   }
   $35 = $yypos2126;
   $36 = $1;
   $37 = (($36) + 12|0);
   HEAP32[$37>>2] = $35;
   $38 = $yythunkpos2126;
   $39 = $1;
   $40 = (($39) + 44|0);
   HEAP32[$40>>2] = $38;
   $41 = $1;
   $42 = (_yymatchChar($41,38)|0);
   $43 = ($42|0)!=(0);
   if ($43) {
    break;
   }
   $44 = $yypos2126;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos2126;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,91)|0);
   $52 = ($51|0)!=(0);
   if ($52) {
    break;
   }
   $53 = $yypos2126;
   $54 = $1;
   $55 = (($54) + 12|0);
   HEAP32[$55>>2] = $53;
   $56 = $yythunkpos2126;
   $57 = $1;
   $58 = (($57) + 44|0);
   HEAP32[$58>>2] = $56;
   $59 = $1;
   $60 = (_yymatchChar($59,93)|0);
   $61 = ($60|0)!=(0);
   if ($61) {
    break;
   }
   $62 = $yypos2126;
   $63 = $1;
   $64 = (($63) + 12|0);
   HEAP32[$64>>2] = $62;
   $65 = $yythunkpos2126;
   $66 = $1;
   $67 = (($66) + 44|0);
   HEAP32[$67>>2] = $65;
   $68 = $1;
   $69 = (_yymatchChar($68,40)|0);
   $70 = ($69|0)!=(0);
   if ($70) {
    break;
   }
   $71 = $yypos2126;
   $72 = $1;
   $73 = (($72) + 12|0);
   HEAP32[$73>>2] = $71;
   $74 = $yythunkpos2126;
   $75 = $1;
   $76 = (($75) + 44|0);
   HEAP32[$76>>2] = $74;
   $77 = $1;
   $78 = (_yymatchChar($77,41)|0);
   $79 = ($78|0)!=(0);
   if ($79) {
    break;
   }
   $80 = $yypos2126;
   $81 = $1;
   $82 = (($81) + 12|0);
   HEAP32[$82>>2] = $80;
   $83 = $yythunkpos2126;
   $84 = $1;
   $85 = (($84) + 44|0);
   HEAP32[$85>>2] = $83;
   $86 = $1;
   $87 = (_yymatchChar($86,60)|0);
   $88 = ($87|0)!=(0);
   if ($88) {
    break;
   }
   $89 = $yypos2126;
   $90 = $1;
   $91 = (($90) + 12|0);
   HEAP32[$91>>2] = $89;
   $92 = $yythunkpos2126;
   $93 = $1;
   $94 = (($93) + 44|0);
   HEAP32[$94>>2] = $92;
   $95 = $1;
   $96 = (_yymatchChar($95,33)|0);
   $97 = ($96|0)!=(0);
   if ($97) {
    break;
   }
   $98 = $yypos2126;
   $99 = $1;
   $100 = (($99) + 12|0);
   HEAP32[$100>>2] = $98;
   $101 = $yythunkpos2126;
   $102 = $1;
   $103 = (($102) + 44|0);
   HEAP32[$103>>2] = $101;
   $104 = $1;
   $105 = (_yymatchChar($104,35)|0);
   $106 = ($105|0)!=(0);
   if ($106) {
    break;
   }
   $107 = $yypos2126;
   $108 = $1;
   $109 = (($108) + 12|0);
   HEAP32[$109>>2] = $107;
   $110 = $yythunkpos2126;
   $111 = $1;
   $112 = (($111) + 44|0);
   HEAP32[$112>>2] = $110;
   $113 = $1;
   $114 = (_yymatchChar($113,92)|0);
   $115 = ($114|0)!=(0);
   if ($115) {
    break;
   }
   $116 = $yypos2126;
   $117 = $1;
   $118 = (($117) + 12|0);
   HEAP32[$118>>2] = $116;
   $119 = $yythunkpos2126;
   $120 = $1;
   $121 = (($120) + 44|0);
   HEAP32[$121>>2] = $119;
   $122 = $1;
   $123 = (_yymatchChar($122,39)|0);
   $124 = ($123|0)!=(0);
   if ($124) {
    break;
   }
   $125 = $yypos2126;
   $126 = $1;
   $127 = (($126) + 12|0);
   HEAP32[$127>>2] = $125;
   $128 = $yythunkpos2126;
   $129 = $1;
   $130 = (($129) + 44|0);
   HEAP32[$130>>2] = $128;
   $131 = $1;
   $132 = (_yymatchChar($131,34)|0);
   $133 = ($132|0)!=(0);
   if ($133) {
    break;
   }
   $134 = $yypos2126;
   $135 = $1;
   $136 = (($135) + 12|0);
   HEAP32[$136>>2] = $134;
   $137 = $yythunkpos2126;
   $138 = $1;
   $139 = (($138) + 44|0);
   HEAP32[$139>>2] = $137;
   $140 = $1;
   $141 = (_yymatchChar($140,63)|0);
   $142 = ($141|0)!=(0);
   if ($142) {
    break;
   }
   $143 = $yypos2126;
   $144 = $1;
   $145 = (($144) + 12|0);
   HEAP32[$145>>2] = $143;
   $146 = $yythunkpos2126;
   $147 = $1;
   $148 = (($147) + 44|0);
   HEAP32[$148>>2] = $146;
   $149 = $1;
   $150 = (_yymatchChar($149,44)|0);
   $151 = ($150|0)!=(0);
   if ($151) {
    break;
   }
   $152 = $yypos2126;
   $153 = $1;
   $154 = (($153) + 12|0);
   HEAP32[$154>>2] = $152;
   $155 = $yythunkpos2126;
   $156 = $1;
   $157 = (($156) + 44|0);
   HEAP32[$157>>2] = $155;
   $158 = $1;
   $159 = (_yymatchChar($158,59)|0);
   $160 = ($159|0)!=(0);
   if ($160) {
    break;
   }
   $161 = $yypos2126;
   $162 = $1;
   $163 = (($162) + 12|0);
   HEAP32[$163>>2] = $161;
   $164 = $yythunkpos2126;
   $165 = $1;
   $166 = (($165) + 44|0);
   HEAP32[$166>>2] = $164;
   $167 = $1;
   $168 = (_yymatchChar($167,47)|0);
   $169 = ($168|0)!=(0);
   if ($169) {
    break;
   }
   $170 = $yypos2126;
   $171 = $1;
   $172 = (($171) + 12|0);
   HEAP32[$172>>2] = $170;
   $173 = $yythunkpos2126;
   $174 = $1;
   $175 = (($174) + 44|0);
   HEAP32[$175>>2] = $173;
   $176 = $1;
   $177 = (_yymatchChar($176,46)|0);
   $178 = ($177|0)!=(0);
   if ($178) {
    break;
   }
   $179 = $yypos2126;
   $180 = $1;
   $181 = (($180) + 12|0);
   HEAP32[$181>>2] = $179;
   $182 = $yythunkpos2126;
   $183 = $1;
   $184 = (($183) + 44|0);
   HEAP32[$184>>2] = $182;
   $185 = $1;
   $186 = (_yymatchString($185,42992)|0);
   $187 = ($186|0)!=(0);
   if ($187) {
    break;
   }
   $188 = $yypos2126;
   $189 = $1;
   $190 = (($189) + 12|0);
   HEAP32[$190>>2] = $188;
   $191 = $yythunkpos2126;
   $192 = $1;
   $193 = (($192) + 44|0);
   HEAP32[$193>>2] = $191;
   $194 = $1;
   $195 = (_yymatchString($194,43000)|0);
   $196 = ($195|0)!=(0);
   if ($196) {
    break;
   }
   $197 = $yypos2126;
   $198 = $1;
   $199 = (($198) + 12|0);
   HEAP32[$199>>2] = $197;
   $200 = $yythunkpos2126;
   $201 = $1;
   $202 = (($201) + 44|0);
   HEAP32[$202>>2] = $200;
   $203 = $1;
   $204 = (_yy_ExtendedSpecialChar($203)|0);
   $205 = ($204|0)!=(0);
   if ($205) {
    break;
   }
   $206 = $yypos0;
   $207 = $1;
   $208 = (($207) + 12|0);
   HEAP32[$208>>2] = $206;
   $209 = $yythunkpos0;
   $210 = $1;
   $211 = (($210) + 44|0);
   HEAP32[$211>>2] = $209;
   $0 = 0;
   $212 = $0;
   STACKTOP = sp;return ($212|0);
  }
 } while(0);
 $0 = 1;
 $212 = $0;
 STACKTOP = sp;return ($212|0);
}
function _yy_1_Symbol($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 STACKTOP = sp;return;
}
function _yy_1_AttrKey($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lab = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = (_label_from_string($5)|0);
 $lab = $6;
 $7 = $lab;
 $8 = (_mk_str($7)|0);
 $9 = $0;
 $10 = (($9) + 48|0);
 HEAP32[$10>>2] = $8;
 $11 = $0;
 $12 = (($11) + 48|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP16[$13>>1] = 68;
 $14 = $lab;
 _free($14);
 STACKTOP = sp;return;
}
function _yy_QuotedValue($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1302 = 0, $yypos1303 = 0, $yythunkpos0 = 0, $yythunkpos1302 = 0;
 var $yythunkpos1303 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,34)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = $1;
   $13 = (($12) + 28|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $1;
   $16 = (($15) + 32|0);
   $17 = HEAP32[$16>>2]|0;
   (_yyText($11,$14,$17)|0);
   $18 = $1;
   $19 = (($18) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $1;
   $22 = (($21) + 28|0);
   HEAP32[$22>>2] = $20;
   while(1) {
    $23 = $1;
    $24 = (($23) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $yypos1302 = $25;
    $26 = $1;
    $27 = (($26) + 44|0);
    $28 = HEAP32[$27>>2]|0;
    $yythunkpos1302 = $28;
    $29 = $1;
    $30 = (($29) + 12|0);
    $31 = HEAP32[$30>>2]|0;
    $yypos1303 = $31;
    $32 = $1;
    $33 = (($32) + 44|0);
    $34 = HEAP32[$33>>2]|0;
    $yythunkpos1303 = $34;
    $35 = $1;
    $36 = (_yymatchChar($35,34)|0);
    $37 = ($36|0)!=(0);
    if ($37) {
     label = 7;
     break;
    }
    $38 = $yypos1303;
    $39 = $1;
    $40 = (($39) + 12|0);
    HEAP32[$40>>2] = $38;
    $41 = $yythunkpos1303;
    $42 = $1;
    $43 = (($42) + 44|0);
    HEAP32[$43>>2] = $41;
    $44 = $1;
    $45 = (_yymatchDot($44)|0);
    $46 = ($45|0)!=(0);
    if (!($46)) {
     label = 9;
     break;
    }
   }
   if ((label|0) == 7) {
   }
   else if ((label|0) == 9) {
   }
   $47 = $yypos1302;
   $48 = $1;
   $49 = (($48) + 12|0);
   HEAP32[$49>>2] = $47;
   $50 = $yythunkpos1302;
   $51 = $1;
   $52 = (($51) + 44|0);
   HEAP32[$52>>2] = $50;
   $53 = $1;
   $54 = $1;
   $55 = (($54) + 28|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $1;
   $58 = (($57) + 32|0);
   $59 = HEAP32[$58>>2]|0;
   (_yyText($53,$56,$59)|0);
   $60 = $1;
   $61 = (($60) + 12|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $1;
   $64 = (($63) + 32|0);
   HEAP32[$64>>2] = $62;
   $65 = $1;
   $66 = (_yymatchChar($65,34)|0);
   $67 = ($66|0)!=(0);
   if (!($67)) {
    break;
   }
   $0 = 1;
   $74 = $0;
   STACKTOP = sp;return ($74|0);
  } else {
  }
 } while(0);
 $68 = $yypos0;
 $69 = $1;
 $70 = (($69) + 12|0);
 HEAP32[$70>>2] = $68;
 $71 = $yythunkpos0;
 $72 = $1;
 $73 = (($72) + 44|0);
 HEAP32[$73>>2] = $71;
 $0 = 0;
 $74 = $0;
 STACKTOP = sp;return ($74|0);
}
function _yy_UnQuotedValue($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $yypos0 = 0, $yypos1295 = 0, $yypos1296 = 0, $yypos1298 = 0, $yythunkpos0 = 0, $yythunkpos1295 = 0, $yythunkpos1296 = 0, $yythunkpos1298 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = $1;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($12) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 (_yyText($8,$11,$14)|0);
 $15 = $1;
 $16 = (($15) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = (($18) + 28|0);
 HEAP32[$19>>2] = $17;
 $20 = $1;
 $21 = (($20) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $yypos1296 = $22;
 $23 = $1;
 $24 = (($23) + 44|0);
 $25 = HEAP32[$24>>2]|0;
 $yythunkpos1296 = $25;
 $26 = $1;
 $27 = (_yy_AlphanumericAscii($26)|0);
 $28 = ($27|0)!=(0);
 do {
  if ($28) {
  } else {
   $29 = $yypos1296;
   $30 = $1;
   $31 = (($30) + 12|0);
   HEAP32[$31>>2] = $29;
   $32 = $yythunkpos1296;
   $33 = $1;
   $34 = (($33) + 44|0);
   HEAP32[$34>>2] = $32;
   $35 = $1;
   $36 = (_yymatchChar($35,46)|0);
   $37 = ($36|0)!=(0);
   if ($37) {
    break;
   }
   $80 = $yypos0;
   $81 = $1;
   $82 = (($81) + 12|0);
   HEAP32[$82>>2] = $80;
   $83 = $yythunkpos0;
   $84 = $1;
   $85 = (($84) + 44|0);
   HEAP32[$85>>2] = $83;
   $0 = 0;
   $86 = $0;
   STACKTOP = sp;return ($86|0);
  }
 } while(0);
 while(1) {
  $38 = $1;
  $39 = (($38) + 12|0);
  $40 = HEAP32[$39>>2]|0;
  $yypos1295 = $40;
  $41 = $1;
  $42 = (($41) + 44|0);
  $43 = HEAP32[$42>>2]|0;
  $yythunkpos1295 = $43;
  $44 = $1;
  $45 = (($44) + 12|0);
  $46 = HEAP32[$45>>2]|0;
  $yypos1298 = $46;
  $47 = $1;
  $48 = (($47) + 44|0);
  $49 = HEAP32[$48>>2]|0;
  $yythunkpos1298 = $49;
  $50 = $1;
  $51 = (_yy_AlphanumericAscii($50)|0);
  $52 = ($51|0)!=(0);
  if ($52) {
  } else {
   $53 = $yypos1298;
   $54 = $1;
   $55 = (($54) + 12|0);
   HEAP32[$55>>2] = $53;
   $56 = $yythunkpos1298;
   $57 = $1;
   $58 = (($57) + 44|0);
   HEAP32[$58>>2] = $56;
   $59 = $1;
   $60 = (_yymatchChar($59,46)|0);
   $61 = ($60|0)!=(0);
   if (!($61)) {
    break;
   }
  }
 }
 $62 = $yypos1295;
 $63 = $1;
 $64 = (($63) + 12|0);
 HEAP32[$64>>2] = $62;
 $65 = $yythunkpos1295;
 $66 = $1;
 $67 = (($66) + 44|0);
 HEAP32[$67>>2] = $65;
 $68 = $1;
 $69 = $1;
 $70 = (($69) + 28|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = $1;
 $73 = (($72) + 32|0);
 $74 = HEAP32[$73>>2]|0;
 (_yyText($68,$71,$74)|0);
 $75 = $1;
 $76 = (($75) + 12|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = $1;
 $79 = (($78) + 32|0);
 HEAP32[$79>>2] = $77;
 $0 = 1;
 $86 = $0;
 STACKTOP = sp;return ($86|0);
}
function _yy_1_AttrValue($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 $14 = $0;
 $15 = (($14) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP16[$16>>1] = 67;
 STACKTOP = sp;return;
}
function _yy_1_ListBlock($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_ListBlockLine($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos1056 = 0, $yypos1057 = 0, $yypos1058 = 0;
 var $yypos1059 = 0, $yypos1061 = 0, $yypos1065 = 0, $yypos1066 = 0, $yypos1067 = 0, $yythunkpos0 = 0, $yythunkpos1056 = 0, $yythunkpos1057 = 0, $yythunkpos1058 = 0, $yythunkpos1059 = 0, $yythunkpos1061 = 0, $yythunkpos1065 = 0, $yythunkpos1066 = 0, $yythunkpos1067 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos1056 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos1056 = $13;
 $14 = $1;
 $15 = (_yy_BlankLine($14)|0);
 $16 = ($15|0)!=(0);
 L1: do {
  if ($16) {
  } else {
   $17 = $yypos1056;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos1056;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (($23) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $yypos1057 = $25;
   $26 = $1;
   $27 = (($26) + 44|0);
   $28 = HEAP32[$27>>2]|0;
   $yythunkpos1057 = $28;
   $29 = $1;
   $30 = (_yy_Heading($29)|0);
   $31 = ($30|0)!=(0);
   if ($31) {
    break;
   }
   $32 = $yypos1057;
   $33 = $1;
   $34 = (($33) + 12|0);
   HEAP32[$34>>2] = $32;
   $35 = $yythunkpos1057;
   $36 = $1;
   $37 = (($36) + 44|0);
   HEAP32[$37>>2] = $35;
   $38 = $1;
   $39 = (($38) + 12|0);
   $40 = HEAP32[$39>>2]|0;
   $yypos1058 = $40;
   $41 = $1;
   $42 = (($41) + 44|0);
   $43 = HEAP32[$42>>2]|0;
   $yythunkpos1058 = $43;
   $44 = $1;
   $45 = (($44) + 12|0);
   $46 = HEAP32[$45>>2]|0;
   $yypos1059 = $46;
   $47 = $1;
   $48 = (($47) + 44|0);
   $49 = HEAP32[$48>>2]|0;
   $yythunkpos1059 = $49;
   $50 = $1;
   $51 = (_yy_Indent($50)|0);
   $52 = ($51|0)!=(0);
   if ($52) {
   } else {
    $53 = $yypos1059;
    $54 = $1;
    $55 = (($54) + 12|0);
    HEAP32[$55>>2] = $53;
    $56 = $yythunkpos1059;
    $57 = $1;
    $58 = (($57) + 44|0);
    HEAP32[$58>>2] = $56;
   }
   $59 = $1;
   $60 = (($59) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $yypos1061 = $61;
   $62 = $1;
   $63 = (($62) + 44|0);
   $64 = HEAP32[$63>>2]|0;
   $yythunkpos1061 = $64;
   $65 = $1;
   $66 = (_yy_Bullet($65)|0);
   $67 = ($66|0)!=(0);
   L13: do {
    if ($67) {
    } else {
     $68 = $yypos1061;
     $69 = $1;
     $70 = (($69) + 12|0);
     HEAP32[$70>>2] = $68;
     $71 = $yythunkpos1061;
     $72 = $1;
     $73 = (($72) + 44|0);
     HEAP32[$73>>2] = $71;
     $74 = $1;
     $75 = (_yy_Enumerator($74)|0);
     $76 = ($75|0)!=(0);
     if ($76) {
      break;
     }
     $77 = $yypos1061;
     $78 = $1;
     $79 = (($78) + 12|0);
     HEAP32[$79>>2] = $77;
     $80 = $yythunkpos1061;
     $81 = $1;
     $82 = (($81) + 44|0);
     HEAP32[$82>>2] = $80;
     $83 = $1;
     $84 = (_yy_BulletNoSpace($83)|0);
     $85 = ($84|0)!=(0);
     do {
      if ($85) {
       $86 = $1;
       $87 = (($86) + 12|0);
       $88 = HEAP32[$87>>2]|0;
       $yypos1065 = $88;
       $89 = $1;
       $90 = (($89) + 44|0);
       $91 = HEAP32[$90>>2]|0;
       $yythunkpos1065 = $91;
       $92 = $1;
       $93 = (_yy_EmptyList($92)|0);
       $94 = ($93|0)!=(0);
       if ($94) {
        $95 = $yypos1065;
        $96 = $1;
        $97 = (($96) + 12|0);
        HEAP32[$97>>2] = $95;
        $98 = $yythunkpos1065;
        $99 = $1;
        $100 = (($99) + 44|0);
        HEAP32[$100>>2] = $98;
        break L13;
       } else {
        break;
       }
      } else {
      }
     } while(0);
     $101 = $yypos1061;
     $102 = $1;
     $103 = (($102) + 12|0);
     HEAP32[$103>>2] = $101;
     $104 = $yythunkpos1061;
     $105 = $1;
     $106 = (($105) + 44|0);
     HEAP32[$106>>2] = $104;
     $107 = $1;
     $108 = (_yy_EnumeratorNoSpace($107)|0);
     $109 = ($108|0)!=(0);
     do {
      if ($109) {
       $110 = $1;
       $111 = (($110) + 12|0);
       $112 = HEAP32[$111>>2]|0;
       $yypos1066 = $112;
       $113 = $1;
       $114 = (($113) + 44|0);
       $115 = HEAP32[$114>>2]|0;
       $yythunkpos1066 = $115;
       $116 = $1;
       $117 = (_yy_EmptyList($116)|0);
       $118 = ($117|0)!=(0);
       if ($118) {
        $119 = $yypos1066;
        $120 = $1;
        $121 = (($120) + 12|0);
        HEAP32[$121>>2] = $119;
        $122 = $yythunkpos1066;
        $123 = $1;
        $124 = (($123) + 44|0);
        HEAP32[$124>>2] = $122;
        break L13;
       } else {
        break;
       }
      } else {
      }
     } while(0);
     $125 = $yypos1058;
     $126 = $1;
     $127 = (($126) + 12|0);
     HEAP32[$127>>2] = $125;
     $128 = $yythunkpos1058;
     $129 = $1;
     $130 = (($129) + 44|0);
     HEAP32[$130>>2] = $128;
     $131 = $1;
     $132 = (($131) + 12|0);
     $133 = HEAP32[$132>>2]|0;
     $yypos1067 = $133;
     $134 = $1;
     $135 = (($134) + 44|0);
     $136 = HEAP32[$135>>2]|0;
     $yythunkpos1067 = $136;
     $137 = $1;
     $138 = (_yy_HorizontalRule($137)|0);
     $139 = ($138|0)!=(0);
     if ($139) {
      break L1;
     }
     $140 = $yypos1067;
     $141 = $1;
     $142 = (($141) + 12|0);
     HEAP32[$142>>2] = $140;
     $143 = $yythunkpos1067;
     $144 = $1;
     $145 = (($144) + 44|0);
     HEAP32[$145>>2] = $143;
     $146 = $1;
     $147 = (_yy_OptionallyIndentedLine($146)|0);
     $148 = ($147|0)!=(0);
     if (!($148)) {
      break L1;
     }
     $0 = 1;
     $155 = $0;
     STACKTOP = sp;return ($155|0);
    }
   } while(0);
  }
 } while(0);
 $149 = $yypos0;
 $150 = $1;
 $151 = (($150) + 12|0);
 HEAP32[$151>>2] = $149;
 $152 = $yythunkpos0;
 $153 = $1;
 $154 = (($153) + 44|0);
 HEAP32[$154>>2] = $152;
 $0 = 0;
 $155 = $0;
 STACKTOP = sp;return ($155|0);
}
function _yy_2_ListBlock($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_3_ListBlock($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_mk_str_from_list($9,0)|0);
 $11 = $0;
 $12 = (($11) + 48|0);
 HEAP32[$12>>2] = $10;
 STACKTOP = sp;return;
}
function _yy_1_ListContinuationBlock($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = (_strlen(($5|0))|0);
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = $3;
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  $11 = (($10) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_mk_pos_str(41248,$9,$12)|0);
  $14 = $0;
  $15 = (($14) + 52|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + -4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_cons($13,$18)|0);
  $20 = $0;
  $21 = (($20) + 52|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + -4|0);
  HEAP32[$23>>2] = $19;
  STACKTOP = sp;return;
 } else {
  $24 = $1;
  $25 = $3;
  $26 = HEAP32[$25>>2]|0;
  $27 = $3;
  $28 = (($27) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (_mk_pos_str($24,$26,$29)|0);
  $31 = $0;
  $32 = (($31) + 52|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + -4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (_cons($30,$35)|0);
  $37 = $0;
  $38 = (($37) + 52|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + -4|0);
  HEAP32[$40>>2] = $36;
  STACKTOP = sp;return;
 }
}
function _yy_2_ListContinuationBlock($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_3_ListContinuationBlock($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_mk_str_from_list($9,0)|0);
 $11 = $0;
 $12 = (($11) + 48|0);
 HEAP32[$12>>2] = $10;
 STACKTOP = sp;return;
}
function _yy_ExtendedCell($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $yypos0 = 0, $yypos255 = 0, $yypos258 = 0, $yythunkpos0 = 0, $yythunkpos255 = 0, $yythunkpos258 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos255 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos255 = $13;
 $14 = $1;
 $15 = (_yy_EmptyCell($14)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
   label = 7;
  } else {
   $17 = $yypos255;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos255;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yy_FullCell($23)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    label = 7;
    break;
   } else {
    break;
   }
  }
 } while(0);
 do {
  if ((label|0) == 7) {
   $26 = $1;
   $27 = $1;
   $28 = (($27) + 28|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $1;
   $31 = (($30) + 32|0);
   $32 = HEAP32[$31>>2]|0;
   (_yyText($26,$29,$32)|0);
   $33 = $1;
   $34 = (($33) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $1;
   $37 = (($36) + 28|0);
   HEAP32[$37>>2] = $35;
   $38 = $1;
   $39 = (_yy_CellDivider($38)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   while(1) {
    $41 = $1;
    $42 = (($41) + 12|0);
    $43 = HEAP32[$42>>2]|0;
    $yypos258 = $43;
    $44 = $1;
    $45 = (($44) + 44|0);
    $46 = HEAP32[$45>>2]|0;
    $yythunkpos258 = $46;
    $47 = $1;
    $48 = (_yy_CellDivider($47)|0);
    $49 = ($48|0)!=(0);
    if (!($49)) {
     break;
    }
   }
   $50 = $yypos258;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos258;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = $1;
   $58 = (($57) + 28|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $1;
   $61 = (($60) + 32|0);
   $62 = HEAP32[$61>>2]|0;
   (_yyText($56,$59,$62)|0);
   $63 = $1;
   $64 = (($63) + 12|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $1;
   $67 = (($66) + 32|0);
   HEAP32[$67>>2] = $65;
   $68 = $1;
   $69 = $1;
   $70 = (($69) + 28|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $1;
   $73 = (($72) + 32|0);
   $74 = HEAP32[$73>>2]|0;
   _yyDo($68,238,$71,$74,47536);
   $0 = 1;
   $81 = $0;
   STACKTOP = sp;return ($81|0);
  }
 } while(0);
 $75 = $yypos0;
 $76 = $1;
 $77 = (($76) + 12|0);
 HEAP32[$77>>2] = $75;
 $78 = $yythunkpos0;
 $79 = $1;
 $80 = (($79) + 44|0);
 HEAP32[$80>>2] = $78;
 $0 = 0;
 $81 = $0;
 STACKTOP = sp;return ($81|0);
}
function _yy_EmptyCell($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yythunkpos0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = $1;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($12) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 (_yyText($8,$11,$14)|0);
 $15 = $1;
 $16 = (($15) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = (($18) + 28|0);
 HEAP32[$19>>2] = $17;
 $20 = $1;
 $21 = (_yy_Sp($20)|0);
 $22 = ($21|0)!=(0);
 do {
  if ($22) {
   $23 = $1;
   $24 = $1;
   $25 = (($24) + 28|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $1;
   $28 = (($27) + 32|0);
   $29 = HEAP32[$28>>2]|0;
   (_yyText($23,$26,$29)|0);
   $30 = $1;
   $31 = (($30) + 12|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $1;
   $34 = (($33) + 32|0);
   HEAP32[$34>>2] = $32;
   $35 = $1;
   $36 = (_yy_CellDivider($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $1;
   $39 = $1;
   $40 = (($39) + 28|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $1;
   $43 = (($42) + 32|0);
   $44 = HEAP32[$43>>2]|0;
   _yyDo($38,239,$41,$44,47520);
   $0 = 1;
   $51 = $0;
   STACKTOP = sp;return ($51|0);
  } else {
  }
 } while(0);
 $45 = $yypos0;
 $46 = $1;
 $47 = (($46) + 12|0);
 HEAP32[$47>>2] = $45;
 $48 = $yythunkpos0;
 $49 = $1;
 $50 = (($49) + 44|0);
 HEAP32[$50>>2] = $48;
 $0 = 0;
 $51 = $0;
 STACKTOP = sp;return ($51|0);
}
function _yy_FullCell($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos240 = 0, $yypos241 = 0, $yypos242 = 0, $yypos243 = 0;
 var $yypos244 = 0, $yypos245 = 0, $yypos246 = 0, $yypos247 = 0, $yypos248 = 0, $yypos249 = 0, $yypos250 = 0, $yypos251 = 0, $yythunkpos0 = 0, $yythunkpos240 = 0, $yythunkpos241 = 0, $yythunkpos242 = 0, $yythunkpos243 = 0, $yythunkpos244 = 0, $yythunkpos245 = 0, $yythunkpos246 = 0, $yythunkpos247 = 0, $yythunkpos248 = 0, $yythunkpos249 = 0, $yythunkpos250 = 0;
 var $yythunkpos251 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 $9 = $1;
 $10 = (_yy_Sp($9)|0);
 $11 = ($10|0)!=(0);
 L1: do {
  if ($11) {
   $12 = $1;
   $13 = (_yy_StartList($12)|0);
   $14 = ($13|0)!=(0);
   if (!($14)) {
    break;
   }
   $15 = $1;
   _yyDo($15,8,-1,0,41336);
   $16 = $1;
   $17 = (($16) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $yypos241 = $18;
   $19 = $1;
   $20 = (($19) + 44|0);
   $21 = HEAP32[$20>>2]|0;
   $yythunkpos241 = $21;
   $22 = $1;
   $23 = (_yy_Newline($22)|0);
   $24 = ($23|0)!=(0);
   if ($24) {
    break;
   }
   $25 = $yypos241;
   $26 = $1;
   $27 = (($26) + 12|0);
   HEAP32[$27>>2] = $25;
   $28 = $yythunkpos241;
   $29 = $1;
   $30 = (($29) + 44|0);
   HEAP32[$30>>2] = $28;
   $31 = $1;
   $32 = (($31) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $yypos242 = $33;
   $34 = $1;
   $35 = (($34) + 44|0);
   $36 = HEAP32[$35>>2]|0;
   $yythunkpos242 = $36;
   $37 = $1;
   $38 = (_yy_Endline($37)|0);
   $39 = ($38|0)!=(0);
   if ($39) {
    break;
   }
   $40 = $yypos242;
   $41 = $1;
   $42 = (($41) + 12|0);
   HEAP32[$42>>2] = $40;
   $43 = $yythunkpos242;
   $44 = $1;
   $45 = (($44) + 44|0);
   HEAP32[$45>>2] = $43;
   $46 = $1;
   $47 = (($46) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $yypos243 = $48;
   $49 = $1;
   $50 = (($49) + 44|0);
   $51 = HEAP32[$50>>2]|0;
   $yythunkpos243 = $51;
   $52 = $1;
   $53 = (_yy_CellDivider($52)|0);
   $54 = ($53|0)!=(0);
   if ($54) {
    break;
   }
   $55 = $yypos243;
   $56 = $1;
   $57 = (($56) + 12|0);
   HEAP32[$57>>2] = $55;
   $58 = $yythunkpos243;
   $59 = $1;
   $60 = (($59) + 44|0);
   HEAP32[$60>>2] = $58;
   $61 = $1;
   $62 = (($61) + 12|0);
   $63 = HEAP32[$62>>2]|0;
   $yypos244 = $63;
   $64 = $1;
   $65 = (($64) + 44|0);
   $66 = HEAP32[$65>>2]|0;
   $yythunkpos244 = $66;
   $67 = $1;
   $68 = (_yy_Sp($67)|0);
   $69 = ($68|0)!=(0);
   do {
    if ($69) {
     $70 = $1;
     $71 = (($70) + 12|0);
     $72 = HEAP32[$71>>2]|0;
     $yypos245 = $72;
     $73 = $1;
     $74 = (($73) + 44|0);
     $75 = HEAP32[$74>>2]|0;
     $yythunkpos245 = $75;
     $76 = $1;
     $77 = (_yy_CellDivider($76)|0);
     $78 = ($77|0)!=(0);
     if ($78) {
      $79 = $yypos245;
      $80 = $1;
      $81 = (($80) + 12|0);
      HEAP32[$81>>2] = $79;
      $82 = $yythunkpos245;
      $83 = $1;
      $84 = (($83) + 44|0);
      HEAP32[$84>>2] = $82;
      break L1;
     } else {
      break;
     }
    } else {
    }
   } while(0);
   $85 = $yypos244;
   $86 = $1;
   $87 = (($86) + 12|0);
   HEAP32[$87>>2] = $85;
   $88 = $yythunkpos244;
   $89 = $1;
   $90 = (($89) + 44|0);
   HEAP32[$90>>2] = $88;
   $91 = $1;
   $92 = (_yy_Inline($91)|0);
   $93 = ($92|0)!=(0);
   if (!($93)) {
    break;
   }
   $94 = $1;
   $95 = $1;
   $96 = (($95) + 28|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = $1;
   $99 = (($98) + 32|0);
   $100 = HEAP32[$99>>2]|0;
   _yyDo($94,240,$97,$100,47488);
   while(1) {
    $101 = $1;
    $102 = (($101) + 12|0);
    $103 = HEAP32[$102>>2]|0;
    $yypos240 = $103;
    $104 = $1;
    $105 = (($104) + 44|0);
    $106 = HEAP32[$105>>2]|0;
    $yythunkpos240 = $106;
    $107 = $1;
    $108 = (($107) + 12|0);
    $109 = HEAP32[$108>>2]|0;
    $yypos246 = $109;
    $110 = $1;
    $111 = (($110) + 44|0);
    $112 = HEAP32[$111>>2]|0;
    $yythunkpos246 = $112;
    $113 = $1;
    $114 = (_yy_Newline($113)|0);
    $115 = ($114|0)!=(0);
    if ($115) {
     label = 24;
     break;
    }
    $116 = $yypos246;
    $117 = $1;
    $118 = (($117) + 12|0);
    HEAP32[$118>>2] = $116;
    $119 = $yythunkpos246;
    $120 = $1;
    $121 = (($120) + 44|0);
    HEAP32[$121>>2] = $119;
    $122 = $1;
    $123 = (($122) + 12|0);
    $124 = HEAP32[$123>>2]|0;
    $yypos247 = $124;
    $125 = $1;
    $126 = (($125) + 44|0);
    $127 = HEAP32[$126>>2]|0;
    $yythunkpos247 = $127;
    $128 = $1;
    $129 = (_yy_Endline($128)|0);
    $130 = ($129|0)!=(0);
    if ($130) {
     label = 27;
     break;
    }
    $131 = $yypos247;
    $132 = $1;
    $133 = (($132) + 12|0);
    HEAP32[$133>>2] = $131;
    $134 = $yythunkpos247;
    $135 = $1;
    $136 = (($135) + 44|0);
    HEAP32[$136>>2] = $134;
    $137 = $1;
    $138 = (($137) + 12|0);
    $139 = HEAP32[$138>>2]|0;
    $yypos248 = $139;
    $140 = $1;
    $141 = (($140) + 44|0);
    $142 = HEAP32[$141>>2]|0;
    $yythunkpos248 = $142;
    $143 = $1;
    $144 = (_yy_CellDivider($143)|0);
    $145 = ($144|0)!=(0);
    if ($145) {
     label = 30;
     break;
    }
    $146 = $yypos248;
    $147 = $1;
    $148 = (($147) + 12|0);
    HEAP32[$148>>2] = $146;
    $149 = $yythunkpos248;
    $150 = $1;
    $151 = (($150) + 44|0);
    HEAP32[$151>>2] = $149;
    $152 = $1;
    $153 = (($152) + 12|0);
    $154 = HEAP32[$153>>2]|0;
    $yypos249 = $154;
    $155 = $1;
    $156 = (($155) + 44|0);
    $157 = HEAP32[$156>>2]|0;
    $yythunkpos249 = $157;
    $158 = $1;
    $159 = (_yy_Sp($158)|0);
    $160 = ($159|0)!=(0);
    if ($160) {
     $161 = $1;
     $162 = (($161) + 12|0);
     $163 = HEAP32[$162>>2]|0;
     $yypos250 = $163;
     $164 = $1;
     $165 = (($164) + 44|0);
     $166 = HEAP32[$165>>2]|0;
     $yythunkpos250 = $166;
     $167 = $1;
     $168 = (_yy_CellDivider($167)|0);
     $169 = ($168|0)!=(0);
     if ($169) {
      label = 35;
      break;
     }
    } else {
    }
    $176 = $yypos249;
    $177 = $1;
    $178 = (($177) + 12|0);
    HEAP32[$178>>2] = $176;
    $179 = $yythunkpos249;
    $180 = $1;
    $181 = (($180) + 44|0);
    HEAP32[$181>>2] = $179;
    $182 = $1;
    $183 = (_yy_Inline($182)|0);
    $184 = ($183|0)!=(0);
    if (!($184)) {
     label = 37;
     break;
    }
    $185 = $1;
    $186 = $1;
    $187 = (($186) + 28|0);
    $188 = HEAP32[$187>>2]|0;
    $189 = $1;
    $190 = (($189) + 32|0);
    $191 = HEAP32[$190>>2]|0;
    _yyDo($185,240,$188,$191,47488);
   }
   if ((label|0) == 24) {
   }
   else if ((label|0) == 27) {
   }
   else if ((label|0) == 30) {
   }
   else if ((label|0) == 35) {
    $170 = $yypos250;
    $171 = $1;
    $172 = (($171) + 12|0);
    HEAP32[$172>>2] = $170;
    $173 = $yythunkpos250;
    $174 = $1;
    $175 = (($174) + 44|0);
    HEAP32[$175>>2] = $173;
   }
   else if ((label|0) == 37) {
   }
   $192 = $yypos240;
   $193 = $1;
   $194 = (($193) + 12|0);
   HEAP32[$194>>2] = $192;
   $195 = $yythunkpos240;
   $196 = $1;
   $197 = (($196) + 44|0);
   HEAP32[$197>>2] = $195;
   $198 = $1;
   $199 = $1;
   $200 = (($199) + 28|0);
   $201 = HEAP32[$200>>2]|0;
   $202 = $1;
   $203 = (($202) + 32|0);
   $204 = HEAP32[$203>>2]|0;
   (_yyText($198,$201,$204)|0);
   $205 = $1;
   $206 = (($205) + 12|0);
   $207 = HEAP32[$206>>2]|0;
   $208 = $1;
   $209 = (($208) + 28|0);
   HEAP32[$209>>2] = $207;
   $210 = $1;
   $211 = (_yy_Sp($210)|0);
   $212 = ($211|0)!=(0);
   if (!($212)) {
    break;
   }
   $213 = $1;
   $214 = $1;
   $215 = (($214) + 28|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = $1;
   $218 = (($217) + 32|0);
   $219 = HEAP32[$218>>2]|0;
   (_yyText($213,$216,$219)|0);
   $220 = $1;
   $221 = (($220) + 12|0);
   $222 = HEAP32[$221>>2]|0;
   $223 = $1;
   $224 = (($223) + 32|0);
   HEAP32[$224>>2] = $222;
   $225 = $1;
   $226 = (($225) + 12|0);
   $227 = HEAP32[$226>>2]|0;
   $yypos251 = $227;
   $228 = $1;
   $229 = (($228) + 44|0);
   $230 = HEAP32[$229>>2]|0;
   $yythunkpos251 = $230;
   $231 = $1;
   $232 = (_yy_CellDivider($231)|0);
   $233 = ($232|0)!=(0);
   if ($233) {
   } else {
    $234 = $yypos251;
    $235 = $1;
    $236 = (($235) + 12|0);
    HEAP32[$236>>2] = $234;
    $237 = $yythunkpos251;
    $238 = $1;
    $239 = (($238) + 44|0);
    HEAP32[$239>>2] = $237;
   }
   $240 = $1;
   $241 = $1;
   $242 = (($241) + 28|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = $1;
   $245 = (($244) + 32|0);
   $246 = HEAP32[$245>>2]|0;
   _yyDo($240,241,$243,$246,47504);
   $247 = $1;
   _yyDo($247,12,1,0,41392);
   $0 = 1;
   $254 = $0;
   STACKTOP = sp;return ($254|0);
  } else {
  }
 } while(0);
 $248 = $yypos0;
 $249 = $1;
 $250 = (($249) + 12|0);
 HEAP32[$250>>2] = $248;
 $251 = $yythunkpos0;
 $252 = $1;
 $253 = (($252) + 44|0);
 HEAP32[$253>>2] = $251;
 $0 = 0;
 $254 = $0;
 STACKTOP = sp;return ($254|0);
}
function _yy_1_LeftAlignWrap($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = (_mk_str(47416)|0);
 $6 = $0;
 $7 = (($6) + 48|0);
 HEAP32[$7>>2] = $5;
 STACKTOP = sp;return;
}
function _yy_1_CenterAlignWrap($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = (_mk_str(47384)|0);
 $6 = $0;
 $7 = (($6) + 48|0);
 HEAP32[$7>>2] = $5;
 STACKTOP = sp;return;
}
function _yy_1_RightAlignWrap($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = (_mk_str(47352)|0);
 $6 = $0;
 $7 = (($6) + 48|0);
 HEAP32[$7>>2] = $5;
 STACKTOP = sp;return;
}
function _yy_1_LeftAlign($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = (_mk_str(47320)|0);
 $6 = $0;
 $7 = (($6) + 48|0);
 HEAP32[$7>>2] = $5;
 STACKTOP = sp;return;
}
function _yy_1_CenterAlign($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = (_mk_str(47296)|0);
 $6 = $0;
 $7 = (($6) + 48|0);
 HEAP32[$7>>2] = $5;
 STACKTOP = sp;return;
}
function _yy_1_RightAlign($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = (_mk_str(47264)|0);
 $6 = $0;
 $7 = (($6) + 48|0);
 HEAP32[$7>>2] = $5;
 STACKTOP = sp;return;
}
function _yy_1_AutoLinkUrl($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $1;
 $13 = (_mk_link($11,0,$12,0,0)|0);
 $14 = $0;
 $15 = (($14) + 48|0);
 HEAP32[$15>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_1_AutoLinkEmail($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mailto = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = (_strlen(($5|0))|0);
 $7 = (($6) + 8)|0;
 $8 = (_malloc($7)|0);
 $mailto = $8;
 $9 = $mailto;
 $10 = $1;
 HEAP32[$vararg_buffer>>2] = $10;
 (_sprintf($9,44736,$vararg_buffer)|0);
 $11 = $1;
 $12 = $3;
 $13 = HEAP32[$12>>2]|0;
 $14 = $3;
 $15 = (($14) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_mk_pos_str($11,$13,$16)|0);
 $18 = $mailto;
 $19 = (_mk_link($17,0,$18,0,0)|0);
 $20 = $0;
 $21 = (($20) + 48|0);
 HEAP32[$21>>2] = $19;
 $22 = $mailto;
 _free($22);
 STACKTOP = sp;return;
}
function _yy_Source($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $yypos0 = 0, $yypos1378 = 0, $yythunkpos0 = 0, $yythunkpos1378 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos1378 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos1378 = $13;
 $14 = $1;
 $15 = (_yymatchChar($14,60)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
   $17 = $1;
   $18 = $1;
   $19 = (($18) + 28|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $1;
   $22 = (($21) + 32|0);
   $23 = HEAP32[$22>>2]|0;
   (_yyText($17,$20,$23)|0);
   $24 = $1;
   $25 = (($24) + 12|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $1;
   $28 = (($27) + 28|0);
   HEAP32[$28>>2] = $26;
   $29 = $1;
   $30 = (_yy_SourceContents($29)|0);
   $31 = ($30|0)!=(0);
   if (!($31)) {
    label = 10;
    break;
   }
   $32 = $1;
   $33 = $1;
   $34 = (($33) + 28|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $1;
   $37 = (($36) + 32|0);
   $38 = HEAP32[$37>>2]|0;
   (_yyText($32,$35,$38)|0);
   $39 = $1;
   $40 = (($39) + 12|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $1;
   $43 = (($42) + 32|0);
   HEAP32[$43>>2] = $41;
   $44 = $1;
   $45 = (_yymatchChar($44,62)|0);
   $46 = ($45|0)!=(0);
   if ($46) {
    break;
   } else {
    label = 10;
    break;
   }
  } else {
   label = 10;
  }
 } while(0);
 do {
  if ((label|0) == 10) {
   $47 = $yypos1378;
   $48 = $1;
   $49 = (($48) + 12|0);
   HEAP32[$49>>2] = $47;
   $50 = $yythunkpos1378;
   $51 = $1;
   $52 = (($51) + 44|0);
   HEAP32[$52>>2] = $50;
   $53 = $1;
   $54 = $1;
   $55 = (($54) + 28|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $1;
   $58 = (($57) + 32|0);
   $59 = HEAP32[$58>>2]|0;
   (_yyText($53,$56,$59)|0);
   $60 = $1;
   $61 = (($60) + 12|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $1;
   $64 = (($63) + 28|0);
   HEAP32[$64>>2] = $62;
   $65 = $1;
   $66 = (_yy_SourceContents($65)|0);
   $67 = ($66|0)!=(0);
   if ($67) {
    $68 = $1;
    $69 = $1;
    $70 = (($69) + 28|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = $1;
    $73 = (($72) + 32|0);
    $74 = HEAP32[$73>>2]|0;
    (_yyText($68,$71,$74)|0);
    $75 = $1;
    $76 = (($75) + 12|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = $1;
    $79 = (($78) + 32|0);
    HEAP32[$79>>2] = $77;
    break;
   }
   $87 = $yypos0;
   $88 = $1;
   $89 = (($88) + 12|0);
   HEAP32[$89>>2] = $87;
   $90 = $yythunkpos0;
   $91 = $1;
   $92 = (($91) + 44|0);
   HEAP32[$92>>2] = $90;
   $0 = 0;
   $93 = $0;
   STACKTOP = sp;return ($93|0);
  }
 } while(0);
 $80 = $1;
 $81 = $1;
 $82 = (($81) + 28|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $1;
 $85 = (($84) + 32|0);
 $86 = HEAP32[$85>>2]|0;
 _yyDo($80,242,$83,$86,44920);
 $0 = 1;
 $93 = $0;
 STACKTOP = sp;return ($93|0);
}
function _yy_Title($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1374 = 0, $yythunkpos0 = 0, $yythunkpos1374 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos1374 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos1374 = $13;
 $14 = $1;
 $15 = (_yy_TitleSingle($14)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
  } else {
   $17 = $yypos1374;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos1374;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yy_TitleDouble($23)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    break;
   }
   $26 = $yypos1374;
   $27 = $1;
   $28 = (($27) + 12|0);
   HEAP32[$28>>2] = $26;
   $29 = $yythunkpos1374;
   $30 = $1;
   $31 = (($30) + 44|0);
   HEAP32[$31>>2] = $29;
   $32 = $1;
   $33 = $1;
   $34 = (($33) + 28|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $1;
   $37 = (($36) + 32|0);
   $38 = HEAP32[$37>>2]|0;
   (_yyText($32,$35,$38)|0);
   $39 = $1;
   $40 = (($39) + 12|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $1;
   $43 = (($42) + 28|0);
   HEAP32[$43>>2] = $41;
   $44 = $1;
   $45 = (_yymatchString($44,41432)|0);
   $46 = ($45|0)!=(0);
   if ($46) {
    $47 = $1;
    $48 = $1;
    $49 = (($48) + 28|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = $1;
    $52 = (($51) + 32|0);
    $53 = HEAP32[$52>>2]|0;
    (_yyText($47,$50,$53)|0);
    $54 = $1;
    $55 = (($54) + 12|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = $1;
    $58 = (($57) + 32|0);
    HEAP32[$58>>2] = $56;
    break;
   }
   $66 = $yypos0;
   $67 = $1;
   $68 = (($67) + 12|0);
   HEAP32[$68>>2] = $66;
   $69 = $yythunkpos0;
   $70 = $1;
   $71 = (($70) + 44|0);
   HEAP32[$71>>2] = $69;
   $0 = 0;
   $72 = $0;
   STACKTOP = sp;return ($72|0);
  }
 } while(0);
 $59 = $1;
 $60 = $1;
 $61 = (($60) + 28|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $1;
 $64 = (($63) + 32|0);
 $65 = HEAP32[$64>>2]|0;
 _yyDo($59,243,$62,$65,44904);
 $0 = 1;
 $72 = $0;
 STACKTOP = sp;return ($72|0);
}
function _yy_1_ExplicitLink($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = (($10) + 52|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + -8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $0;
 $18 = (($17) + 52|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + -4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (_mk_link($9,0,$16,$23,0)|0);
 $25 = $0;
 $26 = (($25) + 48|0);
 HEAP32[$26>>2] = $24;
 $27 = $0;
 $28 = (($27) + 52|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + -8|0);
 $31 = HEAP32[$30>>2]|0;
 _free_node_tree($31);
 $32 = $0;
 $33 = (($32) + 52|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) + -4|0);
 $36 = HEAP32[$35>>2]|0;
 _free_node_tree($36);
 STACKTOP = sp;return;
}
function _yy_ReferenceLinkDouble($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1409 = 0, $yythunkpos0 = 0, $yythunkpos1409 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,2,0,41328);
 $9 = $1;
 $10 = (_yy_Label($9)|0);
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $1;
   _yyDo($12,8,-2,0,41336);
   $13 = $1;
   $14 = $1;
   $15 = (($14) + 28|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $1;
   $18 = (($17) + 32|0);
   $19 = HEAP32[$18>>2]|0;
   (_yyText($13,$16,$19)|0);
   $20 = $1;
   $21 = (($20) + 12|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $1;
   $24 = (($23) + 28|0);
   HEAP32[$24>>2] = $22;
   $25 = $1;
   $26 = (_yy_Spnl($25)|0);
   $27 = ($26|0)!=(0);
   if (!($27)) {
    break;
   }
   $28 = $1;
   $29 = $1;
   $30 = (($29) + 28|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $1;
   $33 = (($32) + 32|0);
   $34 = HEAP32[$33>>2]|0;
   (_yyText($28,$31,$34)|0);
   $35 = $1;
   $36 = (($35) + 12|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $1;
   $39 = (($38) + 32|0);
   HEAP32[$39>>2] = $37;
   $40 = $1;
   $41 = (($40) + 12|0);
   $42 = HEAP32[$41>>2]|0;
   $yypos1409 = $42;
   $43 = $1;
   $44 = (($43) + 44|0);
   $45 = HEAP32[$44>>2]|0;
   $yythunkpos1409 = $45;
   $46 = $1;
   $47 = (_yymatchString($46,44776)|0);
   $48 = ($47|0)!=(0);
   if ($48) {
    break;
   }
   $49 = $yypos1409;
   $50 = $1;
   $51 = (($50) + 12|0);
   HEAP32[$51>>2] = $49;
   $52 = $yythunkpos1409;
   $53 = $1;
   $54 = (($53) + 44|0);
   HEAP32[$54>>2] = $52;
   $55 = $1;
   $56 = (_yy_Label($55)|0);
   $57 = ($56|0)!=(0);
   if (!($57)) {
    break;
   }
   $58 = $1;
   _yyDo($58,8,-1,0,41336);
   $59 = $1;
   $60 = $1;
   $61 = (($60) + 28|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $1;
   $64 = (($63) + 32|0);
   $65 = HEAP32[$64>>2]|0;
   _yyDo($59,244,$62,$65,44848);
   $66 = $1;
   _yyDo($66,12,2,0,41392);
   $0 = 1;
   $73 = $0;
   STACKTOP = sp;return ($73|0);
  } else {
  }
 } while(0);
 $67 = $yypos0;
 $68 = $1;
 $69 = (($68) + 12|0);
 HEAP32[$69>>2] = $67;
 $70 = $yythunkpos0;
 $71 = $1;
 $72 = (($71) + 44|0);
 HEAP32[$72>>2] = $70;
 $0 = 0;
 $73 = $0;
 STACKTOP = sp;return ($73|0);
}
function _yy_ReferenceLinkSingle($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1406 = 0, $yythunkpos0 = 0, $yythunkpos1406 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 _yyDo($8,7,1,0,41328);
 $9 = $1;
 $10 = (_yy_Label($9)|0);
 $11 = ($10|0)!=(0);
 if (!($11)) {
  $63 = $yypos0;
  $64 = $1;
  $65 = (($64) + 12|0);
  HEAP32[$65>>2] = $63;
  $66 = $yythunkpos0;
  $67 = $1;
  $68 = (($67) + 44|0);
  HEAP32[$68>>2] = $66;
  $0 = 0;
  $69 = $0;
  STACKTOP = sp;return ($69|0);
 }
 $12 = $1;
 _yyDo($12,8,-1,0,41336);
 $13 = $1;
 $14 = $1;
 $15 = (($14) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $1;
 $18 = (($17) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 (_yyText($13,$16,$19)|0);
 $20 = $1;
 $21 = (($20) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $1;
 $24 = (($23) + 28|0);
 HEAP32[$24>>2] = $22;
 $25 = $1;
 $26 = (($25) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 $yypos1406 = $27;
 $28 = $1;
 $29 = (($28) + 44|0);
 $30 = HEAP32[$29>>2]|0;
 $yythunkpos1406 = $30;
 $31 = $1;
 $32 = (_yy_Spnl($31)|0);
 $33 = ($32|0)!=(0);
 do {
  if ($33) {
   $34 = $1;
   $35 = (_yymatchString($34,44776)|0);
   $36 = ($35|0)!=(0);
   if ($36) {
    break;
   } else {
    label = 9;
    break;
   }
  } else {
   label = 9;
  }
 } while(0);
 if ((label|0) == 9) {
  $37 = $yypos1406;
  $38 = $1;
  $39 = (($38) + 12|0);
  HEAP32[$39>>2] = $37;
  $40 = $yythunkpos1406;
  $41 = $1;
  $42 = (($41) + 44|0);
  HEAP32[$42>>2] = $40;
 }
 $43 = $1;
 $44 = $1;
 $45 = (($44) + 28|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $1;
 $48 = (($47) + 32|0);
 $49 = HEAP32[$48>>2]|0;
 (_yyText($43,$46,$49)|0);
 $50 = $1;
 $51 = (($50) + 12|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $1;
 $54 = (($53) + 32|0);
 HEAP32[$54>>2] = $52;
 $55 = $1;
 $56 = $1;
 $57 = (($56) + 28|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $1;
 $60 = (($59) + 32|0);
 $61 = HEAP32[$60>>2]|0;
 _yyDo($55,245,$58,$61,44784);
 $62 = $1;
 _yyDo($62,12,1,0,41392);
 $0 = 1;
 $69 = $0;
 STACKTOP = sp;return ($69|0);
}
function _yy_1_OPMLSetextHeading1($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 $14 = $0;
 $15 = (($14) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP16[$16>>1] = 10;
 STACKTOP = sp;return;
}
function _yy_1_OPMLSetextHeading2($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 $14 = $0;
 $15 = (($14) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP16[$16>>1] = 11;
 STACKTOP = sp;return;
}
function _yy_SingleDollarMathStart($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1548 = 0, $yypos1549 = 0;
 var $yythunkpos0 = 0, $yythunkpos1548 = 0, $yythunkpos1549 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,36)|0);
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $1;
  $12 = (($11) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $yypos1548 = $13;
  $14 = $1;
  $15 = (($14) + 44|0);
  $16 = HEAP32[$15>>2]|0;
  $yythunkpos1548 = $16;
  $17 = $1;
  $18 = (($17) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $yypos1549 = $19;
  $20 = $1;
  $21 = (($20) + 44|0);
  $22 = HEAP32[$21>>2]|0;
  $yythunkpos1549 = $22;
  $23 = $1;
  $24 = (_yy_Spacechar($23)|0);
  $25 = ($24|0)!=(0);
  do {
   if ($25) {
   } else {
    $26 = $yypos1549;
    $27 = $1;
    $28 = (($27) + 12|0);
    HEAP32[$28>>2] = $26;
    $29 = $yythunkpos1549;
    $30 = $1;
    $31 = (($30) + 44|0);
    HEAP32[$31>>2] = $29;
    $32 = $1;
    $33 = (_yy_Newline($32)|0);
    $34 = ($33|0)!=(0);
    if ($34) {
     break;
    }
    $35 = $yypos1549;
    $36 = $1;
    $37 = (($36) + 12|0);
    HEAP32[$37>>2] = $35;
    $38 = $yythunkpos1549;
    $39 = $1;
    $40 = (($39) + 44|0);
    HEAP32[$40>>2] = $38;
    $41 = $1;
    $42 = (_yymatchChar($41,36)|0);
    $43 = ($42|0)!=(0);
    if ($43) {
     break;
    }
    $44 = $yypos1548;
    $45 = $1;
    $46 = (($45) + 12|0);
    HEAP32[$46>>2] = $44;
    $47 = $yythunkpos1548;
    $48 = $1;
    $49 = (($48) + 44|0);
    HEAP32[$49>>2] = $47;
    $0 = 1;
    $56 = $0;
    STACKTOP = sp;return ($56|0);
   }
  } while(0);
 } else {
 }
 $50 = $yypos0;
 $51 = $1;
 $52 = (($51) + 12|0);
 HEAP32[$52>>2] = $50;
 $53 = $yythunkpos0;
 $54 = $1;
 $55 = (($54) + 44|0);
 HEAP32[$55>>2] = $53;
 $0 = 0;
 $56 = $0;
 STACKTOP = sp;return ($56|0);
}
function _yy_SingleDollarMathEnd($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1544 = 0, $yypos1545 = 0, $yypos1546 = 0, $yythunkpos0 = 0, $yythunkpos1544 = 0, $yythunkpos1545 = 0, $yythunkpos1546 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos1544 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos1544 = $13;
 $14 = $1;
 $15 = (_yymatchChar($14,92)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
  } else {
   $17 = $yypos1544;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos1544;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (($23) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $yypos1545 = $25;
   $26 = $1;
   $27 = (($26) + 44|0);
   $28 = HEAP32[$27>>2]|0;
   $yythunkpos1545 = $28;
   $29 = $1;
   $30 = (_yymatchChar($29,36)|0);
   $31 = ($30|0)!=(0);
   if ($31) {
    break;
   }
   $32 = $yypos1545;
   $33 = $1;
   $34 = (($33) + 12|0);
   HEAP32[$34>>2] = $32;
   $35 = $yythunkpos1545;
   $36 = $1;
   $37 = (($36) + 44|0);
   HEAP32[$37>>2] = $35;
   $38 = $1;
   $39 = (_yy_Nonspacechar($38)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $41 = $1;
   $42 = (_yymatchChar($41,36)|0);
   $43 = ($42|0)!=(0);
   if (!($43)) {
    break;
   }
   $44 = $1;
   $45 = (($44) + 12|0);
   $46 = HEAP32[$45>>2]|0;
   $yypos1546 = $46;
   $47 = $1;
   $48 = (($47) + 44|0);
   $49 = HEAP32[$48>>2]|0;
   $yythunkpos1546 = $49;
   $50 = $1;
   $51 = (_yy_NonPunctuation($50)|0);
   $52 = ($51|0)!=(0);
   if ($52) {
    break;
   }
   $53 = $yypos1546;
   $54 = $1;
   $55 = (($54) + 12|0);
   HEAP32[$55>>2] = $53;
   $56 = $yythunkpos1546;
   $57 = $1;
   $58 = (($57) + 44|0);
   HEAP32[$58>>2] = $56;
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  }
 } while(0);
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_1_SingleDollarMath($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 $14 = $0;
 $15 = (($14) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP16[$16>>1] = 20;
 STACKTOP = sp;return;
}
function _yy_DoubleDollarMathStart($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1535 = 0, $yypos1536 = 0, $yythunkpos0 = 0, $yythunkpos1535 = 0, $yythunkpos1536 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,36)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = (_yymatchChar($11,36)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $yypos1535 = $16;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $yythunkpos1535 = $19;
   $20 = $1;
   $21 = (($20) + 12|0);
   $22 = HEAP32[$21>>2]|0;
   $yypos1536 = $22;
   $23 = $1;
   $24 = (($23) + 44|0);
   $25 = HEAP32[$24>>2]|0;
   $yythunkpos1536 = $25;
   $26 = $1;
   $27 = (_yy_Spacechar($26)|0);
   $28 = ($27|0)!=(0);
   do {
    if ($28) {
    } else {
     $29 = $yypos1536;
     $30 = $1;
     $31 = (($30) + 12|0);
     HEAP32[$31>>2] = $29;
     $32 = $yythunkpos1536;
     $33 = $1;
     $34 = (($33) + 44|0);
     HEAP32[$34>>2] = $32;
     $35 = $1;
     $36 = (_yy_Newline($35)|0);
     $37 = ($36|0)!=(0);
     if ($37) {
      break;
     }
     $38 = $yypos1535;
     $39 = $1;
     $40 = (($39) + 12|0);
     HEAP32[$40>>2] = $38;
     $41 = $yythunkpos1535;
     $42 = $1;
     $43 = (($42) + 44|0);
     HEAP32[$43>>2] = $41;
     $0 = 1;
     $50 = $0;
     STACKTOP = sp;return ($50|0);
    }
   } while(0);
  } else {
  }
 } while(0);
 $44 = $yypos0;
 $45 = $1;
 $46 = (($45) + 12|0);
 HEAP32[$46>>2] = $44;
 $47 = $yythunkpos0;
 $48 = $1;
 $49 = (($48) + 44|0);
 HEAP32[$49>>2] = $47;
 $0 = 0;
 $50 = $0;
 STACKTOP = sp;return ($50|0);
}
function _yy_DoubleDollarMathEnd($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1532 = 0, $yypos1533 = 0, $yythunkpos0 = 0, $yythunkpos1532 = 0, $yythunkpos1533 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos1532 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos1532 = $13;
 $14 = $1;
 $15 = (_yymatchChar($14,92)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
  } else {
   $17 = $yypos1532;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos1532;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yy_Nonspacechar($23)|0);
   $25 = ($24|0)!=(0);
   if (!($25)) {
    break;
   }
   $26 = $1;
   $27 = (_yymatchChar($26,36)|0);
   $28 = ($27|0)!=(0);
   if (!($28)) {
    break;
   }
   $29 = $1;
   $30 = (_yymatchChar($29,36)|0);
   $31 = ($30|0)!=(0);
   if (!($31)) {
    break;
   }
   $32 = $1;
   $33 = (($32) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   $yypos1533 = $34;
   $35 = $1;
   $36 = (($35) + 44|0);
   $37 = HEAP32[$36>>2]|0;
   $yythunkpos1533 = $37;
   $38 = $1;
   $39 = (_yy_NonPunctuation($38)|0);
   $40 = ($39|0)!=(0);
   if ($40) {
    break;
   }
   $41 = $yypos1533;
   $42 = $1;
   $43 = (($42) + 12|0);
   HEAP32[$43>>2] = $41;
   $44 = $yythunkpos1533;
   $45 = $1;
   $46 = (($45) + 44|0);
   HEAP32[$46>>2] = $44;
   $0 = 1;
   $53 = $0;
   STACKTOP = sp;return ($53|0);
  }
 } while(0);
 $47 = $yypos0;
 $48 = $1;
 $49 = (($48) + 12|0);
 HEAP32[$49>>2] = $47;
 $50 = $yythunkpos0;
 $51 = $1;
 $52 = (($51) + 44|0);
 HEAP32[$52>>2] = $50;
 $0 = 0;
 $53 = $0;
 STACKTOP = sp;return ($53|0);
}
function _yy_1_DoubleDollarMath($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 $14 = $0;
 $15 = (($14) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP16[$16>>1] = 20;
 STACKTOP = sp;return;
}
function _yy_Punctuation($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $yypos0 = 0, $yypos2107 = 0, $yythunkpos0 = 0, $yythunkpos2107 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos2107 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos2107 = $13;
 $14 = $1;
 $15 = (_yymatchChar($14,46)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
  } else {
   $17 = $yypos2107;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos2107;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yymatchChar($23,44)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    break;
   }
   $26 = $yypos2107;
   $27 = $1;
   $28 = (($27) + 12|0);
   HEAP32[$28>>2] = $26;
   $29 = $yythunkpos2107;
   $30 = $1;
   $31 = (($30) + 44|0);
   HEAP32[$31>>2] = $29;
   $32 = $1;
   $33 = (_yymatchChar($32,63)|0);
   $34 = ($33|0)!=(0);
   if ($34) {
    break;
   }
   $35 = $yypos2107;
   $36 = $1;
   $37 = (($36) + 12|0);
   HEAP32[$37>>2] = $35;
   $38 = $yythunkpos2107;
   $39 = $1;
   $40 = (($39) + 44|0);
   HEAP32[$40>>2] = $38;
   $41 = $1;
   $42 = (_yymatchChar($41,33)|0);
   $43 = ($42|0)!=(0);
   if ($43) {
    break;
   }
   $44 = $yypos2107;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos2107;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchChar($50,59)|0);
   $52 = ($51|0)!=(0);
   if ($52) {
    break;
   }
   $53 = $yypos2107;
   $54 = $1;
   $55 = (($54) + 12|0);
   HEAP32[$55>>2] = $53;
   $56 = $yythunkpos2107;
   $57 = $1;
   $58 = (($57) + 44|0);
   HEAP32[$58>>2] = $56;
   $59 = $1;
   $60 = (_yymatchChar($59,58)|0);
   $61 = ($60|0)!=(0);
   if ($61) {
    break;
   }
   $62 = $yypos2107;
   $63 = $1;
   $64 = (($63) + 12|0);
   HEAP32[$64>>2] = $62;
   $65 = $yythunkpos2107;
   $66 = $1;
   $67 = (($66) + 44|0);
   HEAP32[$67>>2] = $65;
   $68 = $1;
   $69 = (_yymatchString($68,42992)|0);
   $70 = ($69|0)!=(0);
   if ($70) {
    break;
   }
   $71 = $yypos2107;
   $72 = $1;
   $73 = (($72) + 12|0);
   HEAP32[$73>>2] = $71;
   $74 = $yythunkpos2107;
   $75 = $1;
   $76 = (($75) + 44|0);
   HEAP32[$76>>2] = $74;
   $77 = $1;
   $78 = (_yymatchString($77,43000)|0);
   $79 = ($78|0)!=(0);
   if ($79) {
    break;
   }
   $80 = $yypos0;
   $81 = $1;
   $82 = (($81) + 12|0);
   HEAP32[$82>>2] = $80;
   $83 = $yythunkpos0;
   $84 = $1;
   $85 = (($84) + 44|0);
   HEAP32[$85>>2] = $83;
   $0 = 0;
   $86 = $0;
   STACKTOP = sp;return ($86|0);
  }
 } while(0);
 $0 = 1;
 $86 = $0;
 STACKTOP = sp;return ($86|0);
}
function _yy_Alphanumeric($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $yypos0 = 0, $yypos1926 = 0, $yythunkpos0 = 0, $yythunkpos1926 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos1926 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos1926 = $13;
 $14 = $1;
 $15 = (_yymatchClass($14,41456,43184)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
  } else {
   $17 = $yypos1926;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos1926;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yymatchString($23,43200)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    break;
   }
   $26 = $yypos1926;
   $27 = $1;
   $28 = (($27) + 12|0);
   HEAP32[$28>>2] = $26;
   $29 = $yythunkpos1926;
   $30 = $1;
   $31 = (($30) + 44|0);
   HEAP32[$31>>2] = $29;
   $32 = $1;
   $33 = (_yymatchString($32,43208)|0);
   $34 = ($33|0)!=(0);
   if ($34) {
    break;
   }
   $35 = $yypos1926;
   $36 = $1;
   $37 = (($36) + 12|0);
   HEAP32[$37>>2] = $35;
   $38 = $yythunkpos1926;
   $39 = $1;
   $40 = (($39) + 44|0);
   HEAP32[$40>>2] = $38;
   $41 = $1;
   $42 = (_yymatchString($41,43216)|0);
   $43 = ($42|0)!=(0);
   if ($43) {
    break;
   }
   $44 = $yypos1926;
   $45 = $1;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $44;
   $47 = $yythunkpos1926;
   $48 = $1;
   $49 = (($48) + 44|0);
   HEAP32[$49>>2] = $47;
   $50 = $1;
   $51 = (_yymatchString($50,43224)|0);
   $52 = ($51|0)!=(0);
   if ($52) {
    break;
   }
   $53 = $yypos1926;
   $54 = $1;
   $55 = (($54) + 12|0);
   HEAP32[$55>>2] = $53;
   $56 = $yythunkpos1926;
   $57 = $1;
   $58 = (($57) + 44|0);
   HEAP32[$58>>2] = $56;
   $59 = $1;
   $60 = (_yymatchString($59,43232)|0);
   $61 = ($60|0)!=(0);
   if ($61) {
    break;
   }
   $62 = $yypos1926;
   $63 = $1;
   $64 = (($63) + 12|0);
   HEAP32[$64>>2] = $62;
   $65 = $yythunkpos1926;
   $66 = $1;
   $67 = (($66) + 44|0);
   HEAP32[$67>>2] = $65;
   $68 = $1;
   $69 = (_yymatchString($68,43240)|0);
   $70 = ($69|0)!=(0);
   if ($70) {
    break;
   }
   $71 = $yypos1926;
   $72 = $1;
   $73 = (($72) + 12|0);
   HEAP32[$73>>2] = $71;
   $74 = $yythunkpos1926;
   $75 = $1;
   $76 = (($75) + 44|0);
   HEAP32[$76>>2] = $74;
   $77 = $1;
   $78 = (_yymatchString($77,43248)|0);
   $79 = ($78|0)!=(0);
   if ($79) {
    break;
   }
   $80 = $yypos1926;
   $81 = $1;
   $82 = (($81) + 12|0);
   HEAP32[$82>>2] = $80;
   $83 = $yythunkpos1926;
   $84 = $1;
   $85 = (($84) + 44|0);
   HEAP32[$85>>2] = $83;
   $86 = $1;
   $87 = (_yymatchString($86,43256)|0);
   $88 = ($87|0)!=(0);
   if ($88) {
    break;
   }
   $89 = $yypos1926;
   $90 = $1;
   $91 = (($90) + 12|0);
   HEAP32[$91>>2] = $89;
   $92 = $yythunkpos1926;
   $93 = $1;
   $94 = (($93) + 44|0);
   HEAP32[$94>>2] = $92;
   $95 = $1;
   $96 = (_yymatchString($95,43264)|0);
   $97 = ($96|0)!=(0);
   if ($97) {
    break;
   }
   $98 = $yypos1926;
   $99 = $1;
   $100 = (($99) + 12|0);
   HEAP32[$100>>2] = $98;
   $101 = $yythunkpos1926;
   $102 = $1;
   $103 = (($102) + 44|0);
   HEAP32[$103>>2] = $101;
   $104 = $1;
   $105 = (_yymatchString($104,43272)|0);
   $106 = ($105|0)!=(0);
   if ($106) {
    break;
   }
   $107 = $yypos1926;
   $108 = $1;
   $109 = (($108) + 12|0);
   HEAP32[$109>>2] = $107;
   $110 = $yythunkpos1926;
   $111 = $1;
   $112 = (($111) + 44|0);
   HEAP32[$112>>2] = $110;
   $113 = $1;
   $114 = (_yymatchString($113,43280)|0);
   $115 = ($114|0)!=(0);
   if ($115) {
    break;
   }
   $116 = $yypos1926;
   $117 = $1;
   $118 = (($117) + 12|0);
   HEAP32[$118>>2] = $116;
   $119 = $yythunkpos1926;
   $120 = $1;
   $121 = (($120) + 44|0);
   HEAP32[$121>>2] = $119;
   $122 = $1;
   $123 = (_yymatchString($122,43288)|0);
   $124 = ($123|0)!=(0);
   if ($124) {
    break;
   }
   $125 = $yypos1926;
   $126 = $1;
   $127 = (($126) + 12|0);
   HEAP32[$127>>2] = $125;
   $128 = $yythunkpos1926;
   $129 = $1;
   $130 = (($129) + 44|0);
   HEAP32[$130>>2] = $128;
   $131 = $1;
   $132 = (_yymatchString($131,43296)|0);
   $133 = ($132|0)!=(0);
   if ($133) {
    break;
   }
   $134 = $yypos1926;
   $135 = $1;
   $136 = (($135) + 12|0);
   HEAP32[$136>>2] = $134;
   $137 = $yythunkpos1926;
   $138 = $1;
   $139 = (($138) + 44|0);
   HEAP32[$139>>2] = $137;
   $140 = $1;
   $141 = (_yymatchString($140,43304)|0);
   $142 = ($141|0)!=(0);
   if ($142) {
    break;
   }
   $143 = $yypos1926;
   $144 = $1;
   $145 = (($144) + 12|0);
   HEAP32[$145>>2] = $143;
   $146 = $yythunkpos1926;
   $147 = $1;
   $148 = (($147) + 44|0);
   HEAP32[$148>>2] = $146;
   $149 = $1;
   $150 = (_yymatchString($149,43312)|0);
   $151 = ($150|0)!=(0);
   if ($151) {
    break;
   }
   $152 = $yypos1926;
   $153 = $1;
   $154 = (($153) + 12|0);
   HEAP32[$154>>2] = $152;
   $155 = $yythunkpos1926;
   $156 = $1;
   $157 = (($156) + 44|0);
   HEAP32[$157>>2] = $155;
   $158 = $1;
   $159 = (_yymatchString($158,43320)|0);
   $160 = ($159|0)!=(0);
   if ($160) {
    break;
   }
   $161 = $yypos1926;
   $162 = $1;
   $163 = (($162) + 12|0);
   HEAP32[$163>>2] = $161;
   $164 = $yythunkpos1926;
   $165 = $1;
   $166 = (($165) + 44|0);
   HEAP32[$166>>2] = $164;
   $167 = $1;
   $168 = (_yymatchString($167,43328)|0);
   $169 = ($168|0)!=(0);
   if ($169) {
    break;
   }
   $170 = $yypos1926;
   $171 = $1;
   $172 = (($171) + 12|0);
   HEAP32[$172>>2] = $170;
   $173 = $yythunkpos1926;
   $174 = $1;
   $175 = (($174) + 44|0);
   HEAP32[$175>>2] = $173;
   $176 = $1;
   $177 = (_yymatchString($176,43336)|0);
   $178 = ($177|0)!=(0);
   if ($178) {
    break;
   }
   $179 = $yypos1926;
   $180 = $1;
   $181 = (($180) + 12|0);
   HEAP32[$181>>2] = $179;
   $182 = $yythunkpos1926;
   $183 = $1;
   $184 = (($183) + 44|0);
   HEAP32[$184>>2] = $182;
   $185 = $1;
   $186 = (_yymatchString($185,43344)|0);
   $187 = ($186|0)!=(0);
   if ($187) {
    break;
   }
   $188 = $yypos1926;
   $189 = $1;
   $190 = (($189) + 12|0);
   HEAP32[$190>>2] = $188;
   $191 = $yythunkpos1926;
   $192 = $1;
   $193 = (($192) + 44|0);
   HEAP32[$193>>2] = $191;
   $194 = $1;
   $195 = (_yymatchString($194,43352)|0);
   $196 = ($195|0)!=(0);
   if ($196) {
    break;
   }
   $197 = $yypos1926;
   $198 = $1;
   $199 = (($198) + 12|0);
   HEAP32[$199>>2] = $197;
   $200 = $yythunkpos1926;
   $201 = $1;
   $202 = (($201) + 44|0);
   HEAP32[$202>>2] = $200;
   $203 = $1;
   $204 = (_yymatchString($203,43360)|0);
   $205 = ($204|0)!=(0);
   if ($205) {
    break;
   }
   $206 = $yypos1926;
   $207 = $1;
   $208 = (($207) + 12|0);
   HEAP32[$208>>2] = $206;
   $209 = $yythunkpos1926;
   $210 = $1;
   $211 = (($210) + 44|0);
   HEAP32[$211>>2] = $209;
   $212 = $1;
   $213 = (_yymatchString($212,43368)|0);
   $214 = ($213|0)!=(0);
   if ($214) {
    break;
   }
   $215 = $yypos1926;
   $216 = $1;
   $217 = (($216) + 12|0);
   HEAP32[$217>>2] = $215;
   $218 = $yythunkpos1926;
   $219 = $1;
   $220 = (($219) + 44|0);
   HEAP32[$220>>2] = $218;
   $221 = $1;
   $222 = (_yymatchString($221,43376)|0);
   $223 = ($222|0)!=(0);
   if ($223) {
    break;
   }
   $224 = $yypos1926;
   $225 = $1;
   $226 = (($225) + 12|0);
   HEAP32[$226>>2] = $224;
   $227 = $yythunkpos1926;
   $228 = $1;
   $229 = (($228) + 44|0);
   HEAP32[$229>>2] = $227;
   $230 = $1;
   $231 = (_yymatchString($230,43384)|0);
   $232 = ($231|0)!=(0);
   if ($232) {
    break;
   }
   $233 = $yypos1926;
   $234 = $1;
   $235 = (($234) + 12|0);
   HEAP32[$235>>2] = $233;
   $236 = $yythunkpos1926;
   $237 = $1;
   $238 = (($237) + 44|0);
   HEAP32[$238>>2] = $236;
   $239 = $1;
   $240 = (_yymatchString($239,43392)|0);
   $241 = ($240|0)!=(0);
   if ($241) {
    break;
   }
   $242 = $yypos1926;
   $243 = $1;
   $244 = (($243) + 12|0);
   HEAP32[$244>>2] = $242;
   $245 = $yythunkpos1926;
   $246 = $1;
   $247 = (($246) + 44|0);
   HEAP32[$247>>2] = $245;
   $248 = $1;
   $249 = (_yymatchString($248,43400)|0);
   $250 = ($249|0)!=(0);
   if ($250) {
    break;
   }
   $251 = $yypos1926;
   $252 = $1;
   $253 = (($252) + 12|0);
   HEAP32[$253>>2] = $251;
   $254 = $yythunkpos1926;
   $255 = $1;
   $256 = (($255) + 44|0);
   HEAP32[$256>>2] = $254;
   $257 = $1;
   $258 = (_yymatchString($257,43408)|0);
   $259 = ($258|0)!=(0);
   if ($259) {
    break;
   }
   $260 = $yypos1926;
   $261 = $1;
   $262 = (($261) + 12|0);
   HEAP32[$262>>2] = $260;
   $263 = $yythunkpos1926;
   $264 = $1;
   $265 = (($264) + 44|0);
   HEAP32[$265>>2] = $263;
   $266 = $1;
   $267 = (_yymatchString($266,43416)|0);
   $268 = ($267|0)!=(0);
   if ($268) {
    break;
   }
   $269 = $yypos1926;
   $270 = $1;
   $271 = (($270) + 12|0);
   HEAP32[$271>>2] = $269;
   $272 = $yythunkpos1926;
   $273 = $1;
   $274 = (($273) + 44|0);
   HEAP32[$274>>2] = $272;
   $275 = $1;
   $276 = (_yymatchString($275,43424)|0);
   $277 = ($276|0)!=(0);
   if ($277) {
    break;
   }
   $278 = $yypos1926;
   $279 = $1;
   $280 = (($279) + 12|0);
   HEAP32[$280>>2] = $278;
   $281 = $yythunkpos1926;
   $282 = $1;
   $283 = (($282) + 44|0);
   HEAP32[$283>>2] = $281;
   $284 = $1;
   $285 = (_yymatchString($284,43432)|0);
   $286 = ($285|0)!=(0);
   if ($286) {
    break;
   }
   $287 = $yypos1926;
   $288 = $1;
   $289 = (($288) + 12|0);
   HEAP32[$289>>2] = $287;
   $290 = $yythunkpos1926;
   $291 = $1;
   $292 = (($291) + 44|0);
   HEAP32[$292>>2] = $290;
   $293 = $1;
   $294 = (_yymatchString($293,43440)|0);
   $295 = ($294|0)!=(0);
   if ($295) {
    break;
   }
   $296 = $yypos1926;
   $297 = $1;
   $298 = (($297) + 12|0);
   HEAP32[$298>>2] = $296;
   $299 = $yythunkpos1926;
   $300 = $1;
   $301 = (($300) + 44|0);
   HEAP32[$301>>2] = $299;
   $302 = $1;
   $303 = (_yymatchString($302,43448)|0);
   $304 = ($303|0)!=(0);
   if ($304) {
    break;
   }
   $305 = $yypos1926;
   $306 = $1;
   $307 = (($306) + 12|0);
   HEAP32[$307>>2] = $305;
   $308 = $yythunkpos1926;
   $309 = $1;
   $310 = (($309) + 44|0);
   HEAP32[$310>>2] = $308;
   $311 = $1;
   $312 = (_yymatchString($311,43456)|0);
   $313 = ($312|0)!=(0);
   if ($313) {
    break;
   }
   $314 = $yypos1926;
   $315 = $1;
   $316 = (($315) + 12|0);
   HEAP32[$316>>2] = $314;
   $317 = $yythunkpos1926;
   $318 = $1;
   $319 = (($318) + 44|0);
   HEAP32[$319>>2] = $317;
   $320 = $1;
   $321 = (_yymatchString($320,43464)|0);
   $322 = ($321|0)!=(0);
   if ($322) {
    break;
   }
   $323 = $yypos1926;
   $324 = $1;
   $325 = (($324) + 12|0);
   HEAP32[$325>>2] = $323;
   $326 = $yythunkpos1926;
   $327 = $1;
   $328 = (($327) + 44|0);
   HEAP32[$328>>2] = $326;
   $329 = $1;
   $330 = (_yymatchString($329,43472)|0);
   $331 = ($330|0)!=(0);
   if ($331) {
    break;
   }
   $332 = $yypos1926;
   $333 = $1;
   $334 = (($333) + 12|0);
   HEAP32[$334>>2] = $332;
   $335 = $yythunkpos1926;
   $336 = $1;
   $337 = (($336) + 44|0);
   HEAP32[$337>>2] = $335;
   $338 = $1;
   $339 = (_yymatchString($338,43480)|0);
   $340 = ($339|0)!=(0);
   if ($340) {
    break;
   }
   $341 = $yypos1926;
   $342 = $1;
   $343 = (($342) + 12|0);
   HEAP32[$343>>2] = $341;
   $344 = $yythunkpos1926;
   $345 = $1;
   $346 = (($345) + 44|0);
   HEAP32[$346>>2] = $344;
   $347 = $1;
   $348 = (_yymatchString($347,43488)|0);
   $349 = ($348|0)!=(0);
   if ($349) {
    break;
   }
   $350 = $yypos1926;
   $351 = $1;
   $352 = (($351) + 12|0);
   HEAP32[$352>>2] = $350;
   $353 = $yythunkpos1926;
   $354 = $1;
   $355 = (($354) + 44|0);
   HEAP32[$355>>2] = $353;
   $356 = $1;
   $357 = (_yymatchString($356,43496)|0);
   $358 = ($357|0)!=(0);
   if ($358) {
    break;
   }
   $359 = $yypos1926;
   $360 = $1;
   $361 = (($360) + 12|0);
   HEAP32[$361>>2] = $359;
   $362 = $yythunkpos1926;
   $363 = $1;
   $364 = (($363) + 44|0);
   HEAP32[$364>>2] = $362;
   $365 = $1;
   $366 = (_yymatchString($365,43504)|0);
   $367 = ($366|0)!=(0);
   if ($367) {
    break;
   }
   $368 = $yypos1926;
   $369 = $1;
   $370 = (($369) + 12|0);
   HEAP32[$370>>2] = $368;
   $371 = $yythunkpos1926;
   $372 = $1;
   $373 = (($372) + 44|0);
   HEAP32[$373>>2] = $371;
   $374 = $1;
   $375 = (_yymatchString($374,43512)|0);
   $376 = ($375|0)!=(0);
   if ($376) {
    break;
   }
   $377 = $yypos1926;
   $378 = $1;
   $379 = (($378) + 12|0);
   HEAP32[$379>>2] = $377;
   $380 = $yythunkpos1926;
   $381 = $1;
   $382 = (($381) + 44|0);
   HEAP32[$382>>2] = $380;
   $383 = $1;
   $384 = (_yymatchString($383,43520)|0);
   $385 = ($384|0)!=(0);
   if ($385) {
    break;
   }
   $386 = $yypos1926;
   $387 = $1;
   $388 = (($387) + 12|0);
   HEAP32[$388>>2] = $386;
   $389 = $yythunkpos1926;
   $390 = $1;
   $391 = (($390) + 44|0);
   HEAP32[$391>>2] = $389;
   $392 = $1;
   $393 = (_yymatchString($392,43528)|0);
   $394 = ($393|0)!=(0);
   if ($394) {
    break;
   }
   $395 = $yypos1926;
   $396 = $1;
   $397 = (($396) + 12|0);
   HEAP32[$397>>2] = $395;
   $398 = $yythunkpos1926;
   $399 = $1;
   $400 = (($399) + 44|0);
   HEAP32[$400>>2] = $398;
   $401 = $1;
   $402 = (_yymatchString($401,43536)|0);
   $403 = ($402|0)!=(0);
   if ($403) {
    break;
   }
   $404 = $yypos1926;
   $405 = $1;
   $406 = (($405) + 12|0);
   HEAP32[$406>>2] = $404;
   $407 = $yythunkpos1926;
   $408 = $1;
   $409 = (($408) + 44|0);
   HEAP32[$409>>2] = $407;
   $410 = $1;
   $411 = (_yymatchString($410,43544)|0);
   $412 = ($411|0)!=(0);
   if ($412) {
    break;
   }
   $413 = $yypos1926;
   $414 = $1;
   $415 = (($414) + 12|0);
   HEAP32[$415>>2] = $413;
   $416 = $yythunkpos1926;
   $417 = $1;
   $418 = (($417) + 44|0);
   HEAP32[$418>>2] = $416;
   $419 = $1;
   $420 = (_yymatchString($419,43552)|0);
   $421 = ($420|0)!=(0);
   if ($421) {
    break;
   }
   $422 = $yypos1926;
   $423 = $1;
   $424 = (($423) + 12|0);
   HEAP32[$424>>2] = $422;
   $425 = $yythunkpos1926;
   $426 = $1;
   $427 = (($426) + 44|0);
   HEAP32[$427>>2] = $425;
   $428 = $1;
   $429 = (_yymatchString($428,43560)|0);
   $430 = ($429|0)!=(0);
   if ($430) {
    break;
   }
   $431 = $yypos1926;
   $432 = $1;
   $433 = (($432) + 12|0);
   HEAP32[$433>>2] = $431;
   $434 = $yythunkpos1926;
   $435 = $1;
   $436 = (($435) + 44|0);
   HEAP32[$436>>2] = $434;
   $437 = $1;
   $438 = (_yymatchString($437,43568)|0);
   $439 = ($438|0)!=(0);
   if ($439) {
    break;
   }
   $440 = $yypos1926;
   $441 = $1;
   $442 = (($441) + 12|0);
   HEAP32[$442>>2] = $440;
   $443 = $yythunkpos1926;
   $444 = $1;
   $445 = (($444) + 44|0);
   HEAP32[$445>>2] = $443;
   $446 = $1;
   $447 = (_yymatchString($446,43576)|0);
   $448 = ($447|0)!=(0);
   if ($448) {
    break;
   }
   $449 = $yypos1926;
   $450 = $1;
   $451 = (($450) + 12|0);
   HEAP32[$451>>2] = $449;
   $452 = $yythunkpos1926;
   $453 = $1;
   $454 = (($453) + 44|0);
   HEAP32[$454>>2] = $452;
   $455 = $1;
   $456 = (_yymatchString($455,43584)|0);
   $457 = ($456|0)!=(0);
   if ($457) {
    break;
   }
   $458 = $yypos1926;
   $459 = $1;
   $460 = (($459) + 12|0);
   HEAP32[$460>>2] = $458;
   $461 = $yythunkpos1926;
   $462 = $1;
   $463 = (($462) + 44|0);
   HEAP32[$463>>2] = $461;
   $464 = $1;
   $465 = (_yymatchString($464,43592)|0);
   $466 = ($465|0)!=(0);
   if ($466) {
    break;
   }
   $467 = $yypos1926;
   $468 = $1;
   $469 = (($468) + 12|0);
   HEAP32[$469>>2] = $467;
   $470 = $yythunkpos1926;
   $471 = $1;
   $472 = (($471) + 44|0);
   HEAP32[$472>>2] = $470;
   $473 = $1;
   $474 = (_yymatchString($473,43600)|0);
   $475 = ($474|0)!=(0);
   if ($475) {
    break;
   }
   $476 = $yypos1926;
   $477 = $1;
   $478 = (($477) + 12|0);
   HEAP32[$478>>2] = $476;
   $479 = $yythunkpos1926;
   $480 = $1;
   $481 = (($480) + 44|0);
   HEAP32[$481>>2] = $479;
   $482 = $1;
   $483 = (_yymatchString($482,43608)|0);
   $484 = ($483|0)!=(0);
   if ($484) {
    break;
   }
   $485 = $yypos1926;
   $486 = $1;
   $487 = (($486) + 12|0);
   HEAP32[$487>>2] = $485;
   $488 = $yythunkpos1926;
   $489 = $1;
   $490 = (($489) + 44|0);
   HEAP32[$490>>2] = $488;
   $491 = $1;
   $492 = (_yymatchString($491,43616)|0);
   $493 = ($492|0)!=(0);
   if ($493) {
    break;
   }
   $494 = $yypos1926;
   $495 = $1;
   $496 = (($495) + 12|0);
   HEAP32[$496>>2] = $494;
   $497 = $yythunkpos1926;
   $498 = $1;
   $499 = (($498) + 44|0);
   HEAP32[$499>>2] = $497;
   $500 = $1;
   $501 = (_yymatchString($500,43624)|0);
   $502 = ($501|0)!=(0);
   if ($502) {
    break;
   }
   $503 = $yypos1926;
   $504 = $1;
   $505 = (($504) + 12|0);
   HEAP32[$505>>2] = $503;
   $506 = $yythunkpos1926;
   $507 = $1;
   $508 = (($507) + 44|0);
   HEAP32[$508>>2] = $506;
   $509 = $1;
   $510 = (_yymatchString($509,43632)|0);
   $511 = ($510|0)!=(0);
   if ($511) {
    break;
   }
   $512 = $yypos1926;
   $513 = $1;
   $514 = (($513) + 12|0);
   HEAP32[$514>>2] = $512;
   $515 = $yythunkpos1926;
   $516 = $1;
   $517 = (($516) + 44|0);
   HEAP32[$517>>2] = $515;
   $518 = $1;
   $519 = (_yymatchString($518,43640)|0);
   $520 = ($519|0)!=(0);
   if ($520) {
    break;
   }
   $521 = $yypos1926;
   $522 = $1;
   $523 = (($522) + 12|0);
   HEAP32[$523>>2] = $521;
   $524 = $yythunkpos1926;
   $525 = $1;
   $526 = (($525) + 44|0);
   HEAP32[$526>>2] = $524;
   $527 = $1;
   $528 = (_yymatchString($527,43648)|0);
   $529 = ($528|0)!=(0);
   if ($529) {
    break;
   }
   $530 = $yypos1926;
   $531 = $1;
   $532 = (($531) + 12|0);
   HEAP32[$532>>2] = $530;
   $533 = $yythunkpos1926;
   $534 = $1;
   $535 = (($534) + 44|0);
   HEAP32[$535>>2] = $533;
   $536 = $1;
   $537 = (_yymatchString($536,43656)|0);
   $538 = ($537|0)!=(0);
   if ($538) {
    break;
   }
   $539 = $yypos1926;
   $540 = $1;
   $541 = (($540) + 12|0);
   HEAP32[$541>>2] = $539;
   $542 = $yythunkpos1926;
   $543 = $1;
   $544 = (($543) + 44|0);
   HEAP32[$544>>2] = $542;
   $545 = $1;
   $546 = (_yymatchString($545,43664)|0);
   $547 = ($546|0)!=(0);
   if ($547) {
    break;
   }
   $548 = $yypos1926;
   $549 = $1;
   $550 = (($549) + 12|0);
   HEAP32[$550>>2] = $548;
   $551 = $yythunkpos1926;
   $552 = $1;
   $553 = (($552) + 44|0);
   HEAP32[$553>>2] = $551;
   $554 = $1;
   $555 = (_yymatchString($554,43672)|0);
   $556 = ($555|0)!=(0);
   if ($556) {
    break;
   }
   $557 = $yypos1926;
   $558 = $1;
   $559 = (($558) + 12|0);
   HEAP32[$559>>2] = $557;
   $560 = $yythunkpos1926;
   $561 = $1;
   $562 = (($561) + 44|0);
   HEAP32[$562>>2] = $560;
   $563 = $1;
   $564 = (_yymatchString($563,43680)|0);
   $565 = ($564|0)!=(0);
   if ($565) {
    break;
   }
   $566 = $yypos1926;
   $567 = $1;
   $568 = (($567) + 12|0);
   HEAP32[$568>>2] = $566;
   $569 = $yythunkpos1926;
   $570 = $1;
   $571 = (($570) + 44|0);
   HEAP32[$571>>2] = $569;
   $572 = $1;
   $573 = (_yymatchString($572,43688)|0);
   $574 = ($573|0)!=(0);
   if ($574) {
    break;
   }
   $575 = $yypos1926;
   $576 = $1;
   $577 = (($576) + 12|0);
   HEAP32[$577>>2] = $575;
   $578 = $yythunkpos1926;
   $579 = $1;
   $580 = (($579) + 44|0);
   HEAP32[$580>>2] = $578;
   $581 = $1;
   $582 = (_yymatchString($581,43696)|0);
   $583 = ($582|0)!=(0);
   if ($583) {
    break;
   }
   $584 = $yypos1926;
   $585 = $1;
   $586 = (($585) + 12|0);
   HEAP32[$586>>2] = $584;
   $587 = $yythunkpos1926;
   $588 = $1;
   $589 = (($588) + 44|0);
   HEAP32[$589>>2] = $587;
   $590 = $1;
   $591 = (_yymatchString($590,43704)|0);
   $592 = ($591|0)!=(0);
   if ($592) {
    break;
   }
   $593 = $yypos1926;
   $594 = $1;
   $595 = (($594) + 12|0);
   HEAP32[$595>>2] = $593;
   $596 = $yythunkpos1926;
   $597 = $1;
   $598 = (($597) + 44|0);
   HEAP32[$598>>2] = $596;
   $599 = $1;
   $600 = (_yymatchString($599,43712)|0);
   $601 = ($600|0)!=(0);
   if ($601) {
    break;
   }
   $602 = $yypos1926;
   $603 = $1;
   $604 = (($603) + 12|0);
   HEAP32[$604>>2] = $602;
   $605 = $yythunkpos1926;
   $606 = $1;
   $607 = (($606) + 44|0);
   HEAP32[$607>>2] = $605;
   $608 = $1;
   $609 = (_yymatchString($608,43720)|0);
   $610 = ($609|0)!=(0);
   if ($610) {
    break;
   }
   $611 = $yypos1926;
   $612 = $1;
   $613 = (($612) + 12|0);
   HEAP32[$613>>2] = $611;
   $614 = $yythunkpos1926;
   $615 = $1;
   $616 = (($615) + 44|0);
   HEAP32[$616>>2] = $614;
   $617 = $1;
   $618 = (_yymatchString($617,43728)|0);
   $619 = ($618|0)!=(0);
   if ($619) {
    break;
   }
   $620 = $yypos1926;
   $621 = $1;
   $622 = (($621) + 12|0);
   HEAP32[$622>>2] = $620;
   $623 = $yythunkpos1926;
   $624 = $1;
   $625 = (($624) + 44|0);
   HEAP32[$625>>2] = $623;
   $626 = $1;
   $627 = (_yymatchString($626,43736)|0);
   $628 = ($627|0)!=(0);
   if ($628) {
    break;
   }
   $629 = $yypos1926;
   $630 = $1;
   $631 = (($630) + 12|0);
   HEAP32[$631>>2] = $629;
   $632 = $yythunkpos1926;
   $633 = $1;
   $634 = (($633) + 44|0);
   HEAP32[$634>>2] = $632;
   $635 = $1;
   $636 = (_yymatchString($635,43744)|0);
   $637 = ($636|0)!=(0);
   if ($637) {
    break;
   }
   $638 = $yypos1926;
   $639 = $1;
   $640 = (($639) + 12|0);
   HEAP32[$640>>2] = $638;
   $641 = $yythunkpos1926;
   $642 = $1;
   $643 = (($642) + 44|0);
   HEAP32[$643>>2] = $641;
   $644 = $1;
   $645 = (_yymatchString($644,43752)|0);
   $646 = ($645|0)!=(0);
   if ($646) {
    break;
   }
   $647 = $yypos1926;
   $648 = $1;
   $649 = (($648) + 12|0);
   HEAP32[$649>>2] = $647;
   $650 = $yythunkpos1926;
   $651 = $1;
   $652 = (($651) + 44|0);
   HEAP32[$652>>2] = $650;
   $653 = $1;
   $654 = (_yymatchString($653,43760)|0);
   $655 = ($654|0)!=(0);
   if ($655) {
    break;
   }
   $656 = $yypos1926;
   $657 = $1;
   $658 = (($657) + 12|0);
   HEAP32[$658>>2] = $656;
   $659 = $yythunkpos1926;
   $660 = $1;
   $661 = (($660) + 44|0);
   HEAP32[$661>>2] = $659;
   $662 = $1;
   $663 = (_yymatchString($662,43768)|0);
   $664 = ($663|0)!=(0);
   if ($664) {
    break;
   }
   $665 = $yypos1926;
   $666 = $1;
   $667 = (($666) + 12|0);
   HEAP32[$667>>2] = $665;
   $668 = $yythunkpos1926;
   $669 = $1;
   $670 = (($669) + 44|0);
   HEAP32[$670>>2] = $668;
   $671 = $1;
   $672 = (_yymatchString($671,43776)|0);
   $673 = ($672|0)!=(0);
   if ($673) {
    break;
   }
   $674 = $yypos1926;
   $675 = $1;
   $676 = (($675) + 12|0);
   HEAP32[$676>>2] = $674;
   $677 = $yythunkpos1926;
   $678 = $1;
   $679 = (($678) + 44|0);
   HEAP32[$679>>2] = $677;
   $680 = $1;
   $681 = (_yymatchString($680,43784)|0);
   $682 = ($681|0)!=(0);
   if ($682) {
    break;
   }
   $683 = $yypos1926;
   $684 = $1;
   $685 = (($684) + 12|0);
   HEAP32[$685>>2] = $683;
   $686 = $yythunkpos1926;
   $687 = $1;
   $688 = (($687) + 44|0);
   HEAP32[$688>>2] = $686;
   $689 = $1;
   $690 = (_yymatchString($689,43792)|0);
   $691 = ($690|0)!=(0);
   if ($691) {
    break;
   }
   $692 = $yypos1926;
   $693 = $1;
   $694 = (($693) + 12|0);
   HEAP32[$694>>2] = $692;
   $695 = $yythunkpos1926;
   $696 = $1;
   $697 = (($696) + 44|0);
   HEAP32[$697>>2] = $695;
   $698 = $1;
   $699 = (_yymatchString($698,43800)|0);
   $700 = ($699|0)!=(0);
   if ($700) {
    break;
   }
   $701 = $yypos1926;
   $702 = $1;
   $703 = (($702) + 12|0);
   HEAP32[$703>>2] = $701;
   $704 = $yythunkpos1926;
   $705 = $1;
   $706 = (($705) + 44|0);
   HEAP32[$706>>2] = $704;
   $707 = $1;
   $708 = (_yymatchString($707,43808)|0);
   $709 = ($708|0)!=(0);
   if ($709) {
    break;
   }
   $710 = $yypos1926;
   $711 = $1;
   $712 = (($711) + 12|0);
   HEAP32[$712>>2] = $710;
   $713 = $yythunkpos1926;
   $714 = $1;
   $715 = (($714) + 44|0);
   HEAP32[$715>>2] = $713;
   $716 = $1;
   $717 = (_yymatchString($716,43816)|0);
   $718 = ($717|0)!=(0);
   if ($718) {
    break;
   }
   $719 = $yypos1926;
   $720 = $1;
   $721 = (($720) + 12|0);
   HEAP32[$721>>2] = $719;
   $722 = $yythunkpos1926;
   $723 = $1;
   $724 = (($723) + 44|0);
   HEAP32[$724>>2] = $722;
   $725 = $1;
   $726 = (_yymatchString($725,43824)|0);
   $727 = ($726|0)!=(0);
   if ($727) {
    break;
   }
   $728 = $yypos1926;
   $729 = $1;
   $730 = (($729) + 12|0);
   HEAP32[$730>>2] = $728;
   $731 = $yythunkpos1926;
   $732 = $1;
   $733 = (($732) + 44|0);
   HEAP32[$733>>2] = $731;
   $734 = $1;
   $735 = (_yymatchString($734,43832)|0);
   $736 = ($735|0)!=(0);
   if ($736) {
    break;
   }
   $737 = $yypos1926;
   $738 = $1;
   $739 = (($738) + 12|0);
   HEAP32[$739>>2] = $737;
   $740 = $yythunkpos1926;
   $741 = $1;
   $742 = (($741) + 44|0);
   HEAP32[$742>>2] = $740;
   $743 = $1;
   $744 = (_yymatchString($743,43840)|0);
   $745 = ($744|0)!=(0);
   if ($745) {
    break;
   }
   $746 = $yypos1926;
   $747 = $1;
   $748 = (($747) + 12|0);
   HEAP32[$748>>2] = $746;
   $749 = $yythunkpos1926;
   $750 = $1;
   $751 = (($750) + 44|0);
   HEAP32[$751>>2] = $749;
   $752 = $1;
   $753 = (_yymatchString($752,43848)|0);
   $754 = ($753|0)!=(0);
   if ($754) {
    break;
   }
   $755 = $yypos1926;
   $756 = $1;
   $757 = (($756) + 12|0);
   HEAP32[$757>>2] = $755;
   $758 = $yythunkpos1926;
   $759 = $1;
   $760 = (($759) + 44|0);
   HEAP32[$760>>2] = $758;
   $761 = $1;
   $762 = (_yymatchString($761,43856)|0);
   $763 = ($762|0)!=(0);
   if ($763) {
    break;
   }
   $764 = $yypos1926;
   $765 = $1;
   $766 = (($765) + 12|0);
   HEAP32[$766>>2] = $764;
   $767 = $yythunkpos1926;
   $768 = $1;
   $769 = (($768) + 44|0);
   HEAP32[$769>>2] = $767;
   $770 = $1;
   $771 = (_yymatchString($770,43864)|0);
   $772 = ($771|0)!=(0);
   if ($772) {
    break;
   }
   $773 = $yypos1926;
   $774 = $1;
   $775 = (($774) + 12|0);
   HEAP32[$775>>2] = $773;
   $776 = $yythunkpos1926;
   $777 = $1;
   $778 = (($777) + 44|0);
   HEAP32[$778>>2] = $776;
   $779 = $1;
   $780 = (_yymatchString($779,43872)|0);
   $781 = ($780|0)!=(0);
   if ($781) {
    break;
   }
   $782 = $yypos1926;
   $783 = $1;
   $784 = (($783) + 12|0);
   HEAP32[$784>>2] = $782;
   $785 = $yythunkpos1926;
   $786 = $1;
   $787 = (($786) + 44|0);
   HEAP32[$787>>2] = $785;
   $788 = $1;
   $789 = (_yymatchString($788,43880)|0);
   $790 = ($789|0)!=(0);
   if ($790) {
    break;
   }
   $791 = $yypos1926;
   $792 = $1;
   $793 = (($792) + 12|0);
   HEAP32[$793>>2] = $791;
   $794 = $yythunkpos1926;
   $795 = $1;
   $796 = (($795) + 44|0);
   HEAP32[$796>>2] = $794;
   $797 = $1;
   $798 = (_yymatchString($797,43888)|0);
   $799 = ($798|0)!=(0);
   if ($799) {
    break;
   }
   $800 = $yypos1926;
   $801 = $1;
   $802 = (($801) + 12|0);
   HEAP32[$802>>2] = $800;
   $803 = $yythunkpos1926;
   $804 = $1;
   $805 = (($804) + 44|0);
   HEAP32[$805>>2] = $803;
   $806 = $1;
   $807 = (_yymatchString($806,43896)|0);
   $808 = ($807|0)!=(0);
   if ($808) {
    break;
   }
   $809 = $yypos1926;
   $810 = $1;
   $811 = (($810) + 12|0);
   HEAP32[$811>>2] = $809;
   $812 = $yythunkpos1926;
   $813 = $1;
   $814 = (($813) + 44|0);
   HEAP32[$814>>2] = $812;
   $815 = $1;
   $816 = (_yymatchString($815,43904)|0);
   $817 = ($816|0)!=(0);
   if ($817) {
    break;
   }
   $818 = $yypos1926;
   $819 = $1;
   $820 = (($819) + 12|0);
   HEAP32[$820>>2] = $818;
   $821 = $yythunkpos1926;
   $822 = $1;
   $823 = (($822) + 44|0);
   HEAP32[$823>>2] = $821;
   $824 = $1;
   $825 = (_yymatchString($824,43912)|0);
   $826 = ($825|0)!=(0);
   if ($826) {
    break;
   }
   $827 = $yypos1926;
   $828 = $1;
   $829 = (($828) + 12|0);
   HEAP32[$829>>2] = $827;
   $830 = $yythunkpos1926;
   $831 = $1;
   $832 = (($831) + 44|0);
   HEAP32[$832>>2] = $830;
   $833 = $1;
   $834 = (_yymatchString($833,43920)|0);
   $835 = ($834|0)!=(0);
   if ($835) {
    break;
   }
   $836 = $yypos1926;
   $837 = $1;
   $838 = (($837) + 12|0);
   HEAP32[$838>>2] = $836;
   $839 = $yythunkpos1926;
   $840 = $1;
   $841 = (($840) + 44|0);
   HEAP32[$841>>2] = $839;
   $842 = $1;
   $843 = (_yymatchString($842,43928)|0);
   $844 = ($843|0)!=(0);
   if ($844) {
    break;
   }
   $845 = $yypos1926;
   $846 = $1;
   $847 = (($846) + 12|0);
   HEAP32[$847>>2] = $845;
   $848 = $yythunkpos1926;
   $849 = $1;
   $850 = (($849) + 44|0);
   HEAP32[$850>>2] = $848;
   $851 = $1;
   $852 = (_yymatchString($851,43936)|0);
   $853 = ($852|0)!=(0);
   if ($853) {
    break;
   }
   $854 = $yypos1926;
   $855 = $1;
   $856 = (($855) + 12|0);
   HEAP32[$856>>2] = $854;
   $857 = $yythunkpos1926;
   $858 = $1;
   $859 = (($858) + 44|0);
   HEAP32[$859>>2] = $857;
   $860 = $1;
   $861 = (_yymatchString($860,43944)|0);
   $862 = ($861|0)!=(0);
   if ($862) {
    break;
   }
   $863 = $yypos1926;
   $864 = $1;
   $865 = (($864) + 12|0);
   HEAP32[$865>>2] = $863;
   $866 = $yythunkpos1926;
   $867 = $1;
   $868 = (($867) + 44|0);
   HEAP32[$868>>2] = $866;
   $869 = $1;
   $870 = (_yymatchString($869,43952)|0);
   $871 = ($870|0)!=(0);
   if ($871) {
    break;
   }
   $872 = $yypos1926;
   $873 = $1;
   $874 = (($873) + 12|0);
   HEAP32[$874>>2] = $872;
   $875 = $yythunkpos1926;
   $876 = $1;
   $877 = (($876) + 44|0);
   HEAP32[$877>>2] = $875;
   $878 = $1;
   $879 = (_yymatchString($878,43960)|0);
   $880 = ($879|0)!=(0);
   if ($880) {
    break;
   }
   $881 = $yypos1926;
   $882 = $1;
   $883 = (($882) + 12|0);
   HEAP32[$883>>2] = $881;
   $884 = $yythunkpos1926;
   $885 = $1;
   $886 = (($885) + 44|0);
   HEAP32[$886>>2] = $884;
   $887 = $1;
   $888 = (_yymatchString($887,43968)|0);
   $889 = ($888|0)!=(0);
   if ($889) {
    break;
   }
   $890 = $yypos1926;
   $891 = $1;
   $892 = (($891) + 12|0);
   HEAP32[$892>>2] = $890;
   $893 = $yythunkpos1926;
   $894 = $1;
   $895 = (($894) + 44|0);
   HEAP32[$895>>2] = $893;
   $896 = $1;
   $897 = (_yymatchString($896,43976)|0);
   $898 = ($897|0)!=(0);
   if ($898) {
    break;
   }
   $899 = $yypos1926;
   $900 = $1;
   $901 = (($900) + 12|0);
   HEAP32[$901>>2] = $899;
   $902 = $yythunkpos1926;
   $903 = $1;
   $904 = (($903) + 44|0);
   HEAP32[$904>>2] = $902;
   $905 = $1;
   $906 = (_yymatchString($905,43984)|0);
   $907 = ($906|0)!=(0);
   if ($907) {
    break;
   }
   $908 = $yypos1926;
   $909 = $1;
   $910 = (($909) + 12|0);
   HEAP32[$910>>2] = $908;
   $911 = $yythunkpos1926;
   $912 = $1;
   $913 = (($912) + 44|0);
   HEAP32[$913>>2] = $911;
   $914 = $1;
   $915 = (_yymatchString($914,43992)|0);
   $916 = ($915|0)!=(0);
   if ($916) {
    break;
   }
   $917 = $yypos1926;
   $918 = $1;
   $919 = (($918) + 12|0);
   HEAP32[$919>>2] = $917;
   $920 = $yythunkpos1926;
   $921 = $1;
   $922 = (($921) + 44|0);
   HEAP32[$922>>2] = $920;
   $923 = $1;
   $924 = (_yymatchString($923,44000)|0);
   $925 = ($924|0)!=(0);
   if ($925) {
    break;
   }
   $926 = $yypos1926;
   $927 = $1;
   $928 = (($927) + 12|0);
   HEAP32[$928>>2] = $926;
   $929 = $yythunkpos1926;
   $930 = $1;
   $931 = (($930) + 44|0);
   HEAP32[$931>>2] = $929;
   $932 = $1;
   $933 = (_yymatchString($932,44008)|0);
   $934 = ($933|0)!=(0);
   if ($934) {
    break;
   }
   $935 = $yypos1926;
   $936 = $1;
   $937 = (($936) + 12|0);
   HEAP32[$937>>2] = $935;
   $938 = $yythunkpos1926;
   $939 = $1;
   $940 = (($939) + 44|0);
   HEAP32[$940>>2] = $938;
   $941 = $1;
   $942 = (_yymatchString($941,44016)|0);
   $943 = ($942|0)!=(0);
   if ($943) {
    break;
   }
   $944 = $yypos1926;
   $945 = $1;
   $946 = (($945) + 12|0);
   HEAP32[$946>>2] = $944;
   $947 = $yythunkpos1926;
   $948 = $1;
   $949 = (($948) + 44|0);
   HEAP32[$949>>2] = $947;
   $950 = $1;
   $951 = (_yymatchString($950,44024)|0);
   $952 = ($951|0)!=(0);
   if ($952) {
    break;
   }
   $953 = $yypos1926;
   $954 = $1;
   $955 = (($954) + 12|0);
   HEAP32[$955>>2] = $953;
   $956 = $yythunkpos1926;
   $957 = $1;
   $958 = (($957) + 44|0);
   HEAP32[$958>>2] = $956;
   $959 = $1;
   $960 = (_yymatchString($959,44032)|0);
   $961 = ($960|0)!=(0);
   if ($961) {
    break;
   }
   $962 = $yypos1926;
   $963 = $1;
   $964 = (($963) + 12|0);
   HEAP32[$964>>2] = $962;
   $965 = $yythunkpos1926;
   $966 = $1;
   $967 = (($966) + 44|0);
   HEAP32[$967>>2] = $965;
   $968 = $1;
   $969 = (_yymatchString($968,44040)|0);
   $970 = ($969|0)!=(0);
   if ($970) {
    break;
   }
   $971 = $yypos1926;
   $972 = $1;
   $973 = (($972) + 12|0);
   HEAP32[$973>>2] = $971;
   $974 = $yythunkpos1926;
   $975 = $1;
   $976 = (($975) + 44|0);
   HEAP32[$976>>2] = $974;
   $977 = $1;
   $978 = (_yymatchString($977,44048)|0);
   $979 = ($978|0)!=(0);
   if ($979) {
    break;
   }
   $980 = $yypos1926;
   $981 = $1;
   $982 = (($981) + 12|0);
   HEAP32[$982>>2] = $980;
   $983 = $yythunkpos1926;
   $984 = $1;
   $985 = (($984) + 44|0);
   HEAP32[$985>>2] = $983;
   $986 = $1;
   $987 = (_yymatchString($986,44056)|0);
   $988 = ($987|0)!=(0);
   if ($988) {
    break;
   }
   $989 = $yypos1926;
   $990 = $1;
   $991 = (($990) + 12|0);
   HEAP32[$991>>2] = $989;
   $992 = $yythunkpos1926;
   $993 = $1;
   $994 = (($993) + 44|0);
   HEAP32[$994>>2] = $992;
   $995 = $1;
   $996 = (_yymatchString($995,44064)|0);
   $997 = ($996|0)!=(0);
   if ($997) {
    break;
   }
   $998 = $yypos1926;
   $999 = $1;
   $1000 = (($999) + 12|0);
   HEAP32[$1000>>2] = $998;
   $1001 = $yythunkpos1926;
   $1002 = $1;
   $1003 = (($1002) + 44|0);
   HEAP32[$1003>>2] = $1001;
   $1004 = $1;
   $1005 = (_yymatchString($1004,44072)|0);
   $1006 = ($1005|0)!=(0);
   if ($1006) {
    break;
   }
   $1007 = $yypos1926;
   $1008 = $1;
   $1009 = (($1008) + 12|0);
   HEAP32[$1009>>2] = $1007;
   $1010 = $yythunkpos1926;
   $1011 = $1;
   $1012 = (($1011) + 44|0);
   HEAP32[$1012>>2] = $1010;
   $1013 = $1;
   $1014 = (_yymatchString($1013,44080)|0);
   $1015 = ($1014|0)!=(0);
   if ($1015) {
    break;
   }
   $1016 = $yypos1926;
   $1017 = $1;
   $1018 = (($1017) + 12|0);
   HEAP32[$1018>>2] = $1016;
   $1019 = $yythunkpos1926;
   $1020 = $1;
   $1021 = (($1020) + 44|0);
   HEAP32[$1021>>2] = $1019;
   $1022 = $1;
   $1023 = (_yymatchString($1022,44088)|0);
   $1024 = ($1023|0)!=(0);
   if ($1024) {
    break;
   }
   $1025 = $yypos1926;
   $1026 = $1;
   $1027 = (($1026) + 12|0);
   HEAP32[$1027>>2] = $1025;
   $1028 = $yythunkpos1926;
   $1029 = $1;
   $1030 = (($1029) + 44|0);
   HEAP32[$1030>>2] = $1028;
   $1031 = $1;
   $1032 = (_yymatchString($1031,44096)|0);
   $1033 = ($1032|0)!=(0);
   if ($1033) {
    break;
   }
   $1034 = $yypos1926;
   $1035 = $1;
   $1036 = (($1035) + 12|0);
   HEAP32[$1036>>2] = $1034;
   $1037 = $yythunkpos1926;
   $1038 = $1;
   $1039 = (($1038) + 44|0);
   HEAP32[$1039>>2] = $1037;
   $1040 = $1;
   $1041 = (_yymatchString($1040,44104)|0);
   $1042 = ($1041|0)!=(0);
   if ($1042) {
    break;
   }
   $1043 = $yypos1926;
   $1044 = $1;
   $1045 = (($1044) + 12|0);
   HEAP32[$1045>>2] = $1043;
   $1046 = $yythunkpos1926;
   $1047 = $1;
   $1048 = (($1047) + 44|0);
   HEAP32[$1048>>2] = $1046;
   $1049 = $1;
   $1050 = (_yymatchString($1049,44112)|0);
   $1051 = ($1050|0)!=(0);
   if ($1051) {
    break;
   }
   $1052 = $yypos1926;
   $1053 = $1;
   $1054 = (($1053) + 12|0);
   HEAP32[$1054>>2] = $1052;
   $1055 = $yythunkpos1926;
   $1056 = $1;
   $1057 = (($1056) + 44|0);
   HEAP32[$1057>>2] = $1055;
   $1058 = $1;
   $1059 = (_yymatchString($1058,44120)|0);
   $1060 = ($1059|0)!=(0);
   if ($1060) {
    break;
   }
   $1061 = $yypos1926;
   $1062 = $1;
   $1063 = (($1062) + 12|0);
   HEAP32[$1063>>2] = $1061;
   $1064 = $yythunkpos1926;
   $1065 = $1;
   $1066 = (($1065) + 44|0);
   HEAP32[$1066>>2] = $1064;
   $1067 = $1;
   $1068 = (_yymatchString($1067,44128)|0);
   $1069 = ($1068|0)!=(0);
   if ($1069) {
    break;
   }
   $1070 = $yypos1926;
   $1071 = $1;
   $1072 = (($1071) + 12|0);
   HEAP32[$1072>>2] = $1070;
   $1073 = $yythunkpos1926;
   $1074 = $1;
   $1075 = (($1074) + 44|0);
   HEAP32[$1075>>2] = $1073;
   $1076 = $1;
   $1077 = (_yymatchString($1076,44136)|0);
   $1078 = ($1077|0)!=(0);
   if ($1078) {
    break;
   }
   $1079 = $yypos1926;
   $1080 = $1;
   $1081 = (($1080) + 12|0);
   HEAP32[$1081>>2] = $1079;
   $1082 = $yythunkpos1926;
   $1083 = $1;
   $1084 = (($1083) + 44|0);
   HEAP32[$1084>>2] = $1082;
   $1085 = $1;
   $1086 = (_yymatchString($1085,44144)|0);
   $1087 = ($1086|0)!=(0);
   if ($1087) {
    break;
   }
   $1088 = $yypos1926;
   $1089 = $1;
   $1090 = (($1089) + 12|0);
   HEAP32[$1090>>2] = $1088;
   $1091 = $yythunkpos1926;
   $1092 = $1;
   $1093 = (($1092) + 44|0);
   HEAP32[$1093>>2] = $1091;
   $1094 = $1;
   $1095 = (_yymatchString($1094,44152)|0);
   $1096 = ($1095|0)!=(0);
   if ($1096) {
    break;
   }
   $1097 = $yypos1926;
   $1098 = $1;
   $1099 = (($1098) + 12|0);
   HEAP32[$1099>>2] = $1097;
   $1100 = $yythunkpos1926;
   $1101 = $1;
   $1102 = (($1101) + 44|0);
   HEAP32[$1102>>2] = $1100;
   $1103 = $1;
   $1104 = (_yymatchString($1103,44160)|0);
   $1105 = ($1104|0)!=(0);
   if ($1105) {
    break;
   }
   $1106 = $yypos1926;
   $1107 = $1;
   $1108 = (($1107) + 12|0);
   HEAP32[$1108>>2] = $1106;
   $1109 = $yythunkpos1926;
   $1110 = $1;
   $1111 = (($1110) + 44|0);
   HEAP32[$1111>>2] = $1109;
   $1112 = $1;
   $1113 = (_yymatchString($1112,44168)|0);
   $1114 = ($1113|0)!=(0);
   if ($1114) {
    break;
   }
   $1115 = $yypos1926;
   $1116 = $1;
   $1117 = (($1116) + 12|0);
   HEAP32[$1117>>2] = $1115;
   $1118 = $yythunkpos1926;
   $1119 = $1;
   $1120 = (($1119) + 44|0);
   HEAP32[$1120>>2] = $1118;
   $1121 = $1;
   $1122 = (_yymatchString($1121,44176)|0);
   $1123 = ($1122|0)!=(0);
   if ($1123) {
    break;
   }
   $1124 = $yypos1926;
   $1125 = $1;
   $1126 = (($1125) + 12|0);
   HEAP32[$1126>>2] = $1124;
   $1127 = $yythunkpos1926;
   $1128 = $1;
   $1129 = (($1128) + 44|0);
   HEAP32[$1129>>2] = $1127;
   $1130 = $1;
   $1131 = (_yymatchString($1130,44184)|0);
   $1132 = ($1131|0)!=(0);
   if ($1132) {
    break;
   }
   $1133 = $yypos1926;
   $1134 = $1;
   $1135 = (($1134) + 12|0);
   HEAP32[$1135>>2] = $1133;
   $1136 = $yythunkpos1926;
   $1137 = $1;
   $1138 = (($1137) + 44|0);
   HEAP32[$1138>>2] = $1136;
   $1139 = $1;
   $1140 = (_yymatchString($1139,44192)|0);
   $1141 = ($1140|0)!=(0);
   if ($1141) {
    break;
   }
   $1142 = $yypos1926;
   $1143 = $1;
   $1144 = (($1143) + 12|0);
   HEAP32[$1144>>2] = $1142;
   $1145 = $yythunkpos1926;
   $1146 = $1;
   $1147 = (($1146) + 44|0);
   HEAP32[$1147>>2] = $1145;
   $1148 = $1;
   $1149 = (_yymatchString($1148,44200)|0);
   $1150 = ($1149|0)!=(0);
   if ($1150) {
    break;
   }
   $1151 = $yypos1926;
   $1152 = $1;
   $1153 = (($1152) + 12|0);
   HEAP32[$1153>>2] = $1151;
   $1154 = $yythunkpos1926;
   $1155 = $1;
   $1156 = (($1155) + 44|0);
   HEAP32[$1156>>2] = $1154;
   $1157 = $1;
   $1158 = (_yymatchString($1157,44208)|0);
   $1159 = ($1158|0)!=(0);
   if ($1159) {
    break;
   }
   $1160 = $yypos1926;
   $1161 = $1;
   $1162 = (($1161) + 12|0);
   HEAP32[$1162>>2] = $1160;
   $1163 = $yythunkpos1926;
   $1164 = $1;
   $1165 = (($1164) + 44|0);
   HEAP32[$1165>>2] = $1163;
   $1166 = $1;
   $1167 = (_yymatchString($1166,44216)|0);
   $1168 = ($1167|0)!=(0);
   if ($1168) {
    break;
   }
   $1169 = $yypos0;
   $1170 = $1;
   $1171 = (($1170) + 12|0);
   HEAP32[$1171>>2] = $1169;
   $1172 = $yythunkpos0;
   $1173 = $1;
   $1174 = (($1173) + 44|0);
   HEAP32[$1174>>2] = $1172;
   $0 = 0;
   $1175 = $0;
   STACKTOP = sp;return ($1175|0);
  }
 } while(0);
 $0 = 1;
 $1175 = $0;
 STACKTOP = sp;return ($1175|0);
}
function _yy_1_StrChunk($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 STACKTOP = sp;return;
}
function _yy_AposChunk($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1553 = 0, $yythunkpos0 = 0, $yythunkpos1553 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = $1;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($12) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 (_yyText($8,$11,$14)|0);
 $15 = $1;
 $16 = (($15) + 64|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (_extension(16,$19)|0);
 do {
  if ($20) {
   $21 = $1;
   $22 = (_yymatchChar($21,39)|0);
   $23 = ($22|0)!=(0);
   if (!($23)) {
    break;
   }
   $24 = $1;
   $25 = (($24) + 12|0);
   $26 = HEAP32[$25>>2]|0;
   $yypos1553 = $26;
   $27 = $1;
   $28 = (($27) + 44|0);
   $29 = HEAP32[$28>>2]|0;
   $yythunkpos1553 = $29;
   $30 = $1;
   $31 = (_yy_Alphanumeric($30)|0);
   $32 = ($31|0)!=(0);
   if (!($32)) {
    break;
   }
   $33 = $yypos1553;
   $34 = $1;
   $35 = (($34) + 12|0);
   HEAP32[$35>>2] = $33;
   $36 = $yythunkpos1553;
   $37 = $1;
   $38 = (($37) + 44|0);
   HEAP32[$38>>2] = $36;
   $39 = $1;
   $40 = $1;
   $41 = (($40) + 28|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $1;
   $44 = (($43) + 32|0);
   $45 = HEAP32[$44>>2]|0;
   _yyDo($39,246,$42,$45,45704);
   $0 = 1;
   $52 = $0;
   STACKTOP = sp;return ($52|0);
  } else {
  }
 } while(0);
 $46 = $yypos0;
 $47 = $1;
 $48 = (($47) + 12|0);
 HEAP32[$48>>2] = $46;
 $49 = $yythunkpos0;
 $50 = $1;
 $51 = (($50) + 44|0);
 HEAP32[$51>>2] = $49;
 $0 = 0;
 $52 = $0;
 STACKTOP = sp;return ($52|0);
}
function _yy_NonPunctuation($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos2101 = 0, $yypos2102 = 0, $yythunkpos0 = 0, $yythunkpos2101 = 0, $yythunkpos2102 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos2101 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos2101 = $13;
 $14 = $1;
 $15 = (($14) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $yypos2102 = $16;
 $17 = $1;
 $18 = (($17) + 44|0);
 $19 = HEAP32[$18>>2]|0;
 $yythunkpos2102 = $19;
 $20 = $1;
 $21 = (_yy_Punctuation($20)|0);
 $22 = ($21|0)!=(0);
 do {
  if ($22) {
   label = 13;
  } else {
   $23 = $yypos2102;
   $24 = $1;
   $25 = (($24) + 12|0);
   HEAP32[$25>>2] = $23;
   $26 = $yythunkpos2102;
   $27 = $1;
   $28 = (($27) + 44|0);
   HEAP32[$28>>2] = $26;
   $29 = $1;
   $30 = (_yy_SpecialChar($29)|0);
   $31 = ($30|0)!=(0);
   if ($31) {
    label = 13;
    break;
   }
   $32 = $yypos2102;
   $33 = $1;
   $34 = (($33) + 12|0);
   HEAP32[$34>>2] = $32;
   $35 = $yythunkpos2102;
   $36 = $1;
   $37 = (($36) + 44|0);
   HEAP32[$37>>2] = $35;
   $38 = $1;
   $39 = (_yy_Spacechar($38)|0);
   $40 = ($39|0)!=(0);
   if ($40) {
    label = 13;
    break;
   }
   $41 = $yypos2102;
   $42 = $1;
   $43 = (($42) + 12|0);
   HEAP32[$43>>2] = $41;
   $44 = $yythunkpos2102;
   $45 = $1;
   $46 = (($45) + 44|0);
   HEAP32[$46>>2] = $44;
   $47 = $1;
   $48 = (_yy_Newline($47)|0);
   $49 = ($48|0)!=(0);
   if ($49) {
    label = 13;
    break;
   }
   $50 = $yypos2101;
   $51 = $1;
   $52 = (($51) + 12|0);
   HEAP32[$52>>2] = $50;
   $53 = $yythunkpos2101;
   $54 = $1;
   $55 = (($54) + 44|0);
   HEAP32[$55>>2] = $53;
   $56 = $1;
   $57 = (_yymatchDot($56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  }
 } while(0);
 if ((label|0) == 13) {
 }
 $59 = $yypos0;
 $60 = $1;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $yythunkpos0;
 $63 = $1;
 $64 = (($63) + 44|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _yy_1_Superscript($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 $14 = $0;
 $15 = (($14) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP16[$16>>1] = 79;
 STACKTOP = sp;return;
}
function _yy_1_Subscript($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 $14 = $0;
 $15 = (($14) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP16[$16>>1] = 80;
 STACKTOP = sp;return;
}
function _yy_Whitespace($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1488 = 0, $yythunkpos0 = 0, $yythunkpos1488 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos1488 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos1488 = $13;
 $14 = $1;
 $15 = (_yy_Spacechar($14)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
  } else {
   $17 = $yypos1488;
   $18 = $1;
   $19 = (($18) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = $yythunkpos1488;
   $21 = $1;
   $22 = (($21) + 44|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (_yy_Newline($23)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    break;
   }
   $26 = $yypos0;
   $27 = $1;
   $28 = (($27) + 12|0);
   HEAP32[$28>>2] = $26;
   $29 = $yythunkpos0;
   $30 = $1;
   $31 = (($30) + 44|0);
   HEAP32[$31>>2] = $29;
   $0 = 0;
   $32 = $0;
   STACKTOP = sp;return ($32|0);
  }
 } while(0);
 $0 = 1;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _yy_1_StrongAndEmphStar($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = (($10) + 52|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + -8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_cons($9,$14)|0);
 $16 = $0;
 $17 = (($16) + 52|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + -8|0);
 HEAP32[$19>>2] = $15;
 STACKTOP = sp;return;
}
function _yy_2_StrongAndEmphStar($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_mk_pos_list(22,$9,$11,$14)|0);
 $16 = $0;
 $17 = (($16) + 48|0);
 HEAP32[$17>>2] = $15;
 $18 = $0;
 $19 = (($18) + 48|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $3;
 $22 = HEAP32[$21>>2]|0;
 $23 = $3;
 $24 = (($23) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (_mk_pos_list(21,$20,$22,$25)|0);
 $27 = $0;
 $28 = (($27) + 48|0);
 HEAP32[$28>>2] = $26;
 STACKTOP = sp;return;
}
function _yy_1_StrongAndEmphUl($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = (($10) + 52|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + -8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_cons($9,$14)|0);
 $16 = $0;
 $17 = (($16) + 52|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + -8|0);
 HEAP32[$19>>2] = $15;
 STACKTOP = sp;return;
}
function _yy_2_StrongAndEmphUl($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_mk_pos_list(22,$9,$11,$14)|0);
 $16 = $0;
 $17 = (($16) + 48|0);
 HEAP32[$17>>2] = $15;
 $18 = $0;
 $19 = (($18) + 48|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $3;
 $22 = HEAP32[$21>>2]|0;
 $23 = $3;
 $24 = (($23) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (_mk_pos_list(21,$20,$22,$25)|0);
 $27 = $0;
 $28 = (($27) + 48|0);
 HEAP32[$28>>2] = $26;
 STACKTOP = sp;return;
}
function _yy_PossibleEmphStrongStar($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $yypos0 = 0, $yypos1432 = 0, $yypos1433 = 0, $yypos1434 = 0, $yypos1435 = 0, $yypos1436 = 0, $yypos1438 = 0, $yypos1439 = 0, $yypos1440 = 0, $yypos1441 = 0, $yypos1442 = 0, $yythunkpos0 = 0, $yythunkpos1432 = 0, $yythunkpos1433 = 0, $yythunkpos1434 = 0, $yythunkpos1435 = 0, $yythunkpos1436 = 0, $yythunkpos1438 = 0, $yythunkpos1439 = 0, $yythunkpos1440 = 0;
 var $yythunkpos1441 = 0, $yythunkpos1442 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchString($8,45232)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = (($11) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $yypos1433 = $13;
   $14 = $1;
   $15 = (($14) + 44|0);
   $16 = HEAP32[$15>>2]|0;
   $yythunkpos1433 = $16;
   $17 = $1;
   $18 = (_yymatchChar($17,10)|0);
   $19 = ($18|0)!=(0);
   if ($19) {
    break;
   }
   $20 = $yypos1433;
   $21 = $1;
   $22 = (($21) + 12|0);
   HEAP32[$22>>2] = $20;
   $23 = $yythunkpos1433;
   $24 = $1;
   $25 = (($24) + 44|0);
   HEAP32[$25>>2] = $23;
   $26 = $1;
   $27 = (($26) + 12|0);
   $28 = HEAP32[$27>>2]|0;
   $yypos1434 = $28;
   $29 = $1;
   $30 = (($29) + 44|0);
   $31 = HEAP32[$30>>2]|0;
   $yythunkpos1434 = $31;
   $32 = $1;
   $33 = (_yymatchChar($32,42)|0);
   $34 = ($33|0)!=(0);
   if ($34) {
    break;
   }
   $35 = $yypos1434;
   $36 = $1;
   $37 = (($36) + 12|0);
   HEAP32[$37>>2] = $35;
   $38 = $yythunkpos1434;
   $39 = $1;
   $40 = (($39) + 44|0);
   HEAP32[$40>>2] = $38;
   $41 = $1;
   $42 = (_yymatchDot($41)|0);
   $43 = ($42|0)!=(0);
   if (!($43)) {
    break;
   }
   while(1) {
    $44 = $1;
    $45 = (($44) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $yypos1432 = $46;
    $47 = $1;
    $48 = (($47) + 44|0);
    $49 = HEAP32[$48>>2]|0;
    $yythunkpos1432 = $49;
    $50 = $1;
    $51 = (($50) + 12|0);
    $52 = HEAP32[$51>>2]|0;
    $yypos1435 = $52;
    $53 = $1;
    $54 = (($53) + 44|0);
    $55 = HEAP32[$54>>2]|0;
    $yythunkpos1435 = $55;
    $56 = $1;
    $57 = (_yymatchChar($56,10)|0);
    $58 = ($57|0)!=(0);
    if ($58) {
     label = 14;
     break;
    }
    $59 = $yypos1435;
    $60 = $1;
    $61 = (($60) + 12|0);
    HEAP32[$61>>2] = $59;
    $62 = $yythunkpos1435;
    $63 = $1;
    $64 = (($63) + 44|0);
    HEAP32[$64>>2] = $62;
    $65 = $1;
    $66 = (($65) + 12|0);
    $67 = HEAP32[$66>>2]|0;
    $yypos1436 = $67;
    $68 = $1;
    $69 = (($68) + 44|0);
    $70 = HEAP32[$69>>2]|0;
    $yythunkpos1436 = $70;
    $71 = $1;
    $72 = (_yymatchChar($71,42)|0);
    $73 = ($72|0)!=(0);
    if ($73) {
     label = 17;
     break;
    }
    $74 = $yypos1436;
    $75 = $1;
    $76 = (($75) + 12|0);
    HEAP32[$76>>2] = $74;
    $77 = $yythunkpos1436;
    $78 = $1;
    $79 = (($78) + 44|0);
    HEAP32[$79>>2] = $77;
    $80 = $1;
    $81 = (_yymatchDot($80)|0);
    $82 = ($81|0)!=(0);
    if (!($82)) {
     label = 19;
     break;
    }
   }
   if ((label|0) == 14) {
   }
   else if ((label|0) == 17) {
   }
   else if ((label|0) == 19) {
   }
   $83 = $yypos1432;
   $84 = $1;
   $85 = (($84) + 12|0);
   HEAP32[$85>>2] = $83;
   $86 = $yythunkpos1432;
   $87 = $1;
   $88 = (($87) + 44|0);
   HEAP32[$88>>2] = $86;
   $89 = $1;
   $90 = (_yymatchString($89,45232)|0);
   $91 = ($90|0)!=(0);
   if (!($91)) {
    break;
   }
   $92 = $1;
   $93 = (($92) + 12|0);
   $94 = HEAP32[$93>>2]|0;
   $yypos1439 = $94;
   $95 = $1;
   $96 = (($95) + 44|0);
   $97 = HEAP32[$96>>2]|0;
   $yythunkpos1439 = $97;
   $98 = $1;
   $99 = (_yymatchChar($98,10)|0);
   $100 = ($99|0)!=(0);
   if ($100) {
    break;
   }
   $101 = $yypos1439;
   $102 = $1;
   $103 = (($102) + 12|0);
   HEAP32[$103>>2] = $101;
   $104 = $yythunkpos1439;
   $105 = $1;
   $106 = (($105) + 44|0);
   HEAP32[$106>>2] = $104;
   $107 = $1;
   $108 = (($107) + 12|0);
   $109 = HEAP32[$108>>2]|0;
   $yypos1440 = $109;
   $110 = $1;
   $111 = (($110) + 44|0);
   $112 = HEAP32[$111>>2]|0;
   $yythunkpos1440 = $112;
   $113 = $1;
   $114 = (_yymatchChar($113,42)|0);
   $115 = ($114|0)!=(0);
   if ($115) {
    break;
   }
   $116 = $yypos1440;
   $117 = $1;
   $118 = (($117) + 12|0);
   HEAP32[$118>>2] = $116;
   $119 = $yythunkpos1440;
   $120 = $1;
   $121 = (($120) + 44|0);
   HEAP32[$121>>2] = $119;
   $122 = $1;
   $123 = (_yymatchDot($122)|0);
   $124 = ($123|0)!=(0);
   if (!($124)) {
    break;
   }
   while(1) {
    $125 = $1;
    $126 = (($125) + 12|0);
    $127 = HEAP32[$126>>2]|0;
    $yypos1438 = $127;
    $128 = $1;
    $129 = (($128) + 44|0);
    $130 = HEAP32[$129>>2]|0;
    $yythunkpos1438 = $130;
    $131 = $1;
    $132 = (($131) + 12|0);
    $133 = HEAP32[$132>>2]|0;
    $yypos1441 = $133;
    $134 = $1;
    $135 = (($134) + 44|0);
    $136 = HEAP32[$135>>2]|0;
    $yythunkpos1441 = $136;
    $137 = $1;
    $138 = (_yymatchChar($137,10)|0);
    $139 = ($138|0)!=(0);
    if ($139) {
     label = 34;
     break;
    }
    $140 = $yypos1441;
    $141 = $1;
    $142 = (($141) + 12|0);
    HEAP32[$142>>2] = $140;
    $143 = $yythunkpos1441;
    $144 = $1;
    $145 = (($144) + 44|0);
    HEAP32[$145>>2] = $143;
    $146 = $1;
    $147 = (($146) + 12|0);
    $148 = HEAP32[$147>>2]|0;
    $yypos1442 = $148;
    $149 = $1;
    $150 = (($149) + 44|0);
    $151 = HEAP32[$150>>2]|0;
    $yythunkpos1442 = $151;
    $152 = $1;
    $153 = (_yymatchChar($152,42)|0);
    $154 = ($153|0)!=(0);
    if ($154) {
     label = 37;
     break;
    }
    $155 = $yypos1442;
    $156 = $1;
    $157 = (($156) + 12|0);
    HEAP32[$157>>2] = $155;
    $158 = $yythunkpos1442;
    $159 = $1;
    $160 = (($159) + 44|0);
    HEAP32[$160>>2] = $158;
    $161 = $1;
    $162 = (_yymatchDot($161)|0);
    $163 = ($162|0)!=(0);
    if (!($163)) {
     label = 39;
     break;
    }
   }
   if ((label|0) == 34) {
   }
   else if ((label|0) == 37) {
   }
   else if ((label|0) == 39) {
   }
   $164 = $yypos1438;
   $165 = $1;
   $166 = (($165) + 12|0);
   HEAP32[$166>>2] = $164;
   $167 = $yythunkpos1438;
   $168 = $1;
   $169 = (($168) + 44|0);
   HEAP32[$169>>2] = $167;
   $170 = $1;
   $171 = (_yymatchChar($170,42)|0);
   $172 = ($171|0)!=(0);
   if (!($172)) {
    break;
   }
   $0 = 1;
   $179 = $0;
   STACKTOP = sp;return ($179|0);
  } else {
  }
 } while(0);
 $173 = $yypos0;
 $174 = $1;
 $175 = (($174) + 12|0);
 HEAP32[$175>>2] = $173;
 $176 = $yythunkpos0;
 $177 = $1;
 $178 = (($177) + 44|0);
 HEAP32[$178>>2] = $176;
 $0 = 0;
 $179 = $0;
 STACKTOP = sp;return ($179|0);
}
function _yy_InlineNoEmph($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $yypos0 = 0, $yypos1626 = 0, $yythunkpos0 = 0, $yythunkpos1626 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos1626 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos1626 = $13;
 $14 = $1;
 $15 = $1;
 $16 = (($15) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = (($18) + 32|0);
 $20 = HEAP32[$19>>2]|0;
 (_yyText($14,$17,$20)|0);
 $21 = $1;
 $22 = (($21) + 64|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (_extension(4096,$25)|0);
 do {
  if ($26) {
   $27 = $1;
   $28 = (_yy_CriticMarkup($27)|0);
   $29 = ($28|0)!=(0);
   if ($29) {
    break;
   } else {
    label = 6;
    break;
   }
  } else {
   label = 6;
  }
 } while(0);
 L7: do {
  if ((label|0) == 6) {
   $30 = $yypos1626;
   $31 = $1;
   $32 = (($31) + 12|0);
   HEAP32[$32>>2] = $30;
   $33 = $yythunkpos1626;
   $34 = $1;
   $35 = (($34) + 44|0);
   HEAP32[$35>>2] = $33;
   $36 = $1;
   $37 = $1;
   $38 = (($37) + 28|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $1;
   $41 = (($40) + 32|0);
   $42 = HEAP32[$41>>2]|0;
   (_yyText($36,$39,$42)|0);
   $43 = $1;
   $44 = (($43) + 64|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($45) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (_extension(1,$47)|0);
   do {
    if ($48) {
    } else {
     $49 = $1;
     $50 = (_yy_DollarMath($49)|0);
     $51 = ($50|0)!=(0);
     if ($51) {
      break L7;
     } else {
      break;
     }
    }
   } while(0);
   $52 = $yypos1626;
   $53 = $1;
   $54 = (($53) + 12|0);
   HEAP32[$54>>2] = $52;
   $55 = $yythunkpos1626;
   $56 = $1;
   $57 = (($56) + 44|0);
   HEAP32[$57>>2] = $55;
   $58 = $1;
   $59 = (_yy_Str($58)|0);
   $60 = ($59|0)!=(0);
   if ($60) {
    break;
   }
   $61 = $yypos1626;
   $62 = $1;
   $63 = (($62) + 12|0);
   HEAP32[$63>>2] = $61;
   $64 = $yythunkpos1626;
   $65 = $1;
   $66 = (($65) + 44|0);
   HEAP32[$66>>2] = $64;
   $67 = $1;
   $68 = $1;
   $69 = (($68) + 28|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = $1;
   $72 = (($71) + 32|0);
   $73 = HEAP32[$72>>2]|0;
   (_yyText($67,$70,$73)|0);
   $74 = $1;
   $75 = (($74) + 64|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = (($76) + 12|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = (_extension(1,$78)|0);
   do {
    if ($79) {
    } else {
     $80 = $1;
     $81 = (_yy_MathSpan($80)|0);
     $82 = ($81|0)!=(0);
     if ($82) {
      break L7;
     } else {
      break;
     }
    }
   } while(0);
   $83 = $yypos1626;
   $84 = $1;
   $85 = (($84) + 12|0);
   HEAP32[$85>>2] = $83;
   $86 = $yythunkpos1626;
   $87 = $1;
   $88 = (($87) + 44|0);
   HEAP32[$88>>2] = $86;
   $89 = $1;
   $90 = (_yy_Endline($89)|0);
   $91 = ($90|0)!=(0);
   if ($91) {
    break;
   }
   $92 = $yypos1626;
   $93 = $1;
   $94 = (($93) + 12|0);
   HEAP32[$94>>2] = $92;
   $95 = $yythunkpos1626;
   $96 = $1;
   $97 = (($96) + 44|0);
   HEAP32[$97>>2] = $95;
   $98 = $1;
   $99 = (_yy_UlOrStarLine($98)|0);
   $100 = ($99|0)!=(0);
   if ($100) {
    break;
   }
   $101 = $yypos1626;
   $102 = $1;
   $103 = (($102) + 12|0);
   HEAP32[$103>>2] = $101;
   $104 = $yythunkpos1626;
   $105 = $1;
   $106 = (($105) + 44|0);
   HEAP32[$106>>2] = $104;
   $107 = $1;
   $108 = (_yy_Space($107)|0);
   $109 = ($108|0)!=(0);
   if ($109) {
    break;
   }
   $110 = $yypos1626;
   $111 = $1;
   $112 = (($111) + 12|0);
   HEAP32[$112>>2] = $110;
   $113 = $yythunkpos1626;
   $114 = $1;
   $115 = (($114) + 44|0);
   HEAP32[$115>>2] = $113;
   $116 = $1;
   $117 = (_yy_Strong($116)|0);
   $118 = ($117|0)!=(0);
   if ($118) {
    break;
   }
   $119 = $yypos1626;
   $120 = $1;
   $121 = (($120) + 12|0);
   HEAP32[$121>>2] = $119;
   $122 = $yythunkpos1626;
   $123 = $1;
   $124 = (($123) + 44|0);
   HEAP32[$124>>2] = $122;
   $125 = $1;
   $126 = $1;
   $127 = (($126) + 28|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = $1;
   $130 = (($129) + 32|0);
   $131 = HEAP32[$130>>2]|0;
   (_yyText($125,$128,$131)|0);
   $132 = $1;
   $133 = (($132) + 64|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = (($134) + 12|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = (_extension(1,$136)|0);
   do {
    if ($137) {
    } else {
     $138 = $1;
     $139 = (_yy_CitationReference($138)|0);
     $140 = ($139|0)!=(0);
     if ($140) {
      break L7;
     } else {
      break;
     }
    }
   } while(0);
   $141 = $yypos1626;
   $142 = $1;
   $143 = (($142) + 12|0);
   HEAP32[$143>>2] = $141;
   $144 = $yythunkpos1626;
   $145 = $1;
   $146 = (($145) + 44|0);
   HEAP32[$146>>2] = $144;
   $147 = $1;
   $148 = $1;
   $149 = (($148) + 28|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = $1;
   $152 = (($151) + 32|0);
   $153 = HEAP32[$152>>2]|0;
   (_yyText($147,$150,$153)|0);
   $154 = $1;
   $155 = (($154) + 64|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = (($156) + 12|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = (_extension(1,$158)|0);
   do {
    if ($159) {
    } else {
     $160 = $1;
     $161 = (_yy_Variable($160)|0);
     $162 = ($161|0)!=(0);
     if ($162) {
      break L7;
     } else {
      break;
     }
    }
   } while(0);
   $163 = $yypos1626;
   $164 = $1;
   $165 = (($164) + 12|0);
   HEAP32[$165>>2] = $163;
   $166 = $yythunkpos1626;
   $167 = $1;
   $168 = (($167) + 44|0);
   HEAP32[$168>>2] = $166;
   $169 = $1;
   $170 = (_yy_Image($169)|0);
   $171 = ($170|0)!=(0);
   if ($171) {
    break;
   }
   $172 = $yypos1626;
   $173 = $1;
   $174 = (($173) + 12|0);
   HEAP32[$174>>2] = $172;
   $175 = $yythunkpos1626;
   $176 = $1;
   $177 = (($176) + 44|0);
   HEAP32[$177>>2] = $175;
   $178 = $1;
   $179 = (_yy_Link($178)|0);
   $180 = ($179|0)!=(0);
   if ($180) {
    break;
   }
   $181 = $yypos1626;
   $182 = $1;
   $183 = (($182) + 12|0);
   HEAP32[$183>>2] = $181;
   $184 = $yythunkpos1626;
   $185 = $1;
   $186 = (($185) + 44|0);
   HEAP32[$186>>2] = $184;
   $187 = $1;
   $188 = (_yy_NoteReference($187)|0);
   $189 = ($188|0)!=(0);
   if ($189) {
    break;
   }
   $190 = $yypos1626;
   $191 = $1;
   $192 = (($191) + 12|0);
   HEAP32[$192>>2] = $190;
   $193 = $yythunkpos1626;
   $194 = $1;
   $195 = (($194) + 44|0);
   HEAP32[$195>>2] = $193;
   $196 = $1;
   $197 = (_yy_Code($196)|0);
   $198 = ($197|0)!=(0);
   if ($198) {
    break;
   }
   $199 = $yypos1626;
   $200 = $1;
   $201 = (($200) + 12|0);
   HEAP32[$201>>2] = $199;
   $202 = $yythunkpos1626;
   $203 = $1;
   $204 = (($203) + 44|0);
   HEAP32[$204>>2] = $202;
   $205 = $1;
   $206 = (_yy_MarkdownHtmlTagOpen($205)|0);
   $207 = ($206|0)!=(0);
   if ($207) {
    break;
   }
   $208 = $yypos1626;
   $209 = $1;
   $210 = (($209) + 12|0);
   HEAP32[$210>>2] = $208;
   $211 = $yythunkpos1626;
   $212 = $1;
   $213 = (($212) + 44|0);
   HEAP32[$213>>2] = $211;
   $214 = $1;
   $215 = (_yy_RawHtml($214)|0);
   $216 = ($215|0)!=(0);
   if ($216) {
    break;
   }
   $217 = $yypos1626;
   $218 = $1;
   $219 = (($218) + 12|0);
   HEAP32[$219>>2] = $217;
   $220 = $yythunkpos1626;
   $221 = $1;
   $222 = (($221) + 44|0);
   HEAP32[$222>>2] = $220;
   $223 = $1;
   $224 = (_yy_Entity($223)|0);
   $225 = ($224|0)!=(0);
   if ($225) {
    break;
   }
   $226 = $yypos1626;
   $227 = $1;
   $228 = (($227) + 12|0);
   HEAP32[$228>>2] = $226;
   $229 = $yythunkpos1626;
   $230 = $1;
   $231 = (($230) + 44|0);
   HEAP32[$231>>2] = $229;
   $232 = $1;
   $233 = (_yy_EscapedChar($232)|0);
   $234 = ($233|0)!=(0);
   if ($234) {
    break;
   }
   $235 = $yypos1626;
   $236 = $1;
   $237 = (($236) + 12|0);
   HEAP32[$237>>2] = $235;
   $238 = $yythunkpos1626;
   $239 = $1;
   $240 = (($239) + 44|0);
   HEAP32[$240>>2] = $238;
   $241 = $1;
   $242 = (_yy_Smart($241)|0);
   $243 = ($242|0)!=(0);
   if ($243) {
    break;
   }
   $244 = $yypos1626;
   $245 = $1;
   $246 = (($245) + 12|0);
   HEAP32[$246>>2] = $244;
   $247 = $yythunkpos1626;
   $248 = $1;
   $249 = (($248) + 44|0);
   HEAP32[$249>>2] = $247;
   $250 = $1;
   $251 = (_yy_Symbol($250)|0);
   $252 = ($251|0)!=(0);
   if ($252) {
    break;
   }
   $253 = $yypos0;
   $254 = $1;
   $255 = (($254) + 12|0);
   HEAP32[$255>>2] = $253;
   $256 = $yythunkpos0;
   $257 = $1;
   $258 = (($257) + 44|0);
   HEAP32[$258>>2] = $256;
   $0 = 0;
   $259 = $0;
   STACKTOP = sp;return ($259|0);
  }
 } while(0);
 $0 = 1;
 $259 = $0;
 STACKTOP = sp;return ($259|0);
}
function _yy_1_EmphAndStrongStar($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = (($10) + 52|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + -8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_cons($9,$14)|0);
 $16 = $0;
 $17 = (($16) + 52|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + -8|0);
 HEAP32[$19>>2] = $15;
 STACKTOP = sp;return;
}
function _yy_2_EmphAndStrongStar($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_mk_pos_list(22,$9,$11,$14)|0);
 $16 = $0;
 $17 = (($16) + 48|0);
 HEAP32[$17>>2] = $15;
 STACKTOP = sp;return;
}
function _yy_PossibleEmphStrongUl($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $yypos0 = 0, $yypos1419 = 0, $yypos1420 = 0, $yypos1421 = 0, $yypos1422 = 0, $yypos1423 = 0, $yypos1425 = 0, $yypos1426 = 0, $yypos1427 = 0, $yypos1428 = 0, $yypos1429 = 0, $yythunkpos0 = 0, $yythunkpos1419 = 0, $yythunkpos1420 = 0, $yythunkpos1421 = 0, $yythunkpos1422 = 0, $yythunkpos1423 = 0, $yythunkpos1425 = 0, $yythunkpos1426 = 0, $yythunkpos1427 = 0;
 var $yythunkpos1428 = 0, $yythunkpos1429 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchString($8,45144)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = (($11) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $yypos1420 = $13;
   $14 = $1;
   $15 = (($14) + 44|0);
   $16 = HEAP32[$15>>2]|0;
   $yythunkpos1420 = $16;
   $17 = $1;
   $18 = (_yymatchChar($17,10)|0);
   $19 = ($18|0)!=(0);
   if ($19) {
    break;
   }
   $20 = $yypos1420;
   $21 = $1;
   $22 = (($21) + 12|0);
   HEAP32[$22>>2] = $20;
   $23 = $yythunkpos1420;
   $24 = $1;
   $25 = (($24) + 44|0);
   HEAP32[$25>>2] = $23;
   $26 = $1;
   $27 = (($26) + 12|0);
   $28 = HEAP32[$27>>2]|0;
   $yypos1421 = $28;
   $29 = $1;
   $30 = (($29) + 44|0);
   $31 = HEAP32[$30>>2]|0;
   $yythunkpos1421 = $31;
   $32 = $1;
   $33 = (_yymatchChar($32,95)|0);
   $34 = ($33|0)!=(0);
   if ($34) {
    break;
   }
   $35 = $yypos1421;
   $36 = $1;
   $37 = (($36) + 12|0);
   HEAP32[$37>>2] = $35;
   $38 = $yythunkpos1421;
   $39 = $1;
   $40 = (($39) + 44|0);
   HEAP32[$40>>2] = $38;
   $41 = $1;
   $42 = (_yymatchDot($41)|0);
   $43 = ($42|0)!=(0);
   if (!($43)) {
    break;
   }
   while(1) {
    $44 = $1;
    $45 = (($44) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $yypos1419 = $46;
    $47 = $1;
    $48 = (($47) + 44|0);
    $49 = HEAP32[$48>>2]|0;
    $yythunkpos1419 = $49;
    $50 = $1;
    $51 = (($50) + 12|0);
    $52 = HEAP32[$51>>2]|0;
    $yypos1422 = $52;
    $53 = $1;
    $54 = (($53) + 44|0);
    $55 = HEAP32[$54>>2]|0;
    $yythunkpos1422 = $55;
    $56 = $1;
    $57 = (_yymatchChar($56,10)|0);
    $58 = ($57|0)!=(0);
    if ($58) {
     label = 14;
     break;
    }
    $59 = $yypos1422;
    $60 = $1;
    $61 = (($60) + 12|0);
    HEAP32[$61>>2] = $59;
    $62 = $yythunkpos1422;
    $63 = $1;
    $64 = (($63) + 44|0);
    HEAP32[$64>>2] = $62;
    $65 = $1;
    $66 = (($65) + 12|0);
    $67 = HEAP32[$66>>2]|0;
    $yypos1423 = $67;
    $68 = $1;
    $69 = (($68) + 44|0);
    $70 = HEAP32[$69>>2]|0;
    $yythunkpos1423 = $70;
    $71 = $1;
    $72 = (_yymatchChar($71,95)|0);
    $73 = ($72|0)!=(0);
    if ($73) {
     label = 17;
     break;
    }
    $74 = $yypos1423;
    $75 = $1;
    $76 = (($75) + 12|0);
    HEAP32[$76>>2] = $74;
    $77 = $yythunkpos1423;
    $78 = $1;
    $79 = (($78) + 44|0);
    HEAP32[$79>>2] = $77;
    $80 = $1;
    $81 = (_yymatchDot($80)|0);
    $82 = ($81|0)!=(0);
    if (!($82)) {
     label = 19;
     break;
    }
   }
   if ((label|0) == 14) {
   }
   else if ((label|0) == 17) {
   }
   else if ((label|0) == 19) {
   }
   $83 = $yypos1419;
   $84 = $1;
   $85 = (($84) + 12|0);
   HEAP32[$85>>2] = $83;
   $86 = $yythunkpos1419;
   $87 = $1;
   $88 = (($87) + 44|0);
   HEAP32[$88>>2] = $86;
   $89 = $1;
   $90 = (_yymatchString($89,45144)|0);
   $91 = ($90|0)!=(0);
   if (!($91)) {
    break;
   }
   $92 = $1;
   $93 = (($92) + 12|0);
   $94 = HEAP32[$93>>2]|0;
   $yypos1426 = $94;
   $95 = $1;
   $96 = (($95) + 44|0);
   $97 = HEAP32[$96>>2]|0;
   $yythunkpos1426 = $97;
   $98 = $1;
   $99 = (_yymatchChar($98,10)|0);
   $100 = ($99|0)!=(0);
   if ($100) {
    break;
   }
   $101 = $yypos1426;
   $102 = $1;
   $103 = (($102) + 12|0);
   HEAP32[$103>>2] = $101;
   $104 = $yythunkpos1426;
   $105 = $1;
   $106 = (($105) + 44|0);
   HEAP32[$106>>2] = $104;
   $107 = $1;
   $108 = (($107) + 12|0);
   $109 = HEAP32[$108>>2]|0;
   $yypos1427 = $109;
   $110 = $1;
   $111 = (($110) + 44|0);
   $112 = HEAP32[$111>>2]|0;
   $yythunkpos1427 = $112;
   $113 = $1;
   $114 = (_yymatchChar($113,95)|0);
   $115 = ($114|0)!=(0);
   if ($115) {
    break;
   }
   $116 = $yypos1427;
   $117 = $1;
   $118 = (($117) + 12|0);
   HEAP32[$118>>2] = $116;
   $119 = $yythunkpos1427;
   $120 = $1;
   $121 = (($120) + 44|0);
   HEAP32[$121>>2] = $119;
   $122 = $1;
   $123 = (_yymatchDot($122)|0);
   $124 = ($123|0)!=(0);
   if (!($124)) {
    break;
   }
   while(1) {
    $125 = $1;
    $126 = (($125) + 12|0);
    $127 = HEAP32[$126>>2]|0;
    $yypos1425 = $127;
    $128 = $1;
    $129 = (($128) + 44|0);
    $130 = HEAP32[$129>>2]|0;
    $yythunkpos1425 = $130;
    $131 = $1;
    $132 = (($131) + 12|0);
    $133 = HEAP32[$132>>2]|0;
    $yypos1428 = $133;
    $134 = $1;
    $135 = (($134) + 44|0);
    $136 = HEAP32[$135>>2]|0;
    $yythunkpos1428 = $136;
    $137 = $1;
    $138 = (_yymatchChar($137,10)|0);
    $139 = ($138|0)!=(0);
    if ($139) {
     label = 34;
     break;
    }
    $140 = $yypos1428;
    $141 = $1;
    $142 = (($141) + 12|0);
    HEAP32[$142>>2] = $140;
    $143 = $yythunkpos1428;
    $144 = $1;
    $145 = (($144) + 44|0);
    HEAP32[$145>>2] = $143;
    $146 = $1;
    $147 = (($146) + 12|0);
    $148 = HEAP32[$147>>2]|0;
    $yypos1429 = $148;
    $149 = $1;
    $150 = (($149) + 44|0);
    $151 = HEAP32[$150>>2]|0;
    $yythunkpos1429 = $151;
    $152 = $1;
    $153 = (_yymatchChar($152,95)|0);
    $154 = ($153|0)!=(0);
    if ($154) {
     label = 37;
     break;
    }
    $155 = $yypos1429;
    $156 = $1;
    $157 = (($156) + 12|0);
    HEAP32[$157>>2] = $155;
    $158 = $yythunkpos1429;
    $159 = $1;
    $160 = (($159) + 44|0);
    HEAP32[$160>>2] = $158;
    $161 = $1;
    $162 = (_yymatchDot($161)|0);
    $163 = ($162|0)!=(0);
    if (!($163)) {
     label = 39;
     break;
    }
   }
   if ((label|0) == 34) {
   }
   else if ((label|0) == 37) {
   }
   else if ((label|0) == 39) {
   }
   $164 = $yypos1425;
   $165 = $1;
   $166 = (($165) + 12|0);
   HEAP32[$166>>2] = $164;
   $167 = $yythunkpos1425;
   $168 = $1;
   $169 = (($168) + 44|0);
   HEAP32[$169>>2] = $167;
   $170 = $1;
   $171 = (_yymatchChar($170,95)|0);
   $172 = ($171|0)!=(0);
   if (!($172)) {
    break;
   }
   $0 = 1;
   $179 = $0;
   STACKTOP = sp;return ($179|0);
  } else {
  }
 } while(0);
 $173 = $yypos0;
 $174 = $1;
 $175 = (($174) + 12|0);
 HEAP32[$175>>2] = $173;
 $176 = $yythunkpos0;
 $177 = $1;
 $178 = (($177) + 44|0);
 HEAP32[$178>>2] = $176;
 $0 = 0;
 $179 = $0;
 STACKTOP = sp;return ($179|0);
}
function _yy_1_EmphAndStrongUl($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = (($10) + 52|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + -8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_cons($9,$14)|0);
 $16 = $0;
 $17 = (($16) + 52|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + -8|0);
 HEAP32[$19>>2] = $15;
 STACKTOP = sp;return;
}
function _yy_2_EmphAndStrongUl($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_mk_pos_list(22,$9,$11,$14)|0);
 $16 = $0;
 $17 = (($16) + 48|0);
 HEAP32[$17>>2] = $15;
 STACKTOP = sp;return;
}
function _yy_1_StrongStar($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = (($10) + 52|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + -8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_cons($9,$14)|0);
 $16 = $0;
 $17 = (($16) + 52|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + -8|0);
 HEAP32[$19>>2] = $15;
 STACKTOP = sp;return;
}
function _yy_2_StrongStar($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_mk_pos_list(21,$9,$11,$14)|0);
 $16 = $0;
 $17 = (($16) + 48|0);
 HEAP32[$17>>2] = $15;
 STACKTOP = sp;return;
}
function _yy_1_StrongUl($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = (($10) + 52|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + -8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_cons($9,$14)|0);
 $16 = $0;
 $17 = (($16) + 52|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + -8|0);
 HEAP32[$19>>2] = $15;
 STACKTOP = sp;return;
}
function _yy_2_StrongUl($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_mk_pos_list(21,$9,$11,$14)|0);
 $16 = $0;
 $17 = (($16) + 48|0);
 HEAP32[$17>>2] = $15;
 STACKTOP = sp;return;
}
function _yy_1_EmphStar($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = (($10) + 52|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + -8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_cons($9,$14)|0);
 $16 = $0;
 $17 = (($16) + 52|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + -8|0);
 HEAP32[$19>>2] = $15;
 STACKTOP = sp;return;
}
function _yy_2_EmphStar($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = (($10) + 52|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + -8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_cons($9,$14)|0);
 $16 = $0;
 $17 = (($16) + 52|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + -8|0);
 HEAP32[$19>>2] = $15;
 STACKTOP = sp;return;
}
function _yy_3_EmphStar($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_mk_pos_list(22,$9,$11,$14)|0);
 $16 = $0;
 $17 = (($16) + 48|0);
 HEAP32[$17>>2] = $15;
 STACKTOP = sp;return;
}
function _yy_1_EmphUl($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = (($10) + 52|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + -8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_cons($9,$14)|0);
 $16 = $0;
 $17 = (($16) + 52|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + -8|0);
 HEAP32[$19>>2] = $15;
 STACKTOP = sp;return;
}
function _yy_2_EmphUl($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = (($10) + 52|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + -8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_cons($9,$14)|0);
 $16 = $0;
 $17 = (($16) + 52|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + -8|0);
 HEAP32[$19>>2] = $15;
 STACKTOP = sp;return;
}
function _yy_3_EmphUl($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_mk_pos_list(22,$9,$11,$14)|0);
 $16 = $0;
 $17 = (($16) + 48|0);
 HEAP32[$17>>2] = $15;
 STACKTOP = sp;return;
}
function _yy_RawCitationReference($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos1382 = 0, $yypos1383 = 0, $yypos1384 = 0, $yypos1385 = 0, $yypos1386 = 0, $yythunkpos0 = 0, $yythunkpos1382 = 0, $yythunkpos1383 = 0, $yythunkpos1384 = 0;
 var $yythunkpos1385 = 0, $yythunkpos1386 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchString($8,45008)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = $1;
   $13 = (($12) + 28|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $1;
   $16 = (($15) + 32|0);
   $17 = HEAP32[$16>>2]|0;
   (_yyText($11,$14,$17)|0);
   $18 = $1;
   $19 = (($18) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $1;
   $22 = (($21) + 28|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = (($23) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $yypos1383 = $25;
   $26 = $1;
   $27 = (($26) + 44|0);
   $28 = HEAP32[$27>>2]|0;
   $yythunkpos1383 = $28;
   $29 = $1;
   $30 = (_yy_Newline($29)|0);
   $31 = ($30|0)!=(0);
   if ($31) {
    break;
   }
   $32 = $yypos1383;
   $33 = $1;
   $34 = (($33) + 12|0);
   HEAP32[$34>>2] = $32;
   $35 = $yythunkpos1383;
   $36 = $1;
   $37 = (($36) + 44|0);
   HEAP32[$37>>2] = $35;
   $38 = $1;
   $39 = (($38) + 12|0);
   $40 = HEAP32[$39>>2]|0;
   $yypos1384 = $40;
   $41 = $1;
   $42 = (($41) + 44|0);
   $43 = HEAP32[$42>>2]|0;
   $yythunkpos1384 = $43;
   $44 = $1;
   $45 = (_yymatchChar($44,93)|0);
   $46 = ($45|0)!=(0);
   if ($46) {
    break;
   }
   $47 = $yypos1384;
   $48 = $1;
   $49 = (($48) + 12|0);
   HEAP32[$49>>2] = $47;
   $50 = $yythunkpos1384;
   $51 = $1;
   $52 = (($51) + 44|0);
   HEAP32[$52>>2] = $50;
   $53 = $1;
   $54 = (_yymatchDot($53)|0);
   $55 = ($54|0)!=(0);
   if (!($55)) {
    break;
   }
   while(1) {
    $56 = $1;
    $57 = (($56) + 12|0);
    $58 = HEAP32[$57>>2]|0;
    $yypos1382 = $58;
    $59 = $1;
    $60 = (($59) + 44|0);
    $61 = HEAP32[$60>>2]|0;
    $yythunkpos1382 = $61;
    $62 = $1;
    $63 = (($62) + 12|0);
    $64 = HEAP32[$63>>2]|0;
    $yypos1385 = $64;
    $65 = $1;
    $66 = (($65) + 44|0);
    $67 = HEAP32[$66>>2]|0;
    $yythunkpos1385 = $67;
    $68 = $1;
    $69 = (_yy_Newline($68)|0);
    $70 = ($69|0)!=(0);
    if ($70) {
     label = 15;
     break;
    }
    $71 = $yypos1385;
    $72 = $1;
    $73 = (($72) + 12|0);
    HEAP32[$73>>2] = $71;
    $74 = $yythunkpos1385;
    $75 = $1;
    $76 = (($75) + 44|0);
    HEAP32[$76>>2] = $74;
    $77 = $1;
    $78 = (($77) + 12|0);
    $79 = HEAP32[$78>>2]|0;
    $yypos1386 = $79;
    $80 = $1;
    $81 = (($80) + 44|0);
    $82 = HEAP32[$81>>2]|0;
    $yythunkpos1386 = $82;
    $83 = $1;
    $84 = (_yymatchChar($83,93)|0);
    $85 = ($84|0)!=(0);
    if ($85) {
     label = 18;
     break;
    }
    $86 = $yypos1386;
    $87 = $1;
    $88 = (($87) + 12|0);
    HEAP32[$88>>2] = $86;
    $89 = $yythunkpos1386;
    $90 = $1;
    $91 = (($90) + 44|0);
    HEAP32[$91>>2] = $89;
    $92 = $1;
    $93 = (_yymatchDot($92)|0);
    $94 = ($93|0)!=(0);
    if (!($94)) {
     label = 20;
     break;
    }
   }
   if ((label|0) == 15) {
   }
   else if ((label|0) == 18) {
   }
   else if ((label|0) == 20) {
   }
   $95 = $yypos1382;
   $96 = $1;
   $97 = (($96) + 12|0);
   HEAP32[$97>>2] = $95;
   $98 = $yythunkpos1382;
   $99 = $1;
   $100 = (($99) + 44|0);
   HEAP32[$100>>2] = $98;
   $101 = $1;
   $102 = $1;
   $103 = (($102) + 28|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = $1;
   $106 = (($105) + 32|0);
   $107 = HEAP32[$106>>2]|0;
   (_yyText($101,$104,$107)|0);
   $108 = $1;
   $109 = (($108) + 12|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $1;
   $112 = (($111) + 32|0);
   HEAP32[$112>>2] = $110;
   $113 = $1;
   $114 = (_yymatchChar($113,93)|0);
   $115 = ($114|0)!=(0);
   if (!($115)) {
    break;
   }
   $116 = $1;
   $117 = $1;
   $118 = (($117) + 28|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $1;
   $121 = (($120) + 32|0);
   $122 = HEAP32[$121>>2]|0;
   _yyDo($116,247,$119,$122,45016);
   $0 = 1;
   $129 = $0;
   STACKTOP = sp;return ($129|0);
  } else {
  }
 } while(0);
 $123 = $yypos0;
 $124 = $1;
 $125 = (($124) + 12|0);
 HEAP32[$125>>2] = $123;
 $126 = $yythunkpos0;
 $127 = $1;
 $128 = (($127) + 44|0);
 HEAP32[$128>>2] = $126;
 $0 = 0;
 $129 = $0;
 STACKTOP = sp;return ($129|0);
}
function _yy_1_CitationReferenceDouble($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $label = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_label_from_node_tree($9)|0);
 $label = $10;
 $11 = $0;
 $12 = (($11) + 52|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + -8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $0;
 $17 = (($16) + 52|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + -4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (_mk_link($15,$22,0,0,0)|0);
 $24 = $0;
 $25 = (($24) + 48|0);
 HEAP32[$25>>2] = $23;
 $26 = $0;
 $27 = (($26) + 48|0);
 $28 = HEAP32[$27>>2]|0;
 HEAP16[$28>>1] = 72;
 $29 = $label;
 $30 = (_strcmp($29,45080)|0);
 $31 = ($30|0)==(0);
 if (!($31)) {
  $35 = $label;
  _free($35);
  $36 = $0;
  $37 = (($36) + 52|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + -4|0);
  $40 = HEAP32[$39>>2]|0;
  _free_node_tree($40);
  STACKTOP = sp;return;
 }
 $32 = $0;
 $33 = (($32) + 48|0);
 $34 = HEAP32[$33>>2]|0;
 HEAP16[$34>>1] = 73;
 $35 = $label;
 _free($35);
 $36 = $0;
 $37 = (($36) + 52|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + -4|0);
 $40 = HEAP32[$39>>2]|0;
 _free_node_tree($40);
 STACKTOP = sp;return;
}
function _yy_1_CitationReferenceSingle($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_mk_link(0,$11,0,0,0)|0);
 $13 = $0;
 $14 = (($13) + 48|0);
 HEAP32[$14>>2] = $12;
 $15 = $0;
 $16 = (($15) + 48|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP16[$17>>1] = 72;
 $18 = $0;
 $19 = (($18) + 52|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + -4|0);
 $22 = HEAP32[$21>>2]|0;
 _free_node_tree($22);
 STACKTOP = sp;return;
}
function _yy_1_Ellipsis($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 $14 = $0;
 $15 = (($14) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP16[$16>>1] = 33;
 STACKTOP = sp;return;
}
function _yy_EmDash($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yythunkpos0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = $1;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($12) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 (_yyText($8,$11,$14)|0);
 $15 = $1;
 $16 = (($15) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = (($18) + 28|0);
 HEAP32[$19>>2] = $17;
 $20 = $1;
 $21 = (_yymatchString($20,42760)|0);
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = $1;
  $24 = $1;
  $25 = (($24) + 28|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $1;
  $28 = (($27) + 32|0);
  $29 = HEAP32[$28>>2]|0;
  (_yyText($23,$26,$29)|0);
  $30 = $1;
  $31 = (($30) + 12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $1;
  $34 = (($33) + 32|0);
  HEAP32[$34>>2] = $32;
  $35 = $1;
  $36 = $1;
  $37 = (($36) + 28|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $1;
  $40 = (($39) + 32|0);
  $41 = HEAP32[$40>>2]|0;
  _yyDo($35,248,$38,$41,44296);
  $0 = 1;
  $48 = $0;
  STACKTOP = sp;return ($48|0);
 } else {
  $42 = $yypos0;
  $43 = $1;
  $44 = (($43) + 12|0);
  HEAP32[$44>>2] = $42;
  $45 = $yythunkpos0;
  $46 = $1;
  $47 = (($46) + 44|0);
  HEAP32[$47>>2] = $45;
  $0 = 0;
  $48 = $0;
  STACKTOP = sp;return ($48|0);
 }
 return (0)|0;
}
function _yy_EnDash($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $yypos0 = 0;
 var $yypos1186 = 0, $yypos1188 = 0, $yythunkpos0 = 0, $yythunkpos1186 = 0, $yythunkpos1188 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = $1;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($12) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 (_yyText($8,$11,$14)|0);
 $15 = $1;
 $16 = (($15) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = (($18) + 28|0);
 HEAP32[$19>>2] = $17;
 $20 = $1;
 $21 = (($20) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $yypos1186 = $22;
 $23 = $1;
 $24 = (($23) + 44|0);
 $25 = HEAP32[$24>>2]|0;
 $yythunkpos1186 = $25;
 $26 = $1;
 $27 = (_yymatchString($26,44224)|0);
 $28 = ($27|0)!=(0);
 L2: do {
  if ($28) {
  } else {
   $29 = $yypos1186;
   $30 = $1;
   $31 = (($30) + 12|0);
   HEAP32[$31>>2] = $29;
   $32 = $yythunkpos1186;
   $33 = $1;
   $34 = (($33) + 44|0);
   HEAP32[$34>>2] = $32;
   $35 = $1;
   $36 = (_yymatchChar($35,45)|0);
   $37 = ($36|0)!=(0);
   do {
    if ($37) {
     $38 = $1;
     $39 = (($38) + 12|0);
     $40 = HEAP32[$39>>2]|0;
     $yypos1188 = $40;
     $41 = $1;
     $42 = (($41) + 44|0);
     $43 = HEAP32[$42>>2]|0;
     $yythunkpos1188 = $43;
     $44 = $1;
     $45 = (_yy_Digit($44)|0);
     $46 = ($45|0)!=(0);
     if ($46) {
      $47 = $yypos1188;
      $48 = $1;
      $49 = (($48) + 12|0);
      HEAP32[$49>>2] = $47;
      $50 = $yythunkpos1188;
      $51 = $1;
      $52 = (($51) + 44|0);
      HEAP32[$52>>2] = $50;
      break L2;
     } else {
      break;
     }
    } else {
    }
   } while(0);
   $72 = $yypos0;
   $73 = $1;
   $74 = (($73) + 12|0);
   HEAP32[$74>>2] = $72;
   $75 = $yythunkpos0;
   $76 = $1;
   $77 = (($76) + 44|0);
   HEAP32[$77>>2] = $75;
   $0 = 0;
   $78 = $0;
   STACKTOP = sp;return ($78|0);
  }
 } while(0);
 $53 = $1;
 $54 = $1;
 $55 = (($54) + 28|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $1;
 $58 = (($57) + 32|0);
 $59 = HEAP32[$58>>2]|0;
 (_yyText($53,$56,$59)|0);
 $60 = $1;
 $61 = (($60) + 12|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $1;
 $64 = (($63) + 32|0);
 HEAP32[$64>>2] = $62;
 $65 = $1;
 $66 = $1;
 $67 = (($66) + 28|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = $1;
 $70 = (($69) + 32|0);
 $71 = HEAP32[$70>>2]|0;
 _yyDo($65,249,$68,$71,44232);
 $0 = 1;
 $78 = $0;
 STACKTOP = sp;return ($78|0);
}
function _yy_SingleQuoteStart($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1182 = 0, $yypos1183 = 0, $yythunkpos0 = 0, $yythunkpos1182 = 0, $yythunkpos1183 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,39)|0);
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $1;
  $12 = (($11) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $yypos1182 = $13;
  $14 = $1;
  $15 = (($14) + 44|0);
  $16 = HEAP32[$15>>2]|0;
  $yythunkpos1182 = $16;
  $17 = $1;
  $18 = (($17) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $yypos1183 = $19;
  $20 = $1;
  $21 = (($20) + 44|0);
  $22 = HEAP32[$21>>2]|0;
  $yythunkpos1183 = $22;
  $23 = $1;
  $24 = (_yy_Spacechar($23)|0);
  $25 = ($24|0)!=(0);
  do {
   if ($25) {
   } else {
    $26 = $yypos1183;
    $27 = $1;
    $28 = (($27) + 12|0);
    HEAP32[$28>>2] = $26;
    $29 = $yythunkpos1183;
    $30 = $1;
    $31 = (($30) + 44|0);
    HEAP32[$31>>2] = $29;
    $32 = $1;
    $33 = (_yy_Newline($32)|0);
    $34 = ($33|0)!=(0);
    if ($34) {
     break;
    }
    $35 = $yypos1182;
    $36 = $1;
    $37 = (($36) + 12|0);
    HEAP32[$37>>2] = $35;
    $38 = $yythunkpos1182;
    $39 = $1;
    $40 = (($39) + 44|0);
    HEAP32[$40>>2] = $38;
    $0 = 1;
    $47 = $0;
    STACKTOP = sp;return ($47|0);
   }
  } while(0);
 } else {
 }
 $41 = $yypos0;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = $41;
 $44 = $yythunkpos0;
 $45 = $1;
 $46 = (($45) + 44|0);
 HEAP32[$46>>2] = $44;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _yy_SingleQuoteEnd($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yypos1180 = 0, $yythunkpos0 = 0, $yythunkpos1180 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,39)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = (($11) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $yypos1180 = $13;
   $14 = $1;
   $15 = (($14) + 44|0);
   $16 = HEAP32[$15>>2]|0;
   $yythunkpos1180 = $16;
   $17 = $1;
   $18 = (_yy_Alphanumeric($17)|0);
   $19 = ($18|0)!=(0);
   if ($19) {
    break;
   }
   $20 = $yypos1180;
   $21 = $1;
   $22 = (($21) + 12|0);
   HEAP32[$22>>2] = $20;
   $23 = $yythunkpos1180;
   $24 = $1;
   $25 = (($24) + 44|0);
   HEAP32[$25>>2] = $23;
   $0 = 1;
   $32 = $0;
   STACKTOP = sp;return ($32|0);
  } else {
  }
 } while(0);
 $26 = $yypos0;
 $27 = $1;
 $28 = (($27) + 12|0);
 HEAP32[$28>>2] = $26;
 $29 = $yythunkpos0;
 $30 = $1;
 $31 = (($30) + 44|0);
 HEAP32[$31>>2] = $29;
 $0 = 0;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _yy_1_SingleQuoted($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = (($10) + 52|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + -8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_cons($9,$14)|0);
 $16 = $0;
 $17 = (($16) + 52|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + -8|0);
 HEAP32[$19>>2] = $15;
 STACKTOP = sp;return;
}
function _yy_2_SingleQuoted($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_mk_list(36,$9)|0);
 $11 = $0;
 $12 = (($11) + 48|0);
 HEAP32[$12>>2] = $10;
 STACKTOP = sp;return;
}
function _yy_DoubleQuoteStart($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yythunkpos0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,34)|0);
 $10 = ($9|0)!=(0);
 if ($10) {
  $0 = 1;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 $11 = $yypos0;
 $12 = $1;
 $13 = (($12) + 12|0);
 HEAP32[$13>>2] = $11;
 $14 = $yythunkpos0;
 $15 = $1;
 $16 = (($15) + 44|0);
 HEAP32[$16>>2] = $14;
 $0 = 0;
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _yy_DoubleQuoteEnd($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yythunkpos0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,34)|0);
 $10 = ($9|0)!=(0);
 if ($10) {
  $0 = 1;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 $11 = $yypos0;
 $12 = $1;
 $13 = (($12) + 12|0);
 HEAP32[$13>>2] = $11;
 $14 = $yythunkpos0;
 $15 = $1;
 $16 = (($15) + 44|0);
 HEAP32[$16>>2] = $14;
 $0 = 0;
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _yy_BackTickEnd($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yythunkpos0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchString($8,43072)|0);
 $10 = ($9|0)!=(0);
 if ($10) {
  $0 = 1;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 $11 = $yypos0;
 $12 = $1;
 $13 = (($12) + 12|0);
 HEAP32[$13>>2] = $11;
 $14 = $yythunkpos0;
 $15 = $1;
 $16 = (($15) + 44|0);
 HEAP32[$16>>2] = $14;
 $0 = 0;
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _yy_BackTickStart($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yythunkpos0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchString($8,43080)|0);
 $10 = ($9|0)!=(0);
 if ($10) {
  $0 = 1;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 $11 = $yypos0;
 $12 = $1;
 $13 = (($12) + 12|0);
 HEAP32[$13>>2] = $11;
 $14 = $yythunkpos0;
 $15 = $1;
 $16 = (($15) + 44|0);
 HEAP32[$16>>2] = $14;
 $0 = 0;
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _yy_1_DoubleQuoted($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = (($10) + 52|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + -8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_cons($9,$14)|0);
 $16 = $0;
 $17 = (($16) + 52|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + -8|0);
 HEAP32[$19>>2] = $15;
 STACKTOP = sp;return;
}
function _yy_2_DoubleQuoted($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_mk_list(37,$9)|0);
 $11 = $0;
 $12 = (($11) + 48|0);
 HEAP32[$12>>2] = $10;
 STACKTOP = sp;return;
}
function _yy_1_BackTickQuoted($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = (($10) + 52|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + -8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_cons($9,$14)|0);
 $16 = $0;
 $17 = (($16) + 52|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + -8|0);
 HEAP32[$19>>2] = $15;
 STACKTOP = sp;return;
}
function _yy_2_BackTickQuoted($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_mk_list(37,$9)|0);
 $11 = $0;
 $12 = (($11) + 48|0);
 HEAP32[$12>>2] = $10;
 STACKTOP = sp;return;
}
function _yy_1_Apostrophe($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 $14 = $0;
 $15 = (($14) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP16[$16>>1] = 3;
 STACKTOP = sp;return;
}
function _yy_ExtendedSpecialChar($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yypos0 = 0, $yypos2116 = 0;
 var $yypos2118 = 0, $yythunkpos0 = 0, $yythunkpos2116 = 0, $yythunkpos2118 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $yypos2116 = $10;
 $11 = $1;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $yythunkpos2116 = $13;
 $14 = $1;
 $15 = $1;
 $16 = (($15) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = (($18) + 32|0);
 $20 = HEAP32[$19>>2]|0;
 (_yyText($14,$17,$20)|0);
 $21 = $1;
 $22 = (($21) + 64|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (_extension(16,$25)|0);
 L1: do {
  if ($26) {
   $27 = $1;
   $28 = (($27) + 12|0);
   $29 = HEAP32[$28>>2]|0;
   $yypos2118 = $29;
   $30 = $1;
   $31 = (($30) + 44|0);
   $32 = HEAP32[$31>>2]|0;
   $yythunkpos2118 = $32;
   $33 = $1;
   $34 = (_yymatchChar($33,46)|0);
   $35 = ($34|0)!=(0);
   do {
    if ($35) {
    } else {
     $36 = $yypos2118;
     $37 = $1;
     $38 = (($37) + 12|0);
     HEAP32[$38>>2] = $36;
     $39 = $yythunkpos2118;
     $40 = $1;
     $41 = (($40) + 44|0);
     HEAP32[$41>>2] = $39;
     $42 = $1;
     $43 = (_yymatchChar($42,45)|0);
     $44 = ($43|0)!=(0);
     if ($44) {
      break;
     }
     $45 = $yypos2118;
     $46 = $1;
     $47 = (($46) + 12|0);
     HEAP32[$47>>2] = $45;
     $48 = $yythunkpos2118;
     $49 = $1;
     $50 = (($49) + 44|0);
     HEAP32[$50>>2] = $48;
     $51 = $1;
     $52 = (_yymatchChar($51,39)|0);
     $53 = ($52|0)!=(0);
     if ($53) {
      break;
     }
     $54 = $yypos2118;
     $55 = $1;
     $56 = (($55) + 12|0);
     HEAP32[$56>>2] = $54;
     $57 = $yythunkpos2118;
     $58 = $1;
     $59 = (($58) + 44|0);
     HEAP32[$59>>2] = $57;
     $60 = $1;
     $61 = (_yymatchChar($60,34)|0);
     $62 = ($61|0)!=(0);
     if ($62) {
      break;
     } else {
      label = 16;
      break L1;
     }
    }
   } while(0);
  } else {
   label = 16;
  }
 } while(0);
 L20: do {
  if ((label|0) == 16) {
   $63 = $yypos2116;
   $64 = $1;
   $65 = (($64) + 12|0);
   HEAP32[$65>>2] = $63;
   $66 = $yythunkpos2116;
   $67 = $1;
   $68 = (($67) + 44|0);
   HEAP32[$68>>2] = $66;
   $69 = $1;
   $70 = $1;
   $71 = (($70) + 28|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $1;
   $74 = (($73) + 32|0);
   $75 = HEAP32[$74>>2]|0;
   (_yyText($69,$72,$75)|0);
   $76 = $1;
   $77 = (($76) + 64|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = (($78) + 12|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (_extension(32,$80)|0);
   do {
    if ($81) {
     $82 = $1;
     $83 = (_yymatchChar($82,94)|0);
     $84 = ($83|0)!=(0);
     if ($84) {
      break L20;
     } else {
      break;
     }
    } else {
    }
   } while(0);
   $85 = $yypos2116;
   $86 = $1;
   $87 = (($86) + 12|0);
   HEAP32[$87>>2] = $85;
   $88 = $yythunkpos2116;
   $89 = $1;
   $90 = (($89) + 44|0);
   HEAP32[$90>>2] = $88;
   $91 = $1;
   $92 = $1;
   $93 = (($92) + 28|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = $1;
   $96 = (($95) + 32|0);
   $97 = HEAP32[$96>>2]|0;
   (_yyText($91,$94,$97)|0);
   $98 = $1;
   $99 = (($98) + 64|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = (($100) + 12|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = (_extension(4096,$102)|0);
   do {
    if ($103) {
     $104 = $1;
     $105 = (_yymatchChar($104,123)|0);
     $106 = ($105|0)!=(0);
     if ($106) {
      break L20;
     } else {
      break;
     }
    } else {
    }
   } while(0);
   $107 = $yypos2116;
   $108 = $1;
   $109 = (($108) + 12|0);
   HEAP32[$109>>2] = $107;
   $110 = $yythunkpos2116;
   $111 = $1;
   $112 = (($111) + 44|0);
   HEAP32[$112>>2] = $110;
   $113 = $1;
   $114 = $1;
   $115 = (($114) + 28|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = $1;
   $118 = (($117) + 32|0);
   $119 = HEAP32[$118>>2]|0;
   (_yyText($113,$116,$119)|0);
   $120 = $1;
   $121 = (($120) + 64|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (($122) + 12|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (_extension(1,$124)|0);
   do {
    if ($125) {
    } else {
     $126 = $1;
     $127 = (_yymatchChar($126,126)|0);
     $128 = ($127|0)!=(0);
     if ($128) {
      break L20;
     } else {
      break;
     }
    }
   } while(0);
   $129 = $yypos2116;
   $130 = $1;
   $131 = (($130) + 12|0);
   HEAP32[$131>>2] = $129;
   $132 = $yythunkpos2116;
   $133 = $1;
   $134 = (($133) + 44|0);
   HEAP32[$134>>2] = $132;
   $135 = $1;
   $136 = $1;
   $137 = (($136) + 28|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = $1;
   $140 = (($139) + 32|0);
   $141 = HEAP32[$140>>2]|0;
   (_yyText($135,$138,$141)|0);
   $142 = $1;
   $143 = (($142) + 64|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = (($144) + 12|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = (_extension(1,$146)|0);
   do {
    if ($147) {
    } else {
     $148 = $1;
     $149 = (_yymatchChar($148,124)|0);
     $150 = ($149|0)!=(0);
     if ($150) {
      break L20;
     } else {
      break;
     }
    }
   } while(0);
   $151 = $yypos0;
   $152 = $1;
   $153 = (($152) + 12|0);
   HEAP32[$153>>2] = $151;
   $154 = $yythunkpos0;
   $155 = $1;
   $156 = (($155) + 44|0);
   HEAP32[$156>>2] = $154;
   $0 = 0;
   $157 = $0;
   STACKTOP = sp;return ($157|0);
  }
 } while(0);
 $0 = 1;
 $157 = $0;
 STACKTOP = sp;return ($157|0);
}
function _yy_1_ExtendedCell($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $span = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $span = $11;
 $12 = $span;
 HEAP16[$12>>1] = 57;
 $13 = $0;
 $14 = (($13) + 48|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $span;
 $19 = (($18) + 16|0);
 HEAP32[$19>>2] = $17;
 $20 = $span;
 $21 = $0;
 $22 = (($21) + 48|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + 12|0);
 HEAP32[$24>>2] = $20;
 STACKTOP = sp;return;
}
function _yy_1_EmptyCell($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $3;
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_mk_pos_node(56,0,$6,$9)|0);
 $11 = $0;
 $12 = (($11) + 48|0);
 HEAP32[$12>>2] = $10;
 STACKTOP = sp;return;
}
function _yy_1_FullCell($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons($7,$12)|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4|0);
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _yy_2_FullCell($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_mk_pos_list(56,$9,$11,$14)|0);
 $16 = $0;
 $17 = (($16) + 48|0);
 HEAP32[$17>>2] = $15;
 STACKTOP = sp;return;
}
function _yy_SourceContents($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $yypos1362 = 0, $yypos1363 = 0, $yypos1366 = 0, $yypos1367 = 0, $yypos1368 = 0, $yypos1369 = 0, $yypos1370 = 0, $yypos1371 = 0, $yypos1372 = 0, $yythunkpos1362 = 0, $yythunkpos1363 = 0, $yythunkpos1366 = 0, $yythunkpos1367 = 0, $yythunkpos1368 = 0, $yythunkpos1369 = 0, $yythunkpos1370 = 0, $yythunkpos1371 = 0, $yythunkpos1372 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 while(1) {
  $1 = $0;
  $2 = (($1) + 12|0);
  $3 = HEAP32[$2>>2]|0;
  $yypos1362 = $3;
  $4 = $0;
  $5 = (($4) + 44|0);
  $6 = HEAP32[$5>>2]|0;
  $yythunkpos1362 = $6;
  $7 = $0;
  $8 = (($7) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $yypos1363 = $9;
  $10 = $0;
  $11 = (($10) + 44|0);
  $12 = HEAP32[$11>>2]|0;
  $yythunkpos1363 = $12;
  $13 = $0;
  $14 = (($13) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $yypos1367 = $15;
  $16 = $0;
  $17 = (($16) + 44|0);
  $18 = HEAP32[$17>>2]|0;
  $yythunkpos1367 = $18;
  $19 = $0;
  $20 = (_yymatchChar($19,40)|0);
  $21 = ($20|0)!=(0);
  do {
   if ($21) {
    label = 27;
   } else {
    $22 = $yypos1367;
    $23 = $0;
    $24 = (($23) + 12|0);
    HEAP32[$24>>2] = $22;
    $25 = $yythunkpos1367;
    $26 = $0;
    $27 = (($26) + 44|0);
    HEAP32[$27>>2] = $25;
    $28 = $0;
    $29 = (($28) + 12|0);
    $30 = HEAP32[$29>>2]|0;
    $yypos1368 = $30;
    $31 = $0;
    $32 = (($31) + 44|0);
    $33 = HEAP32[$32>>2]|0;
    $yythunkpos1368 = $33;
    $34 = $0;
    $35 = (_yymatchChar($34,41)|0);
    $36 = ($35|0)!=(0);
    if ($36) {
     label = 27;
     break;
    }
    $37 = $yypos1368;
    $38 = $0;
    $39 = (($38) + 12|0);
    HEAP32[$39>>2] = $37;
    $40 = $yythunkpos1368;
    $41 = $0;
    $42 = (($41) + 44|0);
    HEAP32[$42>>2] = $40;
    $43 = $0;
    $44 = (($43) + 12|0);
    $45 = HEAP32[$44>>2]|0;
    $yypos1369 = $45;
    $46 = $0;
    $47 = (($46) + 44|0);
    $48 = HEAP32[$47>>2]|0;
    $yythunkpos1369 = $48;
    $49 = $0;
    $50 = (_yymatchChar($49,62)|0);
    $51 = ($50|0)!=(0);
    if ($51) {
     label = 27;
     break;
    }
    $52 = $yypos1369;
    $53 = $0;
    $54 = (($53) + 12|0);
    HEAP32[$54>>2] = $52;
    $55 = $yythunkpos1369;
    $56 = $0;
    $57 = (($56) + 44|0);
    HEAP32[$57>>2] = $55;
    $58 = $0;
    $59 = (_yy_Nonspacechar($58)|0);
    $60 = ($59|0)!=(0);
    if (!($60)) {
     label = 27;
     break;
    }
    while(1) {
     $61 = $0;
     $62 = (($61) + 12|0);
     $63 = HEAP32[$62>>2]|0;
     $yypos1366 = $63;
     $64 = $0;
     $65 = (($64) + 44|0);
     $66 = HEAP32[$65>>2]|0;
     $yythunkpos1366 = $66;
     $67 = $0;
     $68 = (($67) + 12|0);
     $69 = HEAP32[$68>>2]|0;
     $yypos1370 = $69;
     $70 = $0;
     $71 = (($70) + 44|0);
     $72 = HEAP32[$71>>2]|0;
     $yythunkpos1370 = $72;
     $73 = $0;
     $74 = (_yymatchChar($73,40)|0);
     $75 = ($74|0)!=(0);
     if ($75) {
      label = 16;
      break;
     }
     $76 = $yypos1370;
     $77 = $0;
     $78 = (($77) + 12|0);
     HEAP32[$78>>2] = $76;
     $79 = $yythunkpos1370;
     $80 = $0;
     $81 = (($80) + 44|0);
     HEAP32[$81>>2] = $79;
     $82 = $0;
     $83 = (($82) + 12|0);
     $84 = HEAP32[$83>>2]|0;
     $yypos1371 = $84;
     $85 = $0;
     $86 = (($85) + 44|0);
     $87 = HEAP32[$86>>2]|0;
     $yythunkpos1371 = $87;
     $88 = $0;
     $89 = (_yymatchChar($88,41)|0);
     $90 = ($89|0)!=(0);
     if ($90) {
      label = 19;
      break;
     }
     $91 = $yypos1371;
     $92 = $0;
     $93 = (($92) + 12|0);
     HEAP32[$93>>2] = $91;
     $94 = $yythunkpos1371;
     $95 = $0;
     $96 = (($95) + 44|0);
     HEAP32[$96>>2] = $94;
     $97 = $0;
     $98 = (($97) + 12|0);
     $99 = HEAP32[$98>>2]|0;
     $yypos1372 = $99;
     $100 = $0;
     $101 = (($100) + 44|0);
     $102 = HEAP32[$101>>2]|0;
     $yythunkpos1372 = $102;
     $103 = $0;
     $104 = (_yymatchChar($103,62)|0);
     $105 = ($104|0)!=(0);
     if ($105) {
      label = 22;
      break;
     }
     $106 = $yypos1372;
     $107 = $0;
     $108 = (($107) + 12|0);
     HEAP32[$108>>2] = $106;
     $109 = $yythunkpos1372;
     $110 = $0;
     $111 = (($110) + 44|0);
     HEAP32[$111>>2] = $109;
     $112 = $0;
     $113 = (_yy_Nonspacechar($112)|0);
     $114 = ($113|0)!=(0);
     if (!($114)) {
      label = 24;
      break;
     }
    }
    if ((label|0) == 16) {
     label = 0;
    }
    else if ((label|0) == 19) {
     label = 0;
    }
    else if ((label|0) == 22) {
     label = 0;
    }
    else if ((label|0) == 24) {
     label = 0;
    }
    $115 = $yypos1366;
    $116 = $0;
    $117 = (($116) + 12|0);
    HEAP32[$117>>2] = $115;
    $118 = $yythunkpos1366;
    $119 = $0;
    $120 = (($119) + 44|0);
    HEAP32[$120>>2] = $118;
   }
  } while(0);
  if ((label|0) == 27) {
   label = 0;
   $121 = $yypos1363;
   $122 = $0;
   $123 = (($122) + 12|0);
   HEAP32[$123>>2] = $121;
   $124 = $yythunkpos1363;
   $125 = $0;
   $126 = (($125) + 44|0);
   HEAP32[$126>>2] = $124;
   $127 = $0;
   $128 = (_yymatchChar($127,40)|0);
   $129 = ($128|0)!=(0);
   if (!($129)) {
    label = 28;
    break;
   }
   $130 = $0;
   $131 = (_yy_SourceContents($130)|0);
   $132 = ($131|0)!=(0);
   if (!($132)) {
    label = 30;
    break;
   }
   $133 = $0;
   $134 = (_yymatchChar($133,41)|0);
   $135 = ($134|0)!=(0);
   if (!($135)) {
    label = 32;
    break;
   }
  }
 }
 if ((label|0) == 28) {
  $136 = $yypos1362;
  $137 = $0;
  $138 = (($137) + 12|0);
  HEAP32[$138>>2] = $136;
  $139 = $yythunkpos1362;
  $140 = $0;
  $141 = (($140) + 44|0);
  HEAP32[$141>>2] = $139;
  STACKTOP = sp;return 1;
 }
 else if ((label|0) == 30) {
  $136 = $yypos1362;
  $137 = $0;
  $138 = (($137) + 12|0);
  HEAP32[$138>>2] = $136;
  $139 = $yythunkpos1362;
  $140 = $0;
  $141 = (($140) + 44|0);
  HEAP32[$141>>2] = $139;
  STACKTOP = sp;return 1;
 }
 else if ((label|0) == 32) {
  $136 = $yypos1362;
  $137 = $0;
  $138 = (($137) + 12|0);
  HEAP32[$138>>2] = $136;
  $139 = $yythunkpos1362;
  $140 = $0;
  $141 = (($140) + 44|0);
  HEAP32[$141>>2] = $139;
  STACKTOP = sp;return 1;
 }
 return (0)|0;
}
function _yy_1_Source($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 $14 = $0;
 $15 = (($14) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP16[$16>>1] = 24;
 STACKTOP = sp;return;
}
function _yy_TitleSingle($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $yypos0 = 0, $yypos1356 = 0, $yypos1357 = 0, $yypos1358 = 0;
 var $yythunkpos0 = 0, $yythunkpos1356 = 0, $yythunkpos1357 = 0, $yythunkpos1358 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,39)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = $1;
   $13 = (($12) + 28|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $1;
   $16 = (($15) + 32|0);
   $17 = HEAP32[$16>>2]|0;
   (_yyText($11,$14,$17)|0);
   $18 = $1;
   $19 = (($18) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $1;
   $22 = (($21) + 28|0);
   HEAP32[$22>>2] = $20;
   L5: while(1) {
    $23 = $1;
    $24 = (($23) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $yypos1356 = $25;
    $26 = $1;
    $27 = (($26) + 44|0);
    $28 = HEAP32[$27>>2]|0;
    $yythunkpos1356 = $28;
    $29 = $1;
    $30 = (($29) + 12|0);
    $31 = HEAP32[$30>>2]|0;
    $yypos1357 = $31;
    $32 = $1;
    $33 = (($32) + 44|0);
    $34 = HEAP32[$33>>2]|0;
    $yythunkpos1357 = $34;
    $35 = $1;
    $36 = (_yymatchChar($35,39)|0);
    $37 = ($36|0)!=(0);
    do {
     if ($37) {
      $38 = $1;
      $39 = (_yy_Sp($38)|0);
      $40 = ($39|0)!=(0);
      if (!($40)) {
       break;
      }
      $41 = $1;
      $42 = (($41) + 12|0);
      $43 = HEAP32[$42>>2]|0;
      $yypos1358 = $43;
      $44 = $1;
      $45 = (($44) + 44|0);
      $46 = HEAP32[$45>>2]|0;
      $yythunkpos1358 = $46;
      $47 = $1;
      $48 = (_yymatchChar($47,41)|0);
      $49 = ($48|0)!=(0);
      if ($49) {
       label = 11;
       break L5;
      }
      $50 = $yypos1358;
      $51 = $1;
      $52 = (($51) + 12|0);
      HEAP32[$52>>2] = $50;
      $53 = $yythunkpos1358;
      $54 = $1;
      $55 = (($54) + 44|0);
      HEAP32[$55>>2] = $53;
      $56 = $1;
      $57 = (_yy_Newline($56)|0);
      $58 = ($57|0)!=(0);
      if ($58) {
       label = 14;
       break L5;
      }
     } else {
     }
    } while(0);
    $59 = $yypos1357;
    $60 = $1;
    $61 = (($60) + 12|0);
    HEAP32[$61>>2] = $59;
    $62 = $yythunkpos1357;
    $63 = $1;
    $64 = (($63) + 44|0);
    HEAP32[$64>>2] = $62;
    $65 = $1;
    $66 = (_yymatchDot($65)|0);
    $67 = ($66|0)!=(0);
    if (!($67)) {
     label = 17;
     break;
    }
   }
   if ((label|0) == 11) {
    label = 15;
   }
   else if ((label|0) == 14) {
    label = 15;
   }
   else if ((label|0) == 17) {
   }
   if ((label|0) == 15) {
   }
   $68 = $yypos1356;
   $69 = $1;
   $70 = (($69) + 12|0);
   HEAP32[$70>>2] = $68;
   $71 = $yythunkpos1356;
   $72 = $1;
   $73 = (($72) + 44|0);
   HEAP32[$73>>2] = $71;
   $74 = $1;
   $75 = $1;
   $76 = (($75) + 28|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $1;
   $79 = (($78) + 32|0);
   $80 = HEAP32[$79>>2]|0;
   (_yyText($74,$77,$80)|0);
   $81 = $1;
   $82 = (($81) + 12|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = $1;
   $85 = (($84) + 32|0);
   HEAP32[$85>>2] = $83;
   $86 = $1;
   $87 = (_yymatchChar($86,39)|0);
   $88 = ($87|0)!=(0);
   if (!($88)) {
    break;
   }
   $0 = 1;
   $95 = $0;
   STACKTOP = sp;return ($95|0);
  } else {
  }
 } while(0);
 $89 = $yypos0;
 $90 = $1;
 $91 = (($90) + 12|0);
 HEAP32[$91>>2] = $89;
 $92 = $yythunkpos0;
 $93 = $1;
 $94 = (($93) + 44|0);
 HEAP32[$94>>2] = $92;
 $0 = 0;
 $95 = $0;
 STACKTOP = sp;return ($95|0);
}
function _yy_TitleDouble($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $yypos0 = 0, $yypos1350 = 0, $yypos1351 = 0, $yypos1352 = 0;
 var $yythunkpos0 = 0, $yythunkpos1350 = 0, $yythunkpos1351 = 0, $yythunkpos1352 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchChar($8,34)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = $1;
   $13 = (($12) + 28|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $1;
   $16 = (($15) + 32|0);
   $17 = HEAP32[$16>>2]|0;
   (_yyText($11,$14,$17)|0);
   $18 = $1;
   $19 = (($18) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $1;
   $22 = (($21) + 28|0);
   HEAP32[$22>>2] = $20;
   L4: while(1) {
    $23 = $1;
    $24 = (($23) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $yypos1350 = $25;
    $26 = $1;
    $27 = (($26) + 44|0);
    $28 = HEAP32[$27>>2]|0;
    $yythunkpos1350 = $28;
    $29 = $1;
    $30 = (($29) + 12|0);
    $31 = HEAP32[$30>>2]|0;
    $yypos1351 = $31;
    $32 = $1;
    $33 = (($32) + 44|0);
    $34 = HEAP32[$33>>2]|0;
    $yythunkpos1351 = $34;
    $35 = $1;
    $36 = (_yymatchChar($35,34)|0);
    $37 = ($36|0)!=(0);
    do {
     if ($37) {
      $38 = $1;
      $39 = (_yy_Sp($38)|0);
      $40 = ($39|0)!=(0);
      if (!($40)) {
       break;
      }
      $41 = $1;
      $42 = (($41) + 12|0);
      $43 = HEAP32[$42>>2]|0;
      $yypos1352 = $43;
      $44 = $1;
      $45 = (($44) + 44|0);
      $46 = HEAP32[$45>>2]|0;
      $yythunkpos1352 = $46;
      $47 = $1;
      $48 = (_yymatchChar($47,41)|0);
      $49 = ($48|0)!=(0);
      if ($49) {
       label = 11;
       break L4;
      }
      $50 = $yypos1352;
      $51 = $1;
      $52 = (($51) + 12|0);
      HEAP32[$52>>2] = $50;
      $53 = $yythunkpos1352;
      $54 = $1;
      $55 = (($54) + 44|0);
      HEAP32[$55>>2] = $53;
      $56 = $1;
      $57 = (_yy_Newline($56)|0);
      $58 = ($57|0)!=(0);
      if ($58) {
       label = 14;
       break L4;
      }
     } else {
     }
    } while(0);
    $59 = $yypos1351;
    $60 = $1;
    $61 = (($60) + 12|0);
    HEAP32[$61>>2] = $59;
    $62 = $yythunkpos1351;
    $63 = $1;
    $64 = (($63) + 44|0);
    HEAP32[$64>>2] = $62;
    $65 = $1;
    $66 = (_yymatchDot($65)|0);
    $67 = ($66|0)!=(0);
    if (!($67)) {
     label = 17;
     break;
    }
   }
   if ((label|0) == 11) {
    label = 15;
   }
   else if ((label|0) == 14) {
    label = 15;
   }
   else if ((label|0) == 17) {
   }
   if ((label|0) == 15) {
   }
   $68 = $yypos1350;
   $69 = $1;
   $70 = (($69) + 12|0);
   HEAP32[$70>>2] = $68;
   $71 = $yythunkpos1350;
   $72 = $1;
   $73 = (($72) + 44|0);
   HEAP32[$73>>2] = $71;
   $74 = $1;
   $75 = $1;
   $76 = (($75) + 28|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $1;
   $79 = (($78) + 32|0);
   $80 = HEAP32[$79>>2]|0;
   (_yyText($74,$77,$80)|0);
   $81 = $1;
   $82 = (($81) + 12|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = $1;
   $85 = (($84) + 32|0);
   HEAP32[$85>>2] = $83;
   $86 = $1;
   $87 = (_yymatchChar($86,34)|0);
   $88 = ($87|0)!=(0);
   if (!($88)) {
    break;
   }
   $0 = 1;
   $95 = $0;
   STACKTOP = sp;return ($95|0);
  } else {
  }
 } while(0);
 $89 = $yypos0;
 $90 = $1;
 $91 = (($90) + 12|0);
 HEAP32[$91>>2] = $89;
 $92 = $yythunkpos0;
 $93 = $1;
 $94 = (($93) + 44|0);
 HEAP32[$94>>2] = $92;
 $0 = 0;
 $95 = $0;
 STACKTOP = sp;return ($95|0);
}
function _yy_1_Title($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 $14 = $0;
 $15 = (($14) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP16[$16>>1] = 25;
 STACKTOP = sp;return;
}
function _yy_1_ReferenceLinkDouble($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $text = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = (_g_string_new(41432)|0);
 $text = $5;
 $6 = $text;
 $7 = $0;
 $8 = (($7) + 52|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + -4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 _print_raw_node_tree($6,$13);
 $14 = $0;
 $15 = (($14) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $text;
 $20 = HEAP32[$19>>2]|0;
 $21 = (_mk_link($18,$20,0,0,0)|0);
 $22 = $0;
 $23 = (($22) + 48|0);
 HEAP32[$23>>2] = $21;
 $24 = $text;
 (_g_string_free($24,1)|0);
 $25 = $0;
 $26 = (($25) + 52|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + -4|0);
 $29 = HEAP32[$28>>2]|0;
 _free_node_tree($29);
 STACKTOP = sp;return;
}
function _yy_1_ReferenceLinkSingle($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_mk_link($9,0,0,0,0)|0);
 $11 = $0;
 $12 = (($11) + 48|0);
 HEAP32[$12>>2] = $10;
 $13 = $1;
 $14 = (___strdup($13)|0);
 $15 = $0;
 $16 = (($15) + 48|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 4|0);
 HEAP32[$18>>2] = $14;
 STACKTOP = sp;return;
}
function _yy_1_AposChunk($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $3;
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_mk_pos_node(3,0,$6,$9)|0);
 $11 = $0;
 $12 = (($11) + 48|0);
 HEAP32[$12>>2] = $10;
 STACKTOP = sp;return;
}
function _yy_1_RawCitationReference($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 STACKTOP = sp;return;
}
function _yy_1_EmDash($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 $14 = $0;
 $15 = (($14) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP16[$16>>1] = 35;
 STACKTOP = sp;return;
}
function _yy_Digit($G) {
 $G = $G|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yypos0 = 0, $yythunkpos0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $G;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $yypos0 = $4;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $yythunkpos0 = $7;
 $8 = $1;
 $9 = (_yymatchClass($8,44248,44288)|0);
 $10 = ($9|0)!=(0);
 if ($10) {
  $0 = 1;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 $11 = $yypos0;
 $12 = $1;
 $13 = (($12) + 12|0);
 HEAP32[$13>>2] = $11;
 $14 = $yythunkpos0;
 $15 = $1;
 $16 = (($15) + 44|0);
 HEAP32[$16>>2] = $14;
 $0 = 0;
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _yy_1_EnDash($G,$yytext,$yyleng,$thunk,$yyxvar) {
 $G = $G|0;
 $yytext = $yytext|0;
 $yyleng = $yyleng|0;
 $thunk = $thunk|0;
 $yyxvar = $yyxvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $G;
 $1 = $yytext;
 $2 = $yyleng;
 $3 = $thunk;
 $4 = $yyxvar;
 $5 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mk_pos_str($5,$7,$10)|0);
 $12 = $0;
 $13 = (($12) + 48|0);
 HEAP32[$13>>2] = $11;
 $14 = $0;
 $15 = (($14) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP16[$16>>1] = 34;
 STACKTOP = sp;return;
}
function _islower($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -97)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 return ($2|0);
}
function _toupper($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_islower($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c & 95;
 $$0 = $1 ? $c : $2;
 return ($$0|0);
}
function _vasprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp;
 $0 = (_malloc(240)|0);
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $$0 = -1;
  } else {
   $vacopy_currentptr = HEAP32[$ap>>2]|0;
   HEAP32[$ap2>>2] = $vacopy_currentptr;
   $2 = (_vsnprintf($0,240,$fmt,$ap2)|0);
   $3 = ($2>>>0)<(240);
   if ($3) {
    $4 = (($2) + 1)|0;
    $5 = (_realloc($0,$4)|0);
    $6 = ($5|0)!=(0|0);
    $7 = $6 ? $5 : $0;
    HEAP32[$s>>2] = $7;
    $$0 = $2;
    break;
   }
   _free($0);
   $8 = ($2|0)<(0);
   if ($8) {
    $$0 = -1;
   } else {
    $9 = (($2) + 1)|0;
    $10 = (_malloc($9)|0);
    HEAP32[$s>>2] = $10;
    $11 = ($10|0)==(0|0);
    if ($11) {
     $$0 = -1;
    } else {
     $12 = (_vsnprintf($10,$9,$fmt,$ap)|0);
     $$0 = $12;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$0211$lcssa = 0, $$1 = 0, $$1$lcssa = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$0$lcssa$ph = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 if ($1) {
  $6 = (_strlen(($s|0))|0);
  $7 = (($s) + ($6)|0);
  $$0 = $7;
  return ($$0|0);
 }
 $2 = $s;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $$02$lcssa = $s;
  } else {
   $5 = $c&255;
   $$0211 = $s;
   while(1) {
    $8 = HEAP8[$$0211>>0]|0;
    $9 = ($8<<24>>24)==(0);
    $10 = ($8<<24>>24)==($5<<24>>24);
    $or$cond = $9 | $10;
    if ($or$cond) {
     $$0211$lcssa = $$0211;
     break;
    }
    $11 = (($$0211) + 1|0);
    $12 = $11;
    $13 = $12 & 3;
    $14 = ($13|0)==(0);
    if ($14) {
     $$lcssa = $11;
     label = 7;
     break;
    } else {
     $$0211 = $11;
    }
   }
   if ((label|0) == 7) {
    $$02$lcssa = $$lcssa;
    break;
   }
   $$0 = $$0211$lcssa;
   return ($$0|0);
  }
 } while(0);
 $15 = Math_imul($0, 16843009)|0;
 $16 = HEAP32[$$02$lcssa>>2]|0;
 $17 = (($16) + -16843009)|0;
 $18 = $16 & -2139062144;
 $19 = $18 ^ -2139062144;
 $20 = $19 & $17;
 $21 = ($20|0)==(0);
 if ($21) {
  $23 = $16;$w$08 = $$02$lcssa;
  while(1) {
   $22 = $23 ^ $15;
   $24 = (($22) + -16843009)|0;
   $25 = $22 & -2139062144;
   $26 = $25 ^ -2139062144;
   $27 = $26 & $24;
   $28 = ($27|0)==(0);
   if (!($28)) {
    $w$0$lcssa$ph = $w$08;
    break;
   }
   $29 = (($w$08) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($30) + -16843009)|0;
   $32 = $30 & -2139062144;
   $33 = $32 ^ -2139062144;
   $34 = $33 & $31;
   $35 = ($34|0)==(0);
   if ($35) {
    $23 = $30;$w$08 = $29;
   } else {
    $w$0$lcssa$ph = $29;
    break;
   }
  }
  $w$0$lcssa = $w$0$lcssa$ph;
 } else {
  $w$0$lcssa = $$02$lcssa;
 }
 $36 = $c&255;
 $$1 = $w$0$lcssa;
 while(1) {
  $37 = HEAP8[$$1>>0]|0;
  $38 = ($37<<24>>24)==(0);
  $39 = ($37<<24>>24)==($36<<24>>24);
  $or$cond5 = $38 | $39;
  $40 = (($$1) + 1|0);
  if ($or$cond5) {
   $$1$lcssa = $$1;
   break;
  } else {
   $$1 = $40;
  }
 }
 $$0 = $$1$lcssa;
 return ($$0|0);
}
function _strcspn($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$027 = 0, $$03$lcssa = 0, $$03$lcssa$ph = 0, $$035 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $byteset = 0, $div = 0, $div4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset = sp;
 $0 = HEAP8[$c>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $2 = (($c) + 1|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)==(0);
  if (!($4)) {
   ;HEAP32[$byteset+0>>2]=0|0;HEAP32[$byteset+4>>2]=0|0;HEAP32[$byteset+8>>2]=0|0;HEAP32[$byteset+12>>2]=0|0;HEAP32[$byteset+16>>2]=0|0;HEAP32[$byteset+20>>2]=0|0;HEAP32[$byteset+24>>2]=0|0;HEAP32[$byteset+28>>2]=0|0;
   $$027 = $c;$13 = $0;
   while(1) {
    $12 = $13 & 31;
    $14 = $12&255;
    $15 = 1 << $14;
    $div4 = ($13&255) >>> 5;
    $16 = $div4&255;
    $17 = (($byteset) + ($16<<2)|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = $18 | $15;
    HEAP32[$17>>2] = $19;
    $20 = (($$027) + 1|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(0);
    if ($22) {
     break;
    } else {
     $$027 = $20;$13 = $21;
    }
   }
   $10 = HEAP8[$s>>0]|0;
   $11 = ($10<<24>>24)==(0);
   if ($11) {
    $$03$lcssa = $s;
   } else {
    $$035 = $s;$23 = $10;
    while(1) {
     $div = ($23&255) >>> 5;
     $24 = $div&255;
     $25 = (($byteset) + ($24<<2)|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = $23 & 31;
     $28 = $27&255;
     $29 = 1 << $28;
     $30 = $26 & $29;
     $31 = ($30|0)==(0);
     if (!($31)) {
      $$03$lcssa$ph = $$035;
      break;
     }
     $32 = (($$035) + 1|0);
     $33 = HEAP8[$32>>0]|0;
     $34 = ($33<<24>>24)==(0);
     if ($34) {
      $$03$lcssa$ph = $32;
      break;
     } else {
      $$035 = $32;$23 = $33;
     }
    }
    $$03$lcssa = $$03$lcssa$ph;
   }
   $35 = $$03$lcssa;
   $36 = $s;
   $37 = (($35) - ($36))|0;
   $$0 = $37;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $5 = $0 << 24 >> 24;
 $6 = (___strchrnul($s,$5)|0);
 $7 = $6;
 $8 = $s;
 $9 = (($7) - ($8))|0;
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function ___strdup($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($s|0))|0);
 $1 = (($0) + 1)|0;
 $2 = (_malloc($1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 _memcpy(($2|0),($s|0),($1|0))|0;
 $$0 = $2;
 return ($$0|0);
}
function _strncat($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa$ph = 0, $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($d|0))|0);
 $1 = (($d) + ($0)|0);
 $2 = ($n|0)==(0);
 if ($2) {
  $$0$lcssa = $1;
  HEAP8[$$0$lcssa>>0] = 0;
  return ($d|0);
 }
 $$014 = $n;$$023 = $s;$$05 = $1;
 while(1) {
  $3 = HEAP8[$$023>>0]|0;
  $4 = ($3<<24>>24)==(0);
  if ($4) {
   $$0$lcssa$ph = $$05;
   break;
  }
  $5 = (($$014) + -1)|0;
  $6 = (($$023) + 1|0);
  $7 = (($$05) + 1|0);
  HEAP8[$$05>>0] = $3;
  $8 = ($5|0)==(0);
  if ($8) {
   $$0$lcssa$ph = $7;
   break;
  } else {
   $$014 = $5;$$023 = $6;$$05 = $7;
  }
 }
 $$0$lcssa = $$0$lcssa$ph;
 HEAP8[$$0$lcssa>>0] = 0;
 return ($d|0);
}
function _strspn($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$028 = 0, $$03 = 0, $$03$lcssa = 0, $$1$lcssa = 0, $$1$lcssa$ph = 0, $$16 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $byteset = 0, $div = 0, $div4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset = sp;
 ;HEAP32[$byteset+0>>2]=0|0;HEAP32[$byteset+4>>2]=0|0;HEAP32[$byteset+8>>2]=0|0;HEAP32[$byteset+12>>2]=0|0;HEAP32[$byteset+16>>2]=0|0;HEAP32[$byteset+20>>2]=0|0;HEAP32[$byteset+24>>2]=0|0;HEAP32[$byteset+28>>2]=0|0;
 $0 = HEAP8[$c>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($c) + 1|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $$03 = $s;
  while(1) {
   $5 = HEAP8[$$03>>0]|0;
   $6 = ($5<<24>>24)==($0<<24>>24);
   $7 = (($$03) + 1|0);
   if ($6) {
    $$03 = $7;
   } else {
    $$03$lcssa = $$03;
    break;
   }
  }
  $8 = $$03$lcssa;
  $9 = $s;
  $10 = (($8) - ($9))|0;
  $$0 = $10;
  STACKTOP = sp;return ($$0|0);
 }
 $$028 = $c;$14 = $0;
 while(1) {
  $13 = $14 & 31;
  $15 = $13&255;
  $16 = 1 << $15;
  $div4 = ($14&255) >>> 5;
  $17 = $div4&255;
  $18 = (($byteset) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19 | $16;
  HEAP32[$18>>2] = $20;
  $21 = (($$028) + 1|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   break;
  } else {
   $$028 = $21;$14 = $22;
  }
 }
 $11 = HEAP8[$s>>0]|0;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $$1$lcssa = $s;
 } else {
  $$16 = $s;$24 = $11;
  while(1) {
   $div = ($24&255) >>> 5;
   $25 = $div&255;
   $26 = (($byteset) + ($25<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $24 & 31;
   $29 = $28&255;
   $30 = 1 << $29;
   $31 = $27 & $30;
   $32 = ($31|0)==(0);
   if ($32) {
    $$1$lcssa$ph = $$16;
    break;
   }
   $33 = (($$16) + 1|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = ($34<<24>>24)==(0);
   if ($35) {
    $$1$lcssa$ph = $33;
    break;
   } else {
    $$16 = $33;$24 = $34;
   }
  }
  $$1$lcssa = $$1$lcssa$ph;
 }
 $36 = $$1$lcssa;
 $37 = $s;
 $38 = (($36) - ($37))|0;
 $$0 = $38;
 STACKTOP = sp;return ($$0|0);
}
function _strstr($h,$n) {
 $h = $h|0;
 $n = $n|0;
 var $$$i = 0, $$$i15 = 0, $$$i7 = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$0$lcssa$i14 = 0, $$01$i = 0, $$02$i = 0, $$02$i10 = 0, $$03$i = 0, $$03$i$be = 0, $$03$i$lcssa195 = 0, $$03$us$i = 0, $$03$us$i$be = 0, $$03$us$i$lcssa197 = 0, $$lcssa = 0, $$lcssa$i = 0, $$lcssa$i13 = 0, $$lcssa$i6 = 0;
 var $$lcssa191 = 0, $$lcssa192 = 0, $$lcssa193 = 0, $$lcssa198 = 0, $$lcssa201 = 0, $$lcssa204 = 0, $$lcssa214 = 0, $$lcssa218 = 0, $$lcssa221 = 0, $$lcssa224 = 0, $$lcssa234 = 0, $$lcssa239 = 0, $$mem$0$us$i = 0, $$pr$i = 0, $$pr$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $27$phi = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $byteset$i = 0, $div$i = 0;
 var $div$us$i = 0, $div4$i = 0, $hw$0$in2$i = 0, $hw$03$i = 0, $hw$03$i9 = 0, $ip$0$ph$lcssa$i = 0, $ip$0$ph$lcssa147$i = 0, $ip$0$ph76$i = 0, $ip$0$ph76$i$lcssa235 = 0, $ip$0$ph76$i$lcssa236 = 0, $ip$0$ph76$i$lcssa237 = 0, $ip$1$ip$0$$i = 0, $ip$1$ip$0$i = 0, $ip$1$ph$lcssa$i = 0, $ip$1$ph55$i = 0, $ip$1$ph55$i$lcssa215 = 0, $ip$1$ph55$i$lcssa216 = 0, $ip$1$ph55$i$lcssa217 = 0, $jp$0$ph13$ph70$i = 0, $jp$0$ph1365$i = 0;
 var $jp$0$ph1365$i$lcssa = 0, $jp$0$ph1365$i$lcssa$lcssa = 0, $jp$0$ph1365$i$lcssa$lcssa$lcssa = 0, $jp$0$ph77$i = 0, $jp$1$ph56$i = 0, $jp$1$ph9$ph49$i = 0, $jp$1$ph944$i = 0, $jp$1$ph944$i$lcssa = 0, $jp$1$ph944$i$lcssa$lcssa = 0, $jp$1$ph944$i$lcssa$lcssa$lcssa = 0, $k$059$i = 0, $k$139$i = 0, $k$2$us$i = 0, $k$338$i = 0, $k$338$i$lcssa = 0, $k$338$us$i = 0, $k$338$us$i$lcssa = 0, $k$4$i = 0, $k$4$us$i = 0, $l$080$i = 0;
 var $l$080$i$lcssa238 = 0, $mem$0$us$i = 0, $mem$0$us$i$be = 0, $or$cond$i = 0, $or$cond$i11 = 0, $or$cond5$us$i = 0, $p$0$ph$ph$lcssa32$i = 0, $p$0$ph$ph$lcssa32151$i = 0, $p$0$ph$ph71$i = 0, $p$0$ph$ph71$i$lcssa230 = 0, $p$0$ph$ph71$i$lcssa231 = 0, $p$1$p$0$i = 0, $p$1$ph$ph$lcssa23$i = 0, $p$1$ph$ph50$i = 0, $p$1$ph$ph50$i$lcssa210 = 0, $p$1$ph$ph50$i$lcssa211 = 0, $p$3155$i = 0, $shift$i = 0, $z$0$i = 0, $z$0$us$i = 0;
 var $z$1$i = 0, $z$1$us$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset$i = sp + 1024|0;
 $shift$i = sp;
 $0 = HEAP8[$n>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $$0 = $h;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = $0 << 24 >> 24;
 $3 = (_strchr($h,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($n) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (($3) + 1|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (($n) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)==(0);
 if ($13) {
  $14 = $0&255;
  $15 = $14 << 8;
  $16 = $6&255;
  $17 = $16 | $15;
  $18 = HEAP8[$3>>0]|0;
  $19 = $18&255;
  $20 = $19 << 8;
  $21 = $9&255;
  $22 = $20 | $21;
  $$01$i = $8;$27 = $3;$275 = $9;$hw$0$in2$i = $22;
  while(1) {
   $23 = $hw$0$in2$i & 65535;
   $24 = ($23|0)==($17|0);
   if ($24) {
    $$lcssa$i = $27;$32 = $275;
    break;
   }
   $25 = $23 << 8;
   $26 = (($27) + 2|0);
   $28 = HEAP8[$26>>0]|0;
   $29 = $28&255;
   $30 = $29 | $25;
   $31 = ($28<<24>>24)==(0);
   if ($31) {
    $$lcssa$i = $$01$i;$32 = 0;
    break;
   } else {
    $27$phi = $$01$i;$$01$i = $26;$275 = $28;$hw$0$in2$i = $30;$27 = $27$phi;
   }
  }
  $33 = ($32<<24>>24)==(0);
  $$$i = $33 ? 0 : $$lcssa$i;
  $$0 = $$$i;
  STACKTOP = sp;return ($$0|0);
 }
 $34 = (($3) + 2|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = ($35<<24>>24)==(0);
 if ($36) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $37 = (($n) + 3|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = ($38<<24>>24)==(0);
 if ($39) {
  $40 = $0&255;
  $41 = $40 << 24;
  $42 = $6&255;
  $43 = $42 << 16;
  $44 = $43 | $41;
  $45 = $12&255;
  $46 = $45 << 8;
  $47 = $44 | $46;
  $48 = HEAP8[$3>>0]|0;
  $49 = $48&255;
  $50 = $49 << 24;
  $51 = $9&255;
  $52 = $51 << 16;
  $53 = $35&255;
  $54 = $53 << 8;
  $55 = $54 | $52;
  $56 = $55 | $50;
  $57 = ($56|0)==($47|0);
  if ($57) {
   $$0$lcssa$i = $34;$$lcssa$i6 = 0;
  } else {
   $$02$i = $34;$hw$03$i = $56;
   while(1) {
    $58 = (($$02$i) + 1|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = $59&255;
    $61 = $60 | $hw$03$i;
    $62 = $61 << 8;
    $63 = ($59<<24>>24)==(0);
    $64 = ($62|0)==($47|0);
    $or$cond$i = $63 | $64;
    if ($or$cond$i) {
     $$lcssa = $58;$$lcssa191 = $63;
     break;
    } else {
     $$02$i = $58;$hw$03$i = $62;
    }
   }
   $$0$lcssa$i = $$lcssa;$$lcssa$i6 = $$lcssa191;
  }
  $65 = (($$0$lcssa$i) + -2|0);
  $$$i7 = $$lcssa$i6 ? 0 : $65;
  $$0 = $$$i7;
  STACKTOP = sp;return ($$0|0);
 }
 $66 = (($3) + 3|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = ($67<<24>>24)==(0);
 if ($68) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $69 = (($n) + 4|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = ($70<<24>>24)==(0);
 if ($71) {
  $72 = $0&255;
  $73 = $72 << 24;
  $74 = $6&255;
  $75 = $74 << 16;
  $76 = $75 | $73;
  $77 = $12&255;
  $78 = $77 << 8;
  $79 = $76 | $78;
  $80 = $38&255;
  $81 = $79 | $80;
  $82 = HEAP8[$3>>0]|0;
  $83 = $82&255;
  $84 = $83 << 24;
  $85 = $9&255;
  $86 = $85 << 16;
  $87 = $35&255;
  $88 = $87 << 8;
  $89 = $67&255;
  $90 = $88 | $86;
  $91 = $90 | $89;
  $92 = $91 | $84;
  $93 = ($92|0)==($81|0);
  if ($93) {
   $$0$lcssa$i14 = $66;$$lcssa$i13 = 0;
  } else {
   $$02$i10 = $66;$hw$03$i9 = $92;
   while(1) {
    $94 = $hw$03$i9 << 8;
    $95 = (($$02$i10) + 1|0);
    $96 = HEAP8[$95>>0]|0;
    $97 = $96&255;
    $98 = $97 | $94;
    $99 = ($96<<24>>24)==(0);
    $100 = ($98|0)==($81|0);
    $or$cond$i11 = $99 | $100;
    if ($or$cond$i11) {
     $$lcssa192 = $95;$$lcssa193 = $99;
     break;
    } else {
     $$02$i10 = $95;$hw$03$i9 = $98;
    }
   }
   $$0$lcssa$i14 = $$lcssa192;$$lcssa$i13 = $$lcssa193;
  }
  $101 = (($$0$lcssa$i14) + -3|0);
  $$$i15 = $$lcssa$i13 ? 0 : $101;
  $$0 = $$$i15;
  STACKTOP = sp;return ($$0|0);
 }
 ;HEAP32[$byteset$i+0>>2]=0|0;HEAP32[$byteset$i+4>>2]=0|0;HEAP32[$byteset$i+8>>2]=0|0;HEAP32[$byteset$i+12>>2]=0|0;HEAP32[$byteset$i+16>>2]=0|0;HEAP32[$byteset$i+20>>2]=0|0;HEAP32[$byteset$i+24>>2]=0|0;HEAP32[$byteset$i+28>>2]=0|0;
 $106 = $0;$l$080$i = 0;
 while(1) {
  $102 = (($3) + ($l$080$i)|0);
  $103 = HEAP8[$102>>0]|0;
  $104 = ($103<<24>>24)==(0);
  if ($104) {
   label = 105;
   break;
  }
  $105 = $106 & 31;
  $107 = $105&255;
  $108 = 1 << $107;
  $div4$i = ($106&255) >>> 5;
  $109 = $div4$i&255;
  $110 = (($byteset$i) + ($109<<2)|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = $111 | $108;
  HEAP32[$110>>2] = $112;
  $113 = (($l$080$i) + 1)|0;
  $114 = $106&255;
  $115 = (($shift$i) + ($114<<2)|0);
  HEAP32[$115>>2] = $113;
  $116 = (($n) + ($113)|0);
  $117 = HEAP8[$116>>0]|0;
  $118 = ($117<<24>>24)==(0);
  if ($118) {
   $$lcssa239 = $113;$l$080$i$lcssa238 = $l$080$i;
   label = 27;
   break;
  } else {
   $106 = $117;$l$080$i = $113;
  }
 }
 do {
  if ((label|0) == 27) {
   $119 = ($$lcssa239>>>0)>(1);
   do {
    if ($119) {
     $276 = 1;$ip$0$ph76$i = -1;$jp$0$ph77$i = 0;
     L55: while(1) {
      $277 = $276;$jp$0$ph13$ph70$i = $jp$0$ph77$i;$p$0$ph$ph71$i = 1;
      while(1) {
       $278 = $277;$jp$0$ph1365$i = $jp$0$ph13$ph70$i;
       L59: while(1) {
        $129 = $278;$k$059$i = 1;
        while(1) {
         $125 = (($k$059$i) + ($ip$0$ph76$i))|0;
         $126 = (($n) + ($125)|0);
         $127 = HEAP8[$126>>0]|0;
         $128 = (($n) + ($129)|0);
         $130 = HEAP8[$128>>0]|0;
         $131 = ($127<<24>>24)==($130<<24>>24);
         if (!($131)) {
          $$lcssa218 = $129;$$lcssa221 = $127;$$lcssa224 = $130;$jp$0$ph1365$i$lcssa = $jp$0$ph1365$i;
          break L59;
         }
         $132 = ($k$059$i|0)==($p$0$ph$ph71$i|0);
         $123 = (($k$059$i) + 1)|0;
         if ($132) {
          break;
         }
         $122 = (($123) + ($jp$0$ph1365$i))|0;
         $124 = ($122>>>0)<($$lcssa239>>>0);
         if ($124) {
          $129 = $122;$k$059$i = $123;
         } else {
          $ip$0$ph76$i$lcssa236 = $ip$0$ph76$i;$p$0$ph$ph71$i$lcssa230 = $p$0$ph$ph71$i;
          label = 34;
          break L55;
         }
        }
        $133 = (($jp$0$ph1365$i) + ($p$0$ph$ph71$i))|0;
        $134 = (($133) + 1)|0;
        $135 = ($134>>>0)<($$lcssa239>>>0);
        if ($135) {
         $278 = $134;$jp$0$ph1365$i = $133;
        } else {
         $ip$0$ph76$i$lcssa237 = $ip$0$ph76$i;$p$0$ph$ph71$i$lcssa231 = $p$0$ph$ph71$i;
         label = 35;
         break L55;
        }
       }
       $136 = ($$lcssa221&255)>($$lcssa224&255);
       $137 = (($$lcssa218) - ($ip$0$ph76$i))|0;
       if (!($136)) {
        $jp$0$ph1365$i$lcssa$lcssa = $jp$0$ph1365$i$lcssa;
        break;
       }
       $120 = (($$lcssa218) + 1)|0;
       $121 = ($120>>>0)<($$lcssa239>>>0);
       if ($121) {
        $277 = $120;$jp$0$ph13$ph70$i = $$lcssa218;$p$0$ph$ph71$i = $137;
       } else {
        $$lcssa234 = $137;$ip$0$ph76$i$lcssa235 = $ip$0$ph76$i;
        label = 36;
        break L55;
       }
      }
      $138 = (($jp$0$ph1365$i$lcssa$lcssa) + 1)|0;
      $139 = (($jp$0$ph1365$i$lcssa$lcssa) + 2)|0;
      $140 = ($139>>>0)<($$lcssa239>>>0);
      if ($140) {
       $276 = $139;$ip$0$ph76$i = $jp$0$ph1365$i$lcssa$lcssa;$jp$0$ph77$i = $138;
      } else {
       $jp$0$ph1365$i$lcssa$lcssa$lcssa = $jp$0$ph1365$i$lcssa$lcssa;
       label = 37;
       break;
      }
     }
     if ((label|0) == 34) {
      $ip$0$ph$lcssa$i = $ip$0$ph76$i$lcssa236;$p$0$ph$ph$lcssa32$i = $p$0$ph$ph71$i$lcssa230;
     }
     else if ((label|0) == 35) {
      $ip$0$ph$lcssa$i = $ip$0$ph76$i$lcssa237;$p$0$ph$ph$lcssa32$i = $p$0$ph$ph71$i$lcssa231;
     }
     else if ((label|0) == 36) {
      $ip$0$ph$lcssa$i = $ip$0$ph76$i$lcssa235;$p$0$ph$ph$lcssa32$i = $$lcssa234;
     }
     else if ((label|0) == 37) {
      $ip$0$ph$lcssa$i = $jp$0$ph1365$i$lcssa$lcssa$lcssa;$p$0$ph$ph$lcssa32$i = 1;
     }
     $279 = 1;$ip$1$ph55$i = -1;$jp$1$ph56$i = 0;
     L75: while(1) {
      $281 = $279;$jp$1$ph9$ph49$i = $jp$1$ph56$i;$p$1$ph$ph50$i = 1;
      while(1) {
       $280 = $281;$jp$1$ph944$i = $jp$1$ph9$ph49$i;
       L79: while(1) {
        $148 = $280;$k$139$i = 1;
        while(1) {
         $144 = (($k$139$i) + ($ip$1$ph55$i))|0;
         $145 = (($n) + ($144)|0);
         $146 = HEAP8[$145>>0]|0;
         $147 = (($n) + ($148)|0);
         $149 = HEAP8[$147>>0]|0;
         $150 = ($146<<24>>24)==($149<<24>>24);
         if (!($150)) {
          $$lcssa198 = $148;$$lcssa201 = $146;$$lcssa204 = $149;$jp$1$ph944$i$lcssa = $jp$1$ph944$i;
          break L79;
         }
         $151 = ($k$139$i|0)==($p$1$ph$ph50$i|0);
         $142 = (($k$139$i) + 1)|0;
         if ($151) {
          break;
         }
         $141 = (($142) + ($jp$1$ph944$i))|0;
         $143 = ($141>>>0)<($$lcssa239>>>0);
         if ($143) {
          $148 = $141;$k$139$i = $142;
         } else {
          $ip$1$ph55$i$lcssa216 = $ip$1$ph55$i;$p$1$ph$ph50$i$lcssa210 = $p$1$ph$ph50$i;
          label = 54;
          break L75;
         }
        }
        $152 = (($jp$1$ph944$i) + ($p$1$ph$ph50$i))|0;
        $153 = (($152) + 1)|0;
        $154 = ($153>>>0)<($$lcssa239>>>0);
        if ($154) {
         $280 = $153;$jp$1$ph944$i = $152;
        } else {
         $ip$1$ph55$i$lcssa217 = $ip$1$ph55$i;$p$1$ph$ph50$i$lcssa211 = $p$1$ph$ph50$i;
         label = 55;
         break L75;
        }
       }
       $155 = ($$lcssa201&255)<($$lcssa204&255);
       $156 = (($$lcssa198) - ($ip$1$ph55$i))|0;
       if (!($155)) {
        $jp$1$ph944$i$lcssa$lcssa = $jp$1$ph944$i$lcssa;
        break;
       }
       $160 = (($$lcssa198) + 1)|0;
       $161 = ($160>>>0)<($$lcssa239>>>0);
       if ($161) {
        $281 = $160;$jp$1$ph9$ph49$i = $$lcssa198;$p$1$ph$ph50$i = $156;
       } else {
        $$lcssa214 = $156;$ip$1$ph55$i$lcssa215 = $ip$1$ph55$i;
        label = 56;
        break L75;
       }
      }
      $157 = (($jp$1$ph944$i$lcssa$lcssa) + 1)|0;
      $158 = (($jp$1$ph944$i$lcssa$lcssa) + 2)|0;
      $159 = ($158>>>0)<($$lcssa239>>>0);
      if ($159) {
       $279 = $158;$ip$1$ph55$i = $jp$1$ph944$i$lcssa$lcssa;$jp$1$ph56$i = $157;
      } else {
       $jp$1$ph944$i$lcssa$lcssa$lcssa = $jp$1$ph944$i$lcssa$lcssa;
       label = 57;
       break;
      }
     }
     if ((label|0) == 54) {
      $ip$0$ph$lcssa147$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i$lcssa216;$p$0$ph$ph$lcssa32151$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $p$1$ph$ph50$i$lcssa210;
      break;
     }
     else if ((label|0) == 55) {
      $ip$0$ph$lcssa147$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i$lcssa217;$p$0$ph$ph$lcssa32151$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $p$1$ph$ph50$i$lcssa211;
      break;
     }
     else if ((label|0) == 56) {
      $ip$0$ph$lcssa147$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i$lcssa215;$p$0$ph$ph$lcssa32151$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $$lcssa214;
      break;
     }
     else if ((label|0) == 57) {
      $ip$0$ph$lcssa147$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $jp$1$ph944$i$lcssa$lcssa$lcssa;$p$0$ph$ph$lcssa32151$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = 1;
      break;
     }
    } else {
     $ip$0$ph$lcssa147$i = -1;$ip$1$ph$lcssa$i = -1;$p$0$ph$ph$lcssa32151$i = 1;$p$1$ph$ph$lcssa23$i = 1;
    }
   } while(0);
   $162 = (($ip$1$ph$lcssa$i) + 1)|0;
   $163 = (($ip$0$ph$lcssa147$i) + 1)|0;
   $164 = ($162>>>0)>($163>>>0);
   $p$1$p$0$i = $164 ? $p$1$ph$ph$lcssa23$i : $p$0$ph$ph$lcssa32151$i;
   $ip$1$ip$0$i = $164 ? $ip$1$ph$lcssa$i : $ip$0$ph$lcssa147$i;
   $165 = (($n) + ($p$1$p$0$i)|0);
   $166 = (($ip$1$ip$0$i) + 1)|0;
   $167 = (_memcmp($n,$165,$166)|0);
   $168 = ($167|0)==(0);
   if ($168) {
    $174 = (($$lcssa239) - ($p$1$p$0$i))|0;
    $175 = $$lcssa239 | 63;
    $176 = ($$lcssa239|0)==($p$1$p$0$i|0);
    if ($176) {
     $232 = $175;$p$3155$i = $$lcssa239;
    } else {
     $$03$us$i = $3;$mem$0$us$i = 0;$z$0$us$i = $3;
     L98: while(1) {
      $178 = $z$0$us$i;
      $179 = $$03$us$i;
      $180 = (($178) - ($179))|0;
      $181 = ($180>>>0)<($$lcssa239>>>0);
      do {
       if ($181) {
        $182 = (_memchr($z$0$us$i,0,$175)|0);
        $183 = ($182|0)==(0|0);
        if ($183) {
         $187 = (($z$0$us$i) + ($175)|0);
         $z$1$us$i = $187;
         break;
        } else {
         $184 = $182;
         $185 = (($184) - ($179))|0;
         $186 = ($185>>>0)<($$lcssa239>>>0);
         if ($186) {
          label = 104;
          break L98;
         } else {
          $z$1$us$i = $182;
          break;
         }
        }
       } else {
        $z$1$us$i = $z$0$us$i;
       }
      } while(0);
      $188 = (($$03$us$i) + ($l$080$i$lcssa238)|0);
      $189 = HEAP8[$188>>0]|0;
      $div$us$i = ($189&255) >>> 5;
      $190 = $div$us$i&255;
      $191 = (($byteset$i) + ($190<<2)|0);
      $192 = HEAP32[$191>>2]|0;
      $193 = $189 & 31;
      $194 = $193&255;
      $195 = 1 << $194;
      $196 = $195 & $192;
      $197 = ($196|0)==(0);
      L106: do {
       if ($197) {
        $227 = (($$03$us$i) + ($$lcssa239)|0);
        $$03$us$i$be = $227;$mem$0$us$i$be = 0;
       } else {
        $198 = $189&255;
        $199 = (($shift$i) + ($198<<2)|0);
        $200 = HEAP32[$199>>2]|0;
        $201 = (($$lcssa239) - ($200))|0;
        $202 = ($$lcssa239|0)==($200|0);
        if (!($202)) {
         $203 = ($mem$0$us$i|0)!=(0);
         $204 = ($201>>>0)<($p$1$p$0$i>>>0);
         $or$cond5$us$i = $203 & $204;
         $k$2$us$i = $or$cond5$us$i ? $174 : $201;
         $205 = (($$03$us$i) + ($k$2$us$i)|0);
         $$03$us$i$be = $205;$mem$0$us$i$be = 0;
         break;
        }
        $206 = ($166>>>0)>($mem$0$us$i>>>0);
        $$mem$0$us$i = $206 ? $166 : $mem$0$us$i;
        $207 = (($n) + ($$mem$0$us$i)|0);
        $208 = HEAP8[$207>>0]|0;
        $209 = ($208<<24>>24)==(0);
        do {
         if (!($209)) {
          $$pr$us$i = $208;$k$338$us$i = $$mem$0$us$i;
          while(1) {
           $210 = (($$03$us$i) + ($k$338$us$i)|0);
           $211 = HEAP8[$210>>0]|0;
           $212 = ($$pr$us$i<<24>>24)==($211<<24>>24);
           if (!($212)) {
            $k$338$us$i$lcssa = $k$338$us$i;
            label = 74;
            break;
           }
           $215 = (($k$338$us$i) + 1)|0;
           $216 = (($n) + ($215)|0);
           $217 = HEAP8[$216>>0]|0;
           $218 = ($217<<24>>24)==(0);
           if ($218) {
            label = 76;
            break;
           } else {
            $$pr$us$i = $217;$k$338$us$i = $215;
           }
          }
          if ((label|0) == 74) {
           label = 0;
           $213 = (($k$338$us$i$lcssa) - ($ip$1$ip$0$i))|0;
           $214 = (($$03$us$i) + ($213)|0);
           $$03$us$i$be = $214;$mem$0$us$i$be = 0;
           break L106;
          }
          else if ((label|0) == 76) {
           label = 0;
           break;
          }
         }
        } while(0);
        $k$4$us$i = $166;
        while(1) {
         $219 = ($k$4$us$i>>>0)>($mem$0$us$i>>>0);
         if (!($219)) {
          $$03$us$i$lcssa197 = $$03$us$i;
          label = 103;
          break L98;
         }
         $220 = (($k$4$us$i) + -1)|0;
         $221 = (($n) + ($220)|0);
         $222 = HEAP8[$221>>0]|0;
         $223 = (($$03$us$i) + ($220)|0);
         $224 = HEAP8[$223>>0]|0;
         $225 = ($222<<24>>24)==($224<<24>>24);
         if ($225) {
          $k$4$us$i = $220;
         } else {
          break;
         }
        }
        $226 = (($$03$us$i) + ($p$1$p$0$i)|0);
        $$03$us$i$be = $226;$mem$0$us$i$be = $174;
       }
      } while(0);
      $$03$us$i = $$03$us$i$be;$mem$0$us$i = $mem$0$us$i$be;$z$0$us$i = $z$1$us$i;
     }
     if ((label|0) == 103) {
      $$0$i = $$03$us$i$lcssa197;
      break;
     }
     else if ((label|0) == 104) {
      $$0$i = 0;
      break;
     }
    }
   } else {
    $169 = (($$lcssa239) - ($ip$1$ip$0$i))|0;
    $170 = (($169) + -1)|0;
    $171 = ($ip$1$ip$0$i>>>0)>($170>>>0);
    $ip$1$ip$0$$i = $171 ? $ip$1$ip$0$i : $170;
    $172 = (($ip$1$ip$0$$i) + 1)|0;
    $173 = $$lcssa239 | 63;
    $232 = $173;$p$3155$i = $172;
   }
   $177 = (($n) + ($166)|0);
   $$03$i = $3;$z$0$i = $3;
   L131: while(1) {
    $228 = $z$0$i;
    $229 = $$03$i;
    $230 = (($228) - ($229))|0;
    $231 = ($230>>>0)<($$lcssa239>>>0);
    do {
     if ($231) {
      $233 = (_memchr($z$0$i,0,$232)|0);
      $234 = ($233|0)==(0|0);
      if ($234) {
       $238 = (($z$0$i) + ($232)|0);
       $z$1$i = $238;
       break;
      } else {
       $235 = $233;
       $236 = (($235) - ($229))|0;
       $237 = ($236>>>0)<($$lcssa239>>>0);
       if ($237) {
        label = 102;
        break L131;
       } else {
        $z$1$i = $233;
        break;
       }
      }
     } else {
      $z$1$i = $z$0$i;
     }
    } while(0);
    $239 = (($$03$i) + ($l$080$i$lcssa238)|0);
    $240 = HEAP8[$239>>0]|0;
    $div$i = ($240&255) >>> 5;
    $241 = $div$i&255;
    $242 = (($byteset$i) + ($241<<2)|0);
    $243 = HEAP32[$242>>2]|0;
    $244 = $240 & 31;
    $245 = $244&255;
    $246 = 1 << $245;
    $247 = $246 & $243;
    $248 = ($247|0)==(0);
    L139: do {
     if ($248) {
      $255 = (($$03$i) + ($$lcssa239)|0);
      $$03$i$be = $255;
     } else {
      $249 = $240&255;
      $250 = (($shift$i) + ($249<<2)|0);
      $251 = HEAP32[$250>>2]|0;
      $252 = ($$lcssa239|0)==($251|0);
      if (!($252)) {
       $253 = (($$lcssa239) - ($251))|0;
       $254 = (($$03$i) + ($253)|0);
       $$03$i$be = $254;
       break;
      }
      $256 = HEAP8[$177>>0]|0;
      $257 = ($256<<24>>24)==(0);
      do {
       if (!($257)) {
        $$pr$i = $256;$k$338$i = $166;
        while(1) {
         $258 = (($$03$i) + ($k$338$i)|0);
         $259 = HEAP8[$258>>0]|0;
         $260 = ($$pr$i<<24>>24)==($259<<24>>24);
         if (!($260)) {
          $k$338$i$lcssa = $k$338$i;
          label = 97;
          break;
         }
         $261 = (($k$338$i) + 1)|0;
         $262 = (($n) + ($261)|0);
         $263 = HEAP8[$262>>0]|0;
         $264 = ($263<<24>>24)==(0);
         if ($264) {
          label = 93;
          break;
         } else {
          $$pr$i = $263;$k$338$i = $261;
         }
        }
        if ((label|0) == 93) {
         label = 0;
         break;
        }
        else if ((label|0) == 97) {
         label = 0;
         $265 = (($k$338$i$lcssa) - ($ip$1$ip$0$i))|0;
         $266 = (($$03$i) + ($265)|0);
         $$03$i$be = $266;
         break L139;
        }
       }
      } while(0);
      $k$4$i = $166;
      while(1) {
       $267 = ($k$4$i|0)==(0);
       if ($267) {
        $$03$i$lcssa195 = $$03$i;
        label = 101;
        break L131;
       }
       $268 = (($k$4$i) + -1)|0;
       $269 = (($n) + ($268)|0);
       $270 = HEAP8[$269>>0]|0;
       $271 = (($$03$i) + ($268)|0);
       $272 = HEAP8[$271>>0]|0;
       $273 = ($270<<24>>24)==($272<<24>>24);
       if ($273) {
        $k$4$i = $268;
       } else {
        break;
       }
      }
      $274 = (($$03$i) + ($p$3155$i)|0);
      $$03$i$be = $274;
     }
    } while(0);
    $$03$i = $$03$i$be;$z$0$i = $z$1$i;
   }
   if ((label|0) == 101) {
    $$0$i = $$03$i$lcssa195;
    break;
   }
   else if ((label|0) == 102) {
    $$0$i = 0;
    break;
   }
  }
  else if ((label|0) == 105) {
   $$0$i = 0;
  }
 } while(0);
 $$0 = $$0$i;
 STACKTOP = sp;return ($$0|0);
}
function _strtok($s,$sep) {
 $s = $s|0;
 $sep = $sep|0;
 var $$0 = 0, $$01 = 0, $$sum = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $1 = HEAP32[49160>>2]|0;
  $2 = ($1|0)==(0|0);
  if ($2) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $$01 = $1;
  }
 } else {
  $$01 = $s;
 }
 $3 = (_strspn($$01,$sep)|0);
 $4 = (($$01) + ($3)|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  HEAP32[49160>>2] = 0;
  $$0 = 0;
  return ($$0|0);
 }
 $7 = (_strcspn($4,$sep)|0);
 $$sum = (($7) + ($3))|0;
 $8 = (($$01) + ($$sum)|0);
 HEAP32[49160>>2] = $8;
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  HEAP32[49160>>2] = 0;
  $$0 = $4;
  return ($$0|0);
 } else {
  $$sum2 = (($$sum) + 1)|0;
  $11 = (($$01) + ($$sum2)|0);
  HEAP32[49160>>2] = $11;
  HEAP8[$8>>0] = 0;
  $$0 = $4;
  return ($$0|0);
 }
 return (0)|0;
}
function _strtok_r($s,$sep,$p) {
 $s = $s|0;
 $sep = $sep|0;
 $p = $p|0;
 var $$0 = 0, $$01 = 0, $$sum = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $1 = HEAP32[$p>>2]|0;
  $2 = ($1|0)==(0|0);
  if ($2) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $$01 = $1;
  }
 } else {
  $$01 = $s;
 }
 $3 = (_strspn($$01,$sep)|0);
 $4 = (($$01) + ($3)|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  HEAP32[$p>>2] = 0;
  $$0 = 0;
  return ($$0|0);
 }
 $7 = (_strcspn($4,$sep)|0);
 $$sum = (($7) + ($3))|0;
 $8 = (($$01) + ($$sum)|0);
 HEAP32[$p>>2] = $8;
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  HEAP32[$p>>2] = 0;
  $$0 = $4;
  return ($$0|0);
 } else {
  $$sum2 = (($$sum) + 1)|0;
  $11 = (($$01) + ($$sum2)|0);
  HEAP32[$p>>2] = $11;
  HEAP8[$8>>0] = 0;
  $$0 = $4;
  return ($$0|0);
 }
 return (0)|0;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$lcssa = 0, $$lcssa146 = 0, $$lcssa148 = 0, $$lcssa151 = 0, $$lcssa152 = 0, $$lcssa153 = 0, $$lcssa154 = 0, $$lcssa156 = 0, $$lcssa159 = 0, $$lcssa161 = 0, $$lcssa163 = 0, $$lcssa165 = 0, $$lcssa167 = 0, $$lcssa169 = 0, $$lcssa172 = 0, $$lcssa174 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0;
 var $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi59$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre108 = 0, $$pre58$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$rsize$3$i$lcssa = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i12$i = 0, $$sum$i13$i = 0, $$sum$i16$i = 0, $$sum$i19$i = 0, $$sum$i2337 = 0;
 var $$sum$i32 = 0, $$sum$i38 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i14$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0;
 var $$sum116$i = 0, $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
 var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i15$i = 0, $$sum2$i17$i = 0, $$sum2$i21$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0;
 var $$sum3$i = 0, $$sum3$i27 = 0, $$sum3$pre$i$i = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0;
 var $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0;
 var $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0;
 var $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0;
 var $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0;
 var $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
 var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0;
 var $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0;
 var $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$08$i$i = 0, $K8$053$i$i = 0, $R$0$i = 0, $R$0$i$be = 0, $R$0$i$i = 0, $R$0$i$i$be = 0, $R$0$i$i$lcssa = 0, $R$0$i$i$ph = 0, $R$0$i$lcssa = 0, $R$0$i$ph = 0, $R$0$i18 = 0;
 var $R$0$i18$be = 0, $R$0$i18$lcssa = 0, $R$0$i18$ph = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$be = 0, $RP$0$i$i = 0, $RP$0$i$i$be = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$i$ph = 0, $RP$0$i$lcssa = 0, $RP$0$i$ph = 0, $RP$0$i17 = 0, $RP$0$i17$be = 0, $RP$0$i17$lcssa = 0, $RP$0$i17$ph = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0;
 var $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$052$i$i = 0, $T$052$i$i$lcssa = 0, $T$07$i$i = 0, $T$07$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i26$i = 0;
 var $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond24$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5$i = 0, $or$cond55$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$1$i$lcssa = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0;
 var $rsize$331$i$ph = 0, $rst$0$i = 0, $rst$1$i = 0, $rst$1$i$lcssa = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$082$i = 0, $sp$082$i$lcssa = 0, $sp$181$i = 0, $sp$181$i$lcssa = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$0$i14$lcssa = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0;
 var $t$2$v$3$i$lcssa = 0, $t$230$i = 0, $t$230$i$be = 0, $t$230$i$ph = 0, $tbase$253$i = 0, $tsize$0313843$i = 0, $tsize$1$i = 0, $tsize$252$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$1$i$lcssa = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$332$i = 0, $v$332$i$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[49168>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((49168 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((49168 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[49168>>2] = $22;
     } else {
      $23 = HEAP32[((49168 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[((49168 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((49168 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((49168 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[49168>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[((49168 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[((49168 + 8|0))>>2]|0;
        $88 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((49168 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((49168 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[49168>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[49168>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre108 = ((49168 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre108;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((49168 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((49168 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((49168 + 8|0))>>2] = $81;
     HEAP32[((49168 + 20|0))>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[((49168 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((49168 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((49168 + 16|0))>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($5)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i$lcssa) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i$lcssa) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = (($v$0$i$lcssa) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i$lcssa) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i$ph = $171;$RP$0$i$ph = $170;
        }
       } else {
        $R$0$i$ph = $168;$RP$0$i$ph = $167;
       }
       $R$0$i = $R$0$i$ph;$RP$0$i = $RP$0$i$ph;
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if ($175) {
         $176 = (($R$0$i) + 16|0);
         $177 = HEAP32[$176>>2]|0;
         $178 = ($177|0)==(0|0);
         if ($178) {
          $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
          break;
         } else {
          $R$0$i$be = $177;$RP$0$i$be = $176;
         }
        } else {
         $R$0$i$be = $174;$RP$0$i$be = $173;
        }
        $R$0$i = $R$0$i$be;$RP$0$i = $RP$0$i$be;
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = (($v$0$i$lcssa) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i$lcssa) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((49168 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((49168 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((49168 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((49168 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((49168 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i$lcssa) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = (($R$1$i) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = (($201) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = (($v$0$i$lcssa) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[((49168 + 16|0))>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = (($R$1$i) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = (($207) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($5))|0;
      $215 = $214 | 3;
      $216 = (($v$0$i$lcssa) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $5 | 3;
      $221 = (($v$0$i$lcssa) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i38 = $5 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i38)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($5))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[((49168 + 8|0))>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[((49168 + 20|0))>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = ((49168 + ($229<<2)|0) + 40|0);
       $231 = HEAP32[49168>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[49168>>2] = $235;
        $$sum2$pre$i = (($229) + 2)|0;
        $$pre$i = ((49168 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = ((49168 + ($$sum3$i<<2)|0) + 40|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[((49168 + 16|0))>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = (($F1$0$i) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = (($227) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = (($227) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[((49168 + 8|0))>>2] = $rsize$0$i$lcssa;
      HEAP32[((49168 + 20|0))>>2] = $151;
     }
     $243 = (($v$0$i$lcssa) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[((49168 + 4|0))>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = ((49168 + ($idx$0$i<<2)|0) + 304|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
       label = 93;
      } else {
       $278 = ($idx$0$i|0)==(31);
       if ($278) {
        $282 = 0;
       } else {
        $279 = $idx$0$i >>> 1;
        $280 = (25 - ($279))|0;
        $282 = $280;
       }
       $281 = $246 << $282;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $281;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = (($t$0$i14) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $$lcssa174 = $286;$t$0$i14$lcssa = $t$0$i14;
          label = 97;
          break;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = (($t$0$i14) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = ((($t$0$i14) + ($291<<2)|0) + 16|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$1$i$lcssa = $rsize$1$i;$rst$1$i$lcssa = $rst$1$i;$v$1$i$lcssa = $v$1$i;
         label = 92;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
       if ((label|0) == 92) {
        $rsize$2$i = $rsize$1$i$lcssa;$t$1$i = $rst$1$i$lcssa;$v$2$i = $v$1$i$lcssa;
        label = 93;
        break;
       }
       else if ((label|0) == 97) {
        $rsize$331$i$ph = $$lcssa174;$t$230$i$ph = $t$0$i14$lcssa;$v$332$i$ph = $t$0$i14$lcssa;
        label = 98;
        break;
       }
      }
     } while(0);
     if ((label|0) == 93) {
      $298 = ($t$1$i|0)==(0|0);
      $299 = ($v$2$i|0)==(0|0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = (0 - ($300))|0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303|0)==(0);
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = (0 - ($303))|0;
       $306 = $303 & $305;
       $307 = (($306) + -1)|0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = (($325) + ($326))|0;
       $328 = ((49168 + ($327<<2)|0) + 304|0);
       $329 = HEAP32[$328>>2]|0;
       $t$2$ph$i = $329;
      } else {
       $t$2$ph$i = $t$1$i;
      }
      $330 = ($t$2$ph$i|0)==(0|0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
      } else {
       $rsize$331$i$ph = $rsize$2$i;$t$230$i$ph = $t$2$ph$i;$v$332$i$ph = $v$2$i;
       label = 98;
      }
     }
     if ((label|0) == 98) {
      $rsize$331$i = $rsize$331$i$ph;$t$230$i = $t$230$i$ph;$v$332$i = $v$332$i$ph;
      while(1) {
       $331 = (($t$230$i) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = (($t$230$i) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if ($338) {
        $339 = (($t$230$i) + 20|0);
        $340 = HEAP32[$339>>2]|0;
        $341 = ($340|0)==(0|0);
        if ($341) {
         $$rsize$3$i$lcssa = $$rsize$3$i;$t$2$v$3$i$lcssa = $t$2$v$3$i;
         break;
        } else {
         $t$230$i$be = $340;
        }
       } else {
        $t$230$i$be = $337;
       }
       $rsize$331$i = $$rsize$3$i;$t$230$i = $t$230$i$be;$v$332$i = $t$2$v$3$i;
      }
      $rsize$3$lcssa$i = $$rsize$3$i$lcssa;$v$3$lcssa$i = $t$2$v$3$i$lcssa;
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[((49168 + 8|0))>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[((49168 + 16|0))>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = (($v$3$lcssa$i) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = (($v$3$lcssa$i) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = (($v$3$lcssa$i) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = (($v$3$lcssa$i) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18$ph = $368;$RP$0$i17$ph = $367;
          }
         } else {
          $R$0$i18$ph = $365;$RP$0$i17$ph = $364;
         }
         $R$0$i18 = $R$0$i18$ph;$RP$0$i17 = $RP$0$i17$ph;
         while(1) {
          $370 = (($R$0$i18) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if ($372) {
           $373 = (($R$0$i18) + 16|0);
           $374 = HEAP32[$373>>2]|0;
           $375 = ($374|0)==(0|0);
           if ($375) {
            $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
            break;
           } else {
            $R$0$i18$be = $374;$RP$0$i17$be = $373;
           }
          } else {
           $R$0$i18$be = $371;$RP$0$i17$be = $370;
          }
          $R$0$i18 = $R$0$i18$be;$RP$0$i17 = $RP$0$i17$be;
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = (($v$3$lcssa$i) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = (($356) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = (($353) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = (($v$3$lcssa$i) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = ((49168 + ($379<<2)|0) + 304|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[((49168 + 4|0))>>2]|0;
           $386 = $385 & $384;
           HEAP32[((49168 + 4|0))>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[((49168 + 16|0))>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = (($351) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = (($351) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[((49168 + 16|0))>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = (($R$1$i20) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = (($v$3$lcssa$i) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = (($R$1$i20) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = (($398) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = (($v$3$lcssa$i) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[((49168 + 16|0))>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = (($R$1$i20) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = (($404) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L218: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2337 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2337)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = ((49168 + ($424<<2)|0) + 40|0);
          $426 = HEAP32[49168>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[49168>>2] = $430;
           $$sum14$pre$i = (($424) + 2)|0;
           $$pre$i25 = ((49168 + ($$sum14$pre$i<<2)|0) + 40|0);
           $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $425;
          } else {
           $$sum17$i = (($424) + 2)|0;
           $431 = ((49168 + ($$sum17$i<<2)|0) + 40|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[((49168 + 16|0))>>2]|0;
           $434 = ($432>>>0)<($433>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = (($F5$0$i) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = ((49168 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[((49168 + 4|0))>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[((49168 + 4|0))>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ($I7$0$i|0)==(31);
         if ($476) {
          $484 = 0;
         } else {
          $477 = $I7$0$i >>> 1;
          $478 = (25 - ($477))|0;
          $484 = $478;
         }
         $479 = (($475) + 4|0);
         $480 = HEAP32[$479>>2]|0;
         $481 = $480 & -8;
         $482 = ($481|0)==($rsize$3$lcssa$i|0);
         do {
          if ($482) {
           $T$0$lcssa$i = $475;
          } else {
           $483 = $rsize$3$lcssa$i << $484;
           $K12$029$i = $483;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = ((($T$028$i) + ($491<<2)|0) + 16|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa169 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = (($487) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $$lcssa172 = $487;
             label = 164;
             break;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           if ((label|0) == 164) {
            $T$0$lcssa$i = $$lcssa172;
            break;
           }
           $494 = HEAP32[((49168 + 16|0))>>2]|0;
           $495 = ($$lcssa169>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa169>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L218;
           }
          }
         } while(0);
         $499 = (($T$0$lcssa$i) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[((49168 + 16|0))>>2]|0;
         $502 = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = ($500>>>0)>=($501>>>0);
         $or$cond24$i = $502 & $503;
         if ($or$cond24$i) {
          $504 = (($500) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[((49168 + 8|0))>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[((49168 + 20|0))>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[((49168 + 20|0))>>2] = $514;
   HEAP32[((49168 + 8|0))>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = (($512) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[((49168 + 8|0))>>2] = 0;
   HEAP32[((49168 + 20|0))>>2] = 0;
   $520 = $509 | 3;
   $521 = (($512) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = (($512) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[((49168 + 12|0))>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[((49168 + 12|0))>>2] = $528;
  $529 = HEAP32[((49168 + 24|0))>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[((49168 + 24|0))>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = (($529) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = (($529) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[49640>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[((49640 + 8|0))>>2] = $538;
    HEAP32[((49640 + 4|0))>>2] = $538;
    HEAP32[((49640 + 12|0))>>2] = -1;
    HEAP32[((49640 + 16|0))>>2] = -1;
    HEAP32[((49640 + 20|0))>>2] = 0;
    HEAP32[((49168 + 444|0))>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[49640>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[((49640 + 8|0))>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[((49168 + 440|0))>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[((49168 + 432|0))>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[((49168 + 444|0))>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L282: do {
  if ($560) {
   $561 = HEAP32[((49168 + 24|0))>>2]|0;
   $562 = ($561|0)==(0|0);
   do {
    if ($562) {
     label = 191;
    } else {
     $sp$0$i$i = ((49168 + 448|0));
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = (($sp$0$i$i) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa165 = $sp$0$i$i;$$lcssa167 = $565;
        break;
       }
      }
      $569 = (($sp$0$i$i) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 190;
       break;
      } else {
       $sp$0$i$i = $570;
      }
     }
     if ((label|0) == 190) {
      label = 191;
      break;
     }
     $594 = HEAP32[((49168 + 12|0))>>2]|0;
     $595 = (($548) - ($594))|0;
     $596 = $595 & $549;
     $597 = ($596>>>0)<(2147483647);
     if ($597) {
      $598 = (_sbrk(($596|0))|0);
      $599 = HEAP32[$$lcssa165>>2]|0;
      $600 = HEAP32[$$lcssa167>>2]|0;
      $601 = (($599) + ($600)|0);
      $602 = ($598|0)==($601|0);
      if ($602) {
       $603 = ($598|0)==((-1)|0);
       if ($603) {
        $tsize$0313843$i = $596;
       } else {
        $tbase$253$i = $598;$tsize$252$i = $596;
        label = 211;
        break L282;
       }
      } else {
       $br$0$ph$i = $598;$ssize$1$ph$i = $596;
       label = 201;
      }
     } else {
      $tsize$0313843$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 191) {
     $572 = (_sbrk(0)|0);
     $573 = ($572|0)==((-1)|0);
     if ($573) {
      $tsize$0313843$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[((49640 + 4|0))>>2]|0;
      $576 = (($575) + -1)|0;
      $577 = $576 & $574;
      $578 = ($577|0)==(0);
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = (($576) + ($574))|0;
       $580 = (0 - ($575))|0;
       $581 = $579 & $580;
       $582 = (($550) - ($574))|0;
       $583 = (($582) + ($581))|0;
       $ssize$0$i = $583;
      }
      $584 = HEAP32[((49168 + 432|0))>>2]|0;
      $585 = (($584) + ($ssize$0$i))|0;
      $586 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $587 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = HEAP32[((49168 + 440|0))>>2]|0;
       $589 = ($588|0)==(0);
       if (!($589)) {
        $590 = ($585>>>0)<=($584>>>0);
        $591 = ($585>>>0)>($588>>>0);
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0313843$i = 0;
         break;
        }
       }
       $592 = (_sbrk(($ssize$0$i|0))|0);
       $593 = ($592|0)==($572|0);
       if ($593) {
        $tbase$253$i = $572;$tsize$252$i = $ssize$0$i;
        label = 211;
        break L282;
       } else {
        $br$0$ph$i = $592;$ssize$1$ph$i = $ssize$0$i;
        label = 201;
       }
      } else {
       $tsize$0313843$i = 0;
      }
     }
    }
   } while(0);
   L306: do {
    if ((label|0) == 201) {
     $604 = (0 - ($ssize$1$ph$i))|0;
     $605 = ($br$0$ph$i|0)!=((-1)|0);
     $606 = ($ssize$1$ph$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $605;
     $607 = ($545>>>0)>($ssize$1$ph$i>>>0);
     $or$cond4$i = $607 & $or$cond5$i;
     do {
      if ($or$cond4$i) {
       $608 = HEAP32[((49640 + 8|0))>>2]|0;
       $609 = (($547) - ($ssize$1$ph$i))|0;
       $610 = (($609) + ($608))|0;
       $611 = (0 - ($608))|0;
       $612 = $610 & $611;
       $613 = ($612>>>0)<(2147483647);
       if ($613) {
        $614 = (_sbrk(($612|0))|0);
        $615 = ($614|0)==((-1)|0);
        if ($615) {
         (_sbrk(($604|0))|0);
         $tsize$0313843$i = 0;
         break L306;
        } else {
         $616 = (($612) + ($ssize$1$ph$i))|0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while(0);
     $617 = ($br$0$ph$i|0)==((-1)|0);
     if ($617) {
      $tsize$0313843$i = 0;
     } else {
      $tbase$253$i = $br$0$ph$i;$tsize$252$i = $ssize$2$i;
      label = 211;
      break L282;
     }
    }
   } while(0);
   $618 = HEAP32[((49168 + 444|0))>>2]|0;
   $619 = $618 | 4;
   HEAP32[((49168 + 444|0))>>2] = $619;
   $tsize$1$i = $tsize$0313843$i;
   label = 208;
  } else {
   $tsize$1$i = 0;
   label = 208;
  }
 } while(0);
 if ((label|0) == 208) {
  $620 = ($550>>>0)<(2147483647);
  if ($620) {
   $621 = (_sbrk(($550|0))|0);
   $622 = (_sbrk(0)|0);
   $623 = ($621|0)!=((-1)|0);
   $624 = ($622|0)!=((-1)|0);
   $or$cond3$i = $623 & $624;
   $625 = ($621>>>0)<($622>>>0);
   $or$cond6$i = $625 & $or$cond3$i;
   if ($or$cond6$i) {
    $626 = $622;
    $627 = $621;
    $628 = (($626) - ($627))|0;
    $629 = (($nb$0) + 40)|0;
    $630 = ($628>>>0)>($629>>>0);
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$253$i = $621;$tsize$252$i = $$tsize$1$i;
     label = 211;
    }
   }
  }
 }
 if ((label|0) == 211) {
  $631 = HEAP32[((49168 + 432|0))>>2]|0;
  $632 = (($631) + ($tsize$252$i))|0;
  HEAP32[((49168 + 432|0))>>2] = $632;
  $633 = HEAP32[((49168 + 436|0))>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[((49168 + 436|0))>>2] = $632;
  }
  $635 = HEAP32[((49168 + 24|0))>>2]|0;
  $636 = ($635|0)==(0|0);
  L325: do {
   if ($636) {
    $637 = HEAP32[((49168 + 16|0))>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$253$i>>>0)<($637>>>0);
    $or$cond8$i = $638 | $639;
    if ($or$cond8$i) {
     HEAP32[((49168 + 16|0))>>2] = $tbase$253$i;
    }
    HEAP32[((49168 + 448|0))>>2] = $tbase$253$i;
    HEAP32[((49168 + 452|0))>>2] = $tsize$252$i;
    HEAP32[((49168 + 460|0))>>2] = 0;
    $640 = HEAP32[49640>>2]|0;
    HEAP32[((49168 + 36|0))>>2] = $640;
    HEAP32[((49168 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $641 = $i$02$i$i << 1;
     $642 = ((49168 + ($641<<2)|0) + 40|0);
     $$sum$i$i = (($641) + 3)|0;
     $643 = ((49168 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$643>>2] = $642;
     $$sum1$i$i = (($641) + 2)|0;
     $644 = ((49168 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = (($tsize$252$i) + -40)|0;
    $647 = (($tbase$253$i) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    if ($650) {
     $654 = 0;
    } else {
     $651 = (0 - ($648))|0;
     $652 = $651 & 7;
     $654 = $652;
    }
    $653 = (($tbase$253$i) + ($654)|0);
    $655 = (($646) - ($654))|0;
    HEAP32[((49168 + 24|0))>>2] = $653;
    HEAP32[((49168 + 12|0))>>2] = $655;
    $656 = $655 | 1;
    $$sum$i12$i = (($654) + 4)|0;
    $657 = (($tbase$253$i) + ($$sum$i12$i)|0);
    HEAP32[$657>>2] = $656;
    $$sum2$i$i = (($tsize$252$i) + -36)|0;
    $658 = (($tbase$253$i) + ($$sum2$i$i)|0);
    HEAP32[$658>>2] = 40;
    $659 = HEAP32[((49640 + 16|0))>>2]|0;
    HEAP32[((49168 + 28|0))>>2] = $659;
   } else {
    $sp$082$i = ((49168 + 448|0));
    while(1) {
     $660 = HEAP32[$sp$082$i>>2]|0;
     $661 = (($sp$082$i) + 4|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = (($660) + ($662)|0);
     $664 = ($tbase$253$i|0)==($663|0);
     if ($664) {
      $$lcssa159 = $660;$$lcssa161 = $661;$$lcssa163 = $662;$sp$082$i$lcssa = $sp$082$i;
      label = 224;
      break;
     }
     $665 = (($sp$082$i) + 8|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = ($666|0)==(0|0);
     if ($667) {
      label = 229;
      break;
     } else {
      $sp$082$i = $666;
     }
    }
    if ((label|0) == 224) {
     $668 = (($sp$082$i$lcssa) + 12|0);
     $669 = HEAP32[$668>>2]|0;
     $670 = $669 & 8;
     $671 = ($670|0)==(0);
     if ($671) {
      $672 = ($635>>>0)>=($$lcssa159>>>0);
      $673 = ($635>>>0)<($tbase$253$i>>>0);
      $or$cond55$i = $673 & $672;
      if ($or$cond55$i) {
       $674 = (($$lcssa163) + ($tsize$252$i))|0;
       HEAP32[$$lcssa161>>2] = $674;
       $675 = HEAP32[((49168 + 12|0))>>2]|0;
       $676 = (($675) + ($tsize$252$i))|0;
       $677 = (($635) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       if ($680) {
        $684 = 0;
       } else {
        $681 = (0 - ($678))|0;
        $682 = $681 & 7;
        $684 = $682;
       }
       $683 = (($635) + ($684)|0);
       $685 = (($676) - ($684))|0;
       HEAP32[((49168 + 24|0))>>2] = $683;
       HEAP32[((49168 + 12|0))>>2] = $685;
       $686 = $685 | 1;
       $$sum$i16$i = (($684) + 4)|0;
       $687 = (($635) + ($$sum$i16$i)|0);
       HEAP32[$687>>2] = $686;
       $$sum2$i17$i = (($676) + 4)|0;
       $688 = (($635) + ($$sum2$i17$i)|0);
       HEAP32[$688>>2] = 40;
       $689 = HEAP32[((49640 + 16|0))>>2]|0;
       HEAP32[((49168 + 28|0))>>2] = $689;
       break;
      }
     }
    }
    else if ((label|0) == 229) {
    }
    $690 = HEAP32[((49168 + 16|0))>>2]|0;
    $691 = ($tbase$253$i>>>0)<($690>>>0);
    if ($691) {
     HEAP32[((49168 + 16|0))>>2] = $tbase$253$i;
     $755 = $tbase$253$i;
    } else {
     $755 = $690;
    }
    $692 = (($tbase$253$i) + ($tsize$252$i)|0);
    $sp$181$i = ((49168 + 448|0));
    while(1) {
     $693 = HEAP32[$sp$181$i>>2]|0;
     $694 = ($693|0)==($692|0);
     if ($694) {
      $$lcssa156 = $sp$181$i;$sp$181$i$lcssa = $sp$181$i;
      label = 235;
      break;
     }
     $695 = (($sp$181$i) + 8|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = ($696|0)==(0|0);
     if ($697) {
      label = 236;
      break;
     } else {
      $sp$181$i = $696;
     }
    }
    if ((label|0) == 235) {
     $698 = (($sp$181$i$lcssa) + 12|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = $699 & 8;
     $701 = ($700|0)==(0);
     if ($701) {
      HEAP32[$$lcssa156>>2] = $tbase$253$i;
      $702 = (($sp$181$i$lcssa) + 4|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = (($703) + ($tsize$252$i))|0;
      HEAP32[$702>>2] = $704;
      $705 = (($tbase$253$i) + 8|0);
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707|0)==(0);
      if ($708) {
       $712 = 0;
      } else {
       $709 = (0 - ($706))|0;
       $710 = $709 & 7;
       $712 = $710;
      }
      $711 = (($tbase$253$i) + ($712)|0);
      $$sum110$i = (($tsize$252$i) + 8)|0;
      $713 = (($tbase$253$i) + ($$sum110$i)|0);
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715|0)==(0);
      if ($716) {
       $719 = 0;
      } else {
       $717 = (0 - ($714))|0;
       $718 = $717 & 7;
       $719 = $718;
      }
      $$sum111$i = (($719) + ($tsize$252$i))|0;
      $720 = (($tbase$253$i) + ($$sum111$i)|0);
      $721 = $720;
      $722 = $711;
      $723 = (($721) - ($722))|0;
      $$sum$i19$i = (($712) + ($nb$0))|0;
      $724 = (($tbase$253$i) + ($$sum$i19$i)|0);
      $725 = (($723) - ($nb$0))|0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = (($712) + 4)|0;
      $727 = (($tbase$253$i) + ($$sum1$i20$i)|0);
      HEAP32[$727>>2] = $726;
      $728 = ($720|0)==($635|0);
      L354: do {
       if ($728) {
        $729 = HEAP32[((49168 + 12|0))>>2]|0;
        $730 = (($729) + ($725))|0;
        HEAP32[((49168 + 12|0))>>2] = $730;
        HEAP32[((49168 + 24|0))>>2] = $724;
        $731 = $730 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $732 = (($tbase$253$i) + ($$sum42$i$i)|0);
        HEAP32[$732>>2] = $731;
       } else {
        $733 = HEAP32[((49168 + 20|0))>>2]|0;
        $734 = ($720|0)==($733|0);
        if ($734) {
         $735 = HEAP32[((49168 + 8|0))>>2]|0;
         $736 = (($735) + ($725))|0;
         HEAP32[((49168 + 8|0))>>2] = $736;
         HEAP32[((49168 + 20|0))>>2] = $724;
         $737 = $736 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $738 = (($tbase$253$i) + ($$sum40$i$i)|0);
         HEAP32[$738>>2] = $737;
         $$sum41$i$i = (($736) + ($$sum$i19$i))|0;
         $739 = (($tbase$253$i) + ($$sum41$i$i)|0);
         HEAP32[$739>>2] = $736;
         break;
        }
        $$sum2$i21$i = (($tsize$252$i) + 4)|0;
        $$sum112$i = (($$sum2$i21$i) + ($719))|0;
        $740 = (($tbase$253$i) + ($$sum112$i)|0);
        $741 = HEAP32[$740>>2]|0;
        $742 = $741 & 3;
        $743 = ($742|0)==(1);
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = ($741>>>0)<(256);
         L362: do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum122$i = (($$sum3738$i$i) + ($tsize$252$i))|0;
           $747 = (($tbase$253$i) + ($$sum122$i)|0);
           $748 = HEAP32[$747>>2]|0;
           $$sum39$i$i = (($tsize$252$i) + 12)|0;
           $$sum123$i = (($$sum39$i$i) + ($719))|0;
           $749 = (($tbase$253$i) + ($$sum123$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = $745 << 1;
           $752 = ((49168 + ($751<<2)|0) + 40|0);
           $753 = ($748|0)==($752|0);
           do {
            if (!($753)) {
             $754 = ($748>>>0)<($755>>>0);
             if ($754) {
              _abort();
              // unreachable;
             }
             $756 = (($748) + 12|0);
             $757 = HEAP32[$756>>2]|0;
             $758 = ($757|0)==($720|0);
             if ($758) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $759 = ($750|0)==($748|0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = HEAP32[49168>>2]|0;
            $763 = $762 & $761;
            HEAP32[49168>>2] = $763;
            break;
           }
           $764 = ($750|0)==($752|0);
           do {
            if ($764) {
             $$pre58$i$i = (($750) + 8|0);
             $$pre$phi59$i$iZ2D = $$pre58$i$i;
            } else {
             $765 = ($750>>>0)<($755>>>0);
             if ($765) {
              _abort();
              // unreachable;
             }
             $766 = (($750) + 8|0);
             $767 = HEAP32[$766>>2]|0;
             $768 = ($767|0)==($720|0);
             if ($768) {
              $$pre$phi59$i$iZ2D = $766;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $769 = (($748) + 12|0);
           HEAP32[$769>>2] = $750;
           HEAP32[$$pre$phi59$i$iZ2D>>2] = $748;
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum113$i = (($$sum34$i$i) + ($tsize$252$i))|0;
           $770 = (($tbase$253$i) + ($$sum113$i)|0);
           $771 = HEAP32[$770>>2]|0;
           $$sum5$i$i = (($tsize$252$i) + 12)|0;
           $$sum114$i = (($$sum5$i$i) + ($719))|0;
           $772 = (($tbase$253$i) + ($$sum114$i)|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ($773|0)==($720|0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum120$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $784 = (($tbase$253$i) + ($$sum120$i)|0);
             $785 = HEAP32[$784>>2]|0;
             $786 = ($785|0)==(0|0);
             if ($786) {
              $$sum121$i = (($$sum67$i$i) + ($tsize$252$i))|0;
              $787 = (($tbase$253$i) + ($$sum121$i)|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i$ph = $788;$RP$0$i$i$ph = $787;
              }
             } else {
              $R$0$i$i$ph = $785;$RP$0$i$i$ph = $784;
             }
             $R$0$i$i = $R$0$i$i$ph;$RP$0$i$i = $RP$0$i$i$ph;
             while(1) {
              $790 = (($R$0$i$i) + 20|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if ($792) {
               $793 = (($R$0$i$i) + 16|0);
               $794 = HEAP32[$793>>2]|0;
               $795 = ($794|0)==(0|0);
               if ($795) {
                $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
                break;
               } else {
                $R$0$i$i$be = $794;$RP$0$i$i$be = $793;
               }
              } else {
               $R$0$i$i$be = $791;$RP$0$i$i$be = $790;
              }
              $R$0$i$i = $R$0$i$i$be;$RP$0$i$i = $RP$0$i$i$be;
             }
             $796 = ($RP$0$i$i$lcssa>>>0)<($755>>>0);
             if ($796) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum115$i = (($$sum3536$i$i) + ($tsize$252$i))|0;
             $775 = (($tbase$253$i) + ($$sum115$i)|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776>>>0)<($755>>>0);
             if ($777) {
              _abort();
              // unreachable;
             }
             $778 = (($776) + 12|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($720|0);
             if (!($780)) {
              _abort();
              // unreachable;
             }
             $781 = (($773) + 8|0);
             $782 = HEAP32[$781>>2]|0;
             $783 = ($782|0)==($720|0);
             if ($783) {
              HEAP32[$778>>2] = $773;
              HEAP32[$781>>2] = $776;
              $R$1$i$i = $773;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $797 = ($771|0)==(0|0);
           if ($797) {
            break;
           }
           $$sum30$i$i = (($tsize$252$i) + 28)|0;
           $$sum116$i = (($$sum30$i$i) + ($719))|0;
           $798 = (($tbase$253$i) + ($$sum116$i)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = ((49168 + ($799<<2)|0) + 304|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = ($720|0)==($801|0);
           do {
            if ($802) {
             HEAP32[$800>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = HEAP32[((49168 + 4|0))>>2]|0;
             $806 = $805 & $804;
             HEAP32[((49168 + 4|0))>>2] = $806;
             break L362;
            } else {
             $807 = HEAP32[((49168 + 16|0))>>2]|0;
             $808 = ($771>>>0)<($807>>>0);
             if ($808) {
              _abort();
              // unreachable;
             }
             $809 = (($771) + 16|0);
             $810 = HEAP32[$809>>2]|0;
             $811 = ($810|0)==($720|0);
             if ($811) {
              HEAP32[$809>>2] = $R$1$i$i;
             } else {
              $812 = (($771) + 20|0);
              HEAP32[$812>>2] = $R$1$i$i;
             }
             $813 = ($R$1$i$i|0)==(0|0);
             if ($813) {
              break L362;
             }
            }
           } while(0);
           $814 = HEAP32[((49168 + 16|0))>>2]|0;
           $815 = ($R$1$i$i>>>0)<($814>>>0);
           if ($815) {
            _abort();
            // unreachable;
           }
           $816 = (($R$1$i$i) + 24|0);
           HEAP32[$816>>2] = $771;
           $$sum3132$i$i = $719 | 16;
           $$sum117$i = (($$sum3132$i$i) + ($tsize$252$i))|0;
           $817 = (($tbase$253$i) + ($$sum117$i)|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           do {
            if (!($819)) {
             $820 = ($818>>>0)<($814>>>0);
             if ($820) {
              _abort();
              // unreachable;
             } else {
              $821 = (($R$1$i$i) + 16|0);
              HEAP32[$821>>2] = $818;
              $822 = (($818) + 24|0);
              HEAP32[$822>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum118$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $823 = (($tbase$253$i) + ($$sum118$i)|0);
           $824 = HEAP32[$823>>2]|0;
           $825 = ($824|0)==(0|0);
           if ($825) {
            break;
           }
           $826 = HEAP32[((49168 + 16|0))>>2]|0;
           $827 = ($824>>>0)<($826>>>0);
           if ($827) {
            _abort();
            // unreachable;
           } else {
            $828 = (($R$1$i$i) + 20|0);
            HEAP32[$828>>2] = $824;
            $829 = (($824) + 24|0);
            HEAP32[$829>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $744 | $719;
         $$sum119$i = (($$sum9$i$i) + ($tsize$252$i))|0;
         $830 = (($tbase$253$i) + ($$sum119$i)|0);
         $831 = (($744) + ($725))|0;
         $oldfirst$0$i$i = $830;$qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;$qsize$0$i$i = $725;
        }
        $832 = (($oldfirst$0$i$i) + 4|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = $833 & -2;
        HEAP32[$832>>2] = $834;
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $836 = (($tbase$253$i) + ($$sum10$i$i)|0);
        HEAP32[$836>>2] = $835;
        $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $837 = (($tbase$253$i) + ($$sum11$i$i)|0);
        HEAP32[$837>>2] = $qsize$0$i$i;
        $838 = $qsize$0$i$i >>> 3;
        $839 = ($qsize$0$i$i>>>0)<(256);
        if ($839) {
         $840 = $838 << 1;
         $841 = ((49168 + ($840<<2)|0) + 40|0);
         $842 = HEAP32[49168>>2]|0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844|0)==(0);
         do {
          if ($845) {
           $846 = $842 | $843;
           HEAP32[49168>>2] = $846;
           $$sum26$pre$i$i = (($840) + 2)|0;
           $$pre$i22$i = ((49168 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i23$iZ2D = $$pre$i22$i;$F4$0$i$i = $841;
          } else {
           $$sum29$i$i = (($840) + 2)|0;
           $847 = ((49168 + ($$sum29$i$i<<2)|0) + 40|0);
           $848 = HEAP32[$847>>2]|0;
           $849 = HEAP32[((49168 + 16|0))>>2]|0;
           $850 = ($848>>>0)<($849>>>0);
           if (!($850)) {
            $$pre$phi$i23$iZ2D = $847;$F4$0$i$i = $848;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i23$iZ2D>>2] = $724;
         $851 = (($F4$0$i$i) + 12|0);
         HEAP32[$851>>2] = $724;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $852 = (($tbase$253$i) + ($$sum27$i$i)|0);
         HEAP32[$852>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $853 = (($tbase$253$i) + ($$sum28$i$i)|0);
         HEAP32[$853>>2] = $841;
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854|0)==(0);
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = ($qsize$0$i$i>>>0)>(16777215);
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = (($854) + 1048320)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = (($860) + 520192)|0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = (($865) + 245760)|0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = (14 - ($869))|0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = (($870) + ($872))|0;
          $874 = $873 << 1;
          $875 = (($873) + 7)|0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while(0);
        $879 = ((49168 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $880 = (($tbase$253$i) + ($$sum12$i$i)|0);
        HEAP32[$880>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $881 = (($tbase$253$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $882 = (($tbase$253$i) + ($$sum14$i$i)|0);
        HEAP32[$882>>2] = 0;
        HEAP32[$881>>2] = 0;
        $883 = HEAP32[((49168 + 4|0))>>2]|0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885|0)==(0);
        if ($886) {
         $887 = $883 | $884;
         HEAP32[((49168 + 4|0))>>2] = $887;
         HEAP32[$879>>2] = $724;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $888 = (($tbase$253$i) + ($$sum15$i$i)|0);
         HEAP32[$888>>2] = $879;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $889 = (($tbase$253$i) + ($$sum16$i$i)|0);
         HEAP32[$889>>2] = $724;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $890 = (($tbase$253$i) + ($$sum17$i$i)|0);
         HEAP32[$890>>2] = $724;
         break;
        }
        $891 = HEAP32[$879>>2]|0;
        $892 = ($I7$0$i$i|0)==(31);
        if ($892) {
         $900 = 0;
        } else {
         $893 = $I7$0$i$i >>> 1;
         $894 = (25 - ($893))|0;
         $900 = $894;
        }
        $895 = (($891) + 4|0);
        $896 = HEAP32[$895>>2]|0;
        $897 = $896 & -8;
        $898 = ($897|0)==($qsize$0$i$i|0);
        do {
         if ($898) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $899 = $qsize$0$i$i << $900;
          $K8$053$i$i = $899;$T$052$i$i = $891;
          while(1) {
           $907 = $K8$053$i$i >>> 31;
           $908 = ((($T$052$i$i) + ($907<<2)|0) + 16|0);
           $903 = HEAP32[$908>>2]|0;
           $909 = ($903|0)==(0|0);
           if ($909) {
            $$lcssa = $908;$T$052$i$i$lcssa = $T$052$i$i;
            break;
           }
           $901 = $K8$053$i$i << 1;
           $902 = (($903) + 4|0);
           $904 = HEAP32[$902>>2]|0;
           $905 = $904 & -8;
           $906 = ($905|0)==($qsize$0$i$i|0);
           if ($906) {
            $$lcssa146 = $903;
            label = 316;
            break;
           } else {
            $K8$053$i$i = $901;$T$052$i$i = $903;
           }
          }
          if ((label|0) == 316) {
           $T$0$lcssa$i25$i = $$lcssa146;
           break;
          }
          $910 = HEAP32[((49168 + 16|0))>>2]|0;
          $911 = ($$lcssa>>>0)<($910>>>0);
          if ($911) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $724;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $912 = (($tbase$253$i) + ($$sum23$i$i)|0);
           HEAP32[$912>>2] = $T$052$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $913 = (($tbase$253$i) + ($$sum24$i$i)|0);
           HEAP32[$913>>2] = $724;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $914 = (($tbase$253$i) + ($$sum25$i$i)|0);
           HEAP32[$914>>2] = $724;
           break L354;
          }
         }
        } while(0);
        $915 = (($T$0$lcssa$i25$i) + 8|0);
        $916 = HEAP32[$915>>2]|0;
        $917 = HEAP32[((49168 + 16|0))>>2]|0;
        $918 = ($T$0$lcssa$i25$i>>>0)>=($917>>>0);
        $919 = ($916>>>0)>=($917>>>0);
        $or$cond$i26$i = $918 & $919;
        if ($or$cond$i26$i) {
         $920 = (($916) + 12|0);
         HEAP32[$920>>2] = $724;
         HEAP32[$915>>2] = $724;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $921 = (($tbase$253$i) + ($$sum20$i$i)|0);
         HEAP32[$921>>2] = $916;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $922 = (($tbase$253$i) + ($$sum21$i$i)|0);
         HEAP32[$922>>2] = $T$0$lcssa$i25$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $923 = (($tbase$253$i) + ($$sum22$i$i)|0);
         HEAP32[$923>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $712 | 8;
      $924 = (($tbase$253$i) + ($$sum1819$i$i)|0);
      $mem$0 = $924;
      return ($mem$0|0);
     }
    }
    else if ((label|0) == 236) {
    }
    $sp$0$i$i$i = ((49168 + 448|0));
    while(1) {
     $925 = HEAP32[$sp$0$i$i$i>>2]|0;
     $926 = ($925>>>0)>($635>>>0);
     if (!($926)) {
      $927 = (($sp$0$i$i$i) + 4|0);
      $928 = HEAP32[$927>>2]|0;
      $929 = (($925) + ($928)|0);
      $930 = ($929>>>0)>($635>>>0);
      if ($930) {
       $$lcssa152 = $925;$$lcssa153 = $928;$$lcssa154 = $929;
       break;
      }
     }
     $931 = (($sp$0$i$i$i) + 8|0);
     $932 = HEAP32[$931>>2]|0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i13$i = (($$lcssa153) + -47)|0;
    $$sum1$i14$i = (($$lcssa153) + -39)|0;
    $933 = (($$lcssa152) + ($$sum1$i14$i)|0);
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935|0)==(0);
    if ($936) {
     $939 = 0;
    } else {
     $937 = (0 - ($934))|0;
     $938 = $937 & 7;
     $939 = $938;
    }
    $$sum2$i15$i = (($$sum$i13$i) + ($939))|0;
    $940 = (($$lcssa152) + ($$sum2$i15$i)|0);
    $941 = (($635) + 16|0);
    $942 = ($940>>>0)<($941>>>0);
    $943 = $942 ? $635 : $940;
    $944 = (($943) + 8|0);
    $945 = (($tsize$252$i) + -40)|0;
    $946 = (($tbase$253$i) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    if ($949) {
     $953 = 0;
    } else {
     $950 = (0 - ($947))|0;
     $951 = $950 & 7;
     $953 = $951;
    }
    $952 = (($tbase$253$i) + ($953)|0);
    $954 = (($945) - ($953))|0;
    HEAP32[((49168 + 24|0))>>2] = $952;
    HEAP32[((49168 + 12|0))>>2] = $954;
    $955 = $954 | 1;
    $$sum$i$i$i = (($953) + 4)|0;
    $956 = (($tbase$253$i) + ($$sum$i$i$i)|0);
    HEAP32[$956>>2] = $955;
    $$sum2$i$i$i = (($tsize$252$i) + -36)|0;
    $957 = (($tbase$253$i) + ($$sum2$i$i$i)|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[((49640 + 16|0))>>2]|0;
    HEAP32[((49168 + 28|0))>>2] = $958;
    $959 = (($943) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$944+0>>2]=HEAP32[((49168 + 448|0))+0>>2]|0;HEAP32[$944+4>>2]=HEAP32[((49168 + 448|0))+4>>2]|0;HEAP32[$944+8>>2]=HEAP32[((49168 + 448|0))+8>>2]|0;HEAP32[$944+12>>2]=HEAP32[((49168 + 448|0))+12>>2]|0;
    HEAP32[((49168 + 448|0))>>2] = $tbase$253$i;
    HEAP32[((49168 + 452|0))>>2] = $tsize$252$i;
    HEAP32[((49168 + 460|0))>>2] = 0;
    HEAP32[((49168 + 456|0))>>2] = $944;
    $960 = (($943) + 28|0);
    HEAP32[$960>>2] = 7;
    $961 = (($943) + 32|0);
    $962 = ($961>>>0)<($$lcssa154>>>0);
    if ($962) {
     $964 = $960;
     while(1) {
      $963 = (($964) + 4|0);
      HEAP32[$963>>2] = 7;
      $965 = (($964) + 8|0);
      $966 = ($965>>>0)<($$lcssa154>>>0);
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943|0)==($635|0);
    if (!($967)) {
     $968 = $943;
     $969 = $635;
     $970 = (($968) - ($969))|0;
     $971 = HEAP32[$959>>2]|0;
     $972 = $971 & -2;
     HEAP32[$959>>2] = $972;
     $973 = $970 | 1;
     $974 = (($635) + 4|0);
     HEAP32[$974>>2] = $973;
     HEAP32[$943>>2] = $970;
     $975 = $970 >>> 3;
     $976 = ($970>>>0)<(256);
     if ($976) {
      $977 = $975 << 1;
      $978 = ((49168 + ($977<<2)|0) + 40|0);
      $979 = HEAP32[49168>>2]|0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981|0)==(0);
      do {
       if ($982) {
        $983 = $979 | $980;
        HEAP32[49168>>2] = $983;
        $$sum3$pre$i$i = (($977) + 2)|0;
        $$pre$i$i = ((49168 + ($$sum3$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $978;
       } else {
        $$sum4$i$i = (($977) + 2)|0;
        $984 = ((49168 + ($$sum4$i$i<<2)|0) + 40|0);
        $985 = HEAP32[$984>>2]|0;
        $986 = HEAP32[((49168 + 16|0))>>2]|0;
        $987 = ($985>>>0)<($986>>>0);
        if (!($987)) {
         $$pre$phi$i$iZ2D = $984;$F$0$i$i = $985;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $988 = (($F$0$i$i) + 12|0);
      HEAP32[$988>>2] = $635;
      $989 = (($635) + 8|0);
      HEAP32[$989>>2] = $F$0$i$i;
      $990 = (($635) + 12|0);
      HEAP32[$990>>2] = $978;
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991|0)==(0);
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = ($970>>>0)>(16777215);
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = (($991) + 1048320)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = (($997) + 520192)|0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = (($1002) + 245760)|0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = (14 - ($1006))|0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = (($1007) + ($1009))|0;
       $1011 = $1010 << 1;
       $1012 = (($1010) + 7)|0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = ((49168 + ($I1$0$i$i<<2)|0) + 304|0);
     $1017 = (($635) + 28|0);
     HEAP32[$1017>>2] = $I1$0$i$i;
     $1018 = (($635) + 20|0);
     HEAP32[$1018>>2] = 0;
     HEAP32[$941>>2] = 0;
     $1019 = HEAP32[((49168 + 4|0))>>2]|0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021|0)==(0);
     if ($1022) {
      $1023 = $1019 | $1020;
      HEAP32[((49168 + 4|0))>>2] = $1023;
      HEAP32[$1016>>2] = $635;
      $1024 = (($635) + 24|0);
      HEAP32[$1024>>2] = $1016;
      $1025 = (($635) + 12|0);
      HEAP32[$1025>>2] = $635;
      $1026 = (($635) + 8|0);
      HEAP32[$1026>>2] = $635;
      break;
     }
     $1027 = HEAP32[$1016>>2]|0;
     $1028 = ($I1$0$i$i|0)==(31);
     if ($1028) {
      $1036 = 0;
     } else {
      $1029 = $I1$0$i$i >>> 1;
      $1030 = (25 - ($1029))|0;
      $1036 = $1030;
     }
     $1031 = (($1027) + 4|0);
     $1032 = HEAP32[$1031>>2]|0;
     $1033 = $1032 & -8;
     $1034 = ($1033|0)==($970|0);
     do {
      if ($1034) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1035 = $970 << $1036;
       $K2$08$i$i = $1035;$T$07$i$i = $1027;
       while(1) {
        $1043 = $K2$08$i$i >>> 31;
        $1044 = ((($T$07$i$i) + ($1043<<2)|0) + 16|0);
        $1039 = HEAP32[$1044>>2]|0;
        $1045 = ($1039|0)==(0|0);
        if ($1045) {
         $$lcssa148 = $1044;$T$07$i$i$lcssa = $T$07$i$i;
         break;
        }
        $1037 = $K2$08$i$i << 1;
        $1038 = (($1039) + 4|0);
        $1040 = HEAP32[$1038>>2]|0;
        $1041 = $1040 & -8;
        $1042 = ($1041|0)==($970|0);
        if ($1042) {
         $$lcssa151 = $1039;
         label = 353;
         break;
        } else {
         $K2$08$i$i = $1037;$T$07$i$i = $1039;
        }
       }
       if ((label|0) == 353) {
        $T$0$lcssa$i$i = $$lcssa151;
        break;
       }
       $1046 = HEAP32[((49168 + 16|0))>>2]|0;
       $1047 = ($$lcssa148>>>0)<($1046>>>0);
       if ($1047) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa148>>2] = $635;
        $1048 = (($635) + 24|0);
        HEAP32[$1048>>2] = $T$07$i$i$lcssa;
        $1049 = (($635) + 12|0);
        HEAP32[$1049>>2] = $635;
        $1050 = (($635) + 8|0);
        HEAP32[$1050>>2] = $635;
        break L325;
       }
      }
     } while(0);
     $1051 = (($T$0$lcssa$i$i) + 8|0);
     $1052 = HEAP32[$1051>>2]|0;
     $1053 = HEAP32[((49168 + 16|0))>>2]|0;
     $1054 = ($T$0$lcssa$i$i>>>0)>=($1053>>>0);
     $1055 = ($1052>>>0)>=($1053>>>0);
     $or$cond$i$i = $1054 & $1055;
     if ($or$cond$i$i) {
      $1056 = (($1052) + 12|0);
      HEAP32[$1056>>2] = $635;
      HEAP32[$1051>>2] = $635;
      $1057 = (($635) + 8|0);
      HEAP32[$1057>>2] = $1052;
      $1058 = (($635) + 12|0);
      HEAP32[$1058>>2] = $T$0$lcssa$i$i;
      $1059 = (($635) + 24|0);
      HEAP32[$1059>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[((49168 + 12|0))>>2]|0;
  $1061 = ($1060>>>0)>($nb$0>>>0);
  if ($1061) {
   $1062 = (($1060) - ($nb$0))|0;
   HEAP32[((49168 + 12|0))>>2] = $1062;
   $1063 = HEAP32[((49168 + 24|0))>>2]|0;
   $1064 = (($1063) + ($nb$0)|0);
   HEAP32[((49168 + 24|0))>>2] = $1064;
   $1065 = $1062 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1066 = (($1063) + ($$sum$i32)|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $nb$0 | 3;
   $1068 = (($1063) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = (($1063) + 8|0);
   $mem$0 = $1069;
   return ($mem$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$lcssa71 = 0, $$pre = 0, $$pre$phi60Z2D = 0, $$pre$phi62Z2D = 0, $$pre$phiZ2D = 0, $$pre59 = 0, $$pre61 = 0, $$sum = 0, $$sum10$pre = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0;
 var $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$054 = 0, $R$0 = 0, $R$0$be = 0;
 var $R$0$lcssa = 0, $R$0$ph = 0, $R$1 = 0, $R7$0 = 0, $R7$0$be = 0, $R7$0$lcssa = 0, $R7$0$ph = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$be = 0, $RP$0$lcssa = 0, $RP$0$ph = 0, $RP9$0 = 0, $RP9$0$be = 0, $RP9$0$lcssa = 0, $RP9$0$ph = 0, $T$0$lcssa = 0, $T$053 = 0, $T$053$lcssa = 0, $cond = 0;
 var $cond48 = 0, $or$cond = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((49168 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((49168 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((49168 + 8|0))>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum20 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum20)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum30 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum30)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum31 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum31)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((49168 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[49168>>2]|0;
     $36 = $35 & $34;
     HEAP32[49168>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre61 = (($24) + 8|0);
     $$pre$phi62Z2D = $$pre61;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi62Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi62Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum22 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum22)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum23 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum23)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum25 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum25)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum24 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum24)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0$ph = $61;$RP$0$ph = $60;
      }
     } else {
      $R$0$ph = $58;$RP$0$ph = $57;
     }
     $R$0 = $R$0$ph;$RP$0 = $RP$0$ph;
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if ($65) {
       $66 = (($R$0) + 16|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = ($67|0)==(0|0);
       if ($68) {
        $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
        break;
       } else {
        $R$0$be = $67;$RP$0$be = $66;
       }
      } else {
       $R$0$be = $64;$RP$0$be = $63;
      }
      $R$0 = $R$0$be;$RP$0 = $RP$0$be;
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum29)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum26 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum26)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((49168 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((49168 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((49168 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((49168 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((49168 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum27 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum27)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = (($R$1) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = (($91) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum28)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[((49168 + 16|0))>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = (($R$1) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = (($97) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum19 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum19)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[((49168 + 24|0))>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[((49168 + 12|0))>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[((49168 + 12|0))>>2] = $120;
   HEAP32[((49168 + 24|0))>>2] = $p$0;
   $121 = $120 | 1;
   $122 = (($p$0) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[((49168 + 20|0))>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[((49168 + 20|0))>>2] = 0;
   HEAP32[((49168 + 8|0))>>2] = 0;
   return;
  }
  $125 = HEAP32[((49168 + 20|0))>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[((49168 + 8|0))>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[((49168 + 8|0))>>2] = $128;
   HEAP32[((49168 + 20|0))>>2] = $p$0;
   $129 = $128 | 1;
   $130 = (($p$0) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum1718 = $8 | 4;
    $138 = (($mem) + ($$sum1718)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = ((49168 + ($140<<2)|0) + 40|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[((49168 + 16|0))>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = (($137) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[49168>>2]|0;
     $152 = $151 & $150;
     HEAP32[49168>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre59 = (($139) + 8|0);
     $$pre$phi60Z2D = $$pre59;
    } else {
     $154 = HEAP32[((49168 + 16|0))>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = (($139) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi60Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = (($137) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi60Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0$ph = $179;$RP9$0$ph = $178;
       }
      } else {
       $R7$0$ph = $176;$RP9$0$ph = $175;
      }
      $R7$0 = $R7$0$ph;$RP9$0 = $RP9$0$ph;
      while(1) {
       $181 = (($R7$0) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if ($183) {
        $184 = (($R7$0) + 16|0);
        $185 = HEAP32[$184>>2]|0;
        $186 = ($185|0)==(0|0);
        if ($186) {
         $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
         break;
        } else {
         $R7$0$be = $185;$RP9$0$be = $184;
        }
       } else {
        $R7$0$be = $182;$RP9$0$be = $181;
       }
       $R7$0 = $R7$0$be;$RP9$0 = $RP9$0$be;
      }
      $187 = HEAP32[((49168 + 16|0))>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[((49168 + 16|0))>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = (($166) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = (($163) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum12 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum12)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = ((49168 + ($191<<2)|0) + 304|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond48 = ($R7$1|0)==(0|0);
      if ($cond48) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[((49168 + 4|0))>>2]|0;
       $198 = $197 & $196;
       HEAP32[((49168 + 4|0))>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[((49168 + 16|0))>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = (($161) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = (($161) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[((49168 + 16|0))>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = (($R7$1) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum13 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum13)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = (($R7$1) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = (($210) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum14 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum14)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[((49168 + 16|0))>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = (($R7$1) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = (($216) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = (($p$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[((49168 + 20|0))>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[((49168 + 8|0))>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = (($p$0) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = ((49168 + ($233<<2)|0) + 40|0);
  $235 = HEAP32[49168>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[49168>>2] = $239;
   $$sum10$pre = (($233) + 2)|0;
   $$pre = ((49168 + ($$sum10$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $234;
  } else {
   $$sum11 = (($233) + 2)|0;
   $240 = ((49168 + ($$sum11<<2)|0) + 40|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[((49168 + 16|0))>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = (($F16$0) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = (($p$0) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = (($p$0) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = ((49168 + ($I18$0<<2)|0) + 304|0);
 $273 = (($p$0) + 28|0);
 HEAP32[$273>>2] = $I18$0;
 $274 = (($p$0) + 16|0);
 $275 = (($p$0) + 20|0);
 HEAP32[$275>>2] = 0;
 HEAP32[$274>>2] = 0;
 $276 = HEAP32[((49168 + 4|0))>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L205: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[((49168 + 4|0))>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = (($p$0) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = (($p$0) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = (($p$0) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ($I18$0|0)==(31);
   if ($285) {
    $293 = 0;
   } else {
    $286 = $I18$0 >>> 1;
    $287 = (25 - ($286))|0;
    $293 = $287;
   }
   $288 = (($284) + 4|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = $289 & -8;
   $291 = ($290|0)==($psize$1|0);
   do {
    if ($291) {
     $T$0$lcssa = $284;
    } else {
     $292 = $psize$1 << $293;
     $K19$054 = $292;$T$053 = $284;
     while(1) {
      $300 = $K19$054 >>> 31;
      $301 = ((($T$053) + ($300<<2)|0) + 16|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$053$lcssa = $T$053;
       break;
      }
      $294 = $K19$054 << 1;
      $295 = (($296) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $$lcssa71 = $296;
       label = 137;
       break;
      } else {
       $K19$054 = $294;$T$053 = $296;
      }
     }
     if ((label|0) == 137) {
      $T$0$lcssa = $$lcssa71;
      break;
     }
     $303 = HEAP32[((49168 + 16|0))>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = (($p$0) + 24|0);
      HEAP32[$305>>2] = $T$053$lcssa;
      $306 = (($p$0) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = (($p$0) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L205;
     }
    }
   } while(0);
   $308 = (($T$0$lcssa) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[((49168 + 16|0))>>2]|0;
   $311 = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = ($309>>>0)>=($310>>>0);
   $or$cond = $311 & $312;
   if ($or$cond) {
    $313 = (($309) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = (($p$0) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = (($p$0) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = (($p$0) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[((49168 + 32|0))>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[((49168 + 32|0))>>2] = $318;
 $319 = ($318|0)==(0);
 if (!($319)) {
  return;
 }
 $sp$0$in$i = ((49168 + 456|0));
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = (($sp$0$i) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[((49168 + 32|0))>>2] = -1;
 return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 if ($4) {
  $8 = 16;
 } else {
  $5 = (($bytes) + 11)|0;
  $6 = $5 & -8;
  $8 = $6;
 }
 $7 = (($oldmem) + -8|0);
 $9 = (_try_realloc_chunk($7,$8)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = (($9) + 8|0);
  $mem$0 = $11;
  return ($mem$0|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $14 = (($oldmem) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$0 = $12;
 return ($mem$0|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 if ($0) {
  $4 = 1;
 } else {
  $1 = (($c) + -9)|0;
  $2 = ($1>>>0)<(5);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function _isupper($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -65)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 return ($2|0);
}
function _tolower($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isupper($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c | 32;
 $$0 = $1 ? $c : $2;
 return ($$0|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$0 = 0.0, $$0$i27 = 0.0, $$012$i = 0, $$012$i$be = 0, $$012$i$lcssa = 0, $$013$i = 0, $$01335$i = 0, $$01336$i = 0, $$07$i = 0, $$0711$i = 0, $$0712$i = 0, $$1$be$i = 0, $$1$be$i$lcssa = 0, $$1$ph$i = 0, $$14$i = 0, $$2$i = 0, $$21$i = 0, $$3$be$i = 0, $$3$be$i$lcssa = 0;
 var $$3$lcssa$i = 0, $$3131$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa = 0, $$lcssa190 = 0, $$lcssa191 = 0, $$lcssa201 = 0, $$lcssa202 = 0, $$lcssa205 = 0, $$lcssa207 = 0, $$lcssa207$lcssa = 0, $$lcssa208 = 0, $$lcssa208$lcssa = 0, $$lcssa211 = 0, $$lcssa214 = 0, $$lcssa215 = 0, $$lcssa221 = 0, $$lcssa222 = 0, $$lcssa232 = 0;
 var $$lcssa59$i = 0, $$lnz$0$i = 0, $$neg41$i = 0, $$old$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0.0, $$pre$i18 = 0, $$pre$phi$iZ2D = 0.0, $$promoted$i = 0, $$sink$off0$us$i = 0, $$sink$off0$us102$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0;
 var $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0.0, $205 = 0.0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0.0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0.0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0.0, $417 = 0.0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0.0, $434 = 0.0, $435 = 0.0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0.0, $446 = 0.0, $447 = 0.0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0.0, $458 = 0.0, $459 = 0.0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0.0, $472 = 0, $473 = 0.0, $474 = 0.0, $475 = 0, $476 = 0.0, $477 = 0, $478 = 0.0, $479 = 0.0, $48 = 0.0, $480 = 0, $481 = 0, $482 = 0, $483 = 0.0;
 var $484 = 0.0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0.0, $490 = 0.0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0, $496 = 0.0, $497 = 0.0, $498 = 0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0;
 var $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0;
 var $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0;
 var $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0;
 var $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0;
 var $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0;
 var $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0;
 var $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0;
 var $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0.0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0.0, $643 = 0.0, $644 = 0.0, $645 = 0;
 var $646 = 0.0, $647 = 0.0, $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0.0, $663 = 0;
 var $664 = 0.0, $665 = 0.0, $666 = 0, $667 = 0, $668 = 0, $669 = 0.0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0.0, $673 = 0, $674 = 0, $675 = 0.0, $676 = 0, $677 = 0.0, $678 = 0.0, $679 = 0.0, $68 = 0, $680 = 0, $681 = 0;
 var $682 = 0, $683 = 0, $684 = 0.0, $685 = 0, $686 = 0, $687 = 0, $688 = 0.0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0.0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0;
 var $70 = 0, $700 = 0.0, $701 = 0, $702 = 0, $703 = 0.0, $704 = 0.0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0;
 var $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0;
 var $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0;
 var $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa186$i = 0, $a$0110$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph47$i = 0, $a$2$ph47$i$lcssa = 0, $a$2$ph47$i$lcssa219 = 0;
 var $a$2$ph47$i$ph = 0, $a$2$ph47$i220 = 0, $a$3$i = 0, $a$3$i$lcssa = 0, $a$3$i$lcssa198 = 0, $a$3$i$lcssa199 = 0, $a$3$i$ph = 0, $a$3$i200 = 0, $a$3$ph$i = 0, $a$487$i = 0, $a$5$i = 0, $a$5$i$lcssa = 0, $a$5$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i24 = 0.0, $bits$0$ph = 0, $brmerge = 0, $brmerge136 = 0, $c$0 = 0, $c$0$i = 0;
 var $c$0$i$be = 0, $c$0$i$lcssa = 0, $c$0$i$ph = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$186 = 0, $c$2 = 0, $c$2$i = 0, $c$2$i$be = 0, $c$2$i$ph = 0, $c$2$lcssa$i = 0, $c$4 = 0, $c$4$1 = 0, $c$6 = 0, $carry$0112$i = 0, $carry1$0$us$i = 0, $carry1$0$us98$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us$i$lcssa = 0;
 var $carry1$1$us$i$lcssa$lcssa = 0, $carry1$1$us103$i = 0, $carry1$1$us103$i$lcssa = 0, $carry1$1$us103$i$lcssa$lcssa = 0, $carry3$090$i = 0, $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$033$i = 0, $denormal$034$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$ph$i$lcssa = 0, $e2$0$us$i = 0, $e2$0$us93$i = 0, $e2$0$us93$i$lcssa = 0, $e2$1$i = 0, $e2$1$i$lcssa = 0, $e2$1$i$lcssa195 = 0;
 var $e2$1$i$ph = 0, $e2$1$i197 = 0, $e2$1$ph$i = 0, $e2$1$ph$i$ph = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond175$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i$lcssa = 0, $gotdig$0$i$lcssa193 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa = 0, $gotdig$0$i12$lcssa230 = 0, $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i$ph = 0;
 var $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3127$i = 0, $gotdig$3127$i$lcssa = 0, $gotdig$4$i = 0, $gotdig$4$i$lcssa = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i$ph = 0, $gotrad$0$i14 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1128$i = 0, $gotrad$2$i = 0, $gotrad$2$i$lcssa = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0;
 var $i$085 = 0, $i$1 = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0130$i = 0, $j$0130$i$lcssa = 0, $j$076$i = 0, $j$077$i = 0, $j$078$i = 0, $j$2$i = 0, $j$2$i$lcssa = 0, $j$3119$i = 0, $k$0$lcssa$i = 0, $k$0129$i = 0, $k$0129$i$lcssa = 0, $k$072$i = 0, $k$073$i = 0, $k$074$i = 0, $k$2$i = 0;
 var $k$2$i$lcssa = 0, $k$3$i = 0, $k$4111$i = 0, $k$5$in$us$i = 0, $k$5$in$us97$i = 0, $k$5$us$i = 0, $k$5$us99$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us105$i = 0, $k$688$i = 0, $lnz$0$lcssa$i = 0, $lnz$0126$i = 0, $lnz$0126$i$lcssa = 0, $lnz$066$i = 0, $lnz$067$i = 0, $lnz$068$i = 0, $lnz$2$i = 0, $lnz$2$i$lcssa = 0, $notlhs = 0, $notrhs = 0;
 var $or$cond = 0, $or$cond$i = 0, $or$cond$i17 = 0, $or$cond11$i = 0, $or$cond11123$i = 0, $or$cond16$i = 0, $or$cond18$i = 0, $or$cond19$i = 0, $or$cond191$i = 0, $or$cond192$i = 0, $or$cond20$us$i = 0, $or$cond20$us104$i = 0, $or$cond22$i = 0, $or$cond23$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond6$i = 0, $or$cond7 = 0, $or$cond9$i = 0;
 var $or$cond9$i26 = 0, $or$cond9$not = 0, $rp$0$lcssa187$i = 0, $rp$0109$i = 0, $rp$1$i19 = 0, $rp$1$i19$lcssa = 0, $rp$2$ph45$i = 0, $rp$2$ph45$i$lcssa = 0, $rp$2$ph45$i$ph = 0, $rp$3$i$ph = 0, $rp$3$ph43$i = 0, $rp$3$ph43$i$ph = 0, $rp$486$i = 0, $rp$5$i = 0, $rp$5$i$lcssa = 0, $rp$5$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0;
 var $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$325$i = 0, $x$4$lcssa$i = 0, $x$420$i = 0, $x$5$i = 0, $x$5$i$lcssa = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0, $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i23 = 0.0, $y$2$i = 0.0, $y$2$i25 = 0.0;
 var $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$321$i = 0.0, $y$4$i = 0.0, $y$4$i$lcssa = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$ph46$i = 0, $z$1$ph46$i$lcssa = 0, $z$1$ph46$i$ph = 0, $z$1$us$i = 0, $z$1$us94$i = 0, $z$1$us94$i$lcssa = 0, $z$2$us$i = 0, $z$2$us96$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us$i$lcssa = 0, $z$3$us$i$lcssa$lcssa = 0, $z$3$us106$i = 0;
 var $z$3$us106$i$lcssa = 0, $z$3$us106$i$lcssa$lcssa = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$5$ph$i$lcssa = 0, $z$5$ph$i$lcssa209 = 0, $z$5$ph$i$ph = 0, $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 if ((($prec|0) == 0)) {
  $bits$0$ph = 24;$emin$0$ph = -149;
 } else if ((($prec|0) == 2)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 1)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $0 = (($f) + 4|0);
 $1 = (($f) + 100|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if ($4) {
   $5 = (($2) + 1|0);
   HEAP32[$0>>2] = $5;
   $6 = HEAP8[$2>>0]|0;
   $7 = $6&255;
   $9 = $7;
  } else {
   $8 = (___shgetc($f)|0);
   $9 = $8;
  }
  $10 = (_isspace($9)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   $$lcssa232 = $9;
   break;
  }
 }
 $12 = ($$lcssa232|0)==(45);
 do {
  if ((($$lcssa232|0) == 43) | (($$lcssa232|0) == 45)) {
   $13 = $12&1;
   $14 = $13 << 1;
   $15 = (1 - ($14))|0;
   $16 = HEAP32[$0>>2]|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ($16>>>0)<($17>>>0);
   if ($18) {
    $19 = (($16) + 1|0);
    HEAP32[$0>>2] = $19;
    $20 = HEAP8[$16>>0]|0;
    $21 = $20&255;
    $c$0 = $21;$sign$0 = $15;
    break;
   } else {
    $22 = (___shgetc($f)|0);
    $c$0 = $22;$sign$0 = $15;
    break;
   }
  } else {
   $c$0 = $$lcssa232;$sign$0 = 1;
  }
 } while(0);
 $c$186 = $c$0;$i$085 = 0;
 while(1) {
  $23 = $c$186 | 32;
  $24 = (49664 + ($i$085)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 << 24 >> 24;
  $27 = ($23|0)==($26|0);
  if (!($27)) {
   $c$1$lcssa = $c$186;$i$0$lcssa = $i$085;
   break;
  }
  $28 = ($i$085>>>0)<(7);
  do {
   if ($28) {
    $29 = HEAP32[$0>>2]|0;
    $30 = HEAP32[$1>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = (($29) + 1|0);
     HEAP32[$0>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $c$2 = $34;
     break;
    } else {
     $35 = (___shgetc($f)|0);
     $c$2 = $35;
     break;
    }
   } else {
    $c$2 = $c$186;
   }
  } while(0);
  $36 = (($i$085) + 1)|0;
  $37 = ($36>>>0)<(8);
  if ($37) {
   $c$186 = $c$2;$i$085 = $36;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $36;
   break;
  }
 }
 do {
  if ((($i$0$lcssa|0) == 3)) {
   label = 23;
  } else if (!((($i$0$lcssa|0) == 8))) {
   $38 = ($i$0$lcssa>>>0)>(3);
   $39 = ($pok|0)!=(0);
   $or$cond5 = $39 & $38;
   if ($or$cond5) {
    $40 = ($i$0$lcssa|0)==(8);
    if ($40) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $51 = ($i$0$lcssa|0)==(0);
   do {
    if ($51) {
     $52 = $c$1$lcssa | 32;
     $53 = ($52|0)==(110);
     if ($53) {
      $54 = HEAP32[$0>>2]|0;
      $55 = HEAP32[$1>>2]|0;
      $56 = ($54>>>0)<($55>>>0);
      if ($56) {
       $57 = (($54) + 1|0);
       HEAP32[$0>>2] = $57;
       $58 = HEAP8[$54>>0]|0;
       $59 = $58&255;
       $c$4 = $59;
      } else {
       $60 = (___shgetc($f)|0);
       $c$4 = $60;
      }
      $61 = $c$4 | 32;
      $62 = ($61|0)==(97);
      if (!($62)) {
       break;
      }
      $710 = HEAP32[$0>>2]|0;
      $711 = HEAP32[$1>>2]|0;
      $712 = ($710>>>0)<($711>>>0);
      if ($712) {
       $714 = (($710) + 1|0);
       HEAP32[$0>>2] = $714;
       $715 = HEAP8[$710>>0]|0;
       $716 = $715&255;
       $c$4$1 = $716;
      } else {
       $713 = (___shgetc($f)|0);
       $c$4$1 = $713;
      }
      $717 = $c$4$1 | 32;
      $718 = ($717|0)==(110);
      if (!($718)) {
       break;
      }
      $63 = HEAP32[$0>>2]|0;
      $64 = HEAP32[$1>>2]|0;
      $65 = ($63>>>0)<($64>>>0);
      if ($65) {
       $66 = (($63) + 1|0);
       HEAP32[$0>>2] = $66;
       $67 = HEAP8[$63>>0]|0;
       $68 = $67&255;
       $70 = $68;
      } else {
       $69 = (___shgetc($f)|0);
       $70 = $69;
      }
      $71 = ($70|0)==(40);
      if (!($71)) {
       $72 = HEAP32[$1>>2]|0;
       $73 = ($72|0)==(0|0);
       if ($73) {
        $$0 = nan;
        STACKTOP = sp;return (+$$0);
       }
       $74 = HEAP32[$0>>2]|0;
       $75 = (($74) + -1|0);
       HEAP32[$0>>2] = $75;
       $$0 = nan;
       STACKTOP = sp;return (+$$0);
      }
      $i$4 = 1;
      while(1) {
       $76 = HEAP32[$0>>2]|0;
       $77 = HEAP32[$1>>2]|0;
       $78 = ($76>>>0)<($77>>>0);
       if ($78) {
        $79 = (($76) + 1|0);
        HEAP32[$0>>2] = $79;
        $80 = HEAP8[$76>>0]|0;
        $81 = $80&255;
        $84 = $81;
       } else {
        $82 = (___shgetc($f)|0);
        $84 = $82;
       }
       $83 = (($84) + -48)|0;
       $85 = ($83>>>0)<(10);
       $86 = (($84) + -65)|0;
       $87 = ($86>>>0)<(26);
       $or$cond = $85 | $87;
       if (!($or$cond)) {
        $88 = (($84) + -97)|0;
        $89 = ($88>>>0)<(26);
        $90 = ($84|0)==(95);
        $or$cond7 = $90 | $89;
        if (!($or$cond7)) {
         $$lcssa = $84;$i$4$lcssa = $i$4;
         break;
        }
       }
       $102 = (($i$4) + 1)|0;
       $i$4 = $102;
      }
      $91 = ($$lcssa|0)==(41);
      if ($91) {
       $$0 = nan;
       STACKTOP = sp;return (+$$0);
      }
      $92 = HEAP32[$1>>2]|0;
      $93 = ($92|0)==(0|0);
      if (!($93)) {
       $94 = HEAP32[$0>>2]|0;
       $95 = (($94) + -1|0);
       HEAP32[$0>>2] = $95;
      }
      if (!($39)) {
       $97 = (___errno_location()|0);
       HEAP32[$97>>2] = 22;
       ___shlim($f,0);
       $$0 = 0.0;
       STACKTOP = sp;return (+$$0);
      }
      $96 = ($i$4$lcssa|0)==(0);
      $brmerge136 = $96 | $93;
      if ($brmerge136) {
       $$0 = nan;
       STACKTOP = sp;return (+$$0);
      }
      $$in = $i$4$lcssa;
      while(1) {
       $98 = (($$in) + -1)|0;
       $99 = HEAP32[$0>>2]|0;
       $100 = (($99) + -1|0);
       HEAP32[$0>>2] = $100;
       $101 = ($98|0)==(0);
       if ($101) {
        break;
       } else {
        $$in = $98;
       }
      }
      $$0 = nan;
      STACKTOP = sp;return (+$$0);
     }
     $108 = ($c$1$lcssa|0)==(48);
     do {
      if ($108) {
       $109 = HEAP32[$0>>2]|0;
       $110 = HEAP32[$1>>2]|0;
       $111 = ($109>>>0)<($110>>>0);
       if ($111) {
        $112 = (($109) + 1|0);
        HEAP32[$0>>2] = $112;
        $113 = HEAP8[$109>>0]|0;
        $114 = $113&255;
        $117 = $114;
       } else {
        $115 = (___shgetc($f)|0);
        $117 = $115;
       }
       $116 = $117 | 32;
       $118 = ($116|0)==(120);
       if (!($118)) {
        $320 = HEAP32[$1>>2]|0;
        $321 = ($320|0)==(0|0);
        if ($321) {
         $c$6 = 48;
         break;
        }
        $322 = HEAP32[$0>>2]|0;
        $323 = (($322) + -1|0);
        HEAP32[$0>>2] = $323;
        $c$6 = 48;
        break;
       }
       $119 = HEAP32[$0>>2]|0;
       $120 = HEAP32[$1>>2]|0;
       $121 = ($119>>>0)<($120>>>0);
       if ($121) {
        $122 = (($119) + 1|0);
        HEAP32[$0>>2] = $122;
        $123 = HEAP8[$119>>0]|0;
        $124 = $123&255;
        $c$0$i$ph = $124;
       } else {
        $125 = (___shgetc($f)|0);
        $c$0$i$ph = $125;
       }
       $c$0$i = $c$0$i$ph;$gotdig$0$i = 0;
       while(1) {
        if ((($c$0$i|0) == 46)) {
         $gotdig$0$i$lcssa193 = $gotdig$0$i;
         label = 74;
         break;
        } else if (!((($c$0$i|0) == 48))) {
         $c$0$i$lcssa = $c$0$i;$gotdig$0$i$lcssa = $gotdig$0$i;
         label = 84;
         break;
        }
        $126 = HEAP32[$0>>2]|0;
        $127 = HEAP32[$1>>2]|0;
        $128 = ($126>>>0)<($127>>>0);
        if ($128) {
         $129 = (($126) + 1|0);
         HEAP32[$0>>2] = $129;
         $130 = HEAP8[$126>>0]|0;
         $131 = $130&255;
         $c$0$i$be = $131;
        } else {
         $132 = (___shgetc($f)|0);
         $c$0$i$be = $132;
        }
        $c$0$i = $c$0$i$be;$gotdig$0$i = 1;
       }
       if ((label|0) == 74) {
        $133 = HEAP32[$0>>2]|0;
        $134 = HEAP32[$1>>2]|0;
        $135 = ($133>>>0)<($134>>>0);
        if ($135) {
         $136 = (($133) + 1|0);
         HEAP32[$0>>2] = $136;
         $137 = HEAP8[$133>>0]|0;
         $138 = $137&255;
         $c$1$ph$i = $138;
        } else {
         $139 = (___shgetc($f)|0);
         $c$1$ph$i = $139;
        }
        $140 = ($c$1$ph$i|0)==(48);
        if ($140) {
         $148 = 0;$149 = 0;
         while(1) {
          $141 = HEAP32[$0>>2]|0;
          $142 = HEAP32[$1>>2]|0;
          $143 = ($141>>>0)<($142>>>0);
          if ($143) {
           $144 = (($141) + 1|0);
           HEAP32[$0>>2] = $144;
           $145 = HEAP8[$141>>0]|0;
           $146 = $145&255;
           $152 = $146;
          } else {
           $147 = (___shgetc($f)|0);
           $152 = $147;
          }
          $150 = (_i64Add(($148|0),($149|0),-1,-1)|0);
          $151 = tempRet0;
          $153 = ($152|0)==(48);
          if ($153) {
           $148 = $150;$149 = $151;
          } else {
           $$lcssa191 = $152;$721 = $150;$722 = $151;
           break;
          }
         }
         $719 = $721;$720 = $722;$c$2$i$ph = $$lcssa191;$gotdig$2$i$ph = 1;$gotrad$0$i$ph = 1;
        } else {
         $719 = 0;$720 = 0;$c$2$i$ph = $c$1$ph$i;$gotdig$2$i$ph = $gotdig$0$i$lcssa193;$gotrad$0$i$ph = 1;
        }
       }
       else if ((label|0) == 84) {
        $719 = 0;$720 = 0;$c$2$i$ph = $c$0$i$lcssa;$gotdig$2$i$ph = $gotdig$0$i$lcssa;$gotrad$0$i$ph = 0;
       }
       $163 = 0;$165 = 0;$723 = $719;$724 = $720;$c$2$i = $c$2$i$ph;$gotdig$2$i = $gotdig$2$i$ph;$gotrad$0$i = $gotrad$0$i$ph;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
       L124: while(1) {
        $154 = (($c$2$i) + -48)|0;
        $155 = ($154>>>0)<(10);
        do {
         if ($155) {
          $d$0$i = $154;
          label = 91;
         } else {
          $156 = $c$2$i | 32;
          $157 = (($156) + -97)|0;
          $158 = ($157>>>0)<(6);
          $159 = ($c$2$i|0)==(46);
          $or$cond6$i = $159 | $158;
          if (!($or$cond6$i)) {
           $207 = $723;$208 = $165;$210 = $724;$211 = $163;$c$2$lcssa$i = $c$2$i;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
           break L124;
          }
          if ($159) {
           $160 = ($gotrad$0$i|0)==(0);
           if ($160) {
            $725 = $165;$726 = $163;$727 = $165;$728 = $163;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
            break;
           } else {
            $207 = $723;$208 = $165;$210 = $724;$211 = $163;$c$2$lcssa$i = 46;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
            break L124;
           }
          } else {
           $161 = ($c$2$i|0)>(57);
           $162 = (($156) + -87)|0;
           $$$i = $161 ? $162 : $154;
           $d$0$i = $$$i;
           label = 91;
           break;
          }
         }
        } while(0);
        if ((label|0) == 91) {
         label = 0;
         $164 = ($163|0)<(0);
         $166 = ($165>>>0)<(8);
         $167 = ($163|0)==(0);
         $168 = $167 & $166;
         $169 = $164 | $168;
         do {
          if ($169) {
           $170 = $x$0$i << 4;
           $171 = (($d$0$i) + ($170))|0;
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $171;$y$1$i = $y$0$i;
          } else {
           $172 = ($163|0)<(0);
           $173 = ($165>>>0)<(14);
           $174 = ($163|0)==(0);
           $175 = $174 & $173;
           $176 = $172 | $175;
           if ($176) {
            $177 = (+($d$0$i|0));
            $178 = $scale$0$i * 0.0625;
            $179 = $178 * $177;
            $180 = $y$0$i + $179;
            $gottail$1$i = $gottail$0$i;$scale$1$i = $178;$x$1$i = $x$0$i;$y$1$i = $180;
            break;
           }
           $181 = ($d$0$i|0)==(0);
           $182 = ($gottail$0$i|0)!=(0);
           $or$cond$i = $182 | $181;
           if ($or$cond$i) {
            $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
           } else {
            $183 = $scale$0$i * 0.5;
            $184 = $y$0$i + $183;
            $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $184;
           }
          }
         } while(0);
         $185 = (_i64Add(($165|0),($163|0),1,0)|0);
         $186 = tempRet0;
         $725 = $723;$726 = $724;$727 = $185;$728 = $186;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
        }
        $187 = HEAP32[$0>>2]|0;
        $188 = HEAP32[$1>>2]|0;
        $189 = ($187>>>0)<($188>>>0);
        if ($189) {
         $190 = (($187) + 1|0);
         HEAP32[$0>>2] = $190;
         $191 = HEAP8[$187>>0]|0;
         $192 = $191&255;
         $c$2$i$be = $192;
        } else {
         $193 = (___shgetc($f)|0);
         $c$2$i$be = $193;
        }
        $163 = $728;$165 = $727;$723 = $725;$724 = $726;$c$2$i = $c$2$i$be;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
       }
       $194 = ($gotdig$2$i$lcssa|0)==(0);
       if ($194) {
        $195 = HEAP32[$1>>2]|0;
        $196 = ($195|0)==(0|0);
        if (!($196)) {
         $197 = HEAP32[$0>>2]|0;
         $198 = (($197) + -1|0);
         HEAP32[$0>>2] = $198;
        }
        $199 = ($pok|0)==(0);
        if ($199) {
         ___shlim($f,0);
        } else {
         if (!($196)) {
          $200 = HEAP32[$0>>2]|0;
          $201 = (($200) + -1|0);
          HEAP32[$0>>2] = $201;
          $202 = ($gotrad$0$i$lcssa|0)==(0);
          if (!($202)) {
           $203 = (($200) + -2|0);
           HEAP32[$0>>2] = $203;
          }
         }
        }
        $204 = (+($sign$0|0));
        $205 = $204 * 0.0;
        $$0 = $205;
        STACKTOP = sp;return (+$$0);
       }
       $206 = ($gotrad$0$i$lcssa|0)==(0);
       $209 = $206 ? $208 : $207;
       $212 = $206 ? $211 : $210;
       $213 = ($211|0)<(0);
       $214 = ($208>>>0)<(8);
       $215 = ($211|0)==(0);
       $216 = $215 & $214;
       $217 = $213 | $216;
       if ($217) {
        $219 = $208;$220 = $211;$x$325$i = $x$0$i$lcssa;
        while(1) {
         $218 = $x$325$i << 4;
         $221 = (_i64Add(($219|0),($220|0),1,0)|0);
         $222 = tempRet0;
         $223 = ($222|0)<(0);
         $224 = ($221>>>0)<(8);
         $225 = ($222|0)==(0);
         $226 = $225 & $224;
         $227 = $223 | $226;
         if ($227) {
          $219 = $221;$220 = $222;$x$325$i = $218;
         } else {
          $$lcssa190 = $218;
          break;
         }
        }
        $x$3$lcssa$i = $$lcssa190;
       } else {
        $x$3$lcssa$i = $x$0$i$lcssa;
       }
       $228 = $c$2$lcssa$i | 32;
       $229 = ($228|0)==(112);
       do {
        if ($229) {
         $230 = (_scanexp($f,$pok)|0);
         $231 = tempRet0;
         $232 = ($230|0)==(0);
         $233 = ($231|0)==(-2147483648);
         $234 = $232 & $233;
         if ($234) {
          $235 = ($pok|0)==(0);
          if ($235) {
           ___shlim($f,0);
           $$0 = 0.0;
           STACKTOP = sp;return (+$$0);
          } else {
           $236 = HEAP32[$1>>2]|0;
           $237 = ($236|0)==(0|0);
           if ($237) {
            $248 = 0;$249 = 0;
            break;
           }
           $238 = HEAP32[$0>>2]|0;
           $239 = (($238) + -1|0);
           HEAP32[$0>>2] = $239;
           $248 = 0;$249 = 0;
           break;
          }
         } else {
          $248 = $230;$249 = $231;
         }
        } else {
         $240 = HEAP32[$1>>2]|0;
         $241 = ($240|0)==(0|0);
         if ($241) {
          $248 = 0;$249 = 0;
         } else {
          $242 = HEAP32[$0>>2]|0;
          $243 = (($242) + -1|0);
          HEAP32[$0>>2] = $243;
          $248 = 0;$249 = 0;
         }
        }
       } while(0);
       $244 = (_bitshift64Shl(($209|0),($212|0),2)|0);
       $245 = tempRet0;
       $246 = (_i64Add(($244|0),($245|0),-32,-1)|0);
       $247 = tempRet0;
       $250 = (_i64Add(($246|0),($247|0),($248|0),($249|0))|0);
       $251 = tempRet0;
       $252 = ($x$3$lcssa$i|0)==(0);
       if ($252) {
        $253 = (+($sign$0|0));
        $254 = $253 * 0.0;
        $$0 = $254;
        STACKTOP = sp;return (+$$0);
       }
       $255 = (0 - ($emin$0$ph))|0;
       $256 = ($251|0)>(0);
       $257 = ($250>>>0)>($255>>>0);
       $258 = ($251|0)==(0);
       $259 = $258 & $257;
       $260 = $256 | $259;
       if ($260) {
        $261 = (___errno_location()|0);
        HEAP32[$261>>2] = 34;
        $262 = (+($sign$0|0));
        $263 = $262 * 1.7976931348623157E+308;
        $264 = $263 * 1.7976931348623157E+308;
        $$0 = $264;
        STACKTOP = sp;return (+$$0);
       }
       $265 = (($emin$0$ph) + -106)|0;
       $266 = ($265|0)<(0);
       $267 = $266 << 31 >> 31;
       $268 = ($251|0)<($267|0);
       $269 = ($250>>>0)<($265>>>0);
       $270 = ($251|0)==($267|0);
       $271 = $270 & $269;
       $272 = $268 | $271;
       if ($272) {
        $274 = (___errno_location()|0);
        HEAP32[$274>>2] = 34;
        $275 = (+($sign$0|0));
        $276 = $275 * 2.2250738585072014E-308;
        $277 = $276 * 2.2250738585072014E-308;
        $$0 = $277;
        STACKTOP = sp;return (+$$0);
       }
       $273 = ($x$3$lcssa$i|0)>(-1);
       if ($273) {
        $282 = $250;$283 = $251;$x$420$i = $x$3$lcssa$i;$y$321$i = $y$0$i$lcssa;
        while(1) {
         $278 = !($y$321$i >= 0.5);
         $279 = $x$420$i << 1;
         if ($278) {
          $$pn$i = $y$321$i;$x$5$i = $279;
         } else {
          $280 = $279 | 1;
          $281 = $y$321$i + -1.0;
          $$pn$i = $281;$x$5$i = $280;
         }
         $y$4$i = $y$321$i + $$pn$i;
         $284 = (_i64Add(($282|0),($283|0),-1,-1)|0);
         $285 = tempRet0;
         $286 = ($x$5$i|0)>(-1);
         if ($286) {
          $282 = $284;$283 = $285;$x$420$i = $x$5$i;$y$321$i = $y$4$i;
         } else {
          $729 = $284;$730 = $285;$x$5$i$lcssa = $x$5$i;$y$4$i$lcssa = $y$4$i;
          break;
         }
        }
        $291 = $729;$292 = $730;$x$4$lcssa$i = $x$5$i$lcssa;$y$3$lcssa$i = $y$4$i$lcssa;
       } else {
        $291 = $250;$292 = $251;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i$lcssa;
       }
       $287 = ($emin$0$ph|0)<(0);
       $288 = $287 << 31 >> 31;
       $289 = (_i64Subtract(32,0,($emin$0$ph|0),($288|0))|0);
       $290 = tempRet0;
       $293 = (_i64Add(($291|0),($292|0),($289|0),($290|0))|0);
       $294 = tempRet0;
       $295 = (0)>($294|0);
       $296 = ($bits$0$ph>>>0)>($293>>>0);
       $297 = (0)==($294|0);
       $298 = $297 & $296;
       $299 = $295 | $298;
       if ($299) {
        $300 = ($293|0)<(0);
        if ($300) {
         $$0711$i = 0;
         label = 139;
        } else {
         $$07$i = $293;
         label = 137;
        }
       } else {
        $$07$i = $bits$0$ph;
        label = 137;
       }
       do {
        if ((label|0) == 137) {
         $301 = ($$07$i|0)<(53);
         if ($301) {
          $$0711$i = $$07$i;
          label = 139;
          break;
         }
         $$pre$i = (+($sign$0|0));
         $$0712$i = $$07$i;$$pre$phi$iZ2D = $$pre$i;$bias$0$i = 0.0;
        }
       } while(0);
       if ((label|0) == 139) {
        $302 = (84 - ($$0711$i))|0;
        $303 = (+_scalbn(1.0,$302));
        $304 = (+($sign$0|0));
        $305 = (+_copysignl($303,$304));
        $$0712$i = $$0711$i;$$pre$phi$iZ2D = $304;$bias$0$i = $305;
       }
       $306 = ($$0712$i|0)<(32);
       $307 = $y$3$lcssa$i != 0.0;
       $or$cond4$i = $307 & $306;
       $308 = $x$4$lcssa$i & 1;
       $309 = ($308|0)==(0);
       $or$cond9$i = $309 & $or$cond4$i;
       $310 = $or$cond9$i&1;
       $x$6$i = (($310) + ($x$4$lcssa$i))|0;
       $y$5$i = $or$cond9$i ? 0.0 : $y$3$lcssa$i;
       $311 = (+($x$6$i>>>0));
       $312 = $$pre$phi$iZ2D * $311;
       $313 = $bias$0$i + $312;
       $314 = $$pre$phi$iZ2D * $y$5$i;
       $315 = $314 + $313;
       $316 = $315 - $bias$0$i;
       $317 = $316 != 0.0;
       if (!($317)) {
        $318 = (___errno_location()|0);
        HEAP32[$318>>2] = 34;
       }
       $319 = (+_scalbnl($316,$291));
       $$0 = $319;
       STACKTOP = sp;return (+$$0);
      } else {
       $c$6 = $c$1$lcssa;
      }
     } while(0);
     $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
     $324 = (0 - ($sum$i))|0;
     $$012$i = $c$6;$gotdig$0$i12 = 0;
     while(1) {
      if ((($$012$i|0) == 46)) {
       $gotdig$0$i12$lcssa230 = $gotdig$0$i12;
       label = 151;
       break;
      } else if (!((($$012$i|0) == 48))) {
       $$012$i$lcssa = $$012$i;$gotdig$0$i12$lcssa = $gotdig$0$i12;
       label = 161;
       break;
      }
      $325 = HEAP32[$0>>2]|0;
      $326 = HEAP32[$1>>2]|0;
      $327 = ($325>>>0)<($326>>>0);
      if ($327) {
       $328 = (($325) + 1|0);
       HEAP32[$0>>2] = $328;
       $329 = HEAP8[$325>>0]|0;
       $330 = $329&255;
       $$012$i$be = $330;
      } else {
       $331 = (___shgetc($f)|0);
       $$012$i$be = $331;
      }
      $$012$i = $$012$i$be;$gotdig$0$i12 = 1;
     }
     if ((label|0) == 151) {
      $332 = HEAP32[$0>>2]|0;
      $333 = HEAP32[$1>>2]|0;
      $334 = ($332>>>0)<($333>>>0);
      if ($334) {
       $335 = (($332) + 1|0);
       HEAP32[$0>>2] = $335;
       $336 = HEAP8[$332>>0]|0;
       $337 = $336&255;
       $$1$ph$i = $337;
      } else {
       $338 = (___shgetc($f)|0);
       $$1$ph$i = $338;
      }
      $339 = ($$1$ph$i|0)==(48);
      if ($339) {
       $340 = 0;$341 = 0;
       while(1) {
        $342 = (_i64Add(($340|0),($341|0),-1,-1)|0);
        $343 = tempRet0;
        $344 = HEAP32[$0>>2]|0;
        $345 = HEAP32[$1>>2]|0;
        $346 = ($344>>>0)<($345>>>0);
        if ($346) {
         $347 = (($344) + 1|0);
         HEAP32[$0>>2] = $347;
         $348 = HEAP8[$344>>0]|0;
         $349 = $348&255;
         $$1$be$i = $349;
        } else {
         $350 = (___shgetc($f)|0);
         $$1$be$i = $350;
        }
        $351 = ($$1$be$i|0)==(48);
        if ($351) {
         $340 = $342;$341 = $343;
        } else {
         $$1$be$i$lcssa = $$1$be$i;$733 = $342;$734 = $343;
         break;
        }
       }
       $$2$i = $$1$be$i$lcssa;$731 = $733;$732 = $734;$gotdig$2$i13 = 1;$gotrad$0$i14 = 1;
      } else {
       $$2$i = $$1$ph$i;$731 = 0;$732 = 0;$gotdig$2$i13 = $gotdig$0$i12$lcssa230;$gotrad$0$i14 = 1;
      }
     }
     else if ((label|0) == 161) {
      $$2$i = $$012$i$lcssa;$731 = 0;$732 = 0;$gotdig$2$i13 = $gotdig$0$i12$lcssa;$gotrad$0$i14 = 0;
     }
     HEAP32[$x$i>>2] = 0;
     $352 = (($$2$i) + -48)|0;
     $353 = ($352>>>0)<(10);
     $354 = ($$2$i|0)==(46);
     $or$cond11123$i = $354 | $353;
     do {
      if ($or$cond11123$i) {
       $355 = (($x$i) + 496|0);
       $$3131$i = $$2$i;$358 = 0;$359 = 0;$735 = $354;$736 = $352;$737 = $731;$738 = $732;$gotdig$3127$i = $gotdig$2$i13;$gotrad$1128$i = $gotrad$0$i14;$j$0130$i = 0;$k$0129$i = 0;$lnz$0126$i = 0;
       L237: while(1) {
        do {
         if ($735) {
          $cond$i = ($gotrad$1128$i|0)==(0);
          if ($cond$i) {
           $739 = $358;$740 = $359;$741 = $358;$742 = $359;$gotdig$4$i = $gotdig$3127$i;$gotrad$2$i = 1;$j$2$i = $j$0130$i;$k$2$i = $k$0129$i;$lnz$2$i = $lnz$0126$i;
          } else {
           $743 = $737;$744 = $738;$745 = $358;$746 = $359;$gotdig$3127$i$lcssa = $gotdig$3127$i;$j$0130$i$lcssa = $j$0130$i;$k$0129$i$lcssa = $k$0129$i;$lnz$0126$i$lcssa = $lnz$0126$i;
           label = 166;
           break L237;
          }
         } else {
          $357 = ($k$0129$i|0)<(125);
          $360 = (_i64Add(($358|0),($359|0),1,0)|0);
          $361 = tempRet0;
          $362 = ($$3131$i|0)!=(48);
          if (!($357)) {
           if (!($362)) {
            $739 = $737;$740 = $738;$741 = $360;$742 = $361;$gotdig$4$i = $gotdig$3127$i;$gotrad$2$i = $gotrad$1128$i;$j$2$i = $j$0130$i;$k$2$i = $k$0129$i;$lnz$2$i = $lnz$0126$i;
            break;
           }
           $372 = HEAP32[$355>>2]|0;
           $373 = $372 | 1;
           HEAP32[$355>>2] = $373;
           $739 = $737;$740 = $738;$741 = $360;$742 = $361;$gotdig$4$i = $gotdig$3127$i;$gotrad$2$i = $gotrad$1128$i;$j$2$i = $j$0130$i;$k$2$i = $k$0129$i;$lnz$2$i = $lnz$0126$i;
           break;
          }
          $$lnz$0$i = $362 ? $360 : $lnz$0126$i;
          $363 = ($j$0130$i|0)==(0);
          $364 = (($x$i) + ($k$0129$i<<2)|0);
          if ($363) {
           $storemerge$i = $736;
          } else {
           $365 = HEAP32[$364>>2]|0;
           $366 = ($365*10)|0;
           $367 = (($$3131$i) + -48)|0;
           $368 = (($367) + ($366))|0;
           $storemerge$i = $368;
          }
          HEAP32[$364>>2] = $storemerge$i;
          $369 = (($j$0130$i) + 1)|0;
          $370 = ($369|0)==(9);
          $371 = $370&1;
          $$k$0$i = (($371) + ($k$0129$i))|0;
          $$14$i = $370 ? 0 : $369;
          $739 = $737;$740 = $738;$741 = $360;$742 = $361;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1128$i;$j$2$i = $$14$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
         }
        } while(0);
        $374 = HEAP32[$0>>2]|0;
        $375 = HEAP32[$1>>2]|0;
        $376 = ($374>>>0)<($375>>>0);
        if ($376) {
         $377 = (($374) + 1|0);
         HEAP32[$0>>2] = $377;
         $378 = HEAP8[$374>>0]|0;
         $379 = $378&255;
         $$3$be$i = $379;
        } else {
         $380 = (___shgetc($f)|0);
         $$3$be$i = $380;
        }
        $381 = (($$3$be$i) + -48)|0;
        $382 = ($381>>>0)<(10);
        $383 = ($$3$be$i|0)==(46);
        $or$cond11$i = $383 | $382;
        if ($or$cond11$i) {
         $$3131$i = $$3$be$i;$358 = $741;$359 = $742;$735 = $383;$736 = $381;$737 = $739;$738 = $740;$gotdig$3127$i = $gotdig$4$i;$gotrad$1128$i = $gotrad$2$i;$j$0130$i = $j$2$i;$k$0129$i = $k$2$i;$lnz$0126$i = $lnz$2$i;
        } else {
         $$3$be$i$lcssa = $$3$be$i;$752 = $741;$753 = $742;$754 = $739;$755 = $740;$gotdig$4$i$lcssa = $gotdig$4$i;$gotrad$2$i$lcssa = $gotrad$2$i;$j$2$i$lcssa = $j$2$i;$k$2$i$lcssa = $k$2$i;$lnz$2$i$lcssa = $lnz$2$i;
         label = 177;
         break;
        }
       }
       if ((label|0) == 166) {
        $356 = ($gotdig$3127$i$lcssa|0)!=(0);
        $747 = $745;$748 = $746;$749 = $743;$750 = $744;$751 = $356;$j$078$i = $j$0130$i$lcssa;$k$074$i = $k$0129$i$lcssa;$lnz$068$i = $lnz$0126$i$lcssa;
        label = 186;
        break;
       }
       else if ((label|0) == 177) {
        $$3$lcssa$i = $$3$be$i$lcssa;$385 = $754;$386 = $752;$388 = $755;$389 = $753;$gotdig$3$lcssa$i = $gotdig$4$i$lcssa;$gotrad$1$lcssa$i = $gotrad$2$i$lcssa;$j$0$lcssa$i = $j$2$i$lcssa;$k$0$lcssa$i = $k$2$i$lcssa;$lnz$0$lcssa$i = $lnz$2$i$lcssa;
        label = 178;
        break;
       }
      } else {
       $$3$lcssa$i = $$2$i;$385 = $731;$386 = 0;$388 = $732;$389 = 0;$gotdig$3$lcssa$i = $gotdig$2$i13;$gotrad$1$lcssa$i = $gotrad$0$i14;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
       label = 178;
      }
     } while(0);
     do {
      if ((label|0) == 178) {
       $384 = ($gotrad$1$lcssa$i|0)==(0);
       $387 = $384 ? $386 : $385;
       $390 = $384 ? $389 : $388;
       $391 = ($gotdig$3$lcssa$i|0)!=(0);
       $392 = $$3$lcssa$i | 32;
       $393 = ($392|0)==(101);
       $or$cond16$i = $393 & $391;
       if (!($or$cond16$i)) {
        $408 = ($$3$lcssa$i|0)>(-1);
        if ($408) {
         $747 = $386;$748 = $389;$749 = $387;$750 = $390;$751 = $391;$j$078$i = $j$0$lcssa$i;$k$074$i = $k$0$lcssa$i;$lnz$068$i = $lnz$0$lcssa$i;
         label = 186;
         break;
        } else {
         $756 = $386;$757 = $389;$758 = $391;$759 = $387;$760 = $390;$j$077$i = $j$0$lcssa$i;$k$073$i = $k$0$lcssa$i;$lnz$067$i = $lnz$0$lcssa$i;
         label = 188;
         break;
        }
       }
       $394 = (_scanexp($f,$pok)|0);
       $395 = tempRet0;
       $396 = ($394|0)==(0);
       $397 = ($395|0)==(-2147483648);
       $398 = $396 & $397;
       if ($398) {
        $399 = ($pok|0)==(0);
        if ($399) {
         ___shlim($f,0);
         $$0$i27 = 0.0;
         break;
        }
        $400 = HEAP32[$1>>2]|0;
        $401 = ($400|0)==(0|0);
        if ($401) {
         $404 = 0;$405 = 0;
        } else {
         $402 = HEAP32[$0>>2]|0;
         $403 = (($402) + -1|0);
         HEAP32[$0>>2] = $403;
         $404 = 0;$405 = 0;
        }
       } else {
        $404 = $394;$405 = $395;
       }
       $406 = (_i64Add(($404|0),($405|0),($387|0),($390|0))|0);
       $407 = tempRet0;
       $418 = $406;$420 = $386;$421 = $407;$423 = $389;$j$076$i = $j$0$lcssa$i;$k$072$i = $k$0$lcssa$i;$lnz$066$i = $lnz$0$lcssa$i;
       label = 190;
      }
     } while(0);
     if ((label|0) == 186) {
      $409 = HEAP32[$1>>2]|0;
      $410 = ($409|0)==(0|0);
      if ($410) {
       $756 = $747;$757 = $748;$758 = $751;$759 = $749;$760 = $750;$j$077$i = $j$078$i;$k$073$i = $k$074$i;$lnz$067$i = $lnz$068$i;
       label = 188;
      } else {
       $411 = HEAP32[$0>>2]|0;
       $412 = (($411) + -1|0);
       HEAP32[$0>>2] = $412;
       if ($751) {
        $418 = $749;$420 = $747;$421 = $750;$423 = $748;$j$076$i = $j$078$i;$k$072$i = $k$074$i;$lnz$066$i = $lnz$068$i;
        label = 190;
       } else {
        label = 189;
       }
      }
     }
     if ((label|0) == 188) {
      if ($758) {
       $418 = $759;$420 = $756;$421 = $760;$423 = $757;$j$076$i = $j$077$i;$k$072$i = $k$073$i;$lnz$066$i = $lnz$067$i;
       label = 190;
      } else {
       label = 189;
      }
     }
     do {
      if ((label|0) == 189) {
       $413 = (___errno_location()|0);
       HEAP32[$413>>2] = 22;
       ___shlim($f,0);
       $$0$i27 = 0.0;
      }
      else if ((label|0) == 190) {
       $414 = HEAP32[$x$i>>2]|0;
       $415 = ($414|0)==(0);
       if ($415) {
        $416 = (+($sign$0|0));
        $417 = $416 * 0.0;
        $$0$i27 = $417;
        break;
       }
       $419 = ($418|0)==($420|0);
       $422 = ($421|0)==($423|0);
       $424 = $419 & $422;
       $425 = ($423|0)<(0);
       $426 = ($420>>>0)<(10);
       $427 = ($423|0)==(0);
       $428 = $427 & $426;
       $429 = $425 | $428;
       $or$cond$i17 = $429 & $424;
       if ($or$cond$i17) {
        $430 = ($bits$0$ph>>>0)>(30);
        $431 = $414 >>> $bits$0$ph;
        $432 = ($431|0)==(0);
        $or$cond18$i = $430 | $432;
        if ($or$cond18$i) {
         $433 = (+($sign$0|0));
         $434 = (+($414>>>0));
         $435 = $433 * $434;
         $$0$i27 = $435;
         break;
        }
       }
       $436 = (($emin$0$ph|0) / -2)&-1;
       $437 = ($436|0)<(0);
       $438 = $437 << 31 >> 31;
       $439 = ($421|0)>($438|0);
       $440 = ($418>>>0)>($436>>>0);
       $441 = ($421|0)==($438|0);
       $442 = $441 & $440;
       $443 = $439 | $442;
       if ($443) {
        $444 = (___errno_location()|0);
        HEAP32[$444>>2] = 34;
        $445 = (+($sign$0|0));
        $446 = $445 * 1.7976931348623157E+308;
        $447 = $446 * 1.7976931348623157E+308;
        $$0$i27 = $447;
        break;
       }
       $448 = (($emin$0$ph) + -106)|0;
       $449 = ($448|0)<(0);
       $450 = $449 << 31 >> 31;
       $451 = ($421|0)<($450|0);
       $452 = ($418>>>0)<($448>>>0);
       $453 = ($421|0)==($450|0);
       $454 = $453 & $452;
       $455 = $451 | $454;
       if ($455) {
        $456 = (___errno_location()|0);
        HEAP32[$456>>2] = 34;
        $457 = (+($sign$0|0));
        $458 = $457 * 2.2250738585072014E-308;
        $459 = $458 * 2.2250738585072014E-308;
        $$0$i27 = $459;
        break;
       }
       $460 = ($j$076$i|0)==(0);
       if ($460) {
        $k$3$i = $k$072$i;
       } else {
        $461 = ($j$076$i|0)<(9);
        if ($461) {
         $462 = (($x$i) + ($k$072$i<<2)|0);
         $$promoted$i = HEAP32[$462>>2]|0;
         $464 = $$promoted$i;$j$3119$i = $j$076$i;
         while(1) {
          $463 = ($464*10)|0;
          $465 = (($j$3119$i) + 1)|0;
          $exitcond175$i = ($j$3119$i|0)==(8);
          if ($exitcond175$i) {
           $$lcssa222 = $463;
           break;
          } else {
           $464 = $463;$j$3119$i = $465;
          }
         }
         HEAP32[$462>>2] = $$lcssa222;
        }
        $466 = (($k$072$i) + 1)|0;
        $k$3$i = $466;
       }
       $467 = ($lnz$066$i|0)<(9);
       if ($467) {
        $468 = ($lnz$066$i|0)<=($418|0);
        $469 = ($418|0)<(18);
        $or$cond3$i = $468 & $469;
        if ($or$cond3$i) {
         $470 = ($418|0)==(9);
         if ($470) {
          $471 = (+($sign$0|0));
          $472 = HEAP32[$x$i>>2]|0;
          $473 = (+($472>>>0));
          $474 = $471 * $473;
          $$0$i27 = $474;
          break;
         }
         $475 = ($418|0)<(9);
         if ($475) {
          $476 = (+($sign$0|0));
          $477 = HEAP32[$x$i>>2]|0;
          $478 = (+($477>>>0));
          $479 = $476 * $478;
          $480 = (8 - ($418))|0;
          $481 = (49680 + ($480<<2)|0);
          $482 = HEAP32[$481>>2]|0;
          $483 = (+($482|0));
          $484 = $479 / $483;
          $$0$i27 = $484;
          break;
         }
         $$neg41$i = (($bits$0$ph) + 27)|0;
         $485 = Math_imul($418, -3)|0;
         $486 = (($$neg41$i) + ($485))|0;
         $487 = ($486|0)>(30);
         $$pre$i18 = HEAP32[$x$i>>2]|0;
         $488 = $$pre$i18 >>> $486;
         $489 = ($488|0)==(0);
         $or$cond191$i = $487 | $489;
         if ($or$cond191$i) {
          $490 = (+($sign$0|0));
          $491 = (+($$pre$i18>>>0));
          $492 = $490 * $491;
          $493 = (($418) + -10)|0;
          $494 = (49680 + ($493<<2)|0);
          $495 = HEAP32[$494>>2]|0;
          $496 = (+($495|0));
          $497 = $492 * $496;
          $$0$i27 = $497;
          break;
         }
        }
       }
       $498 = (($418|0) % 9)&-1;
       $499 = ($498|0)==(0);
       if ($499) {
        $a$2$ph47$i$ph = 0;$rp$2$ph45$i$ph = $418;$z$1$ph46$i$ph = $k$3$i;
       } else {
        $500 = ($418|0)>(-1);
        $501 = (($498) + 9)|0;
        $502 = $500 ? $498 : $501;
        $503 = (8 - ($502))|0;
        $504 = (49680 + ($503<<2)|0);
        $505 = HEAP32[$504>>2]|0;
        $506 = ($k$3$i|0)==(0);
        if ($506) {
         $a$0$lcssa186$i = 0;$rp$0$lcssa187$i = $418;$z$0$i = 0;
        } else {
         $507 = (1000000000 / ($505|0))&-1;
         $a$0110$i = 0;$carry$0112$i = 0;$k$4111$i = 0;$rp$0109$i = $418;
         while(1) {
          $508 = (($x$i) + ($k$4111$i<<2)|0);
          $509 = HEAP32[$508>>2]|0;
          $510 = (($509>>>0) % ($505>>>0))&-1;
          $511 = (($509>>>0) / ($505>>>0))&-1;
          $512 = (($511) + ($carry$0112$i))|0;
          HEAP32[$508>>2] = $512;
          $513 = Math_imul($510, $507)|0;
          $514 = ($k$4111$i|0)==($a$0110$i|0);
          $515 = ($512|0)==(0);
          $or$cond19$i = $514 & $515;
          $516 = (($k$4111$i) + 1)|0;
          if ($or$cond19$i) {
           $517 = $516 & 127;
           $518 = (($rp$0109$i) + -9)|0;
           $a$1$i = $517;$rp$1$i19 = $518;
          } else {
           $a$1$i = $a$0110$i;$rp$1$i19 = $rp$0109$i;
          }
          $519 = ($516|0)==($k$3$i|0);
          if ($519) {
           $$lcssa221 = $513;$a$1$i$lcssa = $a$1$i;$rp$1$i19$lcssa = $rp$1$i19;
           break;
          } else {
           $a$0110$i = $a$1$i;$carry$0112$i = $513;$k$4111$i = $516;$rp$0109$i = $rp$1$i19;
          }
         }
         $520 = ($$lcssa221|0)==(0);
         if ($520) {
          $a$0$lcssa186$i = $a$1$i$lcssa;$rp$0$lcssa187$i = $rp$1$i19$lcssa;$z$0$i = $k$3$i;
         } else {
          $521 = (($k$3$i) + 1)|0;
          $522 = (($x$i) + ($k$3$i<<2)|0);
          HEAP32[$522>>2] = $$lcssa221;
          $a$0$lcssa186$i = $a$1$i$lcssa;$rp$0$lcssa187$i = $rp$1$i19$lcssa;$z$0$i = $521;
         }
        }
        $523 = (9 - ($502))|0;
        $524 = (($523) + ($rp$0$lcssa187$i))|0;
        $a$2$ph47$i$ph = $a$0$lcssa186$i;$rp$2$ph45$i$ph = $524;$z$1$ph46$i$ph = $z$0$i;
       }
       $a$2$ph47$i = $a$2$ph47$i$ph;$e2$0$ph$i = 0;$rp$2$ph45$i = $rp$2$ph45$i$ph;$z$1$ph46$i = $z$1$ph46$i$ph;
       L323: while(1) {
        $525 = ($rp$2$ph45$i|0)<(18);
        $526 = (($x$i) + ($a$2$ph47$i<<2)|0);
        if ($525) {
         $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph46$i;
         while(1) {
          $528 = (($z$1$us$i) + 127)|0;
          $carry1$0$us$i = 0;$k$5$in$us$i = $528;$z$2$us$i = $z$1$us$i;
          while(1) {
           $k$5$us$i = $k$5$in$us$i & 127;
           $529 = (($x$i) + ($k$5$us$i<<2)|0);
           $530 = HEAP32[$529>>2]|0;
           $531 = (_bitshift64Shl(($530|0),0,29)|0);
           $532 = tempRet0;
           $533 = (_i64Add(($531|0),($532|0),($carry1$0$us$i|0),0)|0);
           $534 = tempRet0;
           $535 = ($534>>>0)>(0);
           $536 = ($533>>>0)>(1000000000);
           $537 = ($534|0)==(0);
           $538 = $537 & $536;
           $539 = $535 | $538;
           if ($539) {
            $540 = (___udivdi3(($533|0),($534|0),1000000000,0)|0);
            $541 = tempRet0;
            $542 = (___uremdi3(($533|0),($534|0),1000000000,0)|0);
            $543 = tempRet0;
            $$sink$off0$us$i = $542;$carry1$1$us$i = $540;
           } else {
            $$sink$off0$us$i = $533;$carry1$1$us$i = 0;
           }
           HEAP32[$529>>2] = $$sink$off0$us$i;
           $544 = (($z$2$us$i) + 127)|0;
           $545 = $544 & 127;
           $546 = ($k$5$us$i|0)!=($545|0);
           $547 = ($k$5$us$i|0)==($a$2$ph47$i|0);
           $or$cond20$us$i = $546 | $547;
           if ($or$cond20$us$i) {
            $z$3$us$i = $z$2$us$i;
           } else {
            $548 = ($$sink$off0$us$i|0)==(0);
            $k$5$z$2$us$i = $548 ? $k$5$us$i : $z$2$us$i;
            $z$3$us$i = $k$5$z$2$us$i;
           }
           $549 = (($k$5$us$i) + -1)|0;
           if ($547) {
            $carry1$1$us$i$lcssa = $carry1$1$us$i;$z$3$us$i$lcssa = $z$3$us$i;
            break;
           } else {
            $carry1$0$us$i = $carry1$1$us$i;$k$5$in$us$i = $549;$z$2$us$i = $z$3$us$i;
           }
          }
          $550 = (($e2$0$us$i) + -29)|0;
          $551 = ($carry1$1$us$i$lcssa|0)==(0);
          if ($551) {
           $e2$0$us$i = $550;$z$1$us$i = $z$3$us$i$lcssa;
          } else {
           $$lcssa215 = $550;$carry1$1$us$i$lcssa$lcssa = $carry1$1$us$i$lcssa;$z$3$us$i$lcssa$lcssa = $z$3$us$i$lcssa;
           break;
          }
         }
         $$lcssa59$i = $$lcssa215;$carry1$1$lcssa$lcssa$i = $carry1$1$us$i$lcssa$lcssa;$z$3$lcssa$lcssa$i = $z$3$us$i$lcssa$lcssa;
        } else {
         $527 = ($rp$2$ph45$i|0)==(18);
         if (!($527)) {
          $a$2$ph47$i$lcssa = $a$2$ph47$i;$e2$0$ph$i$lcssa = $e2$0$ph$i;$rp$2$ph45$i$lcssa = $rp$2$ph45$i;$z$1$ph46$i$lcssa = $z$1$ph46$i;
          label = 236;
          break;
         }
         $e2$0$us93$i = $e2$0$ph$i;$z$1$us94$i = $z$1$ph46$i;
         while(1) {
          $552 = HEAP32[$526>>2]|0;
          $553 = ($552>>>0)<(9007199);
          if (!($553)) {
           $a$2$ph47$i$lcssa219 = $a$2$ph47$i;$e2$0$us93$i$lcssa = $e2$0$us93$i;$z$1$us94$i$lcssa = $z$1$us94$i;
           label = 235;
           break L323;
          }
          $554 = (($z$1$us94$i) + 127)|0;
          $carry1$0$us98$i = 0;$k$5$in$us97$i = $554;$z$2$us96$i = $z$1$us94$i;
          while(1) {
           $k$5$us99$i = $k$5$in$us97$i & 127;
           $555 = (($x$i) + ($k$5$us99$i<<2)|0);
           $556 = HEAP32[$555>>2]|0;
           $557 = (_bitshift64Shl(($556|0),0,29)|0);
           $558 = tempRet0;
           $559 = (_i64Add(($557|0),($558|0),($carry1$0$us98$i|0),0)|0);
           $560 = tempRet0;
           $561 = ($560>>>0)>(0);
           $562 = ($559>>>0)>(1000000000);
           $563 = ($560|0)==(0);
           $564 = $563 & $562;
           $565 = $561 | $564;
           if ($565) {
            $566 = (___udivdi3(($559|0),($560|0),1000000000,0)|0);
            $567 = tempRet0;
            $568 = (___uremdi3(($559|0),($560|0),1000000000,0)|0);
            $569 = tempRet0;
            $$sink$off0$us102$i = $568;$carry1$1$us103$i = $566;
           } else {
            $$sink$off0$us102$i = $559;$carry1$1$us103$i = 0;
           }
           HEAP32[$555>>2] = $$sink$off0$us102$i;
           $570 = (($z$2$us96$i) + 127)|0;
           $571 = $570 & 127;
           $572 = ($k$5$us99$i|0)!=($571|0);
           $573 = ($k$5$us99$i|0)==($a$2$ph47$i|0);
           $or$cond20$us104$i = $572 | $573;
           if ($or$cond20$us104$i) {
            $z$3$us106$i = $z$2$us96$i;
           } else {
            $574 = ($$sink$off0$us102$i|0)==(0);
            $k$5$z$2$us105$i = $574 ? $k$5$us99$i : $z$2$us96$i;
            $z$3$us106$i = $k$5$z$2$us105$i;
           }
           $575 = (($k$5$us99$i) + -1)|0;
           if ($573) {
            $carry1$1$us103$i$lcssa = $carry1$1$us103$i;$z$3$us106$i$lcssa = $z$3$us106$i;
            break;
           } else {
            $carry1$0$us98$i = $carry1$1$us103$i;$k$5$in$us97$i = $575;$z$2$us96$i = $z$3$us106$i;
           }
          }
          $576 = (($e2$0$us93$i) + -29)|0;
          $577 = ($carry1$1$us103$i$lcssa|0)==(0);
          if ($577) {
           $e2$0$us93$i = $576;$z$1$us94$i = $z$3$us106$i$lcssa;
          } else {
           $$lcssa214 = $576;$carry1$1$us103$i$lcssa$lcssa = $carry1$1$us103$i$lcssa;$z$3$us106$i$lcssa$lcssa = $z$3$us106$i$lcssa;
           break;
          }
         }
         $$lcssa59$i = $$lcssa214;$carry1$1$lcssa$lcssa$i = $carry1$1$us103$i$lcssa$lcssa;$z$3$lcssa$lcssa$i = $z$3$us106$i$lcssa$lcssa;
        }
        $578 = (($rp$2$ph45$i) + 9)|0;
        $579 = (($a$2$ph47$i) + 127)|0;
        $580 = $579 & 127;
        $581 = ($580|0)==($z$3$lcssa$lcssa$i|0);
        if ($581) {
         $582 = (($z$3$lcssa$lcssa$i) + 127)|0;
         $583 = $582 & 127;
         $584 = (($x$i) + ($583<<2)|0);
         $585 = HEAP32[$584>>2]|0;
         $586 = (($z$3$lcssa$lcssa$i) + 126)|0;
         $587 = $586 & 127;
         $588 = (($x$i) + ($587<<2)|0);
         $589 = HEAP32[$588>>2]|0;
         $590 = $589 | $585;
         HEAP32[$588>>2] = $590;
         $z$4$i = $583;
        } else {
         $z$4$i = $z$3$lcssa$lcssa$i;
        }
        $591 = (($x$i) + ($580<<2)|0);
        HEAP32[$591>>2] = $carry1$1$lcssa$lcssa$i;
        $a$2$ph47$i = $580;$e2$0$ph$i = $$lcssa59$i;$rp$2$ph45$i = $578;$z$1$ph46$i = $z$4$i;
       }
       if ((label|0) == 235) {
        $a$2$ph47$i220 = $a$2$ph47$i$lcssa219;$e2$1$ph$i$ph = $e2$0$us93$i$lcssa;$rp$3$ph43$i$ph = 18;$z$5$ph$i$ph = $z$1$us94$i$lcssa;
       }
       else if ((label|0) == 236) {
        $a$2$ph47$i220 = $a$2$ph47$i$lcssa;$e2$1$ph$i$ph = $e2$0$ph$i$lcssa;$rp$3$ph43$i$ph = $rp$2$ph45$i$lcssa;$z$5$ph$i$ph = $z$1$ph46$i$lcssa;
       }
       $a$3$ph$i = $a$2$ph47$i220;$e2$1$ph$i = $e2$1$ph$i$ph;$rp$3$ph43$i = $rp$3$ph43$i$ph;$z$5$ph$i = $z$5$ph$i$ph;
       L362: while(1) {
        $622 = (($z$5$ph$i) + 1)|0;
        $619 = $622 & 127;
        $623 = (($z$5$ph$i) + 127)|0;
        $624 = $623 & 127;
        $625 = (($x$i) + ($624<<2)|0);
        $a$3$i$ph = $a$3$ph$i;$e2$1$i$ph = $e2$1$ph$i;$rp$3$i$ph = $rp$3$ph43$i;
        while(1) {
         $$old$i = ($rp$3$i$ph|0)==(18);
         $626 = ($rp$3$i$ph|0)>(27);
         $$21$i = $626 ? 9 : 1;
         $a$3$i = $a$3$i$ph;$e2$1$i = $e2$1$i$ph;
         while(1) {
          $592 = $a$3$i & 127;
          $593 = ($592|0)==($z$5$ph$i|0);
          do {
           if ($593) {
            label = 254;
           } else {
            $594 = (($x$i) + ($592<<2)|0);
            $595 = HEAP32[$594>>2]|0;
            $596 = ($595>>>0)<(9007199);
            if ($596) {
             label = 254;
             break;
            }
            $597 = ($595>>>0)>(9007199);
            if ($597) {
             break;
            }
            $598 = (($a$3$i) + 1)|0;
            $599 = $598 & 127;
            $600 = ($599|0)==($z$5$ph$i|0);
            if ($600) {
             label = 254;
             break;
            }
            $706 = (($x$i) + ($599<<2)|0);
            $707 = HEAP32[$706>>2]|0;
            $708 = ($707>>>0)<(254740991);
            if ($708) {
             label = 254;
             break;
            }
            $709 = ($707>>>0)<(254740992);
            $or$cond192$i = $$old$i & $709;
            if ($or$cond192$i) {
             $$lcssa201 = $592;$a$3$i$lcssa = $a$3$i;$e2$1$i$lcssa = $e2$1$i;$z$5$ph$i$lcssa = $z$5$ph$i;
             label = 267;
             break L362;
            }
           }
          } while(0);
          if ((label|0) == 254) {
           label = 0;
           if ($$old$i) {
            $$lcssa202 = $592;$$lcssa205 = $593;$$lcssa211 = $619;$a$3$i$lcssa198 = $a$3$i;$e2$1$i$lcssa195 = $e2$1$i;$z$5$ph$i$lcssa209 = $z$5$ph$i;
            label = 255;
            break L362;
           }
          }
          $601 = (($$21$i) + ($e2$1$i))|0;
          $602 = ($a$3$i|0)==($z$5$ph$i|0);
          if ($602) {
           $a$3$i = $z$5$ph$i;$e2$1$i = $601;
          } else {
           $$lcssa207 = $601;$a$3$i$lcssa199 = $a$3$i;
           break;
          }
         }
         $603 = 1 << $$21$i;
         $604 = (($603) + -1)|0;
         $605 = 1000000000 >>> $$21$i;
         $a$487$i = $a$3$i$lcssa199;$carry3$090$i = 0;$k$688$i = $a$3$i$lcssa199;$rp$486$i = $rp$3$i$ph;
         while(1) {
          $606 = (($x$i) + ($k$688$i<<2)|0);
          $607 = HEAP32[$606>>2]|0;
          $608 = $607 & $604;
          $609 = $607 >>> $$21$i;
          $610 = (($609) + ($carry3$090$i))|0;
          HEAP32[$606>>2] = $610;
          $611 = Math_imul($608, $605)|0;
          $612 = ($k$688$i|0)==($a$487$i|0);
          $613 = ($610|0)==(0);
          $or$cond22$i = $612 & $613;
          $614 = (($k$688$i) + 1)|0;
          $615 = $614 & 127;
          $616 = (($rp$486$i) + -9)|0;
          $rp$5$i = $or$cond22$i ? $616 : $rp$486$i;
          $a$5$i = $or$cond22$i ? $615 : $a$487$i;
          $617 = ($615|0)==($z$5$ph$i|0);
          if ($617) {
           $$lcssa208 = $611;$a$5$i$lcssa = $a$5$i;$rp$5$i$lcssa = $rp$5$i;
           break;
          } else {
           $a$487$i = $a$5$i;$carry3$090$i = $611;$k$688$i = $615;$rp$486$i = $rp$5$i;
          }
         }
         $618 = ($$lcssa208|0)==(0);
         if (!($618)) {
          $620 = ($619|0)==($a$5$i$lcssa|0);
          if (!($620)) {
           $$lcssa207$lcssa = $$lcssa207;$$lcssa208$lcssa = $$lcssa208;$a$5$i$lcssa$lcssa = $a$5$i$lcssa;$rp$5$i$lcssa$lcssa = $rp$5$i$lcssa;
           break;
          }
          $627 = HEAP32[$625>>2]|0;
          $628 = $627 | 1;
          HEAP32[$625>>2] = $628;
         }
         $a$3$i$ph = $a$5$i$lcssa;$e2$1$i$ph = $$lcssa207;$rp$3$i$ph = $rp$5$i$lcssa;
        }
        $621 = (($x$i) + ($z$5$ph$i<<2)|0);
        HEAP32[$621>>2] = $$lcssa208$lcssa;
        $a$3$ph$i = $a$5$i$lcssa$lcssa;$e2$1$ph$i = $$lcssa207$lcssa;$rp$3$ph43$i = $rp$5$i$lcssa$lcssa;$z$5$ph$i = $619;
       }
       if ((label|0) == 255) {
        if ($$lcssa205) {
         $629 = (($$lcssa211) + -1)|0;
         $630 = (($x$i) + ($629<<2)|0);
         HEAP32[$630>>2] = 0;
         $632 = $z$5$ph$i$lcssa209;$a$3$i200 = $a$3$i$lcssa198;$e2$1$i197 = $e2$1$i$lcssa195;$z$7$i = $$lcssa211;
        } else {
         $632 = $$lcssa202;$a$3$i200 = $a$3$i$lcssa198;$e2$1$i197 = $e2$1$i$lcssa195;$z$7$i = $z$5$ph$i$lcssa209;
        }
       }
       else if ((label|0) == 267) {
        $632 = $$lcssa201;$a$3$i200 = $a$3$i$lcssa;$e2$1$i197 = $e2$1$i$lcssa;$z$7$i = $z$5$ph$i$lcssa;
       }
       $631 = (($x$i) + ($632<<2)|0);
       $633 = HEAP32[$631>>2]|0;
       $634 = (+($633>>>0));
       $635 = (($a$3$i200) + 1)|0;
       $636 = $635 & 127;
       $637 = ($636|0)==($z$7$i|0);
       if ($637) {
        $696 = (($z$7$i) + 1)|0;
        $697 = $696 & 127;
        $698 = (($697) + -1)|0;
        $699 = (($x$i) + ($698<<2)|0);
        HEAP32[$699>>2] = 0;
        $z$7$1$i = $697;
       } else {
        $z$7$1$i = $z$7$i;
       }
       $700 = $634 * 1.0E+9;
       $701 = (($x$i) + ($636<<2)|0);
       $702 = HEAP32[$701>>2]|0;
       $703 = (+($702>>>0));
       $704 = $700 + $703;
       $661 = (+($sign$0|0));
       $643 = $661 * $704;
       $681 = (($e2$1$i197) + 53)|0;
       $638 = (($681) - ($emin$0$ph))|0;
       $705 = ($638|0)<($bits$0$ph|0);
       if ($705) {
        $639 = ($638|0)<(0);
        if ($639) {
         $$01335$i = 0;$denormal$034$i = 1;
         label = 271;
        } else {
         $$013$i = $638;$denormal$0$i = 1;
         label = 270;
        }
       } else {
        $$013$i = $bits$0$ph;$denormal$0$i = 0;
        label = 270;
       }
       if ((label|0) == 270) {
        $640 = ($$013$i|0)<(53);
        if ($640) {
         $$01335$i = $$013$i;$denormal$034$i = $denormal$0$i;
         label = 271;
        } else {
         $$01336$i = $$013$i;$bias$0$i24 = 0.0;$denormal$033$i = $denormal$0$i;$frac$0$i = 0.0;$y$1$i23 = $643;
        }
       }
       if ((label|0) == 271) {
        $641 = (105 - ($$01335$i))|0;
        $642 = (+_scalbn(1.0,$641));
        $644 = (+_copysignl($642,$643));
        $645 = (53 - ($$01335$i))|0;
        $646 = (+_scalbn(1.0,$645));
        $647 = (+_fmodl($643,$646));
        $648 = $643 - $647;
        $649 = $644 + $648;
        $$01336$i = $$01335$i;$bias$0$i24 = $644;$denormal$033$i = $denormal$034$i;$frac$0$i = $647;$y$1$i23 = $649;
       }
       $650 = (($a$3$i200) + 2)|0;
       $651 = $650 & 127;
       $652 = ($651|0)==($z$7$1$i|0);
       do {
        if ($652) {
         $frac$2$i = $frac$0$i;
        } else {
         $653 = (($x$i) + ($651<<2)|0);
         $654 = HEAP32[$653>>2]|0;
         $655 = ($654>>>0)<(500000000);
         do {
          if ($655) {
           $656 = ($654|0)==(0);
           if ($656) {
            $657 = (($a$3$i200) + 3)|0;
            $658 = $657 & 127;
            $659 = ($658|0)==($z$7$1$i|0);
            if ($659) {
             $frac$1$i = $frac$0$i;
             break;
            }
           }
           $660 = $661 * 0.25;
           $662 = $660 + $frac$0$i;
           $frac$1$i = $662;
          } else {
           $663 = ($654>>>0)>(500000000);
           if ($663) {
            $664 = $661 * 0.75;
            $665 = $664 + $frac$0$i;
            $frac$1$i = $665;
            break;
           }
           $666 = (($a$3$i200) + 3)|0;
           $667 = $666 & 127;
           $668 = ($667|0)==($z$7$1$i|0);
           if ($668) {
            $669 = $661 * 0.5;
            $670 = $669 + $frac$0$i;
            $frac$1$i = $670;
            break;
           } else {
            $671 = $661 * 0.75;
            $672 = $671 + $frac$0$i;
            $frac$1$i = $672;
            break;
           }
          }
         } while(0);
         $673 = (53 - ($$01336$i))|0;
         $674 = ($673|0)>(1);
         if (!($674)) {
          $frac$2$i = $frac$1$i;
          break;
         }
         $675 = (+_fmodl($frac$1$i,1.0));
         $676 = $675 != 0.0;
         if ($676) {
          $frac$2$i = $frac$1$i;
          break;
         }
         $677 = $frac$1$i + 1.0;
         $frac$2$i = $677;
        }
       } while(0);
       $678 = $y$1$i23 + $frac$2$i;
       $679 = $678 - $bias$0$i24;
       $680 = $681 & 2147483647;
       $682 = (-2 - ($sum$i))|0;
       $683 = ($680|0)>($682|0);
       do {
        if ($683) {
         $684 = (+Math_abs((+$679)));
         $685 = !($684 >= 9007199254740992.0);
         if ($685) {
          $denormal$2$i = $denormal$033$i;$e2$2$i = $e2$1$i197;$y$2$i25 = $679;
         } else {
          $686 = ($denormal$033$i|0)!=(0);
          $687 = ($$01336$i|0)==($638|0);
          $or$cond23$i = $687 & $686;
          $denormal$1$i = $or$cond23$i ? 0 : $denormal$033$i;
          $688 = $679 * 0.5;
          $689 = (($e2$1$i197) + 1)|0;
          $denormal$2$i = $denormal$1$i;$e2$2$i = $689;$y$2$i25 = $688;
         }
         $690 = (($e2$2$i) + 50)|0;
         $691 = ($690|0)>($324|0);
         if (!($691)) {
          $692 = ($denormal$2$i|0)!=(0);
          $693 = $frac$2$i != 0.0;
          $or$cond9$i26 = $693 & $692;
          if (!($or$cond9$i26)) {
           $e2$3$i = $e2$2$i;$y$3$i = $y$2$i25;
           break;
          }
         }
         $694 = (___errno_location()|0);
         HEAP32[$694>>2] = 34;
         $e2$3$i = $e2$2$i;$y$3$i = $y$2$i25;
        } else {
         $e2$3$i = $e2$1$i197;$y$3$i = $679;
        }
       } while(0);
       $695 = (+_scalbnl($y$3$i,$e2$3$i));
       $$0$i27 = $695;
      }
     } while(0);
     $$0 = $$0$i27;
     STACKTOP = sp;return (+$$0);
    }
   } while(0);
   $103 = HEAP32[$1>>2]|0;
   $104 = ($103|0)==(0|0);
   if (!($104)) {
    $105 = HEAP32[$0>>2]|0;
    $106 = (($105) + -1|0);
    HEAP32[$0>>2] = $106;
   }
   $107 = (___errno_location()|0);
   HEAP32[$107>>2] = 22;
   ___shlim($f,0);
   $$0 = 0.0;
   STACKTOP = sp;return (+$$0);
  }
 } while(0);
 if ((label|0) == 23) {
  $41 = HEAP32[$1>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = HEAP32[$0>>2]|0;
   $44 = (($43) + -1|0);
   HEAP32[$0>>2] = $44;
  }
  $notlhs = ($pok|0)==(0);
  $notrhs = ($i$0$lcssa>>>0)<(4);
  $or$cond9$not = $notrhs | $notlhs;
  $brmerge = $or$cond9$not | $42;
  if (!($brmerge)) {
   $i$1 = $i$0$lcssa;
   while(1) {
    $45 = HEAP32[$0>>2]|0;
    $46 = (($45) + -1|0);
    HEAP32[$0>>2] = $46;
    $47 = (($i$1) + -1)|0;
    $$old8 = ($47>>>0)>(3);
    if ($$old8) {
     $i$1 = $47;
    } else {
     break;
    }
   }
  }
 }
 $48 = (+($sign$0|0));
 $49 = $48 * inf;
 $50 = $49;
 $$0 = $50;
 STACKTOP = sp;return (+$$0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = (($f) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($f) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (($f) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if (!($or$cond)) {
  $$sink = $2;
  $12 = (($f) + 100|0);
  HEAP32[$12>>2] = $$sink;
  return;
 }
 $11 = (($4) + ($lim)|0);
 $$sink = $11;
 $12 = (($f) + 100|0);
 HEAP32[$12>>2] = $$sink;
 return;
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert2 = 0, $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (($f) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = (($f) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    label = 8;
   } else {
    $11 = (($f) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $$pre;
    $14 = $12;
    $15 = (($13) - ($14))|0;
    $16 = (($f) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = (($18) + -1)|0;
    $20 = ($15|0)>($19|0);
    if ($20) {
     $21 = (($12) + ($19)|0);
     $22 = (($f) + 100|0);
     HEAP32[$22>>2] = $21;
    } else {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    $23 = (($f) + 100|0);
    HEAP32[$23>>2] = $$pre;
   }
   $24 = ($$pre|0)==(0|0);
   $$phi$trans$insert2 = (($f) + 4|0);
   $$pre3 = HEAP32[$$phi$trans$insert2>>2]|0;
   if (!($24)) {
    $25 = $$pre;
    $26 = $$pre3;
    $27 = (($f) + 108|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($25) + 1)|0;
    $30 = (($29) - ($26))|0;
    $31 = (($30) + ($28))|0;
    HEAP32[$27>>2] = $31;
   }
   $32 = (($$pre3) + -1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = ($34|0)==($6|0);
   if ($35) {
    $$0 = $6;
    return ($$0|0);
   }
   $36 = $6&255;
   HEAP8[$32>>0] = $36;
   $$0 = $6;
   return ($$0|0);
  }
 }
 $8 = (($f) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 return ($$0|0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & 2147483647;
 $5 = $3 & -2147483648;
 $6 = $5 | $4;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
 return (+$7);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_copysign($x,$y));
 return (+$0);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa49 = 0, $$lcssa51 = 0, $$lcssa53 = 0, $$lcssa54 = 0, $$lcssa55 = 0, $$lcssa7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $12 = tempRet0;
 $13 = ($11|0)==(0);
 $14 = ($12|0)==(0);
 $15 = $13 & $14;
 if (!($15)) {
  $16 = $3 & 2147483647;
  $17 = ($16>>>0)>(2146435072);
  $18 = ($2>>>0)>(0);
  $19 = ($16|0)==(2146435072);
  $20 = $19 & $18;
  $21 = $17 | $20;
  $22 = ($6|0)==(2047);
  $or$cond = $21 | $22;
  if (!($or$cond)) {
   $25 = (_bitshift64Shl(($0|0),($1|0),1)|0);
   $26 = tempRet0;
   $27 = ($26>>>0)>($12>>>0);
   $28 = ($25>>>0)>($11>>>0);
   $29 = ($26|0)==($12|0);
   $30 = $29 & $28;
   $31 = $27 | $30;
   if (!($31)) {
    $32 = ($25|0)==($11|0);
    $33 = ($26|0)==($12|0);
    $34 = $32 & $33;
    if (!($34)) {
     $$0 = $x;
     return (+$$0);
    }
    $35 = $x * 0.0;
    $$0 = $35;
    return (+$$0);
   }
   $36 = ($6|0)==(0);
   if ($36) {
    $37 = (_bitshift64Shl(($0|0),($1|0),12)|0);
    $38 = tempRet0;
    $39 = ($38|0)>(-1);
    $40 = ($37>>>0)>(4294967295);
    $41 = ($38|0)==(-1);
    $42 = $41 & $40;
    $43 = $39 | $42;
    if ($43) {
     $45 = $37;$46 = $38;$ex$026 = 0;
     while(1) {
      $44 = (($ex$026) + -1)|0;
      $47 = (_bitshift64Shl(($45|0),($46|0),1)|0);
      $48 = tempRet0;
      $49 = ($48|0)>(-1);
      $50 = ($47>>>0)>(4294967295);
      $51 = ($48|0)==(-1);
      $52 = $51 & $50;
      $53 = $49 | $52;
      if ($53) {
       $45 = $47;$46 = $48;$ex$026 = $44;
      } else {
       $$lcssa55 = $44;
       break;
      }
     }
     $ex$0$lcssa = $$lcssa55;
    } else {
     $ex$0$lcssa = 0;
    }
    $54 = (1 - ($ex$0$lcssa))|0;
    $55 = (_bitshift64Shl(($0|0),($1|0),($54|0))|0);
    $56 = tempRet0;
    $83 = $55;$84 = $56;$ex$1 = $ex$0$lcssa;
   } else {
    $57 = $1 & 1048575;
    $58 = $57 | 1048576;
    $83 = $0;$84 = $58;$ex$1 = $6;
   }
   $59 = ($9|0)==(0);
   if ($59) {
    $60 = (_bitshift64Shl(($2|0),($3|0),12)|0);
    $61 = tempRet0;
    $62 = ($61|0)>(-1);
    $63 = ($60>>>0)>(4294967295);
    $64 = ($61|0)==(-1);
    $65 = $64 & $63;
    $66 = $62 | $65;
    if ($66) {
     $68 = $60;$69 = $61;$ey$020 = 0;
     while(1) {
      $67 = (($ey$020) + -1)|0;
      $70 = (_bitshift64Shl(($68|0),($69|0),1)|0);
      $71 = tempRet0;
      $72 = ($71|0)>(-1);
      $73 = ($70>>>0)>(4294967295);
      $74 = ($71|0)==(-1);
      $75 = $74 & $73;
      $76 = $72 | $75;
      if ($76) {
       $68 = $70;$69 = $71;$ey$020 = $67;
      } else {
       $$lcssa54 = $67;
       break;
      }
     }
     $ey$0$lcssa = $$lcssa54;
    } else {
     $ey$0$lcssa = 0;
    }
    $77 = (1 - ($ey$0$lcssa))|0;
    $78 = (_bitshift64Shl(($2|0),($3|0),($77|0))|0);
    $79 = tempRet0;
    $85 = $78;$86 = $79;$ey$1$ph = $ey$0$lcssa;
   } else {
    $80 = $3 & 1048575;
    $81 = $80 | 1048576;
    $85 = $2;$86 = $81;$ey$1$ph = $9;
   }
   $82 = ($ex$1|0)>($ey$1$ph|0);
   $87 = (_i64Subtract(($83|0),($84|0),($85|0),($86|0))|0);
   $88 = tempRet0;
   $89 = ($88|0)>(-1);
   $90 = ($87>>>0)>(4294967295);
   $91 = ($88|0)==(-1);
   $92 = $91 & $90;
   $93 = $89 | $92;
   do {
    if ($82) {
     $154 = $93;$155 = $87;$156 = $88;$94 = $83;$96 = $84;$ex$212 = $ex$1;
     while(1) {
      if ($154) {
       $95 = ($94|0)==($85|0);
       $97 = ($96|0)==($86|0);
       $98 = $95 & $97;
       if ($98) {
        break;
       } else {
        $100 = $155;$101 = $156;
       }
      } else {
       $100 = $94;$101 = $96;
      }
      $102 = (_bitshift64Shl(($100|0),($101|0),1)|0);
      $103 = tempRet0;
      $104 = (($ex$212) + -1)|0;
      $105 = ($104|0)>($ey$1$ph|0);
      $106 = (_i64Subtract(($102|0),($103|0),($85|0),($86|0))|0);
      $107 = tempRet0;
      $108 = ($107|0)>(-1);
      $109 = ($106>>>0)>(4294967295);
      $110 = ($107|0)==(-1);
      $111 = $110 & $109;
      $112 = $108 | $111;
      if ($105) {
       $154 = $112;$155 = $106;$156 = $107;$94 = $102;$96 = $103;$ex$212 = $104;
      } else {
       $$lcssa51 = $104;$$lcssa53 = $112;$157 = $106;$158 = $107;$159 = $102;$160 = $103;
       label = 27;
       break;
      }
     }
     if ((label|0) == 27) {
      $$lcssa7 = $$lcssa53;$113 = $159;$115 = $160;$152 = $157;$153 = $158;$ex$2$lcssa = $$lcssa51;
      break;
     }
     $99 = $x * 0.0;
     $$0 = $99;
     return (+$$0);
    } else {
     $$lcssa7 = $93;$113 = $83;$115 = $84;$152 = $87;$153 = $88;$ex$2$lcssa = $ex$1;
    }
   } while(0);
   if ($$lcssa7) {
    $114 = ($113|0)==($85|0);
    $116 = ($115|0)==($86|0);
    $117 = $114 & $116;
    if ($117) {
     $125 = $x * 0.0;
     $$0 = $125;
     return (+$$0);
    } else {
     $118 = $153;$120 = $152;
    }
   } else {
    $118 = $115;$120 = $113;
   }
   $119 = ($118>>>0)<(1048576);
   $121 = ($120>>>0)<(0);
   $122 = ($118|0)==(1048576);
   $123 = $122 & $121;
   $124 = $119 | $123;
   if ($124) {
    $126 = $120;$127 = $118;$ex$39 = $ex$2$lcssa;
    while(1) {
     $128 = (_bitshift64Shl(($126|0),($127|0),1)|0);
     $129 = tempRet0;
     $130 = (($ex$39) + -1)|0;
     $131 = ($129>>>0)<(1048576);
     $132 = ($128>>>0)<(0);
     $133 = ($129|0)==(1048576);
     $134 = $133 & $132;
     $135 = $131 | $134;
     if ($135) {
      $126 = $128;$127 = $129;$ex$39 = $130;
     } else {
      $$lcssa49 = $130;$161 = $128;$162 = $129;
      break;
     }
    }
    $137 = $161;$138 = $162;$ex$3$lcssa = $$lcssa49;
   } else {
    $137 = $120;$138 = $118;$ex$3$lcssa = $ex$2$lcssa;
   }
   $136 = ($ex$3$lcssa|0)>(0);
   if ($136) {
    $139 = (_i64Add(($137|0),($138|0),0,-1048576)|0);
    $140 = tempRet0;
    $141 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
    $142 = tempRet0;
    $143 = $139 | $141;
    $144 = $140 | $142;
    $149 = $144;$151 = $143;
   } else {
    $145 = (1 - ($ex$3$lcssa))|0;
    $146 = (_bitshift64Lshr(($137|0),($138|0),($145|0))|0);
    $147 = tempRet0;
    $149 = $147;$151 = $146;
   }
   $148 = $149 | $10;
   HEAP32[tempDoublePtr>>2] = $151;HEAP32[tempDoublePtr+4>>2] = $148;$150 = +HEAPF64[tempDoublePtr>>3];
   $$0 = $150;
   return (+$$0);
  }
 }
 $23 = $x * $y;
 $24 = $23 / $23;
 $$0 = $24;
 return (+$$0);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_fmod($x,$y));
 return (+$0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  return (+$$0);
 } else if ((($4|0) == 2047)) {
  $$0 = $x;
  return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  return (+$$0);
 }
 return +(0.0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = $wc & -8192;
 $13 = ($12|0)==(57344);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function _srand($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($s) + -1)|0;
 $1 = 49712;
 $2 = $1;
 HEAP32[$2>>2] = $0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 return;
}
function _rand() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 49712;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (___muldi3(($2|0),($5|0),1284865837,1481765933)|0);
 $7 = tempRet0;
 $8 = (_i64Add(($6|0),($7|0),1,0)|0);
 $9 = tempRet0;
 $10 = 49712;
 $11 = $10;
 HEAP32[$11>>2] = $8;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (_bitshift64Lshr(($8|0),($9|0),33)|0);
 $15 = tempRet0;
 return ($14|0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = (($f) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($f) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = (($f) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 1]($f,0,0)|0);
 }
 $13 = (($f) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = (($f) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = (($f) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = (($f) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
  return ($$0|0);
 }
 $18 = $15 & 4;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = -1;
  return ($$0|0);
 }
 $20 = $15 | 32;
 HEAP32[$f>>2] = $20;
 $$0 = -1;
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = (($f) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = (($f) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = (($f) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($f) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = (($f) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = (($f) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($13) + ($17)|0);
  $19 = (($f) + 16|0);
  HEAP32[$19>>2] = $18;
  $$0 = 0;
  return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = (($f) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = (($f) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 1]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa8 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre = HEAP32[$0>>2]|0;
    $7 = $$pre;
    break;
   } else {
    $$0 = 0;
    return ($$0|0);
   }
  } else {
   $7 = $1;
  }
 } while(0);
 $5 = (($f) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $8 = $7;
 $9 = $6;
 $10 = (($8) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = (($f) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 1]($f,$s,$l)|0);
  $$0 = $14;
  return ($$0|0);
 }
 $15 = (($f) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     label = 12;
     break;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     $i$0$lcssa8 = $i$0;
     break;
    } else {
     $i$0 = $19;
    }
   }
   if ((label|0) == 12) {
    $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
    break;
   }
   $23 = (($f) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 1]($f,$s,$i$0$lcssa8)|0);
   $26 = ($25>>>0)<($i$0$lcssa8>>>0);
   if ($26) {
    $$0 = $i$0$lcssa8;
    return ($$0|0);
   } else {
    $27 = (($s) + ($i$0$lcssa8)|0);
    $28 = (($l) - ($i$0$lcssa8))|0;
    $$pre6 = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa8;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 return ($$0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($f) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = (($f) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = (($f) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = (($f) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = (($internal_buf) + 80|0);
  $11 = (($f) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = (($f) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 1]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f+0|0; src=50288+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = (($f) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = (($f) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = (($f) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = (($f) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($f) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 return ($0|0);
}
function _atoi($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $$1$ph = 0, $$13 = 0, $$lcssa = 0, $$lcssa7 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit2 = 0, $isdigittmp = 0, $isdigittmp1 = 0, $isdigittmp5 = 0, $n$0$lcssa = 0, $n$04 = 0, $neg$0 = 0, $neg$1$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = (_isspace($1)|0);
  $3 = ($2|0)==(0);
  $4 = (($$0) + 1|0);
  if ($3) {
   $$0$lcssa = $$0;$$lcssa7 = $4;
   break;
  } else {
   $$0 = $4;
  }
 }
 $5 = HEAP8[$$0$lcssa>>0]|0;
 $6 = $5 << 24 >> 24;
 if ((($6|0) == 43)) {
  $neg$0 = 0;
  label = 5;
 } else if ((($6|0) == 45)) {
  $neg$0 = 1;
  label = 5;
 } else {
  $$1$ph = $$0$lcssa;$8 = $5;$neg$1$ph = 0;
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$$lcssa7>>0]|0;
  $$1$ph = $$lcssa7;$8 = $$pre;$neg$1$ph = $neg$0;
 }
 $7 = $8 << 24 >> 24;
 $isdigittmp1 = (($7) + -48)|0;
 $isdigit2 = ($isdigittmp1>>>0)<(10);
 if (!($isdigit2)) {
  $n$0$lcssa = 0;
  $14 = ($neg$1$ph|0)!=(0);
  $15 = (0 - ($n$0$lcssa))|0;
  $16 = $14 ? $n$0$lcssa : $15;
  return ($16|0);
 }
 $$13 = $$1$ph;$isdigittmp5 = $isdigittmp1;$n$04 = 0;
 while(1) {
  $9 = ($n$04*10)|0;
  $10 = (($$13) + 1|0);
  $11 = (($9) - ($isdigittmp5))|0;
  $12 = HEAP8[$10>>0]|0;
  $13 = $12 << 24 >> 24;
  $isdigittmp = (($13) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $$13 = $10;$isdigittmp5 = $isdigittmp;$n$04 = $11;
  } else {
   $$lcssa = $11;
   break;
  }
 }
 $n$0$lcssa = $$lcssa;
 $14 = ($neg$1$ph|0)!=(0);
 $15 = (0 - ($n$0$lcssa))|0;
 $16 = $14 ? $n$0$lcssa : $15;
 return ($16|0);
}
function _strtod($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 dest=$f$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = (($f$i) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f$i) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f$i,0);
 $4 = (+___floatscan($f$i,1,1));
 $5 = (($f$i) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return (+$4);
 }
 $14 = ($12|0)==(0);
 if ($14) {
  $16 = $s;
 } else {
  $15 = (($s) + ($12)|0);
  $16 = $15;
 }
 HEAP32[$p>>2] = $16;
 STACKTOP = sp;return (+$4);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$019$lcssa = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$24$ph = 0, $$3 = 0, $$3$ph = 0, $$lcssa = 0, $$lcssa57 = 0, $$lcssa58 = 0, $$lcssa61 = 0, $$lcssa62 = 0, $$lcssa63 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$020$lcssa = 0;
 var $s$15 = 0, $s$15$ph = 0, $s$2 = 0, $s$2$ph = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$019$lcssa = $$019;$s$020$lcssa = $s$020;
     label = 7;
     break;
    }
    $8 = (($s$020) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$lcssa61 = $8;$$lcssa62 = $9;$$lcssa63 = $13;
     label = 5;
     break;
    }
   }
   if ((label|0) == 5) {
    $$0$lcssa = $$lcssa62;$$lcssa = $$lcssa63;$s$0$lcssa = $$lcssa61;
    label = 6;
    break;
   }
   else if ((label|0) == 7) {
    $$0$lcssa44 = $$019$lcssa;$s$0$lcssa43 = $s$020$lcssa;
    break;
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 6;
  }
 } while(0);
 if ((label|0) == 6) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
   $35 = ($$3|0)!=(0);
   $36 = $35 ? $s$2 : 0;
   return ($36|0);
  }
 }
 $14 = HEAP8[$s$0$lcssa43>>0]|0;
 $15 = $c&255;
 $16 = ($14<<24>>24)==($15<<24>>24);
 if ($16) {
  $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
  $35 = ($$3|0)!=(0);
  $36 = $35 ? $s$2 : 0;
  return ($36|0);
 }
 $17 = Math_imul($0, 16843009)|0;
 $18 = ($$0$lcssa44>>>0)>(3);
 do {
  if ($18) {
   $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
   while(1) {
    $19 = HEAP32[$w$011>>2]|0;
    $20 = $19 ^ $17;
    $21 = (($20) + -16843009)|0;
    $22 = $20 & -2139062144;
    $23 = $22 ^ -2139062144;
    $24 = $23 & $21;
    $25 = ($24|0)==(0);
    if (!($25)) {
     $$110$lcssa = $$110;$w$011$lcssa = $w$011;
     label = 12;
     break;
    }
    $26 = (($w$011) + 4|0);
    $27 = (($$110) + -4)|0;
    $28 = ($27>>>0)>(3);
    if ($28) {
     $$110 = $27;$w$011 = $26;
    } else {
     $$lcssa57 = $26;$$lcssa58 = $27;
     label = 14;
     break;
    }
   }
   if ((label|0) == 12) {
    $$24$ph = $$110$lcssa;$s$15$ph = $w$011$lcssa;
    break;
   }
   else if ((label|0) == 14) {
    $$1$lcssa = $$lcssa58;$w$0$lcssa = $$lcssa57;
    label = 15;
    break;
   }
  } else {
   $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
   label = 15;
  }
 } while(0);
 if ((label|0) == 15) {
  $29 = ($$1$lcssa|0)==(0);
  if ($29) {
   $$3 = 0;$s$2 = $w$0$lcssa;
   $35 = ($$3|0)!=(0);
   $36 = $35 ? $s$2 : 0;
   return ($36|0);
  } else {
   $$24$ph = $$1$lcssa;$s$15$ph = $w$0$lcssa;
  }
 }
 $$24 = $$24$ph;$s$15 = $s$15$ph;
 while(1) {
  $30 = HEAP8[$s$15>>0]|0;
  $31 = ($30<<24>>24)==($15<<24>>24);
  if ($31) {
   $$3$ph = $$24;$s$2$ph = $s$15;
   break;
  }
  $32 = (($s$15) + 1|0);
  $33 = (($$24) + -1)|0;
  $34 = ($33|0)==(0);
  if ($34) {
   $$3$ph = 0;$s$2$ph = $32;
   break;
  } else {
   $$24 = $33;$s$15 = $32;
  }
 }
 $$3 = $$3$ph;$s$2 = $s$2$ph;
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa13 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $11 = 0;
  return ($11|0);
 }
 $$03 = $n;$l$04 = $vl;$r$05 = $vr;
 while(1) {
  $1 = HEAP8[$l$04>>0]|0;
  $2 = HEAP8[$r$05>>0]|0;
  $3 = ($1<<24>>24)==($2<<24>>24);
  if (!($3)) {
   $$lcssa = $1;$$lcssa13 = $2;
   label = 5;
   break;
  }
  $4 = (($$03) + -1)|0;
  $5 = (($l$04) + 1|0);
  $6 = (($r$05) + 1|0);
  $7 = ($4|0)==(0);
  if ($7) {
   label = 6;
   break;
  } else {
   $$03 = $4;$l$04 = $5;$r$05 = $6;
  }
 }
 if ((label|0) == 5) {
  $8 = $$lcssa&255;
  $9 = $$lcssa13&255;
  $10 = (($8) - ($9))|0;
  $11 = $10;
  return ($11|0);
 }
 else if ((label|0) == 6) {
  $11 = 0;
  return ($11|0);
 }
 return (0)|0;
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa11 = 0, $$lcssa12 = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $3 | $2;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = (($$014) + 1|0);
   $5 = (($$05) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $9 | $8;
   if ($or$cond) {
    $$lcssa11 = $6;$$lcssa12 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
  $$lcssa = $$lcssa11;$$lcssa2 = $$lcssa12;
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $$ph = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $l$06 = 0, $or$cond = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$0$lcssa$ph = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
  return ($$03|0);
 }
 $1 = HEAP8[$_l>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $13 = 0;$r$0$lcssa = $_r;
 } else {
  $$08$in = $n;$6 = $1;$l$06 = $_l;$r$07 = $_r;
  while(1) {
   $$08 = (($$08$in) + -1)|0;
   $3 = HEAP8[$r$07>>0]|0;
   $4 = ($3<<24>>24)!=(0);
   $5 = ($$08|0)!=(0);
   $or$cond = $5 & $4;
   $7 = ($6<<24>>24)==($3<<24>>24);
   $or$cond4 = $7 & $or$cond;
   if (!($or$cond4)) {
    $$ph = $6;$r$0$lcssa$ph = $r$07;
    break;
   }
   $8 = (($l$06) + 1|0);
   $9 = (($r$07) + 1|0);
   $10 = HEAP8[$8>>0]|0;
   $11 = ($10<<24>>24)==(0);
   if ($11) {
    $$ph = 0;$r$0$lcssa$ph = $9;
    break;
   } else {
    $$08$in = $$08;$6 = $10;$l$06 = $8;$r$07 = $9;
   }
  }
  $13 = $$ph;$r$0$lcssa = $r$0$lcssa$ph;
 }
 $12 = $13&255;
 $14 = HEAP8[$r$0$lcssa>>0]|0;
 $15 = $14&255;
 $16 = (($12) - ($15))|0;
 $$03 = $16;
 return ($$03|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$be = 0, $R$0$lcssa = 0, $R$0$ph = 0, $R$1 = 0, $RP$0 = 0, $RP$0$be = 0, $RP$0$lcssa = 0;
 var $RP$0$ph = 0, $cond = 0, $newp$0 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[((49168 + 16|0))>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[((49640 + 8|0))>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $30 = HEAP32[((49168 + 24|0))>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[((49168 + 12|0))>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[((49168 + 24|0))>>2] = $36;
  HEAP32[((49168 + 12|0))>>2] = $35;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $42 = HEAP32[((49168 + 20|0))>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[((49168 + 8|0))>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[((49168 + 8|0))>>2] = $storemerge21;
  HEAP32[((49168 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = ((49168 + ($77<<2)|0) + 40|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = (($74) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[49168>>2]|0;
    $88 = $87 & $86;
    HEAP32[49168>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = (($76) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = (($76) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = (($74) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0$ph = $113;$RP$0$ph = $112;
      }
     } else {
      $R$0$ph = $110;$RP$0$ph = $109;
     }
     $R$0 = $R$0$ph;$RP$0 = $RP$0$ph;
     while(1) {
      $115 = (($R$0) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if ($117) {
       $118 = (($R$0) + 16|0);
       $119 = HEAP32[$118>>2]|0;
       $120 = ($119|0)==(0|0);
       if ($120) {
        $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
        break;
       } else {
        $R$0$be = $119;$RP$0$be = $118;
       }
      } else {
       $R$0$be = $116;$RP$0$be = $115;
      }
      $R$0 = $R$0$be;$RP$0 = $RP$0$be;
     }
     $121 = ($RP$0$lcssa>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = (($101) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = (($98) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ((49168 + ($124<<2)|0) + 304|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[((49168 + 4|0))>>2]|0;
      $131 = $130 & $129;
      HEAP32[((49168 + 4|0))>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[((49168 + 16|0))>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = (($96) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = (($96) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[((49168 + 16|0))>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = (($R$1) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = (($R$1) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = (($143) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[((49168 + 16|0))>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = (($R$1) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = (($149) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$lcssa62 = 0, $$pre = 0, $$pre$phi51Z2D = 0, $$pre$phi53Z2D = 0, $$pre$phiZ2D = 0, $$pre50 = 0, $$pre52 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum16 = 0, $$sum17 = 0;
 var $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6$pre = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $K20$045 = 0, $R$0 = 0, $R$0$be = 0, $R$0$lcssa = 0, $R$0$ph = 0, $R$1 = 0, $R7$0 = 0, $R7$0$be = 0, $R7$0$lcssa = 0, $R7$0$ph = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$be = 0, $RP$0$lcssa = 0;
 var $RP$0$ph = 0, $RP9$0 = 0, $RP9$0$be = 0, $RP9$0$lcssa = 0, $RP9$0$ph = 0, $T$0$lcssa = 0, $T$044 = 0, $T$044$lcssa = 0, $cond = 0, $cond40 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((49168 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((49168 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((49168 + 8|0))>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum14 = (4 - ($5))|0;
    $105 = (($p) + ($$sum14)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum24 = (8 - ($5))|0;
    $17 = (($p) + ($$sum24)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum25 = (12 - ($5))|0;
    $19 = (($p) + ($$sum25)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((49168 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[49168>>2]|0;
     $32 = $31 & $30;
     HEAP32[49168>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre52 = (($20) + 8|0);
     $$pre$phi53Z2D = $$pre52;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi53Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi53Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum16 = (24 - ($5))|0;
   $39 = (($p) + ($$sum16)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum17 = (12 - ($5))|0;
   $41 = (($p) + ($$sum17)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum18 = (16 - ($5))|0;
     $$sum19 = (($$sum18) + 4)|0;
     $53 = (($p) + ($$sum19)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum18)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0$ph = $57;$RP$0$ph = $56;
      }
     } else {
      $R$0$ph = $54;$RP$0$ph = $53;
     }
     $R$0 = $R$0$ph;$RP$0 = $RP$0$ph;
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if ($61) {
       $62 = (($R$0) + 16|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = ($63|0)==(0|0);
       if ($64) {
        $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
        break;
       } else {
        $R$0$be = $63;$RP$0$be = $62;
       }
      } else {
       $R$0$be = $60;$RP$0$be = $59;
      }
      $R$0 = $R$0$be;$RP$0 = $RP$0$be;
     }
     $65 = ($RP$0$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum23 = (8 - ($5))|0;
     $44 = (($p) + ($$sum23)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum20 = (28 - ($5))|0;
    $67 = (($p) + ($$sum20)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((49168 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((49168 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((49168 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((49168 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((49168 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum21 = (16 - ($5))|0;
    $86 = (($p) + ($$sum21)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = (($R$1) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = (($87) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum22 = (($$sum21) + 4)|0;
    $92 = (($p) + ($$sum22)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[((49168 + 16|0))>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = (($R$1) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = (($93) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[((49168 + 16|0))>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[((49168 + 24|0))>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[((49168 + 12|0))>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[((49168 + 12|0))>>2] = $115;
   HEAP32[((49168 + 24|0))>>2] = $$0;
   $116 = $115 | 1;
   $117 = (($$0) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[((49168 + 20|0))>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    return;
   }
   HEAP32[((49168 + 20|0))>>2] = 0;
   HEAP32[((49168 + 8|0))>>2] = 0;
   return;
  }
  $120 = HEAP32[((49168 + 20|0))>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[((49168 + 8|0))>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[((49168 + 8|0))>>2] = $123;
   HEAP32[((49168 + 20|0))>>2] = $$0;
   $124 = $123 | 1;
   $125 = (($$0) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum12 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum12)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum13 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum13)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = ((49168 + ($135<<2)|0) + 40|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = (($132) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[49168>>2]|0;
     $146 = $145 & $144;
     HEAP32[49168>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre50 = (($134) + 8|0);
     $$pre$phi51Z2D = $$pre50;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = (($134) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi51Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = (($132) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi51Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0$ph = $171;$RP9$0$ph = $170;
       }
      } else {
       $R7$0$ph = $168;$RP9$0$ph = $167;
      }
      $R7$0 = $R7$0$ph;$RP9$0 = $RP9$0$ph;
      while(1) {
       $173 = (($R7$0) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if ($175) {
        $176 = (($R7$0) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
         break;
        } else {
         $R7$0$be = $177;$RP9$0$be = $176;
        }
       } else {
        $R7$0$be = $174;$RP9$0$be = $173;
       }
       $R7$0 = $R7$0$be;$RP9$0 = $RP9$0$be;
      }
      $179 = ($RP9$0$lcssa>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $$sum11 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum11)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = (($159) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = (($156) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum8 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum8)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = ((49168 + ($182<<2)|0) + 304|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond40 = ($R7$1|0)==(0|0);
      if ($cond40) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[((49168 + 4|0))>>2]|0;
       $189 = $188 & $187;
       HEAP32[((49168 + 4|0))>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[((49168 + 16|0))>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = (($154) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = (($154) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[((49168 + 16|0))>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = (($R7$1) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum9 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum9)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = (($R7$1) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = (($201) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum10 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum10)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[((49168 + 16|0))>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = (($R7$1) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = (($207) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = (($$0) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[((49168 + 20|0))>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[((49168 + 8|0))>>2] = $128;
   return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = (($$0) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = ((49168 + ($224<<2)|0) + 40|0);
  $226 = HEAP32[49168>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[49168>>2] = $230;
   $$sum6$pre = (($224) + 2)|0;
   $$pre = ((49168 + ($$sum6$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $225;
  } else {
   $$sum7 = (($224) + 2)|0;
   $231 = ((49168 + ($$sum7<<2)|0) + 40|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[((49168 + 16|0))>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = (($F16$0) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = (($$0) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = (($$0) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = ((49168 + ($I19$0<<2)|0) + 304|0);
 $264 = (($$0) + 28|0);
 HEAP32[$264>>2] = $I19$0;
 $265 = (($$0) + 16|0);
 $266 = (($$0) + 20|0);
 HEAP32[$266>>2] = 0;
 HEAP32[$265>>2] = 0;
 $267 = HEAP32[((49168 + 4|0))>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[((49168 + 4|0))>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = (($$0) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = (($$0) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = (($$0) + 8|0);
  HEAP32[$274>>2] = $$0;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ($I19$0|0)==(31);
 if ($276) {
  $284 = 0;
 } else {
  $277 = $I19$0 >>> 1;
  $278 = (25 - ($277))|0;
  $284 = $278;
 }
 $279 = (($275) + 4|0);
 $280 = HEAP32[$279>>2]|0;
 $281 = $280 & -8;
 $282 = ($281|0)==($$1|0);
 do {
  if ($282) {
   $T$0$lcssa = $275;
  } else {
   $283 = $$1 << $284;
   $K20$045 = $283;$T$044 = $275;
   while(1) {
    $291 = $K20$045 >>> 31;
    $292 = ((($T$044) + ($291<<2)|0) + 16|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     $$lcssa = $292;$T$044$lcssa = $T$044;
     break;
    }
    $285 = $K20$045 << 1;
    $286 = (($287) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $$lcssa62 = $287;
     label = 134;
     break;
    } else {
     $K20$045 = $285;$T$044 = $287;
    }
   }
   if ((label|0) == 134) {
    $T$0$lcssa = $$lcssa62;
    break;
   }
   $294 = HEAP32[((49168 + 16|0))>>2]|0;
   $295 = ($$lcssa>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$$lcssa>>2] = $$0;
   $296 = (($$0) + 24|0);
   HEAP32[$296>>2] = $T$044$lcssa;
   $297 = (($$0) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = (($$0) + 8|0);
   HEAP32[$298>>2] = $$0;
   return;
  }
 } while(0);
 $299 = (($T$0$lcssa) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[((49168 + 16|0))>>2]|0;
 $302 = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = ($300>>>0)>=($301>>>0);
 $or$cond = $302 & $303;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $304 = (($300) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = (($$0) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = (($$0) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = (($$0) + 24|0);
 HEAP32[$307>>2] = 0;
 return;
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$ = 0, $$lcssa18 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$111 = 0, $c$2$be = 0, $c$2$be$lcssa = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $or$cond5 = 0, $x$012 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = (($1) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $9 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $9 = $8;
 }
 $10 = ($9|0)==(45);
 if ((($9|0) == 43) | (($9|0) == 45)) {
  $11 = $10&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = (($12) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $22 & $21;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = (($25) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  } else {
   $c$0 = $20;$neg$0 = $11;
  }
 } else {
  $c$0 = $9;$neg$0 = 0;
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $96 = -2147483648;$97 = 0;
   tempRet0 = $96;
   return ($97|0);
  }
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + -1|0);
  HEAP32[$0>>2] = $32;
  $96 = -2147483648;$97 = 0;
  tempRet0 = $96;
  return ($97|0);
 }
 $c$111 = $c$0;$x$012 = 0;
 while(1) {
  $33 = ($x$012*10)|0;
  $34 = (($c$111) + -48)|0;
  $35 = (($34) + ($33))|0;
  $36 = HEAP32[$0>>2]|0;
  $37 = HEAP32[$2>>2]|0;
  $38 = ($36>>>0)<($37>>>0);
  if ($38) {
   $39 = (($36) + 1|0);
   HEAP32[$0>>2] = $39;
   $40 = HEAP8[$36>>0]|0;
   $41 = $40&255;
   $c$1$be = $41;
  } else {
   $42 = (___shgetc($f)|0);
   $c$1$be = $42;
  }
  $43 = (($c$1$be) + -48)|0;
  $44 = ($43>>>0)<(10);
  $45 = ($35|0)<(214748364);
  $$ = $44 & $45;
  if ($$) {
   $c$111 = $c$1$be;$x$012 = $35;
  } else {
   $$lcssa18 = $35;$c$1$be$lcssa = $c$1$be;
   break;
  }
 }
 $46 = ($$lcssa18|0)<(0);
 $47 = $46 << 31 >> 31;
 $48 = (($c$1$be$lcssa) + -48)|0;
 $49 = ($48>>>0)<(10);
 if ($49) {
  $52 = $$lcssa18;$53 = $47;$c$27 = $c$1$be$lcssa;
  while(1) {
   $54 = (___muldi3(($52|0),($53|0),10,0)|0);
   $55 = tempRet0;
   $56 = ($c$27|0)<(0);
   $57 = $56 << 31 >> 31;
   $58 = (_i64Add(($c$27|0),($57|0),-48,-1)|0);
   $59 = tempRet0;
   $60 = (_i64Add(($58|0),($59|0),($54|0),($55|0))|0);
   $61 = tempRet0;
   $62 = HEAP32[$0>>2]|0;
   $63 = HEAP32[$2>>2]|0;
   $64 = ($62>>>0)<($63>>>0);
   if ($64) {
    $65 = (($62) + 1|0);
    HEAP32[$0>>2] = $65;
    $66 = HEAP8[$62>>0]|0;
    $67 = $66&255;
    $c$2$be = $67;
   } else {
    $68 = (___shgetc($f)|0);
    $c$2$be = $68;
   }
   $69 = (($c$2$be) + -48)|0;
   $70 = ($69>>>0)<(10);
   $71 = ($61|0)<(21474836);
   $72 = ($60>>>0)<(2061584302);
   $73 = ($61|0)==(21474836);
   $74 = $73 & $72;
   $75 = $71 | $74;
   $or$cond5 = $70 & $75;
   if ($or$cond5) {
    $52 = $60;$53 = $61;$c$27 = $c$2$be;
   } else {
    $98 = $60;$99 = $61;$c$2$be$lcssa = $c$2$be;
    break;
   }
  }
  $90 = $98;$91 = $99;$c$2$lcssa = $c$2$be$lcssa;
 } else {
  $90 = $$lcssa18;$91 = $47;$c$2$lcssa = $c$1$be$lcssa;
 }
 $50 = (($c$2$lcssa) + -48)|0;
 $51 = ($50>>>0)<(10);
 if ($51) {
  while(1) {
   $76 = HEAP32[$0>>2]|0;
   $77 = HEAP32[$2>>2]|0;
   $78 = ($76>>>0)<($77>>>0);
   if ($78) {
    $79 = (($76) + 1|0);
    HEAP32[$0>>2] = $79;
    $80 = HEAP8[$76>>0]|0;
    $81 = $80&255;
    $c$3$be = $81;
   } else {
    $82 = (___shgetc($f)|0);
    $c$3$be = $82;
   }
   $83 = (($c$3$be) + -48)|0;
   $84 = ($83>>>0)<(10);
   if (!($84)) {
    break;
   }
  }
 }
 $85 = HEAP32[$2>>2]|0;
 $86 = ($85|0)==(0|0);
 if (!($86)) {
  $87 = HEAP32[$0>>2]|0;
  $88 = (($87) + -1|0);
  HEAP32[$0>>2] = $88;
 }
 $89 = ($neg$0|0)!=(0);
 $92 = (_i64Subtract(0,0,($90|0),($91|0))|0);
 $93 = tempRet0;
 $94 = $89 ? $92 : $90;
 $95 = $89 ? $93 : $91;
 $96 = $95;$97 = $94;
 tempRet0 = $96;
 return ($97|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i105$i = 0, $$0$lcssa$i112$i = 0, $$0$lcssa$i136$i = 0, $$0$lcssa$i151$i = 0, $$0$lcssa$i47 = 0, $$0$lcssa$i47$i = 0, $$0$lcssa$i52 = 0, $$0$lcssa$i54 = 0, $$0$lcssa$i54$i = 0, $$0$lcssa$i56$i = 0, $$0$lcssa$i62 = 0, $$0$lcssa$i64$i = 0;
 var $$0$lcssa$i69 = 0, $$0$lcssa$i71$i = 0, $$0$lcssa$i76 = 0, $$0$lcssa$i77$i = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i86 = 0, $$0$lcssa$i92$i = 0, $$0$ph = 0, $$0$ph340 = 0, $$01$i = 0, $$01$i$i = 0, $$01$i103$i = 0, $$01$i110$i = 0, $$01$i134$i = 0, $$01$i149$i = 0, $$01$i45 = 0, $$01$i45$i = 0, $$01$i52$i = 0, $$01$i60 = 0, $$01$i62$i = 0;
 var $$01$i67 = 0, $$01$i69$i = 0, $$01$i74 = 0, $$01$i75$i = 0, $$01$i82$i = 0, $$01$i84 = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i93$i = 0, $$012$i = 0, $$013$i = 0.0, $$019$i = 0, $$03$i49 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i87$i = 0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i120$i = 0, $$12$i = 0;
 var $$12$i$i = 0, $$12$i118$i = 0, $$12$i127$i = 0, $$12$i142$i = 0, $$12$i142$i$lcssa = 0, $$12$i95$i = 0, $$120$i = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$21 = 0, $$216$$29$i = 0, $$216$$31$i = 0, $$216$i = 0, $$25 = 0, $$26 = 0, $$26$i = 0, $$26$us$i = 0, $$27$i = 0, $$28$i = 0.0;
 var $$29$i = 0, $$3$i = 0.0, $$31$i = 0, $$317$i = 0, $$39$i = 0, $$4$i = 0.0, $$418$lcssa$i = 0, $$418193$i = 0, $$5205$i = 0, $$93 = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us309$i = 0, $$a$3$us310$i = 0, $$a$3$us310$i$lcssa = 0, $$a$3311$i = 0, $$a$3312$i = 0, $$a$3312$i$lcssa = 0, $$be = 0, $$be341 = 0;
 var $$be342 = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa107 = 0, $$lcssa107$ph = 0, $$lcssa283$i = 0, $$lcssa344 = 0, $$lcssa345 = 0, $$lcssa346 = 0, $$lcssa347 = 0, $$lcssa348 = 0, $$lcssa350 = 0, $$lcssa352 = 0, $$lcssa353 = 0, $$lcssa354 = 0, $$lcssa355 = 0, $$lcssa356 = 0, $$lcssa357 = 0, $$lcssa358 = 0;
 var $$lcssa359 = 0, $$lcssa360 = 0, $$lcssa361 = 0, $$lcssa362 = 0, $$lcssa363 = 0, $$lcssa364 = 0, $$lcssa365 = 0, $$lcssa367 = 0, $$lcssa368 = 0, $$lcssa369 = 0, $$lcssa370 = 0, $$lcssa371 = 0, $$lcssa372 = 0, $$lcssa373 = 0, $$lcssa374 = 0, $$lcssa375 = 0, $$lcssa376 = 0, $$lcssa377 = 0, $$lcssa378 = 0.0, $$lcssa379 = 0;
 var $$lcssa381 = 0, $$lcssa382 = 0, $$lcssa384 = 0, $$lcssa385 = 0, $$lcssa386 = 0, $$mask$i = 0, $$mask$i39 = 0, $$mask1$i = 0, $$mask1$i38 = 0, $$neg159$i = 0, $$neg160$i = 0, $$not$i = 0, $$p$5 = 0, $$p$i = 0, $$ph = 0, $$pn$i = 0, $$pr$i = 0, $$pr154$i = 0, $$pre = 0, $$pre$i = 0;
 var $$pre269 = 0, $$pre308$i = 0, $$sum$i = 0, $$sum21$i = 0, $$sum22$i = 0, $$z$3$i = 0, $$z$4$us$i = 0, $$z$4$us$i$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0;
 var $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0;
 var $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0;
 var $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0;
 var $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0;
 var $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0;
 var $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0;
 var $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0;
 var $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0;
 var $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0.0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0.0, $1168 = 0, $1169 = 0, $117 = 0;
 var $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0;
 var $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $140$phi = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0.0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0.0, $433 = 0, $434 = 0.0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0.0, $473 = 0.0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0.0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0.0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0.0;
 var $544 = 0.0, $545 = 0.0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0.0, $559 = 0.0, $56 = 0, $560 = 0.0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0.0, $574 = 0.0, $575 = 0.0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0.0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0.0, $638 = 0.0, $639 = 0.0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $655$phi = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0;
 var $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0;
 var $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0;
 var $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0;
 var $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0;
 var $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0;
 var $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0.0, $777 = 0.0;
 var $778 = 0, $779 = 0.0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0;
 var $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0;
 var $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0;
 var $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0;
 var $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0;
 var $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0;
 var $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0;
 var $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0;
 var $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0;
 var $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $955$phi = 0, $956 = 0;
 var $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0;
 var $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0;
 var $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1261$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$2$ph$i$lcssa = 0, $a$3$lcssa$i = 0, $a$3248$i = 0, $a$3248$us$i = 0, $a$5$lcssa$i = 0, $a$5223$i = 0, $a$6$i = 0;
 var $a$6$i$lcssa = 0, $a$7$i = 0, $a$8$ph$i = 0, $a$8$ph294$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0;
 var $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0;
 var $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0254$i = 0, $carry3$0242$i = 0, $carry3$0242$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0253$i = 0;
 var $d$0255$i = 0, $d$1241$i = 0, $d$1241$us$i = 0, $d$2$lcssa$i = 0, $d$2222$i = 0, $d$3$i = 0, $d$4199$i = 0, $d$5192$i = 0, $d$6204$i = 0, $e$0237$i = 0, $e$1$i = 0, $e$2218$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1209$i = 0;
 var $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded101 = 0, $expanded102 = 0, $expanded103 = 0, $expanded105 = 0, $expanded106 = 0, $expanded108 = 0, $expanded109 = 0, $expanded110 = 0, $expanded112 = 0, $expanded113 = 0, $expanded115 = 0, $expanded116 = 0, $expanded117 = 0, $expanded119 = 0, $expanded120 = 0, $expanded122 = 0, $expanded123 = 0;
 var $expanded124 = 0, $expanded126 = 0, $expanded127 = 0, $expanded129 = 0, $expanded130 = 0, $expanded131 = 0, $expanded133 = 0, $expanded134 = 0, $expanded136 = 0, $expanded137 = 0, $expanded138 = 0, $expanded140 = 0, $expanded141 = 0, $expanded143 = 0, $expanded144 = 0, $expanded145 = 0, $expanded147 = 0, $expanded148 = 0, $expanded150 = 0, $expanded151 = 0;
 var $expanded152 = 0, $expanded154 = 0, $expanded155 = 0, $expanded157 = 0, $expanded158 = 0, $expanded159 = 0, $expanded161 = 0, $expanded162 = 0, $expanded164 = 0, $expanded165 = 0, $expanded166 = 0, $expanded168 = 0, $expanded169 = 0, $expanded171 = 0, $expanded172 = 0, $expanded173 = 0, $expanded175 = 0, $expanded176 = 0, $expanded178 = 0, $expanded179 = 0;
 var $expanded180 = 0, $expanded182 = 0, $expanded183 = 0, $expanded185 = 0, $expanded186 = 0, $expanded187 = 0, $expanded189 = 0, $expanded190 = 0, $expanded192 = 0, $expanded193 = 0, $expanded194 = 0, $expanded196 = 0, $expanded197 = 0, $expanded199 = 0, $expanded200 = 0, $expanded201 = 0, $expanded203 = 0, $expanded204 = 0, $expanded206 = 0, $expanded207 = 0;
 var $expanded208 = 0, $expanded210 = 0, $expanded211 = 0, $expanded213 = 0, $expanded214 = 0, $expanded215 = 0, $expanded64 = 0, $expanded66 = 0, $expanded67 = 0, $expanded68 = 0, $expanded70 = 0, $expanded71 = 0, $expanded73 = 0, $expanded74 = 0, $expanded75 = 0, $expanded77 = 0, $expanded78 = 0, $expanded80 = 0, $expanded81 = 0, $expanded82 = 0;
 var $expanded84 = 0, $expanded85 = 0, $expanded87 = 0, $expanded88 = 0, $expanded89 = 0, $expanded91 = 0, $expanded92 = 0, $expanded94 = 0, $expanded95 = 0, $expanded96 = 0, $expanded98 = 0, $expanded99 = 0, $fl$0111 = 0, $fl$0111$ph = 0, $fl$0171 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0;
 var $i$0$lcssa = 0, $i$0$lcssa272 = 0, $i$0176 = 0, $i$0236$i = 0, $i$03$i = 0, $i$03$i31 = 0, $i$1$lcssa$i = 0, $i$1187 = 0, $i$1230$i = 0, $i$2163 = 0, $i$2163$lcssa = 0, $i$2217$i = 0, $i$3161 = 0, $i$3213$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i33 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0;
 var $isdigit2$i29 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i32 = 0, $isdigittmp1$i = 0, $isdigittmp1$i28 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i30 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0229$i = 0, $j$0231$i = 0, $j$1214$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$be = 0, $l$0$i = 0, $l$1$i = 0;
 var $l$1175 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$be = 0, $l10n$0$lcssa = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$us$us$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i101$i = 0, $or$cond$i108$i = 0, $or$cond$i43$i = 0, $or$cond$i50$i = 0, $or$cond$i58 = 0, $or$cond$i60$i = 0;
 var $or$cond$i65 = 0, $or$cond$i67$i = 0, $or$cond$i72 = 0, $or$cond$i80 = 0, $or$cond$i80$i = 0, $or$cond$i82 = 0, $or$cond10$i = 0, $or$cond10191$i = 0, $or$cond12$i = 0, $or$cond15 = 0, $or$cond19 = 0, $or$cond23 = 0, $or$cond274 = 0, $or$cond35$i = 0, $or$cond37$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0;
 var $p$4271 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$1187$i = 0, $round$0186$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0;
 var $s$1$i = 0, $s$1$i$lcssa = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$i$lcssa = 0, $s$1$us$us$i = 0, $s$1$us$us$i$lcssa = 0, $s1$0$i = 0, $s7$0196$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0188$i = 0, $s8$0188$i$ph = 0, $s9$0$i = 0, $s9$1200$i = 0, $s9$2$i = 0, $sext = 0, $sext94 = 0, $small$0$i = 0.0, $small$1$i = 0.0;
 var $st$0 = 0, $st$0$lcssa351 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8109 = 0, $storemerge8109$ph = 0, $storemerge8170 = 0, $t$0 = 0, $t$1 = 0, $uglygep$i = 0, $uglygep296$i = 0, $uglygep300$i = 0, $uglygep300301$i = 0, $umax$i = 0, $umax297$i = 0, $umax297298299$i = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0;
 var $w$25$i = 0, $w$38$i = 0, $wc = 0, $ws$0177 = 0, $ws$1188 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i117$i = 0, $y$03$i126$i = 0, $y$03$i141$i = 0, $y$03$i94$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0$lcssa$ph = 0, $z$0164 = 0, $z$1$lcssa$i = 0, $z$1260$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0;
 var $z$2$i$lcssa$lcssa = 0, $z$3$lcssa$i = 0, $z$3247$i = 0, $z$3247$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$5$i$lcssa = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 16|0;
 $e2$i = sp + 8|0;
 $buf$i = sp + 836|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 824|0;
 $pad$i = sp + 568|0;
 $buf = sp + 528|0;
 $wc = sp;
 $mb = sp + 520|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = $wc;
 $7 = (($ebuf0$i) + 12|0);
 $8 = (($ebuf0$i) + 11|0);
 $9 = $7;
 $10 = (($9) - ($0))|0;
 $11 = (-2 - ($0))|0;
 $12 = (($9) + 2)|0;
 $13 = (($big$i) + 288|0);
 $14 = (($buf$i) + 9|0);
 $15 = $14;
 $16 = (($buf$i) + 8|0);
 $1175 = 0;$1176 = 0;$23 = $fmt;$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$23>>0]|0;
  $24 = ($22<<24>>24)==(0);
  if ($24) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 429;
   break;
  }
  $1177 = $22;$26 = $23;
  while(1) {
   if ((($1177<<24>>24) == 0)) {
    $$lcssa344 = $26;
    label = 14;
    break;
   } else if ((($1177<<24>>24) == 37)) {
    $$lcssa = $26;
    label = 9;
    break;
   }
   $25 = (($26) + 1|0);
   $$pre = HEAP8[$25>>0]|0;
   $1177 = $$pre;$26 = $25;
  }
  if ((label|0) == 9) {
   label = 0;
   $28 = $$lcssa;$z$0164 = $$lcssa;
   while(1) {
    $27 = (($28) + 1|0);
    $29 = HEAP8[$27>>0]|0;
    $30 = ($29<<24>>24)==(37);
    if (!($30)) {
     $$lcssa107$ph = $28;$z$0$lcssa$ph = $z$0164;
     break;
    }
    $31 = (($z$0164) + 1|0);
    $32 = (($28) + 2|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = ($33<<24>>24)==(37);
    if ($34) {
     $28 = $32;$z$0164 = $31;
    } else {
     $$lcssa107$ph = $32;$z$0$lcssa$ph = $31;
     break;
    }
   }
   $$lcssa107 = $$lcssa107$ph;$z$0$lcssa = $z$0$lcssa$ph;
  }
  else if ((label|0) == 14) {
   label = 0;
   $$lcssa107 = $$lcssa344;$z$0$lcssa = $$lcssa344;
  }
  $35 = $z$0$lcssa;
  $36 = $23;
  $37 = (($35) - ($36))|0;
  if ($1) {
   (___fwritex($23,$37,$f)|0);
  }
  $38 = ($z$0$lcssa|0)==($23|0);
  L24: do {
   if ($38) {
    $39 = (($$lcssa107) + 1|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = $40 << 24 >> 24;
    $isdigittmp = (($41) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    if ($isdigit) {
     $42 = (($$lcssa107) + 2|0);
     $43 = HEAP8[$42>>0]|0;
     $44 = ($43<<24>>24)==(36);
     $45 = (($$lcssa107) + 3|0);
     $$93 = $44 ? $45 : $39;
     $$l10n$0 = $44 ? 1 : $l10n$0;
     $isdigittmp$ = $44 ? $isdigittmp : -1;
     $$pre269 = HEAP8[$$93>>0]|0;
     $47 = $$pre269;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$93;
    } else {
     $47 = $40;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $39;
    }
    $46 = $47 << 24 >> 24;
    $48 = $46 & -32;
    $49 = ($48|0)==(32);
    if ($49) {
     $51 = $46;$56 = $47;$fl$0171 = 0;$storemerge8170 = $storemerge;
     while(1) {
      $50 = (($51) + -32)|0;
      $52 = 1 << $50;
      $53 = $52 & 75913;
      $54 = ($53|0)==(0);
      if ($54) {
       $$ph = $56;$fl$0111$ph = $fl$0171;$storemerge8109$ph = $storemerge8170;
       break;
      }
      $55 = $56 << 24 >> 24;
      $57 = (($55) + -32)|0;
      $58 = 1 << $57;
      $59 = $58 | $fl$0171;
      $60 = (($storemerge8170) + 1|0);
      $61 = HEAP8[$60>>0]|0;
      $62 = $61 << 24 >> 24;
      $63 = $62 & -32;
      $64 = ($63|0)==(32);
      if ($64) {
       $51 = $62;$56 = $61;$fl$0171 = $59;$storemerge8170 = $60;
      } else {
       $$ph = $61;$fl$0111$ph = $59;$storemerge8109$ph = $60;
       break;
      }
     }
     $65 = $$ph;$fl$0111 = $fl$0111$ph;$storemerge8109 = $storemerge8109$ph;
    } else {
     $65 = $47;$fl$0111 = 0;$storemerge8109 = $storemerge;
    }
    $66 = ($65<<24>>24)==(42);
    do {
     if ($66) {
      $67 = (($storemerge8109) + 1|0);
      $68 = HEAP8[$67>>0]|0;
      $69 = $68 << 24 >> 24;
      $isdigittmp11 = (($69) + -48)|0;
      $isdigit12 = ($isdigittmp11>>>0)<(10);
      if ($isdigit12) {
       $70 = (($storemerge8109) + 2|0);
       $71 = HEAP8[$70>>0]|0;
       $72 = ($71<<24>>24)==(36);
       if ($72) {
        $73 = (($nl_type) + ($isdigittmp11<<2)|0);
        HEAP32[$73>>2] = 10;
        $74 = HEAP8[$67>>0]|0;
        $75 = $74 << 24 >> 24;
        $76 = (($75) + -48)|0;
        $77 = (($nl_arg) + ($76<<3)|0);
        $78 = $77;
        $79 = $78;
        $80 = HEAP32[$79>>2]|0;
        $81 = (($78) + 4)|0;
        $82 = $81;
        $83 = HEAP32[$82>>2]|0;
        $84 = (($storemerge8109) + 3|0);
        $l10n$2 = 1;$storemerge13 = $84;$w$0 = $80;
       } else {
        label = 29;
       }
      } else {
       label = 29;
      }
      if ((label|0) == 29) {
       label = 0;
       $85 = ($l10n$1|0)==(0);
       if (!($85)) {
        $$0$ph340 = -1;
        label = 453;
        break L1;
       }
       if (!($1)) {
        $105 = $67;$fl$1 = $fl$0111;$l10n$3 = 0;$w$1 = 0;
        break;
       }
       $arglist_current = HEAP32[$ap>>2]|0;
       $86 = $arglist_current;
       $87 = (0 + 4|0);
       $expanded64 = $87;
       $expanded = (($expanded64) - 1)|0;
       $88 = (($86) + ($expanded))|0;
       $89 = (0 + 4|0);
       $expanded68 = $89;
       $expanded67 = (($expanded68) - 1)|0;
       $expanded66 = $expanded67 ^ -1;
       $90 = $88 & $expanded66;
       $91 = $90;
       $92 = HEAP32[$91>>2]|0;
       $arglist_next = (($91) + 4|0);
       HEAP32[$ap>>2] = $arglist_next;
       $l10n$2 = 0;$storemerge13 = $67;$w$0 = $92;
      }
      $93 = ($w$0|0)<(0);
      if ($93) {
       $94 = $fl$0111 | 8192;
       $95 = (0 - ($w$0))|0;
       $105 = $storemerge13;$fl$1 = $94;$l10n$3 = $l10n$2;$w$1 = $95;
      } else {
       $105 = $storemerge13;$fl$1 = $fl$0111;$l10n$3 = $l10n$2;$w$1 = $w$0;
      }
     } else {
      $96 = $65 << 24 >> 24;
      $isdigittmp1$i = (($96) + -48)|0;
      $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
      if ($isdigit2$i) {
       $100 = $storemerge8109;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
       while(1) {
        $97 = ($i$03$i*10)|0;
        $98 = (($97) + ($isdigittmp4$i))|0;
        $99 = (($100) + 1|0);
        $101 = HEAP8[$99>>0]|0;
        $102 = $101 << 24 >> 24;
        $isdigittmp$i = (($102) + -48)|0;
        $isdigit$i = ($isdigittmp$i>>>0)<(10);
        if ($isdigit$i) {
         $100 = $99;$i$03$i = $98;$isdigittmp4$i = $isdigittmp$i;
        } else {
         $$lcssa345 = $98;$$lcssa346 = $99;
         break;
        }
       }
       $103 = ($$lcssa345|0)<(0);
       if ($103) {
        $$0$ph340 = -1;
        label = 453;
        break L1;
       } else {
        $105 = $$lcssa346;$fl$1 = $fl$0111;$l10n$3 = $l10n$1;$w$1 = $$lcssa345;
       }
      } else {
       $105 = $storemerge8109;$fl$1 = $fl$0111;$l10n$3 = $l10n$1;$w$1 = 0;
      }
     }
    } while(0);
    $104 = HEAP8[$105>>0]|0;
    $106 = ($104<<24>>24)==(46);
    do {
     if ($106) {
      $107 = (($105) + 1|0);
      $108 = HEAP8[$107>>0]|0;
      $109 = ($108<<24>>24)==(42);
      if (!($109)) {
       $136 = $108 << 24 >> 24;
       $isdigittmp1$i28 = (($136) + -48)|0;
       $isdigit2$i29 = ($isdigittmp1$i28>>>0)<(10);
       if (!($isdigit2$i29)) {
        $1178 = $107;$p$0 = 0;
        break;
       }
       $1179 = $107;$140 = $105;$i$03$i31 = 0;$isdigittmp4$i30 = $isdigittmp1$i28;
       while(1) {
        $137 = ($i$03$i31*10)|0;
        $138 = (($137) + ($isdigittmp4$i30))|0;
        $139 = (($140) + 2|0);
        $141 = HEAP8[$139>>0]|0;
        $142 = $141 << 24 >> 24;
        $isdigittmp$i32 = (($142) + -48)|0;
        $isdigit$i33 = ($isdigittmp$i32>>>0)<(10);
        if ($isdigit$i33) {
         $140$phi = $1179;$1179 = $139;$i$03$i31 = $138;$isdigittmp4$i30 = $isdigittmp$i32;$140 = $140$phi;
        } else {
         $$lcssa347 = $138;$$lcssa348 = $139;
         break;
        }
       }
       $1178 = $$lcssa348;$p$0 = $$lcssa347;
       break;
      }
      $110 = (($105) + 2|0);
      $111 = HEAP8[$110>>0]|0;
      $112 = $111 << 24 >> 24;
      $isdigittmp9 = (($112) + -48)|0;
      $isdigit10 = ($isdigittmp9>>>0)<(10);
      if ($isdigit10) {
       $113 = (($105) + 3|0);
       $114 = HEAP8[$113>>0]|0;
       $115 = ($114<<24>>24)==(36);
       if ($115) {
        $116 = (($nl_type) + ($isdigittmp9<<2)|0);
        HEAP32[$116>>2] = 10;
        $117 = HEAP8[$110>>0]|0;
        $118 = $117 << 24 >> 24;
        $119 = (($118) + -48)|0;
        $120 = (($nl_arg) + ($119<<3)|0);
        $121 = $120;
        $122 = $121;
        $123 = HEAP32[$122>>2]|0;
        $124 = (($121) + 4)|0;
        $125 = $124;
        $126 = HEAP32[$125>>2]|0;
        $127 = (($105) + 4|0);
        $1178 = $127;$p$0 = $123;
        break;
       }
      }
      $128 = ($l10n$3|0)==(0);
      if (!($128)) {
       $$0$ph340 = -1;
       label = 453;
       break L1;
      }
      if ($1) {
       $arglist_current2 = HEAP32[$ap>>2]|0;
       $129 = $arglist_current2;
       $130 = (0 + 4|0);
       $expanded71 = $130;
       $expanded70 = (($expanded71) - 1)|0;
       $131 = (($129) + ($expanded70))|0;
       $132 = (0 + 4|0);
       $expanded75 = $132;
       $expanded74 = (($expanded75) - 1)|0;
       $expanded73 = $expanded74 ^ -1;
       $133 = $131 & $expanded73;
       $134 = $133;
       $135 = HEAP32[$134>>2]|0;
       $arglist_next3 = (($134) + 4|0);
       HEAP32[$ap>>2] = $arglist_next3;
       $1178 = $110;$p$0 = $135;
      } else {
       $1178 = $110;$p$0 = 0;
      }
     } else {
      $1178 = $105;$p$0 = -1;
     }
    } while(0);
    $144 = $1178;$st$0 = 0;
    while(1) {
     $143 = HEAP8[$144>>0]|0;
     $145 = $143 << 24 >> 24;
     $146 = (($145) + -65)|0;
     $147 = ($146>>>0)>(57);
     if ($147) {
      label = 452;
      break L1;
     }
     $148 = (($144) + 1|0);
     $149 = ((49720 + (($st$0*58)|0)|0) + ($146)|0);
     $150 = HEAP8[$149>>0]|0;
     $151 = $150&255;
     $152 = (($151) + -1)|0;
     $153 = ($152>>>0)<(8);
     if ($153) {
      $144 = $148;$st$0 = $151;
     } else {
      $$lcssa350 = $144;$$lcssa352 = $148;$$lcssa353 = $150;$$lcssa354 = $151;$st$0$lcssa351 = $st$0;
      break;
     }
    }
    $154 = ($$lcssa353<<24>>24)==(0);
    if ($154) {
     $$0$ph340 = -1;
     label = 453;
     break L1;
    }
    $155 = ($$lcssa353<<24>>24)==(19);
    $156 = ($argpos$0|0)>(-1);
    L74: do {
     if ($155) {
      if ($156) {
       $$0$ph340 = -1;
       label = 453;
       break L1;
      } else {
       $1180 = $1175;$1181 = $1176;
       label = 71;
      }
     } else {
      if ($156) {
       $157 = (($nl_type) + ($argpos$0<<2)|0);
       HEAP32[$157>>2] = $$lcssa354;
       $158 = (($nl_arg) + ($argpos$0<<3)|0);
       $159 = $158;
       $160 = $159;
       $161 = HEAP32[$160>>2]|0;
       $162 = (($159) + 4)|0;
       $163 = $162;
       $164 = HEAP32[$163>>2]|0;
       $1180 = $164;$1181 = $161;
       label = 71;
       break;
      }
      if (!($1)) {
       $$0$ph340 = 0;
       label = 453;
       break L1;
      }
      $165 = ($$lcssa353&255)>(20);
      if ($165) {
       $1182 = $$lcssa352;$267 = $1176;$294 = $1175;
      } else {
       do {
        switch ($$lcssa354|0) {
        case 12:  {
         $arglist_current14 = HEAP32[$ap>>2]|0;
         $190 = $arglist_current14;
         $191 = (0 + 8|0);
         $expanded99 = $191;
         $expanded98 = (($expanded99) - 1)|0;
         $192 = (($190) + ($expanded98))|0;
         $193 = (0 + 8|0);
         $expanded103 = $193;
         $expanded102 = (($expanded103) - 1)|0;
         $expanded101 = $expanded102 ^ -1;
         $194 = $192 & $expanded101;
         $195 = $194;
         $196 = $195;
         $197 = $196;
         $198 = HEAP32[$197>>2]|0;
         $199 = (($196) + 4)|0;
         $200 = $199;
         $201 = HEAP32[$200>>2]|0;
         $arglist_next15 = (($195) + 8|0);
         HEAP32[$ap>>2] = $arglist_next15;
         $1182 = $$lcssa352;$267 = $198;$294 = $201;
         break L74;
         break;
        }
        case 16:  {
         $arglist_current26 = HEAP32[$ap>>2]|0;
         $233 = $arglist_current26;
         $234 = (0 + 4|0);
         $expanded127 = $234;
         $expanded126 = (($expanded127) - 1)|0;
         $235 = (($233) + ($expanded126))|0;
         $236 = (0 + 4|0);
         $expanded131 = $236;
         $expanded130 = (($expanded131) - 1)|0;
         $expanded129 = $expanded130 ^ -1;
         $237 = $235 & $expanded129;
         $238 = $237;
         $239 = HEAP32[$238>>2]|0;
         $arglist_next27 = (($238) + 4|0);
         HEAP32[$ap>>2] = $arglist_next27;
         $$mask$i39 = $239 & 255;
         $1182 = $$lcssa352;$267 = $$mask$i39;$294 = 0;
         break L74;
         break;
        }
        case 14:  {
         $arglist_current20 = HEAP32[$ap>>2]|0;
         $214 = $arglist_current20;
         $215 = (0 + 4|0);
         $expanded113 = $215;
         $expanded112 = (($expanded113) - 1)|0;
         $216 = (($214) + ($expanded112))|0;
         $217 = (0 + 4|0);
         $expanded117 = $217;
         $expanded116 = (($expanded117) - 1)|0;
         $expanded115 = $expanded116 ^ -1;
         $218 = $216 & $expanded115;
         $219 = $218;
         $220 = HEAP32[$219>>2]|0;
         $arglist_next21 = (($219) + 4|0);
         HEAP32[$ap>>2] = $arglist_next21;
         $$mask1$i38 = $220 & 65535;
         $1182 = $$lcssa352;$267 = $$mask1$i38;$294 = 0;
         break L74;
         break;
        }
        case 13:  {
         $arglist_current17 = HEAP32[$ap>>2]|0;
         $202 = $arglist_current17;
         $203 = (0 + 4|0);
         $expanded106 = $203;
         $expanded105 = (($expanded106) - 1)|0;
         $204 = (($202) + ($expanded105))|0;
         $205 = (0 + 4|0);
         $expanded110 = $205;
         $expanded109 = (($expanded110) - 1)|0;
         $expanded108 = $expanded109 ^ -1;
         $206 = $204 & $expanded108;
         $207 = $206;
         $208 = HEAP32[$207>>2]|0;
         $arglist_next18 = (($207) + 4|0);
         HEAP32[$ap>>2] = $arglist_next18;
         $209 = $208&65535;
         $210 = $209 << 16 >> 16;
         $211 = ($210|0)<(0);
         $212 = $211 << 31 >> 31;
         $sext94 = $208 << 16;
         $213 = $sext94 >> 16;
         $1182 = $$lcssa352;$267 = $213;$294 = $212;
         break L74;
         break;
        }
        case 17:  {
         $arglist_current29 = HEAP32[$ap>>2]|0;
         $240 = $arglist_current29;
         $241 = (0 + 8|0);
         $expanded134 = $241;
         $expanded133 = (($expanded134) - 1)|0;
         $242 = (($240) + ($expanded133))|0;
         $243 = (0 + 8|0);
         $expanded138 = $243;
         $expanded137 = (($expanded138) - 1)|0;
         $expanded136 = $expanded137 ^ -1;
         $244 = $242 & $expanded136;
         $245 = $244;
         $246 = +HEAPF64[$245>>3];
         $arglist_next30 = (($245) + 8|0);
         HEAP32[$ap>>2] = $arglist_next30;
         HEAPF64[tempDoublePtr>>3] = $246;$247 = HEAP32[tempDoublePtr>>2]|0;
         $248 = HEAP32[tempDoublePtr+4>>2]|0;
         $1182 = $$lcssa352;$267 = $247;$294 = $248;
         break L74;
         break;
        }
        case 9:  {
         $arglist_current5 = HEAP32[$ap>>2]|0;
         $166 = $arglist_current5;
         $167 = (0 + 4|0);
         $expanded78 = $167;
         $expanded77 = (($expanded78) - 1)|0;
         $168 = (($166) + ($expanded77))|0;
         $169 = (0 + 4|0);
         $expanded82 = $169;
         $expanded81 = (($expanded82) - 1)|0;
         $expanded80 = $expanded81 ^ -1;
         $170 = $168 & $expanded80;
         $171 = $170;
         $172 = HEAP32[$171>>2]|0;
         $arglist_next6 = (($171) + 4|0);
         HEAP32[$ap>>2] = $arglist_next6;
         $173 = $172;
         $1182 = $$lcssa352;$267 = $173;$294 = $1175;
         break L74;
         break;
        }
        case 15:  {
         $arglist_current23 = HEAP32[$ap>>2]|0;
         $221 = $arglist_current23;
         $222 = (0 + 4|0);
         $expanded120 = $222;
         $expanded119 = (($expanded120) - 1)|0;
         $223 = (($221) + ($expanded119))|0;
         $224 = (0 + 4|0);
         $expanded124 = $224;
         $expanded123 = (($expanded124) - 1)|0;
         $expanded122 = $expanded123 ^ -1;
         $225 = $223 & $expanded122;
         $226 = $225;
         $227 = HEAP32[$226>>2]|0;
         $arglist_next24 = (($226) + 4|0);
         HEAP32[$ap>>2] = $arglist_next24;
         $228 = $227&255;
         $229 = $228 << 24 >> 24;
         $230 = ($229|0)<(0);
         $231 = $230 << 31 >> 31;
         $sext = $227 << 24;
         $232 = $sext >> 24;
         $1182 = $$lcssa352;$267 = $232;$294 = $231;
         break L74;
         break;
        }
        case 18:  {
         $arglist_current32 = HEAP32[$ap>>2]|0;
         $249 = $arglist_current32;
         $250 = (0 + 8|0);
         $expanded141 = $250;
         $expanded140 = (($expanded141) - 1)|0;
         $251 = (($249) + ($expanded140))|0;
         $252 = (0 + 8|0);
         $expanded145 = $252;
         $expanded144 = (($expanded145) - 1)|0;
         $expanded143 = $expanded144 ^ -1;
         $253 = $251 & $expanded143;
         $254 = $253;
         $255 = +HEAPF64[$254>>3];
         $arglist_next33 = (($254) + 8|0);
         HEAP32[$ap>>2] = $arglist_next33;
         HEAPF64[tempDoublePtr>>3] = $255;$256 = HEAP32[tempDoublePtr>>2]|0;
         $257 = HEAP32[tempDoublePtr+4>>2]|0;
         $1182 = $$lcssa352;$267 = $256;$294 = $257;
         break L74;
         break;
        }
        case 10:  {
         $arglist_current8 = HEAP32[$ap>>2]|0;
         $174 = $arglist_current8;
         $175 = (0 + 4|0);
         $expanded85 = $175;
         $expanded84 = (($expanded85) - 1)|0;
         $176 = (($174) + ($expanded84))|0;
         $177 = (0 + 4|0);
         $expanded89 = $177;
         $expanded88 = (($expanded89) - 1)|0;
         $expanded87 = $expanded88 ^ -1;
         $178 = $176 & $expanded87;
         $179 = $178;
         $180 = HEAP32[$179>>2]|0;
         $arglist_next9 = (($179) + 4|0);
         HEAP32[$ap>>2] = $arglist_next9;
         $181 = ($180|0)<(0);
         $182 = $181 << 31 >> 31;
         $1182 = $$lcssa352;$267 = $180;$294 = $182;
         break L74;
         break;
        }
        case 11:  {
         $arglist_current11 = HEAP32[$ap>>2]|0;
         $183 = $arglist_current11;
         $184 = (0 + 4|0);
         $expanded92 = $184;
         $expanded91 = (($expanded92) - 1)|0;
         $185 = (($183) + ($expanded91))|0;
         $186 = (0 + 4|0);
         $expanded96 = $186;
         $expanded95 = (($expanded96) - 1)|0;
         $expanded94 = $expanded95 ^ -1;
         $187 = $185 & $expanded94;
         $188 = $187;
         $189 = HEAP32[$188>>2]|0;
         $arglist_next12 = (($188) + 4|0);
         HEAP32[$ap>>2] = $arglist_next12;
         $1182 = $$lcssa352;$267 = $189;$294 = 0;
         break L74;
         break;
        }
        default: {
         $1182 = $$lcssa352;$267 = $1176;$294 = $1175;
         break L74;
        }
        }
       } while(0);
      }
     }
    } while(0);
    if ((label|0) == 71) {
     label = 0;
     if ($1) {
      $1182 = $$lcssa352;$267 = $1181;$294 = $1180;
     } else {
      $$be = $$lcssa352;$$be341 = $1180;$$be342 = $1181;$l$0$be = $37;$l10n$0$be = $l10n$3;
      break;
     }
    }
    $258 = HEAP8[$$lcssa350>>0]|0;
    $259 = $258 << 24 >> 24;
    $260 = ($st$0$lcssa351|0)!=(0);
    $261 = $259 & 15;
    $262 = ($261|0)==(3);
    $or$cond15 = $260 & $262;
    $263 = $259 & -33;
    $t$0 = $or$cond15 ? $263 : $259;
    $264 = $fl$1 & 8192;
    $265 = ($264|0)==(0);
    $266 = $fl$1 & -65537;
    $fl$1$ = $265 ? $fl$1 : $266;
    L96: do {
     switch ($t$0|0) {
     case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
      HEAP32[tempDoublePtr>>2] = $267;HEAP32[tempDoublePtr+4>>2] = $294;$432 = +HEAPF64[tempDoublePtr>>3];
      HEAP32[$e2$i>>2] = 0;
      $433 = ($294|0)<(0);
      if ($433) {
       $434 = -$432;
       $$013$i = $434;$pl$0$i = 1;$prefix$0$i = 50208;
      } else {
       $435 = $fl$1$ & 2048;
       $436 = ($435|0)==(0);
       if ($436) {
        $437 = $fl$1$ & 1;
        $438 = ($437|0)==(0);
        $$$i = $438 ? ((50208 + 1|0)) : ((50208 + 6|0));
        $$013$i = $432;$pl$0$i = $437;$prefix$0$i = $$$i;
       } else {
        $$013$i = $432;$pl$0$i = 1;$prefix$0$i = ((50208 + 3|0));
       }
      }
      HEAPF64[tempDoublePtr>>3] = $$013$i;$439 = HEAP32[tempDoublePtr>>2]|0;
      $440 = HEAP32[tempDoublePtr+4>>2]|0;
      $441 = $440 & 2146435072;
      $442 = ($441>>>0)<(2146435072);
      $443 = (0)<(0);
      $444 = ($441|0)==(2146435072);
      $445 = $444 & $443;
      $446 = $442 | $445;
      do {
       if ($446) {
        $472 = (+_frexpl($$013$i,$e2$i));
        $473 = $472 * 2.0;
        $474 = $473 != 0.0;
        if ($474) {
         $475 = HEAP32[$e2$i>>2]|0;
         $476 = (($475) + -1)|0;
         HEAP32[$e2$i>>2] = $476;
        }
        $477 = $t$0 | 32;
        $478 = ($477|0)==(97);
        if ($478) {
         $479 = $t$0 & 32;
         $480 = ($479|0)==(0);
         $481 = (($prefix$0$i) + 9|0);
         $prefix$0$$i = $480 ? $prefix$0$i : $481;
         $482 = $pl$0$i | 2;
         $483 = ($p$0>>>0)>(11);
         do {
          if ($483) {
           $$1$i = $473;
          } else {
           $484 = (12 - ($p$0))|0;
           $re$1187$i = $484;$round$0186$i = 8.0;
           while(1) {
            $485 = (($re$1187$i) + -1)|0;
            $486 = $round$0186$i * 16.0;
            $487 = ($485|0)==(0);
            if ($487) {
             $$lcssa378 = $486;
             break;
            } else {
             $re$1187$i = $485;$round$0186$i = $486;
            }
           }
           $488 = HEAP8[$prefix$0$$i>>0]|0;
           $489 = ($488<<24>>24)==(45);
           if ($489) {
            $490 = -$473;
            $491 = $490 - $$lcssa378;
            $492 = $$lcssa378 + $491;
            $493 = -$492;
            $$1$i = $493;
            break;
           } else {
            $494 = $473 + $$lcssa378;
            $495 = $494 - $$lcssa378;
            $$1$i = $495;
            break;
           }
          }
         } while(0);
         $496 = HEAP32[$e2$i>>2]|0;
         $497 = ($496|0)<(0);
         $498 = (0 - ($496))|0;
         $499 = $497 ? $498 : $496;
         $500 = ($499|0)<(0);
         if ($500) {
          $501 = ($499|0)<(0);
          $502 = $501 << 31 >> 31;
          $$05$i$i = $7;$503 = $499;$504 = $502;
          while(1) {
           $505 = (___uremdi3(($503|0),($504|0),10,0)|0);
           $506 = tempRet0;
           $507 = $505 | 48;
           $508 = $507&255;
           $509 = (($$05$i$i) + -1|0);
           HEAP8[$509>>0] = $508;
           $510 = (___udivdi3(($503|0),($504|0),10,0)|0);
           $511 = tempRet0;
           $512 = ($504>>>0)>(9);
           $513 = ($503>>>0)>(4294967295);
           $514 = ($504|0)==(9);
           $515 = $514 & $513;
           $516 = $512 | $515;
           if ($516) {
            $$05$i$i = $509;$503 = $510;$504 = $511;
           } else {
            $$lcssa379 = $509;$1191 = $510;$1192 = $511;
            break;
           }
          }
          $$0$lcssa$i56$i = $$lcssa379;$$01$lcssa$off0$i$i = $1191;
         } else {
          $$0$lcssa$i56$i = $7;$$01$lcssa$off0$i$i = $499;
         }
         $517 = ($$01$lcssa$off0$i$i|0)==(0);
         if ($517) {
          $$1$lcssa$i$i = $$0$lcssa$i56$i;
         } else {
          $$12$i$i = $$0$lcssa$i56$i;$y$03$i$i = $$01$lcssa$off0$i$i;
          while(1) {
           $518 = (($y$03$i$i>>>0) % 10)&-1;
           $519 = $518 | 48;
           $520 = $519&255;
           $521 = (($$12$i$i) + -1|0);
           HEAP8[$521>>0] = $520;
           $522 = (($y$03$i$i>>>0) / 10)&-1;
           $523 = ($y$03$i$i>>>0)<(10);
           if ($523) {
            $$lcssa381 = $521;
            break;
           } else {
            $$12$i$i = $521;$y$03$i$i = $522;
           }
          }
          $$1$lcssa$i$i = $$lcssa381;
         }
         $524 = ($$1$lcssa$i$i|0)==($7|0);
         if ($524) {
          HEAP8[$8>>0] = 48;
          $estr$0$i = $8;
         } else {
          $estr$0$i = $$1$lcssa$i$i;
         }
         $525 = HEAP32[$e2$i>>2]|0;
         $526 = $525 >> 31;
         $527 = $526 & 2;
         $528 = (($527) + 43)|0;
         $529 = $528&255;
         $530 = (($estr$0$i) + -1|0);
         HEAP8[$530>>0] = $529;
         $531 = (($t$0) + 15)|0;
         $532 = $531&255;
         $533 = (($estr$0$i) + -2|0);
         HEAP8[$533>>0] = $532;
         $534 = $fl$1$ & 8;
         $535 = ($534|0)==(0);
         do {
          if ($535) {
           $notrhs$i = ($p$0|0)<(1);
           if ($notrhs$i) {
            $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
            while(1) {
             $536 = (~~(($$2$us$us$i)));
             $537 = (50264 + ($536)|0);
             $538 = HEAP8[$537>>0]|0;
             $539 = $538&255;
             $540 = $539 | $479;
             $541 = $540&255;
             $542 = (($s$0$us$us$i) + 1|0);
             HEAP8[$s$0$us$us$i>>0] = $541;
             $543 = (+($536|0));
             $544 = $$2$us$us$i - $543;
             $545 = $544 * 16.0;
             $546 = $542;
             $547 = (($546) - ($0))|0;
             $548 = ($547|0)!=(1);
             $notlhs$us$us$i = $545 == 0.0;
             $or$cond$i80 = $548 | $notlhs$us$us$i;
             if ($or$cond$i80) {
              $s$1$us$us$i = $542;
             } else {
              $549 = (($s$0$us$us$i) + 2|0);
              HEAP8[$542>>0] = 46;
              $s$1$us$us$i = $549;
             }
             $550 = $545 != 0.0;
             if ($550) {
              $$2$us$us$i = $545;$s$0$us$us$i = $s$1$us$us$i;
             } else {
              $s$1$us$us$i$lcssa = $s$1$us$us$i;
              break;
             }
            }
            $s$1$lcssa$i = $s$1$us$us$i$lcssa;
            break;
           } else {
            $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
            while(1) {
             $551 = (~~(($$2$us$i)));
             $552 = (50264 + ($551)|0);
             $553 = HEAP8[$552>>0]|0;
             $554 = $553&255;
             $555 = $554 | $479;
             $556 = $555&255;
             $557 = (($s$0$us$i) + 1|0);
             HEAP8[$s$0$us$i>>0] = $556;
             $558 = (+($551|0));
             $559 = $$2$us$i - $558;
             $560 = $559 * 16.0;
             $561 = $557;
             $562 = (($561) - ($0))|0;
             $563 = ($562|0)==(1);
             if ($563) {
              $564 = (($s$0$us$i) + 2|0);
              HEAP8[$557>>0] = 46;
              $s$1$us$i = $564;
             } else {
              $s$1$us$i = $557;
             }
             $565 = $560 != 0.0;
             if ($565) {
              $$2$us$i = $560;$s$0$us$i = $s$1$us$i;
             } else {
              $s$1$us$i$lcssa = $s$1$us$i;
              break;
             }
            }
            $s$1$lcssa$i = $s$1$us$i$lcssa;
            break;
           }
          } else {
           $$2$i = $$1$i;$s$0$i = $buf$i;
           while(1) {
            $566 = (~~(($$2$i)));
            $567 = (50264 + ($566)|0);
            $568 = HEAP8[$567>>0]|0;
            $569 = $568&255;
            $570 = $569 | $479;
            $571 = $570&255;
            $572 = (($s$0$i) + 1|0);
            HEAP8[$s$0$i>>0] = $571;
            $573 = (+($566|0));
            $574 = $$2$i - $573;
            $575 = $574 * 16.0;
            $576 = $572;
            $577 = (($576) - ($0))|0;
            $578 = ($577|0)==(1);
            if ($578) {
             $579 = (($s$0$i) + 2|0);
             HEAP8[$572>>0] = 46;
             $s$1$i = $579;
            } else {
             $s$1$i = $572;
            }
            $580 = $575 != 0.0;
            if ($580) {
             $$2$i = $575;$s$0$i = $s$1$i;
            } else {
             $s$1$i$lcssa = $s$1$i;
             break;
            }
           }
           $s$1$lcssa$i = $s$1$i$lcssa;
          }
         } while(0);
         $581 = ($p$0|0)!=(0);
         $$pre308$i = $s$1$lcssa$i;
         $582 = (($11) + ($$pre308$i))|0;
         $583 = ($582|0)<($p$0|0);
         $or$cond274 = $581 & $583;
         $584 = $533;
         if ($or$cond274) {
          $585 = (($12) + ($p$0))|0;
          $586 = (($585) - ($584))|0;
          $l$0$i = $586;
         } else {
          $587 = (($10) - ($584))|0;
          $588 = (($587) + ($$pre308$i))|0;
          $l$0$i = $588;
         }
         $589 = (($l$0$i) + ($482))|0;
         $590 = $fl$1$ & 73728;
         $591 = ($590|0)==(0);
         $592 = ($w$1|0)>($589|0);
         $or$cond$i60$i = $591 & $592;
         if ($or$cond$i60$i) {
          $593 = (($w$1) - ($589))|0;
          $594 = ($593>>>0)>(256);
          $595 = $594 ? 256 : $593;
          _memset(($pad$i|0),32,($595|0))|0;
          $596 = ($593>>>0)>(255);
          if ($596) {
           $$01$i62$i = $593;
           while(1) {
            (___fwritex($pad$i,256,$f)|0);
            $597 = (($$01$i62$i) + -256)|0;
            $598 = ($597>>>0)>(255);
            if ($598) {
             $$01$i62$i = $597;
            } else {
             break;
            }
           }
           $599 = $593 & 255;
           $$0$lcssa$i64$i = $599;
          } else {
           $$0$lcssa$i64$i = $593;
          }
          (___fwritex($pad$i,$$0$lcssa$i64$i,$f)|0);
         }
         (___fwritex($prefix$0$$i,$482,$f)|0);
         $600 = ($590|0)==(65536);
         $or$cond$i67$i = $600 & $592;
         if ($or$cond$i67$i) {
          $601 = (($w$1) - ($589))|0;
          $602 = ($601>>>0)>(256);
          $603 = $602 ? 256 : $601;
          _memset(($pad$i|0),48,($603|0))|0;
          $604 = ($601>>>0)>(255);
          if ($604) {
           $$01$i69$i = $601;
           while(1) {
            (___fwritex($pad$i,256,$f)|0);
            $605 = (($$01$i69$i) + -256)|0;
            $606 = ($605>>>0)>(255);
            if ($606) {
             $$01$i69$i = $605;
            } else {
             break;
            }
           }
           $607 = $601 & 255;
           $$0$lcssa$i71$i = $607;
          } else {
           $$0$lcssa$i71$i = $601;
          }
          (___fwritex($pad$i,$$0$lcssa$i71$i,$f)|0);
         }
         $608 = (($$pre308$i) - ($0))|0;
         (___fwritex($buf$i,$608,$f)|0);
         $609 = $533;
         $610 = (($9) - ($609))|0;
         $611 = (($l$0$i) - ($610))|0;
         $612 = (($611) - ($608))|0;
         $613 = ($612|0)>(0);
         if ($613) {
          $614 = ($612>>>0)>(256);
          $615 = $614 ? 256 : $612;
          _memset(($pad$i|0),48,($615|0))|0;
          $616 = ($612>>>0)>(255);
          if ($616) {
           $$01$i75$i = $612;
           while(1) {
            (___fwritex($pad$i,256,$f)|0);
            $617 = (($$01$i75$i) + -256)|0;
            $618 = ($617>>>0)>(255);
            if ($618) {
             $$01$i75$i = $617;
            } else {
             break;
            }
           }
           $619 = $612 & 255;
           $$0$lcssa$i77$i = $619;
          } else {
           $$0$lcssa$i77$i = $612;
          }
          (___fwritex($pad$i,$$0$lcssa$i77$i,$f)|0);
         }
         (___fwritex($533,$610,$f)|0);
         $620 = ($590|0)==(8192);
         $or$cond$i80$i = $620 & $592;
         if ($or$cond$i80$i) {
          $621 = (($w$1) - ($589))|0;
          $622 = ($621>>>0)>(256);
          $623 = $622 ? 256 : $621;
          _memset(($pad$i|0),32,($623|0))|0;
          $624 = ($621>>>0)>(255);
          if ($624) {
           $$01$i82$i = $621;
           while(1) {
            (___fwritex($pad$i,256,$f)|0);
            $625 = (($$01$i82$i) + -256)|0;
            $626 = ($625>>>0)>(255);
            if ($626) {
             $$01$i82$i = $625;
            } else {
             break;
            }
           }
           $627 = $621 & 255;
           $$0$lcssa$i84$i = $627;
          } else {
           $$0$lcssa$i84$i = $621;
          }
          (___fwritex($pad$i,$$0$lcssa$i84$i,$f)|0);
         }
         $w$25$i = $592 ? $w$1 : $589;
         $$0$i = $w$25$i;
         break;
        }
        $628 = ($p$0|0)<(0);
        $$p$i = $628 ? 6 : $p$0;
        if ($474) {
         $629 = $473 * 268435456.0;
         $630 = HEAP32[$e2$i>>2]|0;
         $631 = (($630) + -28)|0;
         HEAP32[$e2$i>>2] = $631;
         $$3$i = $629;$632 = $631;
        } else {
         $$pre$i = HEAP32[$e2$i>>2]|0;
         $$3$i = $473;$632 = $$pre$i;
        }
        $633 = ($632|0)<(0);
        $$39$i = $633 ? $big$i : $13;
        $634 = $$39$i;
        $$4$i = $$3$i;$z$0$i = $$39$i;
        while(1) {
         $635 = (~~(($$4$i))>>>0);
         HEAP32[$z$0$i>>2] = $635;
         $636 = (($z$0$i) + 4|0);
         $637 = (+($635>>>0));
         $638 = $$4$i - $637;
         $639 = $638 * 1.0E+9;
         $640 = $639 != 0.0;
         if ($640) {
          $$4$i = $639;$z$0$i = $636;
         } else {
          $$lcssa355 = $636;
          break;
         }
        }
        $$pr$i = HEAP32[$e2$i>>2]|0;
        $641 = ($$pr$i|0)>(0);
        if ($641) {
         $642 = $$pr$i;$a$1261$i = $$39$i;$z$1260$i = $$lcssa355;
         while(1) {
          $643 = ($642|0)>(29);
          $644 = $643 ? 29 : $642;
          $d$0253$i = (($z$1260$i) + -4|0);
          $645 = ($d$0253$i>>>0)<($a$1261$i>>>0);
          do {
           if ($645) {
            $a$2$ph$i = $a$1261$i;
           } else {
            $655 = $z$1260$i;$carry$0254$i = 0;$d$0255$i = $d$0253$i;
            while(1) {
             $646 = HEAP32[$d$0255$i>>2]|0;
             $647 = (_bitshift64Shl(($646|0),0,($644|0))|0);
             $648 = tempRet0;
             $649 = (_i64Add(($647|0),($648|0),($carry$0254$i|0),0)|0);
             $650 = tempRet0;
             $651 = (___uremdi3(($649|0),($650|0),1000000000,0)|0);
             $652 = tempRet0;
             HEAP32[$d$0255$i>>2] = $651;
             $653 = (___udivdi3(($649|0),($650|0),1000000000,0)|0);
             $654 = tempRet0;
             $d$0$i = (($655) + -8|0);
             $656 = ($d$0$i>>>0)<($a$1261$i>>>0);
             if ($656) {
              $$lcssa356 = $653;
              break;
             } else {
              $655$phi = $d$0255$i;$carry$0254$i = $653;$d$0255$i = $d$0$i;$655 = $655$phi;
             }
            }
            $657 = ($$lcssa356|0)==(0);
            if ($657) {
             $a$2$ph$i = $a$1261$i;
             break;
            }
            $658 = (($a$1261$i) + -4|0);
            HEAP32[$658>>2] = $$lcssa356;
            $a$2$ph$i = $658;
           }
          } while(0);
          $z$2$i = $z$1260$i;
          while(1) {
           $659 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
           if (!($659)) {
            $z$2$i$lcssa = $z$2$i;
            break;
           }
           $660 = (($z$2$i) + -4|0);
           $661 = HEAP32[$660>>2]|0;
           $662 = ($661|0)==(0);
           if ($662) {
            $z$2$i = $660;
           } else {
            $z$2$i$lcssa = $z$2$i;
            break;
           }
          }
          $663 = HEAP32[$e2$i>>2]|0;
          $664 = (($663) - ($644))|0;
          HEAP32[$e2$i>>2] = $664;
          $665 = ($664|0)>(0);
          if ($665) {
           $642 = $664;$a$1261$i = $a$2$ph$i;$z$1260$i = $z$2$i$lcssa;
          } else {
           $$lcssa357 = $664;$a$2$ph$i$lcssa = $a$2$ph$i;$z$2$i$lcssa$lcssa = $z$2$i$lcssa;
           break;
          }
         }
         $$pr154$i = $$lcssa357;$a$1$lcssa$i = $a$2$ph$i$lcssa;$z$1$lcssa$i = $z$2$i$lcssa$lcssa;
        } else {
         $$pr154$i = $$pr$i;$a$1$lcssa$i = $$39$i;$z$1$lcssa$i = $$lcssa355;
        }
        $666 = ($$pr154$i|0)<(0);
        do {
         if ($666) {
          $667 = (($$p$i) + 25)|0;
          $668 = (($667|0) / 9)&-1;
          $669 = (($668) + 1)|0;
          $670 = ($477|0)==(102);
          if ($670) {
           $671 = (($$39$i) + ($669<<2)|0);
           $672 = $$pr154$i;$a$3248$us$i = $a$1$lcssa$i;$z$3247$us$i = $z$1$lcssa$i;
           while(1) {
            $673 = ($672|0)<(-9);
            $674 = (0 - ($672))|0;
            $$26$us$i = $673 ? 9 : $674;
            $675 = ($a$3248$us$i>>>0)<($z$3247$us$i>>>0);
            do {
             if ($675) {
              $700 = 1 << $$26$us$i;
              $693 = (($700) + -1)|0;
              $697 = 1000000000 >>> $$26$us$i;
              $carry3$0242$us$i = 0;$d$1241$us$i = $a$3248$us$i;
              while(1) {
               $691 = HEAP32[$d$1241$us$i>>2]|0;
               $692 = $691 & $693;
               $694 = $691 >>> $$26$us$i;
               $695 = (($694) + ($carry3$0242$us$i))|0;
               HEAP32[$d$1241$us$i>>2] = $695;
               $696 = Math_imul($692, $697)|0;
               $698 = (($d$1241$us$i) + 4|0);
               $699 = ($698>>>0)<($z$3247$us$i>>>0);
               if ($699) {
                $carry3$0242$us$i = $696;$d$1241$us$i = $698;
               } else {
                $$lcssa359 = $696;
                break;
               }
              }
              $679 = HEAP32[$a$3248$us$i>>2]|0;
              $680 = ($679|0)==(0);
              $681 = (($a$3248$us$i) + 4|0);
              $$a$3$us$i = $680 ? $681 : $a$3248$us$i;
              $682 = ($$lcssa359|0)==(0);
              if ($682) {
               $$a$3$us310$i = $$a$3$us$i;$z$4$us$i = $z$3247$us$i;
               break;
              }
              $683 = (($z$3247$us$i) + 4|0);
              HEAP32[$z$3247$us$i>>2] = $$lcssa359;
              $$a$3$us310$i = $$a$3$us$i;$z$4$us$i = $683;
             } else {
              $676 = HEAP32[$a$3248$us$i>>2]|0;
              $677 = ($676|0)==(0);
              $678 = (($a$3248$us$i) + 4|0);
              $$a$3$us309$i = $677 ? $678 : $a$3248$us$i;
              $$a$3$us310$i = $$a$3$us309$i;$z$4$us$i = $z$3247$us$i;
             }
            } while(0);
            $684 = $z$4$us$i;
            $685 = (($684) - ($634))|0;
            $686 = $685 >> 2;
            $687 = ($686|0)>($669|0);
            $$z$4$us$i = $687 ? $671 : $z$4$us$i;
            $688 = HEAP32[$e2$i>>2]|0;
            $689 = (($688) + ($$26$us$i))|0;
            HEAP32[$e2$i>>2] = $689;
            $690 = ($689|0)<(0);
            if ($690) {
             $672 = $689;$a$3248$us$i = $$a$3$us310$i;$z$3247$us$i = $$z$4$us$i;
            } else {
             $$a$3$us310$i$lcssa = $$a$3$us310$i;$$z$4$us$i$lcssa = $$z$4$us$i;
             break;
            }
           }
           $a$3$lcssa$i = $$a$3$us310$i$lcssa;$z$3$lcssa$i = $$z$4$us$i$lcssa;
           break;
          }
          $701 = $$pr154$i;$a$3248$i = $a$1$lcssa$i;$z$3247$i = $z$1$lcssa$i;
          while(1) {
           $702 = ($701|0)<(-9);
           $703 = (0 - ($701))|0;
           $$26$i = $702 ? 9 : $703;
           $704 = ($a$3248$i>>>0)<($z$3247$i>>>0);
           do {
            if ($704) {
             $708 = 1 << $$26$i;
             $709 = (($708) + -1)|0;
             $710 = 1000000000 >>> $$26$i;
             $carry3$0242$i = 0;$d$1241$i = $a$3248$i;
             while(1) {
              $711 = HEAP32[$d$1241$i>>2]|0;
              $712 = $711 & $709;
              $713 = $711 >>> $$26$i;
              $714 = (($713) + ($carry3$0242$i))|0;
              HEAP32[$d$1241$i>>2] = $714;
              $715 = Math_imul($712, $710)|0;
              $716 = (($d$1241$i) + 4|0);
              $717 = ($716>>>0)<($z$3247$i>>>0);
              if ($717) {
               $carry3$0242$i = $715;$d$1241$i = $716;
              } else {
               $$lcssa358 = $715;
               break;
              }
             }
             $718 = HEAP32[$a$3248$i>>2]|0;
             $719 = ($718|0)==(0);
             $720 = (($a$3248$i) + 4|0);
             $$a$3$i = $719 ? $720 : $a$3248$i;
             $721 = ($$lcssa358|0)==(0);
             if ($721) {
              $$a$3312$i = $$a$3$i;$z$4$i = $z$3247$i;
              break;
             }
             $722 = (($z$3247$i) + 4|0);
             HEAP32[$z$3247$i>>2] = $$lcssa358;
             $$a$3312$i = $$a$3$i;$z$4$i = $722;
            } else {
             $705 = HEAP32[$a$3248$i>>2]|0;
             $706 = ($705|0)==(0);
             $707 = (($a$3248$i) + 4|0);
             $$a$3311$i = $706 ? $707 : $a$3248$i;
             $$a$3312$i = $$a$3311$i;$z$4$i = $z$3247$i;
            }
           } while(0);
           $723 = $z$4$i;
           $724 = $$a$3312$i;
           $725 = (($723) - ($724))|0;
           $726 = $725 >> 2;
           $727 = ($726|0)>($669|0);
           if ($727) {
            $728 = (($$a$3312$i) + ($669<<2)|0);
            $z$5$i = $728;
           } else {
            $z$5$i = $z$4$i;
           }
           $729 = HEAP32[$e2$i>>2]|0;
           $730 = (($729) + ($$26$i))|0;
           HEAP32[$e2$i>>2] = $730;
           $731 = ($730|0)<(0);
           if ($731) {
            $701 = $730;$a$3248$i = $$a$3312$i;$z$3247$i = $z$5$i;
           } else {
            $$a$3312$i$lcssa = $$a$3312$i;$z$5$i$lcssa = $z$5$i;
            break;
           }
          }
          $a$3$lcssa$i = $$a$3312$i$lcssa;$z$3$lcssa$i = $z$5$i$lcssa;
         } else {
          $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
         }
        } while(0);
        $732 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
        do {
         if ($732) {
          $733 = $a$3$lcssa$i;
          $734 = (($634) - ($733))|0;
          $735 = $734 >> 2;
          $736 = ($735*9)|0;
          $737 = HEAP32[$a$3$lcssa$i>>2]|0;
          $738 = ($737>>>0)<(10);
          if ($738) {
           $e$1$i = $736;
           break;
          }
          $e$0237$i = $736;$i$0236$i = 10;
          while(1) {
           $739 = ($i$0236$i*10)|0;
           $740 = (($e$0237$i) + 1)|0;
           $741 = ($737>>>0)<($739>>>0);
           if ($741) {
            $$lcssa360 = $740;
            break;
           } else {
            $e$0237$i = $740;$i$0236$i = $739;
           }
          }
          $e$1$i = $$lcssa360;
         } else {
          $e$1$i = 0;
         }
        } while(0);
        $742 = ($477|0)!=(102);
        $743 = $742 ? $e$1$i : 0;
        $744 = (($$p$i) - ($743))|0;
        $745 = ($477|0)==(103);
        $746 = ($$p$i|0)!=(0);
        $$27$i = $746 & $745;
        $$neg159$i = $$27$i << 31 >> 31;
        $747 = (($744) + ($$neg159$i))|0;
        $748 = $z$3$lcssa$i;
        $749 = (($748) - ($634))|0;
        $750 = $749 >> 2;
        $751 = ($750*9)|0;
        $752 = (($751) + -9)|0;
        $753 = ($747|0)<($752|0);
        if ($753) {
         $754 = (($747) + 9216)|0;
         $755 = (($754|0) / 9)&-1;
         $$sum$i = (($755) + -1023)|0;
         $756 = (($$39$i) + ($$sum$i<<2)|0);
         $757 = (($754|0) % 9)&-1;
         $j$0229$i = (($757) + 1)|0;
         $758 = ($j$0229$i|0)<(9);
         if ($758) {
          $i$1230$i = 10;$j$0231$i = $j$0229$i;
          while(1) {
           $759 = ($i$1230$i*10)|0;
           $j$0$i = (($j$0231$i) + 1)|0;
           $exitcond$i = ($j$0231$i|0)==(8);
           if ($exitcond$i) {
            $$lcssa361 = $759;
            break;
           } else {
            $i$1230$i = $759;$j$0231$i = $j$0$i;
           }
          }
          $i$1$lcssa$i = $$lcssa361;
         } else {
          $i$1$lcssa$i = 10;
         }
         $760 = HEAP32[$756>>2]|0;
         $761 = (($760>>>0) % ($i$1$lcssa$i>>>0))&-1;
         $762 = ($761|0)==(0);
         if ($762) {
          $$sum21$i = (($755) + -1022)|0;
          $763 = (($$39$i) + ($$sum21$i<<2)|0);
          $764 = ($763|0)==($z$3$lcssa$i|0);
          if ($764) {
           $a$7$i = $a$3$lcssa$i;$d$3$i = $756;$e$3$i = $e$1$i;
          } else {
           label = 274;
          }
         } else {
          label = 274;
         }
         do {
          if ((label|0) == 274) {
           label = 0;
           $765 = (($760>>>0) / ($i$1$lcssa$i>>>0))&-1;
           $766 = $765 & 1;
           $767 = ($766|0)==(0);
           $$28$i = $767 ? 9007199254740992.0 : 9007199254740994.0;
           $768 = (($i$1$lcssa$i|0) / 2)&-1;
           $769 = ($761>>>0)<($768>>>0);
           do {
            if ($769) {
             $small$0$i = 0.5;
            } else {
             $770 = ($761|0)==($768|0);
             if ($770) {
              $$sum22$i = (($755) + -1022)|0;
              $771 = (($$39$i) + ($$sum22$i<<2)|0);
              $772 = ($771|0)==($z$3$lcssa$i|0);
              if ($772) {
               $small$0$i = 1.0;
               break;
              }
             }
             $small$0$i = 1.5;
            }
           } while(0);
           $773 = ($pl$0$i|0)==(0);
           do {
            if ($773) {
             $round6$1$i = $$28$i;$small$1$i = $small$0$i;
            } else {
             $774 = HEAP8[$prefix$0$i>>0]|0;
             $775 = ($774<<24>>24)==(45);
             if (!($775)) {
              $round6$1$i = $$28$i;$small$1$i = $small$0$i;
              break;
             }
             $776 = -$$28$i;
             $777 = -$small$0$i;
             $round6$1$i = $776;$small$1$i = $777;
            }
           } while(0);
           $778 = (($760) - ($761))|0;
           HEAP32[$756>>2] = $778;
           $779 = $round6$1$i + $small$1$i;
           $780 = $779 != $round6$1$i;
           if (!($780)) {
            $a$7$i = $a$3$lcssa$i;$d$3$i = $756;$e$3$i = $e$1$i;
            break;
           }
           $781 = (($778) + ($i$1$lcssa$i))|0;
           HEAP32[$756>>2] = $781;
           $782 = ($781>>>0)>(999999999);
           if ($782) {
            $a$5223$i = $a$3$lcssa$i;$d$2222$i = $756;
            while(1) {
             $783 = (($d$2222$i) + -4|0);
             HEAP32[$d$2222$i>>2] = 0;
             $784 = ($783>>>0)<($a$5223$i>>>0);
             if ($784) {
              $785 = (($a$5223$i) + -4|0);
              HEAP32[$785>>2] = 0;
              $a$6$i = $785;
             } else {
              $a$6$i = $a$5223$i;
             }
             $786 = HEAP32[$783>>2]|0;
             $787 = (($786) + 1)|0;
             HEAP32[$783>>2] = $787;
             $788 = ($787>>>0)>(999999999);
             if ($788) {
              $a$5223$i = $a$6$i;$d$2222$i = $783;
             } else {
              $$lcssa362 = $783;$a$6$i$lcssa = $a$6$i;
              break;
             }
            }
            $a$5$lcssa$i = $a$6$i$lcssa;$d$2$lcssa$i = $$lcssa362;
           } else {
            $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $756;
           }
           $789 = $a$5$lcssa$i;
           $790 = (($634) - ($789))|0;
           $791 = $790 >> 2;
           $792 = ($791*9)|0;
           $793 = HEAP32[$a$5$lcssa$i>>2]|0;
           $794 = ($793>>>0)<(10);
           if ($794) {
            $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $792;
            break;
           }
           $e$2218$i = $792;$i$2217$i = 10;
           while(1) {
            $795 = ($i$2217$i*10)|0;
            $796 = (($e$2218$i) + 1)|0;
            $797 = ($793>>>0)<($795>>>0);
            if ($797) {
             $$lcssa363 = $796;
             break;
            } else {
             $e$2218$i = $796;$i$2217$i = $795;
            }
           }
           $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $$lcssa363;
          }
         } while(0);
         $798 = (($d$3$i) + 4|0);
         $799 = ($z$3$lcssa$i>>>0)>($798>>>0);
         $$z$3$i = $799 ? $798 : $z$3$lcssa$i;
         $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
        } else {
         $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
        }
        $a$8$ph294$i = $a$8$ph$i;
        $800 = (0 - ($e$4$ph$i))|0;
        $z$6$i = $z$6$ph$i;
        while(1) {
         $801 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
         if (!($801)) {
          $$lcssa283$i = 0;$z$6$i$lcssa = $z$6$i;
          break;
         }
         $802 = (($z$6$i) + -4|0);
         $803 = HEAP32[$802>>2]|0;
         $804 = ($803|0)==(0);
         if ($804) {
          $z$6$i = $802;
         } else {
          $$lcssa283$i = 1;$z$6$i$lcssa = $z$6$i;
          break;
         }
        }
        do {
         if ($745) {
          $805 = ($$p$i|0)==(0);
          $806 = $805&1;
          $$$p$i = (($806) + ($$p$i))|0;
          $807 = ($$$p$i|0)>($e$4$ph$i|0);
          $808 = ($e$4$ph$i|0)>(-5);
          $or$cond6$i = $807 & $808;
          if ($or$cond6$i) {
           $809 = (($t$0) + -1)|0;
           $$neg160$i = (($$$p$i) + -1)|0;
           $810 = (($$neg160$i) - ($e$4$ph$i))|0;
           $$019$i = $809;$$216$i = $810;
          } else {
           $811 = (($t$0) + -2)|0;
           $812 = (($$$p$i) + -1)|0;
           $$019$i = $811;$$216$i = $812;
          }
          $813 = $fl$1$ & 8;
          $814 = ($813|0)==(0);
          if (!($814)) {
           $$120$i = $$019$i;$$317$i = $$216$i;
           break;
          }
          do {
           if ($$lcssa283$i) {
            $815 = (($z$6$i$lcssa) + -4|0);
            $816 = HEAP32[$815>>2]|0;
            $817 = ($816|0)==(0);
            if ($817) {
             $j$2$i = 9;
             break;
            }
            $818 = (($816>>>0) % 10)&-1;
            $819 = ($818|0)==(0);
            if (!($819)) {
             $j$2$i = 0;
             break;
            }
            $i$3213$i = 10;$j$1214$i = 0;
            while(1) {
             $820 = ($i$3213$i*10)|0;
             $821 = (($j$1214$i) + 1)|0;
             $822 = (($816>>>0) % ($820>>>0))&-1;
             $823 = ($822|0)==(0);
             if ($823) {
              $i$3213$i = $820;$j$1214$i = $821;
             } else {
              $$lcssa364 = $821;
              break;
             }
            }
            $j$2$i = $$lcssa364;
           } else {
            $j$2$i = 9;
           }
          } while(0);
          $824 = $$019$i | 32;
          $825 = ($824|0)==(102);
          $826 = $z$6$i$lcssa;
          $827 = (($826) - ($634))|0;
          $828 = $827 >> 2;
          $829 = ($828*9)|0;
          $830 = (($829) + -9)|0;
          if ($825) {
           $831 = (($830) - ($j$2$i))|0;
           $832 = ($831|0)<(0);
           $$29$i = $832 ? 0 : $831;
           $833 = ($$216$i|0)<($$29$i|0);
           $$216$$29$i = $833 ? $$216$i : $$29$i;
           $$120$i = $$019$i;$$317$i = $$216$$29$i;
           break;
          } else {
           $834 = (($830) + ($e$4$ph$i))|0;
           $835 = (($834) - ($j$2$i))|0;
           $836 = ($835|0)<(0);
           $$31$i = $836 ? 0 : $835;
           $837 = ($$216$i|0)<($$31$i|0);
           $$216$$31$i = $837 ? $$216$i : $$31$i;
           $$120$i = $$019$i;$$317$i = $$216$$31$i;
           break;
          }
         } else {
          $$120$i = $t$0;$$317$i = $$p$i;
         }
        } while(0);
        $838 = ($$317$i|0)!=(0);
        if ($838) {
         $842 = 1;
        } else {
         $839 = $fl$1$ & 8;
         $840 = ($839|0)!=(0);
         $842 = $840;
        }
        $841 = $842&1;
        $843 = $$120$i | 32;
        $844 = ($843|0)==(102);
        if ($844) {
         $845 = ($e$4$ph$i|0)>(0);
         $846 = $845 ? $e$4$ph$i : 0;
         $$pn$i = $846;$estr$2$i = 0;
        } else {
         $847 = ($e$4$ph$i|0)<(0);
         $848 = $847 ? $800 : $e$4$ph$i;
         $849 = ($848|0)<(0);
         if ($849) {
          $850 = ($848|0)<(0);
          $851 = $850 << 31 >> 31;
          $$05$i87$i = $7;$852 = $848;$853 = $851;
          while(1) {
           $854 = (___uremdi3(($852|0),($853|0),10,0)|0);
           $855 = tempRet0;
           $856 = $854 | 48;
           $857 = $856&255;
           $858 = (($$05$i87$i) + -1|0);
           HEAP8[$858>>0] = $857;
           $859 = (___udivdi3(($852|0),($853|0),10,0)|0);
           $860 = tempRet0;
           $861 = ($853>>>0)>(9);
           $862 = ($852>>>0)>(4294967295);
           $863 = ($853|0)==(9);
           $864 = $863 & $862;
           $865 = $861 | $864;
           if ($865) {
            $$05$i87$i = $858;$852 = $859;$853 = $860;
           } else {
            $$lcssa365 = $858;$1193 = $859;$1194 = $860;
            break;
           }
          }
          $$0$lcssa$i92$i = $$lcssa365;$$01$lcssa$off0$i93$i = $1193;
         } else {
          $$0$lcssa$i92$i = $7;$$01$lcssa$off0$i93$i = $848;
         }
         $866 = ($$01$lcssa$off0$i93$i|0)==(0);
         if ($866) {
          $estr$1$ph$i = $$0$lcssa$i92$i;
         } else {
          $$12$i95$i = $$0$lcssa$i92$i;$y$03$i94$i = $$01$lcssa$off0$i93$i;
          while(1) {
           $867 = (($y$03$i94$i>>>0) % 10)&-1;
           $868 = $867 | 48;
           $869 = $868&255;
           $870 = (($$12$i95$i) + -1|0);
           HEAP8[$870>>0] = $869;
           $871 = (($y$03$i94$i>>>0) / 10)&-1;
           $872 = ($y$03$i94$i>>>0)<(10);
           if ($872) {
            $$lcssa367 = $870;
            break;
           } else {
            $$12$i95$i = $870;$y$03$i94$i = $871;
           }
          }
          $estr$1$ph$i = $$lcssa367;
         }
         $873 = $estr$1$ph$i;
         $874 = (($9) - ($873))|0;
         $875 = ($874|0)<(2);
         if ($875) {
          $estr$1209$i = $estr$1$ph$i;
          while(1) {
           $876 = (($estr$1209$i) + -1|0);
           HEAP8[$876>>0] = 48;
           $877 = $876;
           $878 = (($9) - ($877))|0;
           $879 = ($878|0)<(2);
           if ($879) {
            $estr$1209$i = $876;
           } else {
            $$lcssa368 = $876;
            break;
           }
          }
          $estr$1$lcssa$i = $$lcssa368;
         } else {
          $estr$1$lcssa$i = $estr$1$ph$i;
         }
         $880 = $e$4$ph$i >> 31;
         $881 = $880 & 2;
         $882 = (($881) + 43)|0;
         $883 = $882&255;
         $884 = (($estr$1$lcssa$i) + -1|0);
         HEAP8[$884>>0] = $883;
         $885 = $$120$i&255;
         $886 = (($estr$1$lcssa$i) + -2|0);
         HEAP8[$886>>0] = $885;
         $887 = $886;
         $888 = (($9) - ($887))|0;
         $$pn$i = $888;$estr$2$i = $886;
        }
        $889 = (($pl$0$i) + 1)|0;
        $890 = (($889) + ($$317$i))|0;
        $l$1$i = (($890) + ($841))|0;
        $891 = (($l$1$i) + ($$pn$i))|0;
        $892 = $fl$1$ & 73728;
        $893 = ($892|0)==(0);
        $894 = ($w$1|0)>($891|0);
        $or$cond$i101$i = $893 & $894;
        if ($or$cond$i101$i) {
         $895 = (($w$1) - ($891))|0;
         $896 = ($895>>>0)>(256);
         $897 = $896 ? 256 : $895;
         _memset(($pad$i|0),32,($897|0))|0;
         $898 = ($895>>>0)>(255);
         if ($898) {
          $$01$i103$i = $895;
          while(1) {
           (___fwritex($pad$i,256,$f)|0);
           $899 = (($$01$i103$i) + -256)|0;
           $900 = ($899>>>0)>(255);
           if ($900) {
            $$01$i103$i = $899;
           } else {
            break;
           }
          }
          $901 = $895 & 255;
          $$0$lcssa$i105$i = $901;
         } else {
          $$0$lcssa$i105$i = $895;
         }
         (___fwritex($pad$i,$$0$lcssa$i105$i,$f)|0);
        }
        (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
        $902 = ($892|0)==(65536);
        $or$cond$i108$i = $902 & $894;
        if ($or$cond$i108$i) {
         $903 = (($w$1) - ($891))|0;
         $904 = ($903>>>0)>(256);
         $905 = $904 ? 256 : $903;
         _memset(($pad$i|0),48,($905|0))|0;
         $906 = ($903>>>0)>(255);
         if ($906) {
          $$01$i110$i = $903;
          while(1) {
           (___fwritex($pad$i,256,$f)|0);
           $907 = (($$01$i110$i) + -256)|0;
           $908 = ($907>>>0)>(255);
           if ($908) {
            $$01$i110$i = $907;
           } else {
            break;
           }
          }
          $909 = $903 & 255;
          $$0$lcssa$i112$i = $909;
         } else {
          $$0$lcssa$i112$i = $903;
         }
         (___fwritex($pad$i,$$0$lcssa$i112$i,$f)|0);
        }
        if ($844) {
         $910 = ($a$8$ph$i>>>0)>($$39$i>>>0);
         $r$0$a$8$i = $910 ? $$39$i : $a$8$ph$i;
         $911 = $634 ^ -1;
         $912 = $a$8$ph294$i ^ -1;
         $913 = ($911>>>0)>($912>>>0);
         $umax$i = $913 ? $911 : $912;
         $914 = (3 - ($umax$i))|0;
         $uglygep$i = (($$39$i) + 1|0);
         $uglygep296$i = $uglygep$i;
         $915 = ($914>>>0)>($uglygep296$i>>>0);
         $umax297$i = $915 ? $914 : $uglygep296$i;
         $umax297298299$i = $umax297$i;
         $uglygep300$i = (($umax297298299$i) + ($umax$i)|0);
         $uglygep300301$i = $uglygep300$i;
         $916 = $umax$i ^ -1;
         $d$4199$i = $r$0$a$8$i;
         while(1) {
          $917 = HEAP32[$d$4199$i>>2]|0;
          $918 = ($917|0)==(0);
          if ($918) {
           $$1$lcssa$i120$i = $14;
          } else {
           $$12$i118$i = $14;$y$03$i117$i = $917;
           while(1) {
            $919 = (($y$03$i117$i>>>0) % 10)&-1;
            $920 = $919 | 48;
            $921 = $920&255;
            $922 = (($$12$i118$i) + -1|0);
            HEAP8[$922>>0] = $921;
            $923 = (($y$03$i117$i>>>0) / 10)&-1;
            $924 = ($y$03$i117$i>>>0)<(10);
            if ($924) {
             $$lcssa372 = $922;
             break;
            } else {
             $$12$i118$i = $922;$y$03$i117$i = $923;
            }
           }
           $$1$lcssa$i120$i = $$lcssa372;
          }
          $925 = ($d$4199$i|0)==($r$0$a$8$i|0);
          do {
           if ($925) {
            $929 = ($$1$lcssa$i120$i|0)==($14|0);
            if (!($929)) {
             $s7$1$i = $$1$lcssa$i120$i;
             break;
            }
            HEAP8[$16>>0] = 48;
            $s7$1$i = $16;
           } else {
            $926 = ($$1$lcssa$i120$i>>>0)>($buf$i>>>0);
            if (!($926)) {
             $s7$1$i = $$1$lcssa$i120$i;
             break;
            }
            $s7$0196$i = $$1$lcssa$i120$i;
            while(1) {
             $927 = (($s7$0196$i) + -1|0);
             HEAP8[$927>>0] = 48;
             $928 = ($927>>>0)>($buf$i>>>0);
             if ($928) {
              $s7$0196$i = $927;
             } else {
              $$lcssa373 = $927;
              break;
             }
            }
            $s7$1$i = $$lcssa373;
           }
          } while(0);
          $930 = $s7$1$i;
          $931 = (($15) - ($930))|0;
          (___fwritex($s7$1$i,$931,$f)|0);
          $932 = (($d$4199$i) + 4|0);
          $933 = ($932>>>0)>($$39$i>>>0);
          if ($933) {
           $$lcssa374 = $932;
           break;
          } else {
           $d$4199$i = $932;
          }
         }
         $934 = $uglygep300301$i & -4;
         $935 = (($934) + ($916))|0;
         $936 = $935;
         $$not$i = $838 ^ 1;
         $937 = $fl$1$ & 8;
         $938 = ($937|0)==(0);
         $or$cond35$i = $938 & $$not$i;
         if (!($or$cond35$i)) {
          (___fwritex(50280,1,$f)|0);
         }
         $939 = ($$lcssa374>>>0)<($z$6$i$lcssa>>>0);
         $940 = ($$317$i|0)>(0);
         $or$cond10191$i = $940 & $939;
         if ($or$cond10191$i) {
          $$418193$i = $$317$i;$955 = $936;$d$5192$i = $$lcssa374;
          while(1) {
           $941 = HEAP32[$d$5192$i>>2]|0;
           $942 = ($941|0)==(0);
           if ($942) {
            $s8$0188$i$ph = $14;
            label = 361;
           } else {
            $$12$i127$i = $14;$y$03$i126$i = $941;
            while(1) {
             $943 = (($y$03$i126$i>>>0) % 10)&-1;
             $944 = $943 | 48;
             $945 = $944&255;
             $946 = (($$12$i127$i) + -1|0);
             HEAP8[$946>>0] = $945;
             $947 = (($y$03$i126$i>>>0) / 10)&-1;
             $948 = ($y$03$i126$i>>>0)<(10);
             if ($948) {
              $$lcssa375 = $946;
              break;
             } else {
              $$12$i127$i = $946;$y$03$i126$i = $947;
             }
            }
            $949 = ($$lcssa375>>>0)>($buf$i>>>0);
            if ($949) {
             $s8$0188$i$ph = $$lcssa375;
             label = 361;
            } else {
             $s8$0$lcssa$i = $$lcssa375;
            }
           }
           if ((label|0) == 361) {
            label = 0;
            $s8$0188$i = $s8$0188$i$ph;
            while(1) {
             $950 = (($s8$0188$i) + -1|0);
             HEAP8[$950>>0] = 48;
             $951 = ($950>>>0)>($buf$i>>>0);
             if ($951) {
              $s8$0188$i = $950;
             } else {
              $$lcssa376 = $950;
              break;
             }
            }
            $s8$0$lcssa$i = $$lcssa376;
           }
           $952 = ($$418193$i|0)>(9);
           $953 = $952 ? 9 : $$418193$i;
           (___fwritex($s8$0$lcssa$i,$953,$f)|0);
           $954 = (($955) + 8|0);
           $956 = (($$418193$i) + -9)|0;
           $957 = ($954>>>0)<($z$6$i$lcssa>>>0);
           $or$cond10$i = $952 & $957;
           if ($or$cond10$i) {
            $955$phi = $d$5192$i;$$418193$i = $956;$d$5192$i = $954;$955 = $955$phi;
           } else {
            $$lcssa377 = $956;
            break;
           }
          }
          $$418$lcssa$i = $$lcssa377;
         } else {
          $$418$lcssa$i = $$317$i;
         }
         $958 = ($$418$lcssa$i|0)>(0);
         if ($958) {
          $959 = ($$418$lcssa$i>>>0)>(256);
          $960 = $959 ? 256 : $$418$lcssa$i;
          _memset(($pad$i|0),48,($960|0))|0;
          $961 = ($$418$lcssa$i>>>0)>(255);
          if ($961) {
           $$01$i134$i = $$418$lcssa$i;
           while(1) {
            (___fwritex($pad$i,256,$f)|0);
            $962 = (($$01$i134$i) + -256)|0;
            $963 = ($962>>>0)>(255);
            if ($963) {
             $$01$i134$i = $962;
            } else {
             break;
            }
           }
           $964 = $$418$lcssa$i & 255;
           $$0$lcssa$i136$i = $964;
          } else {
           $$0$lcssa$i136$i = $$418$lcssa$i;
          }
          (___fwritex($pad$i,$$0$lcssa$i136$i,$f)|0);
         }
        } else {
         $965 = (($a$8$ph$i) + 4|0);
         $z$6$$i = $$lcssa283$i ? $z$6$i$lcssa : $965;
         $966 = ($$317$i|0)>(-1);
         do {
          if ($966) {
           $967 = $fl$1$ & 8;
           $968 = ($967|0)==(0);
           $$5205$i = $$317$i;$d$6204$i = $a$8$ph$i;
           while(1) {
            $969 = HEAP32[$d$6204$i>>2]|0;
            $970 = ($969|0)==(0);
            if ($970) {
             label = 380;
            } else {
             $$12$i142$i = $14;$y$03$i141$i = $969;
             while(1) {
              $971 = (($y$03$i141$i>>>0) % 10)&-1;
              $972 = $971 | 48;
              $973 = $972&255;
              $974 = (($$12$i142$i) + -1|0);
              HEAP8[$974>>0] = $973;
              $975 = (($y$03$i141$i>>>0) / 10)&-1;
              $976 = ($y$03$i141$i>>>0)<(10);
              if ($976) {
               $$12$i142$i$lcssa = $$12$i142$i;$$lcssa369 = $974;
               break;
              } else {
               $$12$i142$i = $974;$y$03$i141$i = $975;
              }
             }
             $977 = ($$lcssa369|0)==($14|0);
             if ($977) {
              label = 380;
             } else {
              $1195 = $$12$i142$i$lcssa;$s9$0$i = $$lcssa369;
             }
            }
            if ((label|0) == 380) {
             label = 0;
             HEAP8[$16>>0] = 48;
             $1195 = $14;$s9$0$i = $16;
            }
            $978 = ($d$6204$i|0)==($a$8$ph$i|0);
            do {
             if ($978) {
              (___fwritex($s9$0$i,1,$f)|0);
              $982 = ($$5205$i|0)<(1);
              $or$cond37$i = $968 & $982;
              if ($or$cond37$i) {
               $s9$2$i = $1195;
               break;
              }
              (___fwritex(50280,1,$f)|0);
              $s9$2$i = $1195;
             } else {
              $979 = ($s9$0$i>>>0)>($buf$i>>>0);
              if (!($979)) {
               $s9$2$i = $s9$0$i;
               break;
              }
              $s9$1200$i = $s9$0$i;
              while(1) {
               $980 = (($s9$1200$i) + -1|0);
               HEAP8[$980>>0] = 48;
               $981 = ($980>>>0)>($buf$i>>>0);
               if ($981) {
                $s9$1200$i = $980;
               } else {
                $$lcssa370 = $980;
                break;
               }
              }
              $s9$2$i = $$lcssa370;
             }
            } while(0);
            $983 = $s9$2$i;
            $984 = (($15) - ($983))|0;
            $985 = ($$5205$i|0)>($984|0);
            $$$5$i = $985 ? $984 : $$5205$i;
            (___fwritex($s9$2$i,$$$5$i,$f)|0);
            $986 = (($$5205$i) - ($984))|0;
            $987 = (($d$6204$i) + 4|0);
            $988 = ($987>>>0)<($z$6$$i>>>0);
            $989 = ($986|0)>(-1);
            $or$cond12$i = $988 & $989;
            if ($or$cond12$i) {
             $$5205$i = $986;$d$6204$i = $987;
            } else {
             $$lcssa371 = $986;
             break;
            }
           }
           $990 = ($$lcssa371|0)>(0);
           if (!($990)) {
            break;
           }
           $991 = ($$lcssa371>>>0)>(256);
           $992 = $991 ? 256 : $$lcssa371;
           _memset(($pad$i|0),48,($992|0))|0;
           $993 = ($$lcssa371>>>0)>(255);
           if ($993) {
            $$01$i149$i = $$lcssa371;
            while(1) {
             (___fwritex($pad$i,256,$f)|0);
             $994 = (($$01$i149$i) + -256)|0;
             $995 = ($994>>>0)>(255);
             if ($995) {
              $$01$i149$i = $994;
             } else {
              break;
             }
            }
            $996 = $$lcssa371 & 255;
            $$0$lcssa$i151$i = $996;
           } else {
            $$0$lcssa$i151$i = $$lcssa371;
           }
           (___fwritex($pad$i,$$0$lcssa$i151$i,$f)|0);
          } else {
          }
         } while(0);
         $997 = $estr$2$i;
         $998 = (($9) - ($997))|0;
         (___fwritex($estr$2$i,$998,$f)|0);
        }
        $999 = ($892|0)==(8192);
        $or$cond$i$i = $999 & $894;
        if ($or$cond$i$i) {
         $1000 = (($w$1) - ($891))|0;
         $1001 = ($1000>>>0)>(256);
         $1002 = $1001 ? 256 : $1000;
         _memset(($pad$i|0),32,($1002|0))|0;
         $1003 = ($1000>>>0)>(255);
         if ($1003) {
          $$01$i$i = $1000;
          while(1) {
           (___fwritex($pad$i,256,$f)|0);
           $1004 = (($$01$i$i) + -256)|0;
           $1005 = ($1004>>>0)>(255);
           if ($1005) {
            $$01$i$i = $1004;
           } else {
            break;
           }
          }
          $1006 = $1000 & 255;
          $$0$lcssa$i$i = $1006;
         } else {
          $$0$lcssa$i$i = $1000;
         }
         (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
        }
        $w$38$i = $894 ? $w$1 : $891;
        $$0$i = $w$38$i;
       } else {
        $447 = $t$0 & 32;
        $448 = ($447|0)!=(0);
        $449 = $448 ? 50232 : 50240;
        $450 = ($$013$i != $$013$i) | (0.0 != 0.0);
        if ($450) {
         $451 = $448 ? 50248 : 50256;
         $pl$1$i = 0;$s1$0$i = $451;
        } else {
         $pl$1$i = $pl$0$i;$s1$0$i = $449;
        }
        $452 = (($pl$1$i) + 3)|0;
        $453 = $fl$1$ & 8192;
        $454 = ($453|0)==(0);
        $455 = ($w$1|0)>($452|0);
        $or$cond$i43$i = $454 & $455;
        if ($or$cond$i43$i) {
         $456 = (($w$1) - ($452))|0;
         $457 = ($456>>>0)>(256);
         $458 = $457 ? 256 : $456;
         _memset(($pad$i|0),32,($458|0))|0;
         $459 = ($456>>>0)>(255);
         if ($459) {
          $$01$i45$i = $456;
          while(1) {
           (___fwritex($pad$i,256,$f)|0);
           $460 = (($$01$i45$i) + -256)|0;
           $461 = ($460>>>0)>(255);
           if ($461) {
            $$01$i45$i = $460;
           } else {
            break;
           }
          }
          $462 = $456 & 255;
          $$0$lcssa$i47$i = $462;
         } else {
          $$0$lcssa$i47$i = $456;
         }
         (___fwritex($pad$i,$$0$lcssa$i47$i,$f)|0);
        }
        (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
        (___fwritex($s1$0$i,3,$f)|0);
        $463 = $fl$1$ & 73728;
        $464 = ($463|0)==(8192);
        $or$cond$i50$i = $464 & $455;
        if ($or$cond$i50$i) {
         $465 = (($w$1) - ($452))|0;
         $466 = ($465>>>0)>(256);
         $467 = $466 ? 256 : $465;
         _memset(($pad$i|0),32,($467|0))|0;
         $468 = ($465>>>0)>(255);
         if ($468) {
          $$01$i52$i = $465;
          while(1) {
           (___fwritex($pad$i,256,$f)|0);
           $469 = (($$01$i52$i) + -256)|0;
           $470 = ($469>>>0)>(255);
           if ($470) {
            $$01$i52$i = $469;
           } else {
            break;
           }
          }
          $471 = $465 & 255;
          $$0$lcssa$i54$i = $471;
         } else {
          $$0$lcssa$i54$i = $465;
         }
         (___fwritex($pad$i,$$0$lcssa$i54$i,$f)|0);
        }
        $w$$i = $455 ? $w$1 : $452;
        $$0$i = $w$$i;
       }
      } while(0);
      $$be = $1182;$$be341 = $294;$$be342 = $267;$l$0$be = $$0$i;$l10n$0$be = $l10n$3;
      break L24;
      break;
     }
     case 111:  {
      $315 = ($267|0)==(0);
      $316 = ($294|0)==(0);
      $317 = $315 & $316;
      if ($317) {
       $$0$lcssa$i52 = $2;
      } else {
       $$03$i49 = $2;$319 = $267;$323 = $294;
       while(1) {
        $318 = $319 & 7;
        $320 = $318 | 48;
        $321 = $320&255;
        $322 = (($$03$i49) + -1|0);
        HEAP8[$322>>0] = $321;
        $324 = (_bitshift64Lshr(($319|0),($323|0),3)|0);
        $325 = tempRet0;
        $326 = ($324|0)==(0);
        $327 = ($325|0)==(0);
        $328 = $326 & $327;
        if ($328) {
         $$lcssa385 = $322;
         break;
        } else {
         $$03$i49 = $322;$319 = $324;$323 = $325;
        }
       }
       $$0$lcssa$i52 = $$lcssa385;
      }
      $329 = $fl$1$ & 8;
      $330 = ($329|0)==(0);
      $or$cond19 = $330 | $317;
      $$25 = $or$cond19 ? 50184 : ((50184 + 5|0));
      $331 = $or$cond19&1;
      $$26 = $331 ^ 1;
      $369 = $267;$371 = $294;$a$0 = $$0$lcssa$i52;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$26;$prefix$1 = $$25;
      label = 104;
      break;
     }
     case 83:  {
      $393 = $267;
      $394 = ($p$0|0)==(0);
      if ($394) {
       $1189 = $267;$1190 = $393;$i$0$lcssa272 = 0;
       label = 119;
      } else {
       $1187 = $393;$1188 = $267;$p$4271 = $p$0;
       label = 114;
      }
      break;
     }
     case 117:  {
      $339 = $294;$341 = $267;$pl$0 = 0;$prefix$0 = 50184;
      label = 96;
      break;
     }
     case 99:  {
      $381 = $267&255;
      HEAP8[$4>>0] = $381;
      $1183 = $294;$1184 = $267;$a$2 = $4;$fl$6 = $266;$p$5 = 1;$pl$2 = 0;$prefix$2 = 50184;$z$2 = $2;
      break;
     }
     case 88: case 120:  {
      $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
      label = 82;
      break;
     }
     case 112:  {
      $289 = ($p$0>>>0)>(8);
      $290 = $289 ? $p$0 : 8;
      $291 = $fl$1$ | 8;
      $fl$3 = $291;$p$1 = $290;$t$1 = 120;
      label = 82;
      break;
     }
     case 109:  {
      $382 = (___errno_location()|0);
      $383 = HEAP32[$382>>2]|0;
      $384 = (_strerror(($383|0))|0);
      $a$1 = $384;
      label = 109;
      break;
     }
     case 115:  {
      $385 = $267;
      $386 = ($267|0)==(0);
      $$21 = $386 ? 50200 : $385;
      $a$1 = $$21;
      label = 109;
      break;
     }
     case 67:  {
      HEAP32[$wc>>2] = $267;
      HEAP32[$5>>2] = 0;
      $1187 = $wc;$1188 = $6;$p$4271 = -1;
      label = 114;
      break;
     }
     case 110:  {
      switch ($st$0$lcssa351|0) {
      case 7:  {
       $282 = ($cnt$1|0)<(0);
       $283 = $282 << 31 >> 31;
       $284 = $267;
       $285 = $284;
       $286 = $285;
       HEAP32[$286>>2] = $cnt$1;
       $287 = (($285) + 4)|0;
       $288 = $287;
       HEAP32[$288>>2] = $283;
       $$be = $1182;$$be341 = $294;$$be342 = $267;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 4:  {
       $279 = $cnt$1&255;
       $280 = $267;
       HEAP8[$280>>0] = $279;
       $$be = $1182;$$be341 = $294;$$be342 = $267;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 1:  {
       $269 = $267;
       HEAP32[$269>>2] = $cnt$1;
       $$be = $1182;$$be341 = $294;$$be342 = $267;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 3:  {
       $277 = $cnt$1&65535;
       $278 = $267;
       HEAP16[$278>>1] = $277;
       $$be = $1182;$$be341 = $294;$$be342 = $267;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 6:  {
       $281 = $267;
       HEAP32[$281>>2] = $cnt$1;
       $$be = $1182;$$be341 = $294;$$be342 = $267;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 2:  {
       $270 = ($cnt$1|0)<(0);
       $271 = $270 << 31 >> 31;
       $272 = $267;
       $273 = $272;
       $274 = $273;
       HEAP32[$274>>2] = $cnt$1;
       $275 = (($273) + 4)|0;
       $276 = $275;
       HEAP32[$276>>2] = $271;
       $$be = $1182;$$be341 = $294;$$be342 = $267;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 0:  {
       $268 = $267;
       HEAP32[$268>>2] = $cnt$1;
       $$be = $1182;$$be341 = $294;$$be342 = $267;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      default: {
       $$be = $1182;$$be341 = $294;$$be342 = $267;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
      }
      }
      break;
     }
     case 105: case 100:  {
      $332 = ($294|0)<(0);
      if ($332) {
       $333 = (_i64Subtract(0,0,($267|0),($294|0))|0);
       $334 = tempRet0;
       $339 = $334;$341 = $333;$pl$0 = 1;$prefix$0 = 50184;
       label = 96;
       break L96;
      }
      $335 = $fl$1$ & 2048;
      $336 = ($335|0)==(0);
      if ($336) {
       $337 = $fl$1$ & 1;
       $338 = ($337|0)==(0);
       $$ = $338 ? 50184 : ((50184 + 2|0));
       $339 = $294;$341 = $267;$pl$0 = $337;$prefix$0 = $$;
       label = 96;
      } else {
       $339 = $294;$341 = $267;$pl$0 = 1;$prefix$0 = ((50184 + 1|0));
       label = 96;
      }
      break;
     }
     default: {
      $1183 = $294;$1184 = $267;$a$2 = $23;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 50184;$z$2 = $2;
     }
     }
    } while(0);
    do {
     if ((label|0) == 82) {
      label = 0;
      $292 = $t$1 & 32;
      $293 = ($267|0)==(0);
      $295 = ($294|0)==(0);
      $296 = $293 & $295;
      if ($296) {
       $369 = $267;$371 = $294;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 50184;
       label = 104;
      } else {
       $$012$i = $2;$298 = $267;$305 = $294;
       while(1) {
        $297 = $298 & 15;
        $299 = (50264 + ($297)|0);
        $300 = HEAP8[$299>>0]|0;
        $301 = $300&255;
        $302 = $301 | $292;
        $303 = $302&255;
        $304 = (($$012$i) + -1|0);
        HEAP8[$304>>0] = $303;
        $306 = (_bitshift64Lshr(($298|0),($305|0),4)|0);
        $307 = tempRet0;
        $308 = ($306|0)==(0);
        $309 = ($307|0)==(0);
        $310 = $308 & $309;
        if ($310) {
         $$lcssa386 = $304;
         break;
        } else {
         $$012$i = $304;$298 = $306;$305 = $307;
        }
       }
       $311 = $fl$3 & 8;
       $312 = ($311|0)==(0);
       if ($312) {
        $369 = $267;$371 = $294;$a$0 = $$lcssa386;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 50184;
        label = 104;
       } else {
        $313 = $t$1 >> 4;
        $314 = (50184 + ($313)|0);
        $369 = $267;$371 = $294;$a$0 = $$lcssa386;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $314;
        label = 104;
       }
      }
     }
     else if ((label|0) == 96) {
      label = 0;
      $340 = ($339>>>0)>(0);
      $342 = ($341>>>0)>(4294967295);
      $343 = ($339|0)==(0);
      $344 = $343 & $342;
      $345 = $340 | $344;
      if ($345) {
       $$05$i = $2;$346 = $341;$347 = $339;
       while(1) {
        $348 = (___uremdi3(($346|0),($347|0),10,0)|0);
        $349 = tempRet0;
        $350 = $348 | 48;
        $351 = $350&255;
        $352 = (($$05$i) + -1|0);
        HEAP8[$352>>0] = $351;
        $353 = (___udivdi3(($346|0),($347|0),10,0)|0);
        $354 = tempRet0;
        $355 = ($347>>>0)>(9);
        $356 = ($346>>>0)>(4294967295);
        $357 = ($347|0)==(9);
        $358 = $357 & $356;
        $359 = $355 | $358;
        if ($359) {
         $$05$i = $352;$346 = $353;$347 = $354;
        } else {
         $$lcssa382 = $352;$1185 = $353;$1186 = $354;
         break;
        }
       }
       $$0$lcssa$i54 = $$lcssa382;$$01$lcssa$off0$i = $1185;
      } else {
       $$0$lcssa$i54 = $2;$$01$lcssa$off0$i = $341;
      }
      $360 = ($$01$lcssa$off0$i|0)==(0);
      if ($360) {
       $369 = $341;$371 = $339;$a$0 = $$0$lcssa$i54;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 104;
      } else {
       $$12$i = $$0$lcssa$i54;$y$03$i = $$01$lcssa$off0$i;
       while(1) {
        $361 = (($y$03$i>>>0) % 10)&-1;
        $362 = $361 | 48;
        $363 = $362&255;
        $364 = (($$12$i) + -1|0);
        HEAP8[$364>>0] = $363;
        $365 = (($y$03$i>>>0) / 10)&-1;
        $366 = ($y$03$i>>>0)<(10);
        if ($366) {
         $$lcssa384 = $364;
         break;
        } else {
         $$12$i = $364;$y$03$i = $365;
        }
       }
       $369 = $341;$371 = $339;$a$0 = $$lcssa384;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 104;
      }
     }
     else if ((label|0) == 109) {
      label = 0;
      $387 = (_memchr($a$1,0,$p$0)|0);
      $388 = ($387|0)==(0|0);
      if ($388) {
       $389 = (($a$1) + ($p$0)|0);
       $1183 = $294;$1184 = $267;$a$2 = $a$1;$fl$6 = $266;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 50184;$z$2 = $389;
       break;
      } else {
       $390 = $387;
       $391 = $a$1;
       $392 = (($390) - ($391))|0;
       $1183 = $294;$1184 = $267;$a$2 = $a$1;$fl$6 = $266;$p$5 = $392;$pl$2 = 0;$prefix$2 = 50184;$z$2 = $387;
       break;
      }
     }
     else if ((label|0) == 114) {
      label = 0;
      $i$0176 = 0;$l$1175 = 0;$ws$0177 = $1187;
      while(1) {
       $395 = HEAP32[$ws$0177>>2]|0;
       $396 = ($395|0)==(0);
       if ($396) {
        $i$0$lcssa = $i$0176;$l$2 = $l$1175;
        break;
       }
       $397 = (_wctomb($mb,$395)|0);
       $398 = ($397|0)<(0);
       $399 = (($p$4271) - ($i$0176))|0;
       $400 = ($397>>>0)>($399>>>0);
       $or$cond23 = $398 | $400;
       if ($or$cond23) {
        $i$0$lcssa = $i$0176;$l$2 = $397;
        break;
       }
       $401 = (($ws$0177) + 4|0);
       $402 = (($397) + ($i$0176))|0;
       $403 = ($p$4271>>>0)>($402>>>0);
       if ($403) {
        $i$0176 = $402;$l$1175 = $397;$ws$0177 = $401;
       } else {
        $i$0$lcssa = $402;$l$2 = $397;
        break;
       }
      }
      $404 = ($l$2|0)<(0);
      if ($404) {
       $$0$ph340 = -1;
       label = 453;
       break L1;
      } else {
       $1189 = $1188;$1190 = $1187;$i$0$lcssa272 = $i$0$lcssa;
       label = 119;
      }
     }
    } while(0);
    if ((label|0) == 104) {
     label = 0;
     $367 = ($p$2|0)>(-1);
     $368 = $fl$4 & -65537;
     $$fl$4 = $367 ? $368 : $fl$4;
     $370 = ($369|0)!=(0);
     $372 = ($371|0)!=(0);
     $373 = $370 | $372;
     $374 = ($p$2|0)!=(0);
     $or$cond = $373 | $374;
     if ($or$cond) {
      $375 = $a$0;
      $376 = (($3) - ($375))|0;
      $377 = $373&1;
      $378 = $377 ^ 1;
      $379 = (($378) + ($376))|0;
      $380 = ($p$2|0)>($379|0);
      $p$2$ = $380 ? $p$2 : $379;
      $1183 = $371;$1184 = $369;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
     } else {
      $1183 = $371;$1184 = $369;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
     }
    }
    else if ((label|0) == 119) {
     label = 0;
     $405 = $fl$1$ & 73728;
     $406 = ($405|0)==(0);
     $407 = ($w$1|0)>($i$0$lcssa272|0);
     $or$cond$i65 = $406 & $407;
     if ($or$cond$i65) {
      $408 = (($w$1) - ($i$0$lcssa272))|0;
      $409 = ($408>>>0)>(256);
      $410 = $409 ? 256 : $408;
      _memset(($pad$i|0),32,($410|0))|0;
      $411 = ($408>>>0)>(255);
      if ($411) {
       $$01$i67 = $408;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $412 = (($$01$i67) + -256)|0;
        $413 = ($412>>>0)>(255);
        if ($413) {
         $$01$i67 = $412;
        } else {
         break;
        }
       }
       $414 = $408 & 255;
       $$0$lcssa$i69 = $414;
      } else {
       $$0$lcssa$i69 = $408;
      }
      (___fwritex($pad$i,$$0$lcssa$i69,$f)|0);
     }
     $415 = ($i$0$lcssa272|0)==(0);
     if (!($415)) {
      $i$1187 = 0;$ws$1188 = $1190;
      while(1) {
       $416 = HEAP32[$ws$1188>>2]|0;
       $417 = ($416|0)==(0);
       if ($417) {
        break;
       }
       $418 = (_wctomb($mb,$416)|0);
       $419 = (($418) + ($i$1187))|0;
       $420 = ($419|0)>($i$0$lcssa272|0);
       if ($420) {
        break;
       }
       $421 = (($ws$1188) + 4|0);
       (___fwritex($mb,$418,$f)|0);
       $422 = ($419>>>0)<($i$0$lcssa272>>>0);
       if ($422) {
        $i$1187 = $419;$ws$1188 = $421;
       } else {
        break;
       }
      }
     }
     $423 = ($405|0)==(8192);
     $or$cond$i72 = $423 & $407;
     if ($or$cond$i72) {
      $424 = (($w$1) - ($i$0$lcssa272))|0;
      $425 = ($424>>>0)>(256);
      $426 = $425 ? 256 : $424;
      _memset(($pad$i|0),32,($426|0))|0;
      $427 = ($424>>>0)>(255);
      if ($427) {
       $$01$i74 = $424;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $428 = (($$01$i74) + -256)|0;
        $429 = ($428>>>0)>(255);
        if ($429) {
         $$01$i74 = $428;
        } else {
         break;
        }
       }
       $430 = $424 & 255;
       $$0$lcssa$i76 = $430;
      } else {
       $$0$lcssa$i76 = $424;
      }
      (___fwritex($pad$i,$$0$lcssa$i76,$f)|0);
     }
     $431 = $407 ? $w$1 : $i$0$lcssa272;
     $$be = $1182;$$be341 = $294;$$be342 = $1189;$l$0$be = $431;$l10n$0$be = $l10n$3;
     break;
    }
    $1007 = $z$2;
    $1008 = $a$2;
    $1009 = (($1007) - ($1008))|0;
    $1010 = ($p$5|0)<($1009|0);
    $$p$5 = $1010 ? $1009 : $p$5;
    $1011 = (($pl$2) + ($$p$5))|0;
    $1012 = ($w$1|0)<($1011|0);
    $w$2 = $1012 ? $1011 : $w$1;
    $1013 = $fl$6 & 73728;
    $1014 = ($1013|0)==(0);
    $1015 = ($w$2|0)>($1011|0);
    $or$cond$i82 = $1014 & $1015;
    if ($or$cond$i82) {
     $1016 = (($w$2) - ($1011))|0;
     $1017 = ($1016>>>0)>(256);
     $1018 = $1017 ? 256 : $1016;
     _memset(($pad$i|0),32,($1018|0))|0;
     $1019 = ($1016>>>0)>(255);
     if ($1019) {
      $$01$i84 = $1016;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $1020 = (($$01$i84) + -256)|0;
       $1021 = ($1020>>>0)>(255);
       if ($1021) {
        $$01$i84 = $1020;
       } else {
        break;
       }
      }
      $1022 = $1016 & 255;
      $$0$lcssa$i86 = $1022;
     } else {
      $$0$lcssa$i86 = $1016;
     }
     (___fwritex($pad$i,$$0$lcssa$i86,$f)|0);
    }
    (___fwritex($prefix$2,$pl$2,$f)|0);
    $1023 = ($1013|0)==(65536);
    $or$cond$i58 = $1023 & $1015;
    if ($or$cond$i58) {
     $1024 = (($w$2) - ($1011))|0;
     $1025 = ($1024>>>0)>(256);
     $1026 = $1025 ? 256 : $1024;
     _memset(($pad$i|0),48,($1026|0))|0;
     $1027 = ($1024>>>0)>(255);
     if ($1027) {
      $$01$i60 = $1024;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $1028 = (($$01$i60) + -256)|0;
       $1029 = ($1028>>>0)>(255);
       if ($1029) {
        $$01$i60 = $1028;
       } else {
        break;
       }
      }
      $1030 = $1024 & 255;
      $$0$lcssa$i62 = $1030;
     } else {
      $$0$lcssa$i62 = $1024;
     }
     (___fwritex($pad$i,$$0$lcssa$i62,$f)|0);
    }
    $1031 = ($$p$5|0)>($1009|0);
    if ($1031) {
     $1032 = (($$p$5) - ($1009))|0;
     $1033 = ($1032>>>0)>(256);
     $1034 = $1033 ? 256 : $1032;
     _memset(($pad$i|0),48,($1034|0))|0;
     $1035 = ($1032>>>0)>(255);
     if ($1035) {
      $$01$i45 = $1032;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $1036 = (($$01$i45) + -256)|0;
       $1037 = ($1036>>>0)>(255);
       if ($1037) {
        $$01$i45 = $1036;
       } else {
        break;
       }
      }
      $1038 = $1032 & 255;
      $$0$lcssa$i47 = $1038;
     } else {
      $$0$lcssa$i47 = $1032;
     }
     (___fwritex($pad$i,$$0$lcssa$i47,$f)|0);
    }
    (___fwritex($a$2,$1009,$f)|0);
    $1039 = ($1013|0)==(8192);
    $or$cond$i = $1039 & $1015;
    if ($or$cond$i) {
     $1040 = (($w$2) - ($1011))|0;
     $1041 = ($1040>>>0)>(256);
     $1042 = $1041 ? 256 : $1040;
     _memset(($pad$i|0),32,($1042|0))|0;
     $1043 = ($1040>>>0)>(255);
     if ($1043) {
      $$01$i = $1040;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $1044 = (($$01$i) + -256)|0;
       $1045 = ($1044>>>0)>(255);
       if ($1045) {
        $$01$i = $1044;
       } else {
        break;
       }
      }
      $1046 = $1040 & 255;
      $$0$lcssa$i = $1046;
     } else {
      $$0$lcssa$i = $1040;
     }
     (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
    }
    $$be = $1182;$$be341 = $1183;$$be342 = $1184;$l$0$be = $w$2;$l10n$0$be = $l10n$3;
   } else {
    $$be = $$lcssa107;$$be341 = $1175;$$be342 = $1176;$l$0$be = $37;$l10n$0$be = $l10n$0;
   }
  } while(0);
  $1175 = $$be341;$1176 = $$be342;$23 = $$be;$cnt$0 = $cnt$1;$l$0 = $l$0$be;$l10n$0 = $l10n$0$be;
 }
 if ((label|0) == 429) {
  $1047 = ($f|0)==(0|0);
  if (!($1047)) {
   $$0 = $cnt$1$lcssa;
   STACKTOP = sp;return ($$0|0);
  }
  $1048 = ($l10n$0$lcssa|0)==(0);
  if ($1048) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $i$2163 = 1;
  while(1) {
   $1049 = (($nl_type) + ($i$2163<<2)|0);
   $1050 = HEAP32[$1049>>2]|0;
   $1051 = ($1050|0)==(0);
   if ($1051) {
    $i$2163$lcssa = $i$2163;
    break;
   }
   $1053 = (($nl_arg) + ($i$2163<<3)|0);
   $1054 = ($1050>>>0)>(20);
   L614: do {
    if (!($1054)) {
     do {
      switch ($1050|0) {
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1143 = $arglist_current56;
       $1144 = (0 + 4|0);
       $expanded197 = $1144;
       $expanded196 = (($expanded197) - 1)|0;
       $1145 = (($1143) + ($expanded196))|0;
       $1146 = (0 + 4|0);
       $expanded201 = $1146;
       $expanded200 = (($expanded201) - 1)|0;
       $expanded199 = $expanded200 ^ -1;
       $1147 = $1145 & $expanded199;
       $1148 = $1147;
       $1149 = HEAP32[$1148>>2]|0;
       $arglist_next57 = (($1148) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1149 & 255;
       $1150 = $1053;
       $1151 = $1150;
       HEAP32[$1151>>2] = $$mask$i;
       $1152 = (($1150) + 4)|0;
       $1153 = $1152;
       HEAP32[$1153>>2] = 0;
       break L614;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $1075 = $arglist_current41;
       $1076 = (0 + 4|0);
       $expanded162 = $1076;
       $expanded161 = (($expanded162) - 1)|0;
       $1077 = (($1075) + ($expanded161))|0;
       $1078 = (0 + 4|0);
       $expanded166 = $1078;
       $expanded165 = (($expanded166) - 1)|0;
       $expanded164 = $expanded165 ^ -1;
       $1079 = $1077 & $expanded164;
       $1080 = $1079;
       $1081 = HEAP32[$1080>>2]|0;
       $arglist_next42 = (($1080) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $1082 = $1053;
       $1083 = $1082;
       HEAP32[$1083>>2] = $1081;
       $1084 = (($1082) + 4)|0;
       $1085 = $1084;
       HEAP32[$1085>>2] = 0;
       break L614;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1117 = $arglist_current50;
       $1118 = (0 + 4|0);
       $expanded183 = $1118;
       $expanded182 = (($expanded183) - 1)|0;
       $1119 = (($1117) + ($expanded182))|0;
       $1120 = (0 + 4|0);
       $expanded187 = $1120;
       $expanded186 = (($expanded187) - 1)|0;
       $expanded185 = $expanded186 ^ -1;
       $1121 = $1119 & $expanded185;
       $1122 = $1121;
       $1123 = HEAP32[$1122>>2]|0;
       $arglist_next51 = (($1122) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1123 & 65535;
       $1124 = $1053;
       $1125 = $1124;
       HEAP32[$1125>>2] = $$mask1$i;
       $1126 = (($1124) + 4)|0;
       $1127 = $1126;
       HEAP32[$1127>>2] = 0;
       break L614;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $1086 = $arglist_current44;
       $1087 = (0 + 8|0);
       $expanded169 = $1087;
       $expanded168 = (($expanded169) - 1)|0;
       $1088 = (($1086) + ($expanded168))|0;
       $1089 = (0 + 8|0);
       $expanded173 = $1089;
       $expanded172 = (($expanded173) - 1)|0;
       $expanded171 = $expanded172 ^ -1;
       $1090 = $1088 & $expanded171;
       $1091 = $1090;
       $1092 = $1091;
       $1093 = $1092;
       $1094 = HEAP32[$1093>>2]|0;
       $1095 = (($1092) + 4)|0;
       $1096 = $1095;
       $1097 = HEAP32[$1096>>2]|0;
       $arglist_next45 = (($1091) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $1098 = $1053;
       $1099 = $1098;
       HEAP32[$1099>>2] = $1094;
       $1100 = (($1098) + 4)|0;
       $1101 = $1100;
       HEAP32[$1101>>2] = $1097;
       break L614;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $1102 = $arglist_current47;
       $1103 = (0 + 4|0);
       $expanded176 = $1103;
       $expanded175 = (($expanded176) - 1)|0;
       $1104 = (($1102) + ($expanded175))|0;
       $1105 = (0 + 4|0);
       $expanded180 = $1105;
       $expanded179 = (($expanded180) - 1)|0;
       $expanded178 = $expanded179 ^ -1;
       $1106 = $1104 & $expanded178;
       $1107 = $1106;
       $1108 = HEAP32[$1107>>2]|0;
       $arglist_next48 = (($1107) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $1109 = $1108&65535;
       $1110 = $1109 << 16 >> 16;
       $1111 = ($1110|0)<(0);
       $1112 = $1111 << 31 >> 31;
       $1113 = $1053;
       $1114 = $1113;
       HEAP32[$1114>>2] = $1110;
       $1115 = (($1113) + 4)|0;
       $1116 = $1115;
       HEAP32[$1116>>2] = $1112;
       break L614;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       $1154 = $arglist_current59;
       $1155 = (0 + 8|0);
       $expanded204 = $1155;
       $expanded203 = (($expanded204) - 1)|0;
       $1156 = (($1154) + ($expanded203))|0;
       $1157 = (0 + 8|0);
       $expanded208 = $1157;
       $expanded207 = (($expanded208) - 1)|0;
       $expanded206 = $expanded207 ^ -1;
       $1158 = $1156 & $expanded206;
       $1159 = $1158;
       $1160 = +HEAPF64[$1159>>3];
       $arglist_next60 = (($1159) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$1053>>3] = $1160;
       break L614;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $1062 = $arglist_current38;
       $1063 = (0 + 4|0);
       $expanded155 = $1063;
       $expanded154 = (($expanded155) - 1)|0;
       $1064 = (($1062) + ($expanded154))|0;
       $1065 = (0 + 4|0);
       $expanded159 = $1065;
       $expanded158 = (($expanded159) - 1)|0;
       $expanded157 = $expanded158 ^ -1;
       $1066 = $1064 & $expanded157;
       $1067 = $1066;
       $1068 = HEAP32[$1067>>2]|0;
       $arglist_next39 = (($1067) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $1069 = ($1068|0)<(0);
       $1070 = $1069 << 31 >> 31;
       $1071 = $1053;
       $1072 = $1071;
       HEAP32[$1072>>2] = $1068;
       $1073 = (($1071) + 4)|0;
       $1074 = $1073;
       HEAP32[$1074>>2] = $1070;
       break L614;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1128 = $arglist_current53;
       $1129 = (0 + 4|0);
       $expanded190 = $1129;
       $expanded189 = (($expanded190) - 1)|0;
       $1130 = (($1128) + ($expanded189))|0;
       $1131 = (0 + 4|0);
       $expanded194 = $1131;
       $expanded193 = (($expanded194) - 1)|0;
       $expanded192 = $expanded193 ^ -1;
       $1132 = $1130 & $expanded192;
       $1133 = $1132;
       $1134 = HEAP32[$1133>>2]|0;
       $arglist_next54 = (($1133) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1135 = $1134&255;
       $1136 = $1135 << 24 >> 24;
       $1137 = ($1136|0)<(0);
       $1138 = $1137 << 31 >> 31;
       $1139 = $1053;
       $1140 = $1139;
       HEAP32[$1140>>2] = $1136;
       $1141 = (($1139) + 4)|0;
       $1142 = $1141;
       HEAP32[$1142>>2] = $1138;
       break L614;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       $1161 = $arglist_current62;
       $1162 = (0 + 8|0);
       $expanded211 = $1162;
       $expanded210 = (($expanded211) - 1)|0;
       $1163 = (($1161) + ($expanded210))|0;
       $1164 = (0 + 8|0);
       $expanded215 = $1164;
       $expanded214 = (($expanded215) - 1)|0;
       $expanded213 = $expanded214 ^ -1;
       $1165 = $1163 & $expanded213;
       $1166 = $1165;
       $1167 = +HEAPF64[$1166>>3];
       $arglist_next63 = (($1166) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$1053>>3] = $1167;
       break L614;
       break;
      }
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $1055 = $arglist_current35;
       $1056 = (0 + 4|0);
       $expanded148 = $1056;
       $expanded147 = (($expanded148) - 1)|0;
       $1057 = (($1055) + ($expanded147))|0;
       $1058 = (0 + 4|0);
       $expanded152 = $1058;
       $expanded151 = (($expanded152) - 1)|0;
       $expanded150 = $expanded151 ^ -1;
       $1059 = $1057 & $expanded150;
       $1060 = $1059;
       $1061 = HEAP32[$1060>>2]|0;
       $arglist_next36 = (($1060) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$1053>>2] = $1061;
       break L614;
       break;
      }
      default: {
       break L614;
      }
      }
     } while(0);
    }
   } while(0);
   $1168 = (($i$2163) + 1)|0;
   $1169 = ($1168|0)<(10);
   if ($1169) {
    $i$2163 = $1168;
   } else {
    label = 451;
    break;
   }
  }
  if ((label|0) == 451) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $1052 = ($i$2163$lcssa|0)<(10);
  if (!($1052)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $i$3161 = $i$2163$lcssa;
  while(1) {
   $1172 = (($nl_type) + ($i$3161<<2)|0);
   $1173 = HEAP32[$1172>>2]|0;
   $1174 = ($1173|0)==(0);
   $1170 = (($i$3161) + 1)|0;
   if (!($1174)) {
    $$0$ph = -1;
    break;
   }
   $1171 = ($1170|0)<(10);
   if ($1171) {
    $i$3161 = $1170;
   } else {
    $$0$ph = 1;
    break;
   }
  }
  $$0 = $$0$ph;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 452) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 453) {
  $$0 = $$0$ph340;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 return ($l|0);
}
function runPostSets() {
 
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _strcat(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    var pdestEnd = 0;
    pdestEnd = (pdest + (_strlen(pdest)|0))|0;
    do {
      HEAP8[((pdestEnd+i)>>0)]=HEAP8[((psrc+i)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _strncpy(pdest, psrc, num) {
    pdest = pdest|0; psrc = psrc|0; num = num|0;
    var padding = 0, curr = 0, i = 0;
    while ((i|0) < (num|0)) {
      curr = padding ? 0 : ((HEAP8[(((psrc)+(i))>>0)])|0);
      HEAP8[(((pdest)+(i))>>0)]=curr;
      padding = padding ? 1 : (((HEAP8[(((psrc)+(i))>>0)])|0) == 0);
      i = (i+1)|0;
    }
    return pdest|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&7](a1|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&1](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0);
}

function b0(p0) { p0 = p0|0; nullFunc_ii(0);return 0; }
function b1(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(1);return 0; }
function b2(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(2); }

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,b0,_yy_Doc,_yy_DocForCritic,_yy_DocForOPML,_yy_DocForTOC,_yy_DocForMetaDataOnly,b0];
var FUNCTION_TABLE_iiii = [b1,_sn_write];
var FUNCTION_TABLE_viiiii = [b2,b2,b2,b2,b2,b2,b2,_yyPush,_yySet,_yy_1_Doc,_yy_2_Doc,_yy_3_Doc,_yyPop,_yy_1_DocForCritic,_yy_2_DocForCritic,_yy_3_DocForCritic,_yy_4_DocForCritic,_yy_5_DocForCritic,_yy_1_DocForOPML,_yy_2_DocForOPML,_yy_3_DocForOPML,_yy_1_DocForTOC,_yy_2_DocForTOC,_yy_3_DocForTOC,_yy_1_DocForMetaDataOnly,_yy_2_DocForMetaDataOnly,_yy_1_StartList,_yy_1_MetaDataKey,_yy_1_MetaData
,_yy_2_MetaData,_yy_1_RawString,_yy_1_FalseMatch,_yy_1_TOCPlain,_yy_1_SkipBlock,_yy_1_MetaDataKeyValue,_yy_1_BlockQuote,_yy_1_Fenced,_yy_1_Verbatim,_yy_2_Verbatim,_yy_1_DefinitionList,_yy_2_DefinitionList,_yy_3_DefinitionList,_yy_1_Glossary,_yy_2_Glossary,_yy_3_Glossary,_yy_4_Glossary,_yy_5_Glossary,_yy_1_Note,_yy_2_Note,_yy_3_Note,_yy_1_LinkReference,_yy_2_LinkReference,_yy_1_Abbreviation,_yy_1_HorizontalRule,_yy_1_HeadingSection,_yy_2_HeadingSection,_yy_3_HeadingSection,_yy_1_OrderedList,_yy_1_BulletList
,_yy_1_HtmlBlock,_yy_1_MarkdownHtmlBlock,_yy_1_StyleBlock,_yy_1_Table,_yy_2_Table,_yy_3_Table,_yy_4_Table,_yy_5_Table,_yy_6_Table,_yy_7_Table,_yy_1_ImageBlock,_yy_1_TOC,_yy_1_Para,_yy_1_Plain,_yy_1_OPMLHeadingSection,_yy_2_OPMLHeadingSection,_yy_3_OPMLHeadingSection,_yy_1_OPMLPlain,_yy_2_OPMLPlain,_yy_1_TOCHeadingSection,_yy_2_TOCHeadingSection,_yy_1_Line,_yy_1_SetextHeading1,_yy_2_SetextHeading1,_yy_3_SetextHeading1,_yy_1_SetextHeading2,_yy_2_SetextHeading2,_yy_3_SetextHeading2,_yy_1_MetaDataValue,_yy_2_MetaDataValue
,_yy_3_MetaDataValue,_yy_4_MetaDataValue,_yy_1_BlockQuoteRaw,_yy_2_BlockQuoteRaw,_yy_3_BlockQuoteRaw,_yy_4_BlockQuoteRaw,_yy_1_FenceType,_yy_1_VerbatimChunk,_yy_2_VerbatimChunk,_yy_3_VerbatimChunk,_yy_1_Term,_yy_2_Term,_yy_1_Definition,_yy_2_Definition,_yy_3_Definition,_yy_4_Definition,_yy_5_Definition,_yy_6_Definition,_yy_7_Definition,_yy_1_RawNoteReference,_yy_1_GlossaryTerm,_yy_1_GlossarySortKey,_yy_1_RawNoteBlock,_yy_2_RawNoteBlock,_yy_3_RawNoteBlock,_yy_1_Label,_yy_2_Label,_yy_1_RefSrc,_yy_1_RefTitle,_yy_1_Attributes
,_yy_2_Attributes,_yy_1_AtxHeading,_yy_2_AtxHeading,_yy_3_AtxHeading,_yy_1_ListTight,_yy_2_ListTight,_yy_1_ListLoose,_yy_2_ListLoose,_yy_1_MarkdownHtmlTagOpen,_yy_2_MarkdownHtmlTagOpen,_yy_3_MarkdownHtmlTagOpen,_yy_4_MarkdownHtmlTagOpen,_yy_5_MarkdownHtmlTagOpen,_yy_6_MarkdownHtmlTagOpen,_yy_1_TableCaption,_yy_2_TableCaption,_yy_1_TableBody,_yy_2_TableBody,_yy_1_SeparatorLine,_yy_2_SeparatorLine,_yy_3_SeparatorLine,_yy_1_Image,_yy_1_Inlines,_yy_2_Inlines,_yy_3_Inlines,_yy_1_CriticAddition,_yy_1_CriticDeletion,_yy_1_CriticSubstitution,_yy_2_CriticSubstitution,_yy_3_CriticSubstitution
,_yy_1_CriticHighlight,_yy_1_CriticComment,_yy_1_AutoLabel,_yy_1_BlockQuoteMarker,_yy_1_Attribute,_yy_1_AtxStart,_yy_1_ListItemTight,_yy_2_ListItemTight,_yy_3_ListItemTight,_yy_4_ListItemTight,_yy_1_EmptyList,_yy_1_ListItem,_yy_2_ListItem,_yy_3_ListItem,_yy_4_ListItem,_yy_1_TableRow,_yy_2_TableRow,_yy_1_CriticSubstDel,_yy_1_CriticSubstAdd,_yy_1_OPMLAtxHeading,_yy_1_LineBreak,_yy_1_TerminalEndline,_yy_1_NormalEndline,_yy_1_Str,_yy_2_Str,_yy_3_Str,_yy_4_Str,_yy_1_MathSpan,_yy_1_UlOrStarLine,_yy_1_Space
,_yy_1_Variable,_yy_1_NoteReference,_yy_1_Code,_yy_1_RawHtml,_yy_1_Entity,_yy_1_EscapedChar,_yy_1_Symbol,_yy_1_AttrKey,_yy_1_AttrValue,_yy_1_ListBlock,_yy_2_ListBlock,_yy_3_ListBlock,_yy_1_ListContinuationBlock,_yy_2_ListContinuationBlock,_yy_3_ListContinuationBlock,_yy_1_LeftAlignWrap,_yy_1_CenterAlignWrap,_yy_1_RightAlignWrap,_yy_1_LeftAlign,_yy_1_CenterAlign,_yy_1_RightAlign,_yy_1_AutoLinkUrl,_yy_1_AutoLinkEmail,_yy_1_ExplicitLink,_yy_1_OPMLSetextHeading1,_yy_1_OPMLSetextHeading2,_yy_1_SingleDollarMath,_yy_1_DoubleDollarMath,_yy_1_StrChunk,_yy_1_Superscript
,_yy_1_Subscript,_yy_1_StrongAndEmphStar,_yy_2_StrongAndEmphStar,_yy_1_StrongAndEmphUl,_yy_2_StrongAndEmphUl,_yy_1_EmphAndStrongStar,_yy_2_EmphAndStrongStar,_yy_1_EmphAndStrongUl,_yy_2_EmphAndStrongUl,_yy_1_StrongStar,_yy_2_StrongStar,_yy_1_StrongUl,_yy_2_StrongUl,_yy_1_EmphStar,_yy_2_EmphStar,_yy_3_EmphStar,_yy_1_EmphUl,_yy_2_EmphUl,_yy_3_EmphUl,_yy_1_CitationReferenceDouble,_yy_1_CitationReferenceSingle,_yy_1_Ellipsis,_yy_1_SingleQuoted,_yy_2_SingleQuoted,_yy_1_DoubleQuoted,_yy_2_DoubleQuoted,_yy_1_BackTickQuoted,_yy_2_BackTickQuoted,_yy_1_Apostrophe,_yy_1_ExtendedCell
,_yy_1_EmptyCell,_yy_1_FullCell,_yy_2_FullCell,_yy_1_Source,_yy_1_Title,_yy_1_ReferenceLinkDouble,_yy_1_ReferenceLinkSingle,_yy_1_AposChunk,_yy_1_RawCitationReference,_yy_1_EmDash,_yy_1_EnDash,b2,b2,b2,b2,b2,b2];

  return { _i64Subtract: _i64Subtract, _strcat: _strcat, _free: _free, _memcpy: _memcpy, _strncpy: _strncpy, _memmove: _memmove, _strlen: _strlen, _memset: _memset, _malloc: _malloc, _i64Add: _i64Add, _markdown_to_string: _markdown_to_string, _mmd_version: _mmd_version, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_ii: dynCall_ii, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__strcat = asm["_strcat"]; asm["_strcat"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strcat.apply(null, arguments);
};

var real__strncpy = asm["_strncpy"]; asm["_strncpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strncpy.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__markdown_to_string = asm["_markdown_to_string"]; asm["_markdown_to_string"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__markdown_to_string.apply(null, arguments);
};

var real__mmd_version = asm["_mmd_version"]; asm["_mmd_version"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__mmd_version.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real_runPostSets = asm["runPostSets"]; asm["runPostSets"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_runPostSets.apply(null, arguments);
};
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _strcat = Module["_strcat"] = asm["_strcat"];
var _free = Module["_free"] = asm["_free"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _strncpy = Module["_strncpy"] = asm["_strncpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _markdown_to_string = Module["_markdown_to_string"] = asm["_markdown_to_string"];
var _mmd_version = Module["_mmd_version"] = asm["_mmd_version"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[STATIC_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }
    var request = Module['memoryInitializerRequest'];
    if (request) {
      // a network request has already been created, just use that
      if (request.response) {
        setTimeout(function() {
          applyMemoryInitializer(request.response);
        }, 0); // it's already here; but, apply it asynchronously
      } else {
        request.addEventListener('load', function() { // wait for it
          if (request.status !== 200 && request.status !== 0) {
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status);
          }
          if (!request.response || typeof request.response !== 'object' || !request.response.byteLength) {
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest response (expected ArrayBuffer): ' + request.response);
          }
          applyMemoryInitializer(request.response);
        });
      }
    } else {
      // fetch it from the network ourselves
      Browser.asyncLoad(memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so not exiting (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (Module['onExit']) Module['onExit'](status);

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  abortDecorators.forEach(function(decorator) {
    output = decorator(output, what);
  });
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



